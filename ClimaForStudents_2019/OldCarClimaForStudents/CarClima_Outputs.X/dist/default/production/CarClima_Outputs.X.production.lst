

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed May 15 18:56:30 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           ; Version 1.41 (B)
    57                           ; Generated 21/02/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC18F8722 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     
    91                           	psect	smallconst
    92  001000                     __psmallconst:
    93                           	opt stack 0
    94  001000  00                 	db	0
    95  001001                     _dpowers:
    96                           	opt stack 0
    97  001001  0001               	dw	1
    98  001003  000A               	dw	10
    99  001005  0064               	dw	100
   100  001007  03E8               	dw	1000
   101  001009  2710               	dw	10000
   102  00100B                     __end_of_dpowers:
   103                           	opt stack 0
   104  00100B                     _LcdLines:
   105                           	opt stack 0
   106  00100B  20                 	db	32
   107  00100C  20                 	db	32
   108  00100D  43                 	db	67
   109  00100E  6C                 	db	108
   110  00100F  69                 	db	105
   111  001010  6D                 	db	109
   112  001011  61                 	db	97
   113  001012  20                 	db	32
   114  001013  69                 	db	105
   115  001014  73                 	db	115
   116  001015  20                 	db	32
   117  001016  4F                 	db	79
   118  001017  46                 	db	70
   119  001018  46                 	db	70
   120  001019  20                 	db	32
   121  00101A  20                 	db	32
   122  00101B  00                 	db	0
   123  00101C  00                 	db	0
   124  00101D  2D                 	db	45
   125  00101E  2D                 	db	45
   126  00101F  2D                 	db	45
   127  001020  2D                 	db	45
   128  001021  2D                 	db	45
   129  001022  2D                 	db	45
   130  001023  2D                 	db	45
   131  001024  2D                 	db	45
   132  001025  2D                 	db	45
   133  001026  2D                 	db	45
   134  001027  2D                 	db	45
   135  001028  2D                 	db	45
   136  001029  2D                 	db	45
   137  00102A  2D                 	db	45
   138  00102B  2D                 	db	45
   139  00102C  2D                 	db	45
   140  00102D  00                 	db	0
   141  00102E  00                 	db	0
   142  00102F  54                 	db	84
   143  001030  65                 	db	101
   144  001031  3A                 	db	58
   145  001032  2B                 	db	43
   146  001033  20                 	db	32
   147  001034  20                 	db	32
   148  001035  43                 	db	67
   149  001036  20                 	db	32
   150  001037  54                 	db	84
   151  001038  69                 	db	105
   152  001039  3A                 	db	58
   153  00103A  2B                 	db	43
   154  00103B  20                 	db	32
   155  00103C  20                 	db	32
   156  00103D  43                 	db	67
   157  00103E  20                 	db	32
   158  00103F  00                 	db	0
   159  001040  00                 	db	0
   160  001041  52                 	db	82
   161  001042  65                 	db	101
   162  001043  63                 	db	99
   163  001044  65                 	db	101
   164  001045  20                 	db	32
   165  001046  20                 	db	32
   166  001047  20                 	db	32
   167  001048  20                 	db	32
   168  001049  20                 	db	32
   169  00104A  20                 	db	32
   170  00104B  20                 	db	32
   171  00104C  3C                 	db	60
   172  00104D  20                 	db	32
   173  00104E  20                 	db	32
   174  00104F  43                 	db	67
   175  001050  3E                 	db	62
   176  001051  00                 	db	0
   177  001052  00                 	db	0
   178  001053  54                 	db	84
   179  001054  65                 	db	101
   180  001055  3A                 	db	58
   181  001056  2B                 	db	43
   182  001057  20                 	db	32
   183  001058  20                 	db	32
   184  001059  43                 	db	67
   185  00105A  20                 	db	32
   186  00105B  54                 	db	84
   187  00105C  69                 	db	105
   188  00105D  3A                 	db	58
   189  00105E  2B                 	db	43
   190  00105F  20                 	db	32
   191  001060  20                 	db	32
   192  001061  43                 	db	67
   193  001062  20                 	db	32
   194  001063  00                 	db	0
   195  001064  00                 	db	0
   196  001065  43                 	db	67
   197  001066  61                 	db	97
   198  001067  6C                 	db	108
   199  001068  64                 	db	100
   200  001069  20                 	db	32
   201  00106A  20                 	db	32
   202  00106B  20                 	db	32
   203  00106C  20                 	db	32
   204  00106D  20                 	db	32
   205  00106E  20                 	db	32
   206  00106F  20                 	db	32
   207  001070  3C                 	db	60
   208  001071  20                 	db	32
   209  001072  20                 	db	32
   210  001073  43                 	db	67
   211  001074  3E                 	db	62
   212  001075  00                 	db	0
   213  001076  00                 	db	0
   214  001077  54                 	db	84
   215  001078  65                 	db	101
   216  001079  3A                 	db	58
   217  00107A  2B                 	db	43
   218  00107B  20                 	db	32
   219  00107C  20                 	db	32
   220  00107D  43                 	db	67
   221  00107E  20                 	db	32
   222  00107F  54                 	db	84
   223  001080  69                 	db	105
   224  001081  3A                 	db	58
   225  001082  2B                 	db	43
   226  001083  20                 	db	32
   227  001084  20                 	db	32
   228  001085  43                 	db	67
   229  001086  20                 	db	32
   230  001087  00                 	db	0
   231  001088  00                 	db	0
   232  001089  56                 	db	86
   233  00108A  65                 	db	101
   234  00108B  6E                 	db	110
   235  00108C  74                 	db	116
   236  00108D  20                 	db	32
   237  00108E  20                 	db	32
   238  00108F  20                 	db	32
   239  001090  20                 	db	32
   240  001091  20                 	db	32
   241  001092  20                 	db	32
   242  001093  20                 	db	32
   243  001094  20                 	db	32
   244  001095  20                 	db	32
   245  001096  20                 	db	32
   246  001097  43                 	db	67
   247  001098  20                 	db	32
   248  001099  00                 	db	0
   249  00109A  00                 	db	0
   250  00109B                     __end_of_LcdLines:
   251                           	opt stack 0
   252  00109B                     STR_18:
   253  00109B  2D                 	db	45
   254  00109C  3E                 	db	62	;'>'
   255  00109D  20                 	db	32
   256  00109E  54                 	db	84	;'T'
   257  00109F  65                 	db	101	;'e'
   258  0010A0  6D                 	db	109	;'m'
   259  0010A1  70                 	db	112	;'p'
   260  0010A2  65                 	db	101	;'e'
   261  0010A3  72                 	db	114	;'r'
   262  0010A4  61                 	db	97	;'a'
   263  0010A5  74                 	db	116	;'t'
   264  0010A6  75                 	db	117	;'u'
   265  0010A7  72                 	db	114	;'r'
   266  0010A8  65                 	db	101	;'e'
   267  0010A9  20                 	db	32
   268  0010AA  6F                 	db	111	;'o'
   269  0010AB  75                 	db	117	;'u'
   270  0010AC  74                 	db	116	;'t'
   271  0010AD  3A                 	db	58	;':'
   272  0010AE  00                 	db	0
   273  0010AF                     STR_22:
   274  0010AF  4C                 	db	76	;'L'
   275  0010B0  43                 	db	67	;'C'
   276  0010B1  44                 	db	68	;'D'
   277  0010B2  20                 	db	32
   278  0010B3  69                 	db	105	;'i'
   279  0010B4  6E                 	db	110	;'n'
   280  0010B5  69                 	db	105	;'i'
   281  0010B6  74                 	db	116	;'t'
   282  0010B7  20                 	db	32
   283  0010B8  2E                 	db	46
   284  0010B9  2E                 	db	46
   285  0010BA  2E                 	db	46
   286  0010BB  00                 	db	0
   287  0010BC  7C                 	db	124
   288  0010BD  2E                 	db	46
   289  0010BE  2E                 	db	46
   290  0010BF  2E                 	db	46
   291  0010C0  2E                 	db	46
   292  0010C1  00                 	db	0
   293  0010C2  7C                 	db	124
   294  0010C3  7C                 	db	124
   295  0010C4  2E                 	db	46
   296  0010C5  2E                 	db	46
   297  0010C6  2E                 	db	46
   298  0010C7  00                 	db	0
   299  0010C8  7C                 	db	124
   300  0010C9  7C                 	db	124
   301  0010CA  7C                 	db	124
   302  0010CB  2E                 	db	46
   303  0010CC  2E                 	db	46
   304  0010CD  00                 	db	0
   305  0010CE  7C                 	db	124
   306  0010CF  7C                 	db	124
   307  0010D0  7C                 	db	124
   308  0010D1  7C                 	db	124
   309  0010D2  2E                 	db	46
   310  0010D3  00                 	db	0
   311  0010D4  7C                 	db	124
   312  0010D5  7C                 	db	124
   313  0010D6  7C                 	db	124
   314  0010D7  7C                 	db	124
   315  0010D8  7C                 	db	124
   316  0010D9  00                 	db	0
   317  0010DA                     STR_1:
   318  0010DA  25                 	db	37
   319  0010DB  30                 	db	48	;'0'
   320  0010DC  32                 	db	50	;'2'
   321  0010DD  64                 	db	100	;'d'
   322  0010DE  00                 	db	0
   323  0010DF  43                 	db	67	;'C'
   324  0010E0  61                 	db	97	;'a'
   325  0010E1  6C                 	db	108	;'l'
   326  0010E2  64                 	db	100	;'d'
   327  0010E3  00                 	db	0
   328  0010E4  52                 	db	82	;'R'
   329  0010E5  65                 	db	101	;'e'
   330  0010E6  63                 	db	99	;'c'
   331  0010E7  65                 	db	101	;'e'
   332  0010E8  00                 	db	0
   333  0010E9                     STR_5:
   334  0010E9  56                 	db	86	;'V'
   335  0010EA  65                 	db	101	;'e'
   336  0010EB  6E                 	db	110	;'n'
   337  0010EC  74                 	db	116	;'t'
   338  0010ED  00                 	db	0
   339  0010EE                     STR_20:
   340  0010EE  0A                 	db	10
   341  0010EF  0D                 	db	13
   342  0010F0  00                 	db	0
   343  0010F1                     STR_11:
   344  0010F1  25                 	db	37
   345  0010F2  64                 	db	100	;'d'
   346  0010F3  00                 	db	0
   347  0010F4                     STR_12:
   348  0010F4  20                 	db	32
   349  0010F5  00                 	db	0
   350  0010F6                     STR_14:
   351  0010F6  3C                 	db	60	;'<'
   352  0010F7  00                 	db	0
   353  0010F8                     STR_13:
   354  0010F8  3E                 	db	62	;'>'
   355  0010F9  00                 	db	0
   356  0000                     
   357                           ; #config settings
   358  0010FA  00                 	db	0	; dummy byte at the end
   359  0000                     
   360                           	psect	nvCOMRAM
   361  00004F                     __pnvCOMRAM:
   362                           	opt stack 0
   363  00004F                     SWSPIWrite@input:
   364                           	opt stack 0
   365  00004F                     	ds	1
   366  0000                     _TMR0	set	4054
   367  0000                     _ADRES	set	4035
   368  0000                     _PIR1bits	set	3998
   369  0000                     _RCREG	set	4014
   370  0000                     _TXREG	set	4013
   371  0000                     _RCSTA1bits	set	4011
   372  0000                     _PIE1bits	set	3997
   373  0000                     _RCSTAbits	set	4011
   374  0000                     _TXSTAbits	set	4012
   375  0000                     _SPBRG	set	4015
   376  0000                     _TXSTA1bits	set	4012
   377  0000                     _TRISCbits	set	3988
   378  0000                     _TRISAbits	set	3986
   379  0000                     _PORTCbits	set	3970
   380  0000                     _PORTAbits	set	3968
   381  0000                     _MEMCONbits	set	3996
   382  0000                     _PORTD	set	3971
   383  0000                     _TRISD	set	3989
   384  0000                     _TMR0L	set	4054
   385  0000                     _TMR0H	set	4055
   386  0000                     _TMR1L	set	4046
   387  0000                     _TMR1H	set	4047
   388  0000                     _T0CONbits	set	4053
   389  0000                     _T0CON	set	4053
   390  0000                     _TRISJbits	set	3994
   391  0000                     _PORTJbits	set	3976
   392  0000                     _TRISDbits	set	3989
   393  0000                     _ADCON2bits	set	4032
   394  0000                     _ADCON1bits	set	4033
   395  0000                     _ADCON0bits	set	4034
   396  0000                     _TRISA	set	3986
   397  0000                     _PORTDbits	set	3971
   398  0000                     _PORTBbits	set	3969
   399  0000                     _RCIF	set	31989
   400  0000                     _TRMT1	set	32097
   401  0000                     _T0IF	set	32658
   402  0000                     _GIE	set	32663
   403  0000                     _T0IE	set	32661
   404  0000                     _TRISB0	set	31896
   405                           
   406                           	psect	cinit
   407  001D4E                     __pcinit:
   408                           	opt stack 0
   409  001D4E                     start_initialization:
   410                           	opt stack 0
   411  001D4E                     __initialization:
   412                           	opt stack 0
   413                           
   414                           ; Clear objects allocated to COMRAM (40 bytes)
   415  001D4E  EE00  F001         	lfsr	0,__pbssCOMRAM
   416  001D52  0E28               	movlw	40
   417  001D54                     clear_0:
   418  001D54  6AEE               	clrf	postinc0,c
   419  001D56  06E8               	decf	wreg,f,c
   420  001D58  E1FD               	bnz	clear_0
   421  001D5A                     end_of_initialization:
   422                           	opt stack 0
   423  001D5A                     __end_of__initialization:
   424                           	opt stack 0
   425  001D5A  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   426  001D5C  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   427  001D5E  0100               	movlb	0
   428  001D60  EFDA  F00D         	goto	_main	;jump to C main() function
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           
   432                           	psect	bssCOMRAM
   433  000001                     __pbssCOMRAM:
   434                           	opt stack 0
   435  000001                     _outTemp:
   436                           	opt stack 0
   437  000001                     	ds	2
   438  000003                     _inTemp:
   439                           	opt stack 0
   440  000003                     	ds	2
   441  000005                     _a:
   442                           	opt stack 0
   443  000005                     	ds	1
   444  000006                     checkInputs@leftButton_old:
   445                           	opt stack 0
   446  000006                     	ds	1
   447  000007                     _inDeb:
   448                           	opt stack 0
   449  000007                     	ds	1
   450  000008                     _cnt:
   451                           	opt stack 0
   452  000008                     	ds	1
   453  000009                     _ev:
   454                           	opt stack 0
   455  000009                     	ds	1
   456  00000A                     _tick:
   457                           	opt stack 0
   458  00000A                     	ds	1
   459  00000B                     _setTemp:
   460                           	opt stack 0
   461  00000B                     	ds	1
   462  00000C                     _leftButtonEv:
   463                           	opt stack 0
   464  00000C                     	ds	1
   465  00000D                     _lcdBacklightLed:
   466                           	opt stack 0
   467  00000D                     	ds	1
   468  00000E                     _standbyLed:
   469                           	opt stack 0
   470  00000E                     	ds	1
   471  00000F                     _coolElement:
   472                           	opt stack 0
   473  00000F                     	ds	1
   474  000010                     _heatElement:
   475                           	opt stack 0
   476  000010                     	ds	1
   477  000011                     _levelHeat:
   478                           	opt stack 0
   479  000011                     	ds	1
   480  000012                     _fanSpeedHeatVent:
   481                           	opt stack 0
   482  000012                     	ds	1
   483  000013                     _fanSpeedCool:
   484                           	opt stack 0
   485  000013                     	ds	1
   486  000014                     _climaState:
   487                           	opt stack 0
   488  000014                     	ds	1
   489  000015                     _msg:
   490                           	opt stack 0
   491  000015                     	ds	20
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           
   495                           	psect	cstackBANK0
   496  000060                     __pcstackBANK0:
   497                           	opt stack 0
   498  000060                     sprintf@ap:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x0
   502  000060                     	ds	2
   503  000062                     sprintf@prec:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x2
   507  000062                     	ds	1
   508  000063                     sprintf@val:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x3
   512  000063                     	ds	2
   513  000065                     sprintf@flag:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x5
   517  000065                     	ds	1
   518  000066                     sprintf@width:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x6
   522  000066                     	ds	2
   523  000068                     sprintf@c:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x8
   527  000068                     	ds	1
   528  000069                     ??_checkInputs:
   529                           
   530                           ; 1 bytes @ 0x9
   531  000069                     	ds	3
   532  00006C                     checkInputs@adcVal:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0xC
   536  00006C                     	ds	2
   537  00006E                     checkInputs@leftButton:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0xE
   541  00006E                     	ds	1
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           
   545                           	psect	cstackCOMRAM
   546  000029                     __pcstackCOMRAM:
   547                           	opt stack 0
   548  000029                     ??_ISR:
   549  000029                     
   550                           ; 1 bytes @ 0x0
   551  000029                     	ds	15
   552  000038                     ??_isdigit:
   553  000038                     ?_ADCRead:
   554                           	opt stack 0
   555  000038                     ?___lwdiv:
   556                           	opt stack 0
   557  000038                     ?___ftpack:
   558                           	opt stack 0
   559  000038                     setSpeedFanCool@speed:
   560                           	opt stack 0
   561  000038                     setSpeedFanHeatVent@speed:
   562                           	opt stack 0
   563  000038                     SWSPIWrite@BitCount:
   564                           	opt stack 0
   565  000038                     UART_putc@data:
   566                           	opt stack 0
   567  000038                     setStandbyLed@state:
   568                           	opt stack 0
   569  000038                     setLcdBacklightLed@state:
   570                           	opt stack 0
   571  000038                     setHeatElement@state:
   572                           	opt stack 0
   573  000038                     setCoolElement@state:
   574                           	opt stack 0
   575  000038                     ___lwdiv@dividend:
   576                           	opt stack 0
   577  000038                     ___ftpack@arg:
   578                           	opt stack 0
   579  000038                     ___ftge@ff1:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0xF
   583  000038                     	ds	1
   584  000039                     SWSPIWrite@output:
   585                           	opt stack 0
   586  000039                     _isdigit$1759:
   587                           	opt stack 0
   588  000039                     UART_puts@s:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x10
   592  000039                     	ds	1
   593  00003A                     ??_ADCRead:
   594  00003A                     setGPIO@value:
   595                           	opt stack 0
   596  00003A                     setIODIR@dir:
   597                           	opt stack 0
   598  00003A                     isdigit@c:
   599                           	opt stack 0
   600  00003A                     ___lwdiv@divisor:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x11
   604  00003A                     	ds	1
   605  00003B                     ADCRead@ch:
   606                           	opt stack 0
   607  00003B                     setGPIO@address:
   608                           	opt stack 0
   609  00003B                     setIODIR@address:
   610                           	opt stack 0
   611  00003B                     ___ftpack@exp:
   612                           	opt stack 0
   613  00003B                     ___ftge@ff2:
   614                           	opt stack 0
   615                           
   616                           ; 3 bytes @ 0x12
   617  00003B                     	ds	1
   618  00003C                     lcdCommand@command:
   619                           	opt stack 0
   620  00003C                     LcdChar@letter:
   621                           	opt stack 0
   622  00003C                     ___ftpack@sign:
   623                           	opt stack 0
   624  00003C                     ___lwdiv@counter:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x13
   628  00003C                     	ds	1
   629  00003D                     ??___ftpack:
   630  00003D                     LcdGoTo@pos:
   631                           	opt stack 0
   632  00003D                     LcdWriteString@s:
   633                           	opt stack 0
   634  00003D                     ___lwdiv@quotient:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x14
   638  00003D                     	ds	1
   639  00003E                     ??___ftge:
   640                           
   641                           ; 1 bytes @ 0x15
   642  00003E                     	ds	1
   643  00003F                     ?___wmul:
   644                           	opt stack 0
   645  00003F                     ?___lwmod:
   646                           	opt stack 0
   647  00003F                     ___wmul@multiplier:
   648                           	opt stack 0
   649  00003F                     ___lwmod@dividend:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x16
   653  00003F                     	ds	2
   654  000041                     ___wmul@multiplicand:
   655                           	opt stack 0
   656  000041                     ___lwmod@divisor:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x18
   660  000041                     	ds	2
   661  000043                     ___lwmod@counter:
   662                           	opt stack 0
   663  000043                     ___wmul@product:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x1A
   667  000043                     	ds	2
   668  000045                     ?_sprintf:
   669                           	opt stack 0
   670  000045                     ?___lwtoft:
   671                           	opt stack 0
   672  000045                     sprintf@sp:
   673                           	opt stack 0
   674  000045                     ___lwtoft@c:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x1C
   678  000045                     	ds	2
   679  000047                     sprintf@f:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x1E
   683  000047                     	ds	1
   684  000048                     ??_stateMachine:
   685  000048                     
   686                           ; 1 bytes @ 0x1F
   687  000048                     	ds	2
   688  00004A                     stateMachine@value:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x21
   692  00004A                     	ds	1
   693  00004B                     ??_sprintf:
   694                           
   695                           ; 1 bytes @ 0x22
   696  00004B                     	ds	4
   697  00004F                     postinc0	equ	0xFEE
   698                           wreg	equ	0xFE8
   699                           
   700                           ; 1 bytes @ 0x26
   701 ;;
   702 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   703 ;;
   704 ;; *************** function _main *****************
   705 ;; Defined at:
   706 ;;		line 714 in file "clima.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;		None
   709 ;; Auto vars:     Size  Location     Type
   710 ;;		None
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   724 ;;Total ram usage:        0 bytes
   725 ;; Hardware stack levels required when called:    7
   726 ;; This function calls:
   727 ;;		_LcdClear
   728 ;;		_LcdGoTo
   729 ;;		_LcdWriteString
   730 ;;		_checkInputs
   731 ;;		_init
   732 ;;		_stateMachine
   733 ;;		_updateOutputs
   734 ;; This function is called by:
   735 ;;		Startup code after reset
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           	psect	text0
   740  001BB4                     __ptext0:
   741                           	opt stack 0
   742  001BB4                     _main:
   743                           	opt stack 24
   744                           
   745                           ;clima.c: 716: init();
   746                           
   747                           ;incstack = 0
   748  001BB4  EC8A  F00C         	call	_init	;wreg free
   749                           
   750                           ;clima.c: 717: TRISD = 0;
   751  001BB8  0E00               	movlw	0
   752  001BBA  6E95               	movwf	3989,c	;volatile
   753                           
   754                           ;clima.c: 720: LcdClear();
   755  001BBC  ECE2  F00E         	call	_LcdClear	;wreg free
   756                           
   757                           ;clima.c: 721: LcdGoTo(0);
   758  001BC0  0E00               	movlw	0
   759  001BC2  ECD2  F00E         	call	_LcdGoTo
   760                           
   761                           ;clima.c: 722: LcdWriteString("t");
   762  001BC6  0EEC               	movlw	low (STR_5+3)
   763  001BC8  6E3D               	movwf	LcdWriteString@s,c
   764  001BCA  0E10               	movlw	high (STR_5+3)
   765  001BCC  6E3E               	movwf	LcdWriteString@s+1,c
   766  001BCE  ECB6  F00C         	call	_LcdWriteString	;wreg free
   767  001BD2                     l2669:
   768  001BD2  5009               	movf	_ev,w,c
   769  001BD4  B4D8               	btfsc	status,2,c
   770  001BD6  D7FD               	goto	l2669
   771                           
   772                           ;clima.c: 730: ev = 0;
   773  001BD8  0E00               	movlw	0
   774  001BDA  6E09               	movwf	_ev,c
   775                           
   776                           ;clima.c: 732: checkInputs();
   777  001BDC  ECF9  F00A         	call	_checkInputs	;wreg free
   778                           
   779                           ;clima.c: 733: stateMachine();
   780  001BE0  EC05  F00A         	call	_stateMachine	;wreg free
   781                           
   782                           ;clima.c: 734: updateOutputs();
   783  001BE4  EC40  F00E         	call	_updateOutputs	;wreg free
   784                           
   785                           ;clima.c: 736: leftButtonEv = 0;
   786  001BE8  0E00               	movlw	0
   787  001BEA  6E0C               	movwf	_leftButtonEv,c
   788  001BEC  D7F2               	goto	l2669
   789  001BEE                     __end_of_main:
   790                           	opt stack 0
   791                           postinc0	equ	0xFEE
   792                           wreg	equ	0xFE8
   793                           status	equ	0xFD8
   794                           
   795 ;; *************** function _stateMachine *****************
   796 ;; Defined at:
   797 ;;		line 416 in file "clima.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;		None
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  value           3   33[COMRAM] float 
   802 ;;  err             1    0        unsigned char 
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   813 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   814 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   815 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   816 ;;Total ram usage:        5 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; Hardware stack levels required when called:    6
   819 ;; This function calls:
   820 ;;		___ftge
   821 ;;		___lwdiv
   822 ;;		___lwtoft
   823 ;;		___wmul
   824 ;;		_setCoolElement
   825 ;;		_setHeatElement
   826 ;;		_setLcd
   827 ;;		_setLcdBacklightLed
   828 ;;		_setSpeedFanCool
   829 ;;		_setSpeedFanHeatVent
   830 ;;		_setStandbyLed
   831 ;;		_updateOutputs
   832 ;; This function is called by:
   833 ;;		_main
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           	psect	text1
   838  00140A                     __ptext1:
   839                           	opt stack 0
   840  00140A                     _stateMachine:
   841                           	opt stack 24
   842                           
   843                           ;clima.c: 418: byte err;
   844                           ;clima.c: 420: switch (climaState)
   845                           
   846                           ;incstack = 0
   847  00140A  D0E5               	goto	l2579
   848  00140C                     l2515:
   849                           
   850                           ;clima.c: 423: setLcd();
   851  00140C  EC5A  F00D         	call	_setLcd	;wreg free
   852                           
   853                           ;clima.c: 426: setStandbyLed(1);
   854  001410  0E00               	movlw	0
   855  001412  6E39               	movwf	setStandbyLed@state+1,c
   856  001414  0E01               	movlw	1
   857  001416  6E38               	movwf	setStandbyLed@state,c
   858  001418  ECEC  F00E         	call	_setStandbyLed	;wreg free
   859                           
   860                           ;clima.c: 427: setLcdBacklightLed(1);
   861  00141C  0E00               	movlw	0
   862  00141E  6E39               	movwf	setLcdBacklightLed@state+1,c
   863  001420  0E01               	movlw	1
   864  001422  6E38               	movwf	setLcdBacklightLed@state,c
   865  001424  ECE6  F00E         	call	_setLcdBacklightLed	;wreg free
   866                           
   867                           ;clima.c: 428: setHeatElement(0);
   868  001428  0E00               	movlw	0
   869  00142A  6E39               	movwf	setHeatElement@state+1,c
   870  00142C  0E00               	movlw	0
   871  00142E  6E38               	movwf	setHeatElement@state,c
   872  001430  ECEF  F00E         	call	_setHeatElement	;wreg free
   873                           
   874                           ;clima.c: 429: setCoolElement(0);
   875  001434  0E00               	movlw	0
   876  001436  6E39               	movwf	setCoolElement@state+1,c
   877  001438  0E00               	movlw	0
   878  00143A  6E38               	movwf	setCoolElement@state,c
   879  00143C  ECE9  F00E         	call	_setCoolElement	;wreg free
   880                           
   881                           ;clima.c: 430: updateOutputs();
   882  001440  EC40  F00E         	call	_updateOutputs	;wreg free
   883                           
   884                           ;clima.c: 432: setSpeedFanCool(0);
   885  001444  0E00               	movlw	0
   886  001446  ECBB  F00E         	call	_setSpeedFanCool
   887                           
   888                           ;clima.c: 433: setSpeedFanHeatVent(0);
   889  00144A  0E00               	movlw	0
   890  00144C  ECB2  F00E         	call	_setSpeedFanHeatVent
   891                           
   892                           ;clima.c: 435: if ( !PORTBbits.RB0)
   893  001450  B081               	btfsc	3969,0,c	;volatile
   894  001452  0012               	return	
   895                           
   896                           ;clima.c: 436: climaState = STATE_ON_VENT;
   897  001454  0E03               	movlw	3
   898  001456  6E14               	movwf	_climaState,c
   899                           
   900                           ;clima.c: 438: break;
   901  001458  0012               	return	
   902  00145A                     l2535:
   903                           
   904                           ;clima.c: 441: {
   905                           ;clima.c: 443: setHeatElement(0);
   906  00145A  0E00               	movlw	0
   907  00145C  6E39               	movwf	setHeatElement@state+1,c
   908  00145E  0E00               	movlw	0
   909  001460  6E38               	movwf	setHeatElement@state,c
   910  001462  ECEF  F00E         	call	_setHeatElement	;wreg free
   911                           
   912                           ;clima.c: 444: setCoolElement(1);
   913  001466  0E00               	movlw	0
   914  001468  6E39               	movwf	setCoolElement@state+1,c
   915  00146A  0E01               	movlw	1
   916  00146C  6E38               	movwf	setCoolElement@state,c
   917  00146E  ECE9  F00E         	call	_setCoolElement	;wreg free
   918                           
   919                           ;clima.c: 445: updateOutputs();
   920  001472  EC40  F00E         	call	_updateOutputs	;wreg free
   921                           
   922                           ;clima.c: 447: float value = (outTemp - setTemp) / setTemp * 100;
   923  001476  C00B  F03A         	movff	_setTemp,___lwdiv@divisor
   924  00147A  6A3B               	clrf	___lwdiv@divisor+1,c
   925  00147C  500B               	movf	_setTemp,w,c
   926  00147E  6E48               	movwf	??_stateMachine& (0+255),c
   927  001480  6A49               	clrf	(??_stateMachine+1)& (0+255),c
   928  001482  1E48               	comf	??_stateMachine,f,c
   929  001484  1E49               	comf	??_stateMachine+1,f,c
   930  001486  4A48               	infsnz	??_stateMachine,f,c
   931  001488  2A49               	incf	??_stateMachine+1,f,c
   932  00148A  5001               	movf	_outTemp,w,c
   933  00148C  2448               	addwf	??_stateMachine,w,c
   934  00148E  6E38               	movwf	___lwdiv@dividend,c
   935  001490  5002               	movf	_outTemp+1,w,c
   936  001492  2049               	addwfc	??_stateMachine+1,w,c
   937  001494  6E39               	movwf	___lwdiv@dividend+1,c
   938  001496  EC0B  F00D         	call	___lwdiv	;wreg free
   939  00149A  C038  F03F         	movff	?___lwdiv,___wmul@multiplier
   940  00149E  C039  F040         	movff	?___lwdiv+1,___wmul@multiplier+1
   941  0014A2  0E00               	movlw	0
   942  0014A4  6E42               	movwf	___wmul@multiplicand+1,c
   943  0014A6  0E64               	movlw	100
   944  0014A8  6E41               	movwf	___wmul@multiplicand,c
   945  0014AA  EC55  F00E         	call	___wmul	;wreg free
   946  0014AE  C03F  F045         	movff	?___wmul,___lwtoft@c
   947  0014B2  C040  F046         	movff	?___wmul+1,___lwtoft@c+1
   948  0014B6  EC68  F00E         	call	___lwtoft	;wreg free
   949  0014BA  C045  F04A         	movff	?___lwtoft,stateMachine@value
   950  0014BE  C046  F04B         	movff	?___lwtoft+1,stateMachine@value+1
   951  0014C2  C047  F04C         	movff	?___lwtoft+2,stateMachine@value+2
   952                           
   953                           ;clima.c: 449: if (value < 0) climaState = STATE_ON_HEAT;
   954  0014C6  AE4C               	btfss	stateMachine@value+2,7,c
   955  0014C8  D002               	goto	l2545
   956  0014CA  0E02               	movlw	2
   957  0014CC  D006               	goto	L1
   958  0014CE                     l2545:
   959                           
   960                           ;clima.c: 450: else if (value == 0) climaState = STATE_ON_VENT;
   961  0014CE  504A               	movf	stateMachine@value,w,c
   962  0014D0  104B               	iorwf	stateMachine@value+1,w,c
   963  0014D2  104C               	iorwf	stateMachine@value+2,w,c
   964  0014D4  A4D8               	btfss	status,2,c
   965  0014D6  D002               	goto	l2549
   966  0014D8  0E03               	movlw	3
   967  0014DA                     L1:
   968  0014DA  6E14               	movwf	_climaState,c
   969  0014DC                     l2549:
   970                           
   971                           ;clima.c: 451: if (value <= 25) setSpeedFanCool(25);
   972  0014DC  0E00               	movlw	0
   973  0014DE  6E38               	movwf	___ftge@ff1,c
   974  0014E0  0EC8               	movlw	200
   975  0014E2  6E39               	movwf	___ftge@ff1+1,c
   976  0014E4  0E41               	movlw	65
   977  0014E6  6E3A               	movwf	___ftge@ff1+2,c
   978  0014E8  C04A  F03B         	movff	stateMachine@value,___ftge@ff2
   979  0014EC  C04B  F03C         	movff	stateMachine@value+1,___ftge@ff2+1
   980  0014F0  C04C  F03D         	movff	stateMachine@value+2,___ftge@ff2+2
   981  0014F4  EC42  F00C         	call	___ftge	;wreg free
   982  0014F8  A0D8               	btfss	status,0,c
   983  0014FA  D004               	goto	l2553
   984  0014FC  0E19               	movlw	25
   985  0014FE  ECBB  F00E         	call	_setSpeedFanCool
   986  001502  D036               	goto	l2563
   987  001504                     l2553:
   988                           
   989                           ;clima.c: 452: else if (value <= 50) setSpeedFanCool(50);
   990  001504  0E00               	movlw	0
   991  001506  6E38               	movwf	___ftge@ff1,c
   992  001508  0E48               	movlw	72
   993  00150A  6E39               	movwf	___ftge@ff1+1,c
   994  00150C  0E42               	movlw	66
   995  00150E  6E3A               	movwf	___ftge@ff1+2,c
   996  001510  C04A  F03B         	movff	stateMachine@value,___ftge@ff2
   997  001514  C04B  F03C         	movff	stateMachine@value+1,___ftge@ff2+1
   998  001518  C04C  F03D         	movff	stateMachine@value+2,___ftge@ff2+2
   999  00151C  EC42  F00C         	call	___ftge	;wreg free
  1000  001520  A0D8               	btfss	status,0,c
  1001  001522  D004               	goto	l2557
  1002  001524  0E32               	movlw	50
  1003  001526  ECBB  F00E         	call	_setSpeedFanCool
  1004  00152A  D022               	goto	l2563
  1005  00152C                     l2557:
  1006                           
  1007                           ;clima.c: 453: else if (value <= 75) setSpeedFanCool(75);
  1008  00152C  0E00               	movlw	0
  1009  00152E  6E38               	movwf	___ftge@ff1,c
  1010  001530  0E96               	movlw	150
  1011  001532  6E39               	movwf	___ftge@ff1+1,c
  1012  001534  0E42               	movlw	66
  1013  001536  6E3A               	movwf	___ftge@ff1+2,c
  1014  001538  C04A  F03B         	movff	stateMachine@value,___ftge@ff2
  1015  00153C  C04B  F03C         	movff	stateMachine@value+1,___ftge@ff2+1
  1016  001540  C04C  F03D         	movff	stateMachine@value+2,___ftge@ff2+2
  1017  001544  EC42  F00C         	call	___ftge	;wreg free
  1018  001548  A0D8               	btfss	status,0,c
  1019  00154A  D004               	goto	l2561
  1020  00154C  0E4B               	movlw	75
  1021  00154E  ECBB  F00E         	call	_setSpeedFanCool
  1022  001552  D00E               	goto	l2563
  1023  001554                     l2561:
  1024                           
  1025                           ;clima.c: 454: else if (value <= 100); setSpeedFanCool(100);
  1026  001554  0E00               	movlw	0
  1027  001556  6E38               	movwf	___ftge@ff1,c
  1028  001558  0EC8               	movlw	200
  1029  00155A  6E39               	movwf	___ftge@ff1+1,c
  1030  00155C  0E42               	movlw	66
  1031  00155E  6E3A               	movwf	___ftge@ff1+2,c
  1032  001560  C04A  F03B         	movff	stateMachine@value,___ftge@ff2
  1033  001564  C04B  F03C         	movff	stateMachine@value+1,___ftge@ff2+1
  1034  001568  C04C  F03D         	movff	stateMachine@value+2,___ftge@ff2+2
  1035  00156C  EC42  F00C         	call	___ftge	;wreg free
  1036  001570                     l2563:
  1037  001570  0E64               	movlw	100
  1038  001572  ECBB  F00E         	call	_setSpeedFanCool
  1039                           
  1040                           ;clima.c: 459: {
  1041                           ;clima.c: 461: break;
  1042                           
  1043                           ;clima.c: 457: }
  1044                           ;clima.c: 458: case STATE_ON_HEAT:
  1045                           
  1046                           ;clima.c: 456: break;
  1047  001576  0012               	return	
  1048  001578                     l2565:
  1049                           
  1050                           ;clima.c: 464: {
  1051                           ;clima.c: 466: setLcdBacklightLed(0);
  1052  001578  0E00               	movlw	0
  1053  00157A  6E39               	movwf	setLcdBacklightLed@state+1,c
  1054  00157C  0E00               	movlw	0
  1055  00157E  6E38               	movwf	setLcdBacklightLed@state,c
  1056  001580  ECE6  F00E         	call	_setLcdBacklightLed	;wreg free
  1057                           
  1058                           ;clima.c: 467: setStandbyLed(1);
  1059  001584  0E00               	movlw	0
  1060  001586  6E39               	movwf	setStandbyLed@state+1,c
  1061  001588  0E01               	movlw	1
  1062  00158A  6E38               	movwf	setStandbyLed@state,c
  1063  00158C  ECEC  F00E         	call	_setStandbyLed	;wreg free
  1064                           
  1065                           ;clima.c: 468: setHeatElement(0);
  1066  001590  0E00               	movlw	0
  1067  001592  6E39               	movwf	setHeatElement@state+1,c
  1068  001594  0E00               	movlw	0
  1069  001596  6E38               	movwf	setHeatElement@state,c
  1070  001598  ECEF  F00E         	call	_setHeatElement	;wreg free
  1071                           
  1072                           ;clima.c: 469: setCoolElement(0);
  1073  00159C  0E00               	movlw	0
  1074  00159E  6E39               	movwf	setCoolElement@state+1,c
  1075  0015A0  0E00               	movlw	0
  1076  0015A2  6E38               	movwf	setCoolElement@state,c
  1077  0015A4  ECE9  F00E         	call	_setCoolElement	;wreg free
  1078                           
  1079                           ;clima.c: 470: updateOutputs();
  1080  0015A8  EC40  F00E         	call	_updateOutputs	;wreg free
  1081                           
  1082                           ;clima.c: 472: if (outTemp > setTemp) climaState = STATE_ON_COOL;
  1083  0015AC  500B               	movf	_setTemp,w,c
  1084  0015AE  6E48               	movwf	??_stateMachine& (0+255),c
  1085  0015B0  6A49               	clrf	(??_stateMachine+1)& (0+255),c
  1086  0015B2  5001               	movf	_outTemp,w,c
  1087  0015B4  5C48               	subwf	??_stateMachine,w,c
  1088  0015B6  5002               	movf	_outTemp+1,w,c
  1089  0015B8  5849               	subwfb	??_stateMachine+1,w,c
  1090  0015BA  B0D8               	btfsc	status,0,c
  1091  0015BC  D003               	goto	l2573
  1092  0015BE  0E01               	movlw	1
  1093  0015C0  6E14               	movwf	_climaState,c
  1094  0015C2  0012               	return	
  1095  0015C4                     l2573:
  1096                           
  1097                           ;clima.c: 473: else if (outTemp < setTemp) climaState = STATE_ON_HEAT;
  1098  0015C4  500B               	movf	_setTemp,w,c
  1099  0015C6  5C01               	subwf	_outTemp,w,c
  1100  0015C8  0E00               	movlw	0
  1101  0015CA  5802               	subwfb	_outTemp+1,w,c
  1102  0015CC  B0D8               	btfsc	status,0,c
  1103  0015CE  0012               	return	
  1104  0015D0  0E02               	movlw	2
  1105  0015D2  6E14               	movwf	_climaState,c
  1106                           
  1107                           ;clima.c: 482: }
  1108                           ;clima.c: 483: }
  1109                           
  1110                           ;clima.c: 480: {
  1111                           ;clima.c: 481: break;
  1112                           
  1113                           ;clima.c: 478: }
  1114                           ;clima.c: 479: default:
  1115                           
  1116                           ;clima.c: 476: break;
  1117  0015D4  0012               	return	
  1118  0015D6                     l2579:
  1119  0015D6  5014               	movf	_climaState,w,c
  1120                           
  1121                           ; Switch size 1, requested type "space"
  1122                           ; Number of cases is 4, Range of values is 0 to 3
  1123                           ; switch strategies available:
  1124                           ; Name         Instructions Cycles
  1125                           ; simple_byte           13     7 (average)
  1126                           ;	Chosen strategy is simple_byte
  1127  0015D8  0A00               	xorlw	0	; case 0
  1128  0015DA  B4D8               	btfsc	status,2,c
  1129  0015DC  D717               	goto	l2515
  1130  0015DE  0A01               	xorlw	1	; case 1
  1131  0015E0  B4D8               	btfsc	status,2,c
  1132  0015E2  D73B               	goto	l2535
  1133  0015E4  0A03               	xorlw	3	; case 2
  1134  0015E6  B4D8               	btfsc	status,2,c
  1135  0015E8  0012               	return	
  1136  0015EA  0A01               	xorlw	1	; case 3
  1137  0015EC  A4D8               	btfss	status,2,c
  1138  0015EE  0012               	return	
  1139  0015F0  D7C3               	goto	l2565
  1140  0015F2                     __end_of_stateMachine:
  1141                           	opt stack 0
  1142                           postinc0	equ	0xFEE
  1143                           wreg	equ	0xFE8
  1144                           status	equ	0xFD8
  1145                           
  1146 ;; *************** function _updateOutputs *****************
  1147 ;; Defined at:
  1148 ;;		line 398 in file "clima.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;		None
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;		None
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  1    wreg      void 
  1155 ;; Registers used:
  1156 ;;		None
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1166 ;;Total ram usage:        0 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; Hardware stack levels required when called:    1
  1169 ;; This function calls:
  1170 ;;		Nothing
  1171 ;; This function is called by:
  1172 ;;		_stateMachine
  1173 ;;		_main
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text2
  1178  001C80                     __ptext2:
  1179                           	opt stack 0
  1180  001C80                     _updateOutputs:
  1181                           	opt stack 29
  1182                           
  1183                           ;clima.c: 401: PORTDbits.RD7 = standbyLed;
  1184                           
  1185                           ;incstack = 0
  1186  001C80  B00E               	btfsc	_standbyLed,0,c
  1187  001C82  D002               	bra	u475
  1188  001C84  9E83               	bcf	3971,7,c	;volatile
  1189  001C86  D001               	bra	u476
  1190  001C88                     u475:
  1191  001C88  8E83               	bsf	3971,7,c	;volatile
  1192  001C8A                     u476:
  1193                           
  1194                           ;clima.c: 404: PORTDbits.RD6 = lcdBacklightLed;
  1195  001C8A  B00D               	btfsc	_lcdBacklightLed,0,c
  1196  001C8C  D002               	bra	u485
  1197  001C8E  9C83               	bcf	3971,6,c	;volatile
  1198  001C90  D001               	bra	u486
  1199  001C92                     u485:
  1200  001C92  8C83               	bsf	3971,6,c	;volatile
  1201  001C94                     u486:
  1202                           
  1203                           ;clima.c: 407: PORTDbits.RD1 = coolElement;
  1204  001C94  B00F               	btfsc	_coolElement,0,c
  1205  001C96  D002               	bra	u495
  1206  001C98  9283               	bcf	3971,1,c	;volatile
  1207  001C9A  D001               	bra	u496
  1208  001C9C                     u495:
  1209  001C9C  8283               	bsf	3971,1,c	;volatile
  1210  001C9E                     u496:
  1211                           
  1212                           ;clima.c: 410: PORTDbits.RD0 = heatElement;
  1213  001C9E  B010               	btfsc	_heatElement,0,c
  1214  001CA0  D002               	bra	u505
  1215  001CA2  9083               	bcf	3971,0,c	;volatile
  1216  001CA4  D001               	bra	u506
  1217  001CA6                     u505:
  1218  001CA6  8083               	bsf	3971,0,c	;volatile
  1219  001CA8                     u506:
  1220  001CA8  0012               	return		;funcret
  1221  001CAA                     __end_of_updateOutputs:
  1222                           	opt stack 0
  1223                           postinc0	equ	0xFEE
  1224                           wreg	equ	0xFE8
  1225                           status	equ	0xFD8
  1226                           
  1227 ;; *************** function _setLcdBacklightLed *****************
  1228 ;; Defined at:
  1229 ;;		line 145 in file "clima.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;  state           2   15[COMRAM] unsigned int 
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;		None
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		None
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;Total ram usage:        2 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    1
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		_stateMachine
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text3
  1258  001DCC                     __ptext3:
  1259                           	opt stack 0
  1260  001DCC                     _setLcdBacklightLed:
  1261                           	opt stack 28
  1262                           
  1263                           ;clima.c: 147: lcdBacklightLed = state;
  1264                           
  1265                           ;incstack = 0
  1266  001DCC  C038  F00D         	movff	setLcdBacklightLed@state,_lcdBacklightLed
  1267  001DD0  0012               	return		;funcret
  1268  001DD2                     __end_of_setLcdBacklightLed:
  1269                           	opt stack 0
  1270                           postinc0	equ	0xFEE
  1271                           wreg	equ	0xFE8
  1272                           status	equ	0xFD8
  1273                           
  1274 ;; *************** function _setCoolElement *****************
  1275 ;; Defined at:
  1276 ;;		line 165 in file "clima.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;  state           2   15[COMRAM] unsigned int 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;		None
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  1    wreg      void 
  1283 ;; Registers used:
  1284 ;;		None
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1290 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;Total ram usage:        2 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; Hardware stack levels required when called:    1
  1297 ;; This function calls:
  1298 ;;		Nothing
  1299 ;; This function is called by:
  1300 ;;		_stateMachine
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           	psect	text4
  1305  001DD2                     __ptext4:
  1306                           	opt stack 0
  1307  001DD2                     _setCoolElement:
  1308                           	opt stack 28
  1309                           
  1310                           ;clima.c: 167: coolElement = state;
  1311                           
  1312                           ;incstack = 0
  1313  001DD2  C038  F00F         	movff	setCoolElement@state,_coolElement
  1314  001DD6  0012               	return		;funcret
  1315  001DD8                     __end_of_setCoolElement:
  1316                           	opt stack 0
  1317                           postinc0	equ	0xFEE
  1318                           wreg	equ	0xFE8
  1319                           status	equ	0xFD8
  1320                           
  1321 ;; *************** function ___lwtoft *****************
  1322 ;; Defined at:
  1323 ;;		line 28 in file "D:\Hella\Compiler\sources\common\lwtoft.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  c               2   28[COMRAM] unsigned int 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;		None
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  3   28[COMRAM] float 
  1330 ;; Registers used:
  1331 ;;		wreg, status,2, status,0, cstack
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1337 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1340 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1341 ;;Total ram usage:        3 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; Hardware stack levels required when called:    2
  1344 ;; This function calls:
  1345 ;;		___ftpack
  1346 ;; This function is called by:
  1347 ;;		_stateMachine
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           	psect	text5
  1352  001CD0                     __ptext5:
  1353                           	opt stack 0
  1354  001CD0                     ___lwtoft:
  1355                           	opt stack 27
  1356                           
  1357                           ;incstack = 0
  1358  001CD0  C045  F038         	movff	___lwtoft@c,___ftpack@arg
  1359  001CD4  C046  F039         	movff	___lwtoft@c+1,___ftpack@arg+1
  1360  001CD8  6A3A               	clrf	___ftpack@arg+2,c
  1361  001CDA  0E8E               	movlw	142
  1362  001CDC  6E3B               	movwf	___ftpack@exp,c
  1363  001CDE  0E00               	movlw	0
  1364  001CE0  6E3C               	movwf	___ftpack@sign,c
  1365  001CE2  ECEB  F00B         	call	___ftpack	;wreg free
  1366  001CE6  C038  F045         	movff	?___ftpack,?___lwtoft
  1367  001CEA  C039  F046         	movff	?___ftpack+1,?___lwtoft+1
  1368  001CEE  C03A  F047         	movff	?___ftpack+2,?___lwtoft+2
  1369  001CF2  0012               	return	
  1370  001CF4                     __end_of___lwtoft:
  1371                           	opt stack 0
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           status	equ	0xFD8
  1375                           
  1376 ;; *************** function ___ftpack *****************
  1377 ;; Defined at:
  1378 ;;		line 62 in file "D:\Hella\Compiler\sources\common\float.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  arg             3   15[COMRAM] unsigned um
  1381 ;;  exp             1   18[COMRAM] unsigned char 
  1382 ;;  sign            1   19[COMRAM] unsigned char 
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;		None
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  3   15[COMRAM] float 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2, status,0
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1394 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;Total ram usage:        8 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; Hardware stack levels required when called:    1
  1401 ;; This function calls:
  1402 ;;		Nothing
  1403 ;; This function is called by:
  1404 ;;		___lwtoft
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text6
  1409  0017D6                     __ptext6:
  1410                           	opt stack 0
  1411  0017D6                     ___ftpack:
  1412                           	opt stack 27
  1413                           
  1414                           ;incstack = 0
  1415  0017D6  503B               	movf	___ftpack@exp,w,c
  1416  0017D8  B4D8               	btfsc	status,2,c
  1417  0017DA  D005               	goto	l1797
  1418  0017DC  5038               	movf	___ftpack@arg,w,c
  1419  0017DE  1039               	iorwf	___ftpack@arg+1,w,c
  1420  0017E0  103A               	iorwf	___ftpack@arg+2,w,c
  1421  0017E2  A4D8               	btfss	status,2,c
  1422  0017E4  D00C               	goto	l1803
  1423  0017E6                     l1797:
  1424  0017E6  0E00               	movlw	0
  1425  0017E8  6E38               	movwf	?___ftpack,c
  1426  0017EA  0E00               	movlw	0
  1427  0017EC  6E39               	movwf	?___ftpack+1,c
  1428  0017EE  0E00               	movlw	0
  1429  0017F0  6E3A               	movwf	?___ftpack+2,c
  1430  0017F2  0012               	return	
  1431  0017F4                     l1801:
  1432  0017F4  2A3B               	incf	___ftpack@exp,f,c
  1433  0017F6  90D8               	bcf	status,0,c
  1434  0017F8  323A               	rrcf	___ftpack@arg+2,f,c
  1435  0017FA  3239               	rrcf	___ftpack@arg+1,f,c
  1436  0017FC  3238               	rrcf	___ftpack@arg,f,c
  1437  0017FE                     l1803:
  1438  0017FE  0E00               	movlw	0
  1439  001800  1438               	andwf	___ftpack@arg,w,c
  1440  001802  6E3D               	movwf	??___ftpack& (0+255),c
  1441  001804  0E00               	movlw	0
  1442  001806  1439               	andwf	___ftpack@arg+1,w,c
  1443  001808  6E3E               	movwf	(??___ftpack+1)& (0+255),c
  1444  00180A  0EFE               	movlw	254
  1445  00180C  143A               	andwf	___ftpack@arg+2,w,c
  1446  00180E  6E3F               	movwf	(??___ftpack+2)& (0+255),c
  1447  001810  503D               	movf	??___ftpack,w,c
  1448  001812  103E               	iorwf	??___ftpack+1,w,c
  1449  001814  103F               	iorwf	??___ftpack+2,w,c
  1450  001816  B4D8               	btfsc	status,2,c
  1451  001818  D00C               	goto	l1809
  1452  00181A  D7EC               	goto	l1801
  1453  00181C                     l1805:
  1454  00181C  2A3B               	incf	___ftpack@exp,f,c
  1455  00181E  0E01               	movlw	1
  1456  001820  2638               	addwf	___ftpack@arg,f,c
  1457  001822  0E00               	movlw	0
  1458  001824  2239               	addwfc	___ftpack@arg+1,f,c
  1459  001826  0E00               	movlw	0
  1460  001828  223A               	addwfc	___ftpack@arg+2,f,c
  1461  00182A  90D8               	bcf	status,0,c
  1462  00182C  323A               	rrcf	___ftpack@arg+2,f,c
  1463  00182E  3239               	rrcf	___ftpack@arg+1,f,c
  1464  001830  3238               	rrcf	___ftpack@arg,f,c
  1465  001832                     l1809:
  1466  001832  0E00               	movlw	0
  1467  001834  1438               	andwf	___ftpack@arg,w,c
  1468  001836  6E3D               	movwf	??___ftpack& (0+255),c
  1469  001838  0E00               	movlw	0
  1470  00183A  1439               	andwf	___ftpack@arg+1,w,c
  1471  00183C  6E3E               	movwf	(??___ftpack+1)& (0+255),c
  1472  00183E  0EFF               	movlw	255
  1473  001840  143A               	andwf	___ftpack@arg+2,w,c
  1474  001842  6E3F               	movwf	(??___ftpack+2)& (0+255),c
  1475  001844  503D               	movf	??___ftpack,w,c
  1476  001846  103E               	iorwf	??___ftpack+1,w,c
  1477  001848  103F               	iorwf	??___ftpack+2,w,c
  1478  00184A  B4D8               	btfsc	status,2,c
  1479  00184C  D006               	goto	l1813
  1480  00184E  D7E6               	goto	l1805
  1481  001850                     l1811:
  1482  001850  063B               	decf	___ftpack@exp,f,c
  1483  001852  90D8               	bcf	status,0,c
  1484  001854  3638               	rlcf	___ftpack@arg,f,c
  1485  001856  3639               	rlcf	___ftpack@arg+1,f,c
  1486  001858  363A               	rlcf	___ftpack@arg+2,f,c
  1487  00185A                     l1813:
  1488  00185A  BE39               	btfsc	___ftpack@arg+1,7,c
  1489  00185C  D003               	goto	l627
  1490  00185E  0E02               	movlw	2
  1491  001860  603B               	cpfslt	___ftpack@exp,c
  1492  001862  D7F6               	goto	l1811
  1493  001864                     l627:
  1494  001864  A03B               	btfss	___ftpack@exp,0,c
  1495  001866  9E39               	bcf	___ftpack@arg+1,7,c
  1496  001868  90D8               	bcf	status,0,c
  1497  00186A  323B               	rrcf	___ftpack@exp,f,c
  1498  00186C  503B               	movf	___ftpack@exp,w,c
  1499  00186E  123A               	iorwf	___ftpack@arg+2,f,c
  1500  001870  503C               	movf	___ftpack@sign,w,c
  1501  001872  A4D8               	btfss	status,2,c
  1502  001874  8E3A               	bsf	___ftpack@arg+2,7,c
  1503  001876  C038  F038         	movff	___ftpack@arg,?___ftpack
  1504  00187A  C039  F039         	movff	___ftpack@arg+1,?___ftpack+1
  1505  00187E  C03A  F03A         	movff	___ftpack@arg+2,?___ftpack+2
  1506  001882  0012               	return	
  1507  001884                     __end_of___ftpack:
  1508                           	opt stack 0
  1509                           postinc0	equ	0xFEE
  1510                           wreg	equ	0xFE8
  1511                           status	equ	0xFD8
  1512                           
  1513 ;; *************** function ___ftge *****************
  1514 ;; Defined at:
  1515 ;;		line 4 in file "D:\Hella\Compiler\sources\common\ftge.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  ff1             3   15[COMRAM] float 
  1518 ;;  ff2             3   18[COMRAM] float 
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;		None
  1521 ;; Return value:  Size  Location     Type
  1522 ;;		None               void
  1523 ;; Registers used:
  1524 ;;		wreg, status,2, status,0
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1530 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;Total ram usage:        9 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    1
  1537 ;; This function calls:
  1538 ;;		Nothing
  1539 ;; This function is called by:
  1540 ;;		_stateMachine
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text7
  1545  001884                     __ptext7:
  1546                           	opt stack 0
  1547  001884                     ___ftge:
  1548                           	opt stack 28
  1549                           
  1550                           ;incstack = 0
  1551  001884  AE3A               	btfss	___ftge@ff1+2,7,c
  1552  001886  D016               	goto	l2041
  1553  001888  C038  F03E         	movff	___ftge@ff1,??___ftge
  1554  00188C  C039  F03F         	movff	___ftge@ff1+1,??___ftge+1
  1555  001890  C03A  F040         	movff	___ftge@ff1+2,??___ftge+2
  1556  001894  1E3E               	comf	??___ftge,f,c
  1557  001896  1E3F               	comf	??___ftge+1,f,c
  1558  001898  1E40               	comf	??___ftge+2,f,c
  1559  00189A  2A3E               	incf	??___ftge,f,c
  1560  00189C  0E00               	movlw	0
  1561  00189E  223F               	addwfc	??___ftge+1,f,c
  1562  0018A0  2240               	addwfc	??___ftge+2,f,c
  1563  0018A2  0E00               	movlw	0
  1564  0018A4  243E               	addwf	??___ftge,w,c
  1565  0018A6  6E38               	movwf	___ftge@ff1,c
  1566  0018A8  0E00               	movlw	0
  1567  0018AA  203F               	addwfc	??___ftge+1,w,c
  1568  0018AC  6E39               	movwf	___ftge@ff1+1,c
  1569  0018AE  0E80               	movlw	128
  1570  0018B0  2040               	addwfc	??___ftge+2,w,c
  1571  0018B2  6E3A               	movwf	___ftge@ff1+2,c
  1572  0018B4                     l2041:
  1573  0018B4  AE3D               	btfss	___ftge@ff2+2,7,c
  1574  0018B6  D016               	goto	l2045
  1575  0018B8  C03B  F03E         	movff	___ftge@ff2,??___ftge
  1576  0018BC  C03C  F03F         	movff	___ftge@ff2+1,??___ftge+1
  1577  0018C0  C03D  F040         	movff	___ftge@ff2+2,??___ftge+2
  1578  0018C4  1E3E               	comf	??___ftge,f,c
  1579  0018C6  1E3F               	comf	??___ftge+1,f,c
  1580  0018C8  1E40               	comf	??___ftge+2,f,c
  1581  0018CA  2A3E               	incf	??___ftge,f,c
  1582  0018CC  0E00               	movlw	0
  1583  0018CE  223F               	addwfc	??___ftge+1,f,c
  1584  0018D0  2240               	addwfc	??___ftge+2,f,c
  1585  0018D2  0E00               	movlw	0
  1586  0018D4  243E               	addwf	??___ftge,w,c
  1587  0018D6  6E3B               	movwf	___ftge@ff2,c
  1588  0018D8  0E00               	movlw	0
  1589  0018DA  203F               	addwfc	??___ftge+1,w,c
  1590  0018DC  6E3C               	movwf	___ftge@ff2+1,c
  1591  0018DE  0E80               	movlw	128
  1592  0018E0  2040               	addwfc	??___ftge+2,w,c
  1593  0018E2  6E3D               	movwf	___ftge@ff2+2,c
  1594  0018E4                     l2045:
  1595  0018E4  0E00               	movlw	0
  1596  0018E6  1A38               	xorwf	___ftge@ff1,f,c
  1597  0018E8  0E00               	movlw	0
  1598  0018EA  1A39               	xorwf	___ftge@ff1+1,f,c
  1599  0018EC  0E80               	movlw	128
  1600  0018EE  1A3A               	xorwf	___ftge@ff1+2,f,c
  1601  0018F0  0E00               	movlw	0
  1602  0018F2  1A3B               	xorwf	___ftge@ff2,f,c
  1603  0018F4  0E00               	movlw	0
  1604  0018F6  1A3C               	xorwf	___ftge@ff2+1,f,c
  1605  0018F8  0E80               	movlw	128
  1606  0018FA  1A3D               	xorwf	___ftge@ff2+2,f,c
  1607  0018FC  503B               	movf	___ftge@ff2,w,c
  1608  0018FE  5C38               	subwf	___ftge@ff1,w,c
  1609  001900  503C               	movf	___ftge@ff2+1,w,c
  1610  001902  5839               	subwfb	___ftge@ff1+1,w,c
  1611  001904  503D               	movf	___ftge@ff2+2,w,c
  1612  001906  583A               	subwfb	___ftge@ff1+2,w,c
  1613  001908  B0D8               	btfsc	status,0,c
  1614  00190A  D002               	goto	l2051
  1615  00190C  90D8               	bcf	status,0,c
  1616  00190E  0012               	return	
  1617  001910                     l2051:
  1618  001910  80D8               	bsf	status,0,c
  1619  001912  0012               	return	
  1620  001914                     __end_of___ftge:
  1621                           	opt stack 0
  1622                           postinc0	equ	0xFEE
  1623                           wreg	equ	0xFE8
  1624                           status	equ	0xFD8
  1625                           
  1626 ;; *************** function _init *****************
  1627 ;; Defined at:
  1628 ;;		line 665 in file "clima.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;		None
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  1    wreg      void 
  1635 ;; Registers used:
  1636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;Total ram usage:        0 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    6
  1649 ;; This function calls:
  1650 ;;		_LcdInit
  1651 ;;		_initAdc
  1652 ;;		_initButtons
  1653 ;;		_initPwm
  1654 ;;		_initTmr
  1655 ;;		_setHeatElement
  1656 ;;		_setLcd
  1657 ;;		_setSpeedFanCool
  1658 ;;		_setSpeedFanHeatVent
  1659 ;;		_setStandbyLed
  1660 ;; This function is called by:
  1661 ;;		_main
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664                           
  1665                           	psect	text8
  1666  001914                     __ptext8:
  1667                           	opt stack 0
  1668  001914                     _init:
  1669                           	opt stack 24
  1670                           
  1671                           ;clima.c: 667: TRISD=0;
  1672                           
  1673                           ;incstack = 0
  1674  001914  0E00               	movlw	0
  1675  001916  6E95               	movwf	3989,c	;volatile
  1676                           
  1677                           ;clima.c: 668: PORTD=0;
  1678  001918  0E00               	movlw	0
  1679  00191A  6E83               	movwf	3971,c	;volatile
  1680                           
  1681                           ;clima.c: 669: MEMCONbits.EBDIS=1;
  1682  00191C  8E9C               	bsf	3996,7,c	;volatile
  1683                           
  1684                           ;clima.c: 676: initButtons();
  1685  00191E  ECF2  F00E         	call	_initButtons	;wreg free
  1686                           
  1687                           ;clima.c: 679: initAdc();
  1688  001922  ECBC  F00D         	call	_initAdc	;wreg free
  1689                           
  1690                           ;clima.c: 682: initPwm();
  1691  001926  ECDE  F00E         	call	_initPwm	;wreg free
  1692                           
  1693                           ;clima.c: 685: initTmr();
  1694  00192A  EC9C  F00D         	call	_initTmr	;wreg free
  1695                           
  1696                           ;clima.c: 688: LcdInit();
  1697  00192E  EC34  F00D         	call	_LcdInit	;wreg free
  1698                           
  1699                           ;clima.c: 691: climaState = STATE_OFF;
  1700  001932  0E00               	movlw	0
  1701  001934  6E14               	movwf	_climaState,c
  1702                           
  1703                           ;clima.c: 692: setLcd();
  1704  001936  EC5A  F00D         	call	_setLcd	;wreg free
  1705                           
  1706                           ;clima.c: 695: setStandbyLed(1);
  1707  00193A  0E00               	movlw	0
  1708  00193C  6E39               	movwf	setStandbyLed@state+1,c
  1709  00193E  0E01               	movlw	1
  1710  001940  6E38               	movwf	setStandbyLed@state,c
  1711  001942  ECEC  F00E         	call	_setStandbyLed	;wreg free
  1712                           
  1713                           ;clima.c: 697: setHeatElement(0);
  1714  001946  0E00               	movlw	0
  1715  001948  6E39               	movwf	setHeatElement@state+1,c
  1716  00194A  0E00               	movlw	0
  1717  00194C  6E38               	movwf	setHeatElement@state,c
  1718  00194E  ECEF  F00E         	call	_setHeatElement	;wreg free
  1719                           
  1720                           ;clima.c: 700: setSpeedFanCool(0);
  1721  001952  0E00               	movlw	0
  1722  001954  ECBB  F00E         	call	_setSpeedFanCool
  1723                           
  1724                           ;clima.c: 702: setSpeedFanHeatVent(0);
  1725  001958  0E00               	movlw	0
  1726  00195A  ECB2  F00E         	call	_setSpeedFanHeatVent
  1727                           
  1728                           ;clima.c: 704: setHeatElement(0);
  1729  00195E  0E00               	movlw	0
  1730  001960  6E39               	movwf	setHeatElement@state+1,c
  1731  001962  0E00               	movlw	0
  1732  001964  6E38               	movwf	setHeatElement@state,c
  1733  001966  ECEF  F00E         	call	_setHeatElement	;wreg free
  1734  00196A  0012               	return		;funcret
  1735  00196C                     __end_of_init:
  1736                           	opt stack 0
  1737                           postinc0	equ	0xFEE
  1738                           wreg	equ	0xFE8
  1739                           status	equ	0xFD8
  1740                           
  1741 ;; *************** function _setStandbyLed *****************
  1742 ;; Defined at:
  1743 ;;		line 135 in file "clima.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;  state           2   15[COMRAM] unsigned int 
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;		None
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      void 
  1750 ;; Registers used:
  1751 ;;		None
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1757 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1760 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;Total ram usage:        2 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    1
  1764 ;; This function calls:
  1765 ;;		Nothing
  1766 ;; This function is called by:
  1767 ;;		_stateMachine
  1768 ;;		_init
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text9
  1773  001DD8                     __ptext9:
  1774                           	opt stack 0
  1775  001DD8                     _setStandbyLed:
  1776                           	opt stack 28
  1777                           
  1778                           ;clima.c: 137: standbyLed = state;
  1779                           
  1780                           ;incstack = 0
  1781  001DD8  C038  F00E         	movff	setStandbyLed@state,_standbyLed
  1782  001DDC  0012               	return		;funcret
  1783  001DDE                     __end_of_setStandbyLed:
  1784                           	opt stack 0
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           status	equ	0xFD8
  1788                           
  1789 ;; *************** function _setSpeedFanHeatVent *****************
  1790 ;; Defined at:
  1791 ;;		line 186 in file "clima.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;  speed           1    wreg     unsigned char 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  speed           1   15[COMRAM] unsigned char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, status,2, status,0
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;Total ram usage:        1 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:    1
  1812 ;; This function calls:
  1813 ;;		Nothing
  1814 ;; This function is called by:
  1815 ;;		_stateMachine
  1816 ;;		_init
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text10
  1821  001D64                     __ptext10:
  1822                           	opt stack 0
  1823  001D64                     _setSpeedFanHeatVent:
  1824                           	opt stack 28
  1825                           
  1826                           ;incstack = 0
  1827                           ;setSpeedFanHeatVent@speed stored from wreg
  1828  001D64  6E38               	movwf	setSpeedFanHeatVent@speed,c
  1829                           
  1830                           ;clima.c: 188: if (speed)
  1831  001D66  5038               	movf	setSpeedFanHeatVent@speed,w,c
  1832  001D68  B4D8               	btfsc	status,2,c
  1833  001D6A  D002               	goto	l1193
  1834                           
  1835                           ;clima.c: 189: speed += 3;
  1836  001D6C  0E03               	movlw	3
  1837  001D6E  2638               	addwf	setSpeedFanHeatVent@speed,f,c
  1838  001D70                     l1193:
  1839                           
  1840                           ;clima.c: 190: fanSpeedHeatVent = speed;
  1841  001D70  C038  F012         	movff	setSpeedFanHeatVent@speed,_fanSpeedHeatVent
  1842  001D74  0012               	return		;funcret
  1843  001D76                     __end_of_setSpeedFanHeatVent:
  1844                           	opt stack 0
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _setSpeedFanCool *****************
  1850 ;; Defined at:
  1851 ;;		line 175 in file "clima.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  speed           1    wreg     unsigned char 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  speed           1   15[COMRAM] unsigned char 
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;Total ram usage:        1 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    1
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_stateMachine
  1876 ;;		_init
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text11
  1881  001D76                     __ptext11:
  1882                           	opt stack 0
  1883  001D76                     _setSpeedFanCool:
  1884                           	opt stack 28
  1885                           
  1886                           ;incstack = 0
  1887                           ;setSpeedFanCool@speed stored from wreg
  1888  001D76  6E38               	movwf	setSpeedFanCool@speed,c
  1889                           
  1890                           ;clima.c: 177: if (speed)
  1891  001D78  5038               	movf	setSpeedFanCool@speed,w,c
  1892  001D7A  B4D8               	btfsc	status,2,c
  1893  001D7C  D002               	goto	l1187
  1894                           
  1895                           ;clima.c: 178: speed += 3;
  1896  001D7E  0E03               	movlw	3
  1897  001D80  2638               	addwf	setSpeedFanCool@speed,f,c
  1898  001D82                     l1187:
  1899                           
  1900                           ;clima.c: 179: fanSpeedCool = speed;
  1901  001D82  C038  F013         	movff	setSpeedFanCool@speed,_fanSpeedCool
  1902  001D86  0012               	return		;funcret
  1903  001D88                     __end_of_setSpeedFanCool:
  1904                           	opt stack 0
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           status	equ	0xFD8
  1908                           
  1909 ;; *************** function _setLcd *****************
  1910 ;; Defined at:
  1911 ;;		line 225 in file "clima.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;		None
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;		None
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  1    wreg      void 
  1918 ;; Registers used:
  1919 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;Total ram usage:        0 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; Hardware stack levels required when called:    5
  1932 ;; This function calls:
  1933 ;;		_LcdClear
  1934 ;;		_LcdGoTo
  1935 ;;		_LcdWriteString
  1936 ;; This function is called by:
  1937 ;;		_stateMachine
  1938 ;;		_init
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text12
  1943  001AB4                     __ptext12:
  1944                           	opt stack 0
  1945  001AB4                     _setLcd:
  1946                           	opt stack 24
  1947                           
  1948                           ;clima.c: 227: LcdClear();
  1949                           
  1950                           ;incstack = 0
  1951  001AB4  ECE2  F00E         	call	_LcdClear	;wreg free
  1952                           
  1953                           ;clima.c: 228: LcdGoTo(0);
  1954  001AB8  0E00               	movlw	0
  1955  001ABA  ECD2  F00E         	call	_LcdGoTo
  1956                           
  1957                           ;clima.c: 229: LcdWriteString(LcdLines[climaState][0]);
  1958  001ABE  5014               	movf	_climaState,w,c
  1959  001AC0  0D24               	mullw	36
  1960  001AC2  0E0B               	movlw	low _LcdLines
  1961  001AC4  24F3               	addwf	prodl,w,c
  1962  001AC6  6E3D               	movwf	LcdWriteString@s,c
  1963  001AC8  0E10               	movlw	high _LcdLines
  1964  001ACA  20F4               	addwfc	prodh,w,c
  1965  001ACC  6E3E               	movwf	LcdWriteString@s+1,c
  1966  001ACE  ECB6  F00C         	call	_LcdWriteString	;wreg free
  1967                           
  1968                           ;clima.c: 230: LcdGoTo(0x40);
  1969  001AD2  0E40               	movlw	64
  1970  001AD4  ECD2  F00E         	call	_LcdGoTo
  1971                           
  1972                           ;clima.c: 231: LcdWriteString(LcdLines[climaState][1]);
  1973  001AD8  5014               	movf	_climaState,w,c
  1974  001ADA  0D24               	mullw	36
  1975  001ADC  0E12               	movlw	18
  1976  001ADE  26F3               	addwf	prodl,f,c
  1977  001AE0  0E00               	movlw	0
  1978  001AE2  22F4               	addwfc	prodh,f,c
  1979  001AE4  0E0B               	movlw	low _LcdLines
  1980  001AE6  24F3               	addwf	prodl,w,c
  1981  001AE8  6E3D               	movwf	LcdWriteString@s,c
  1982  001AEA  0E10               	movlw	high _LcdLines
  1983  001AEC  20F4               	addwfc	prodh,w,c
  1984  001AEE  6E3E               	movwf	LcdWriteString@s+1,c
  1985  001AF0  ECB6  F00C         	call	_LcdWriteString	;wreg free
  1986  001AF4  0012               	return		;funcret
  1987  001AF6                     __end_of_setLcd:
  1988                           	opt stack 0
  1989                           prodh	equ	0xFF4
  1990                           prodl	equ	0xFF3
  1991                           postinc0	equ	0xFEE
  1992                           wreg	equ	0xFE8
  1993                           status	equ	0xFD8
  1994                           
  1995 ;; *************** function _LcdGoTo *****************
  1996 ;; Defined at:
  1997 ;;		line 176 in file "lcd.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;  pos             1    wreg     unsigned char 
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;  pos             1   20[COMRAM] unsigned char 
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, status,2, status,0, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;Total ram usage:        1 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    4
  2018 ;; This function calls:
  2019 ;;		_lcdCommand
  2020 ;; This function is called by:
  2021 ;;		_setLcd
  2022 ;;		_main
  2023 ;;		_updateLcd
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text13
  2028  001DA4                     __ptext13:
  2029                           	opt stack 0
  2030  001DA4                     _LcdGoTo:
  2031                           	opt stack 24
  2032                           
  2033                           ;incstack = 0
  2034                           ;LcdGoTo@pos stored from wreg
  2035  001DA4  6E3D               	movwf	LcdGoTo@pos,c
  2036                           
  2037                           ;lcd.c: 179: lcdCommand(0x80+pos);
  2038  001DA6  503D               	movf	LcdGoTo@pos,w,c
  2039  001DA8  0F80               	addlw	128
  2040  001DAA  EC2A  F00E         	call	_lcdCommand
  2041  001DAE  0012               	return		;funcret
  2042  001DB0                     __end_of_LcdGoTo:
  2043                           	opt stack 0
  2044                           prodh	equ	0xFF4
  2045                           prodl	equ	0xFF3
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _setHeatElement *****************
  2051 ;; Defined at:
  2052 ;;		line 155 in file "clima.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;  state           2   15[COMRAM] unsigned int 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		None
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2066 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;Total ram usage:        2 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    1
  2073 ;; This function calls:
  2074 ;;		Nothing
  2075 ;; This function is called by:
  2076 ;;		_stateMachine
  2077 ;;		_init
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text14
  2082  001DDE                     __ptext14:
  2083                           	opt stack 0
  2084  001DDE                     _setHeatElement:
  2085                           	opt stack 28
  2086                           
  2087                           ;clima.c: 157: heatElement = state;
  2088                           
  2089                           ;incstack = 0
  2090  001DDE  C038  F010         	movff	setHeatElement@state,_heatElement
  2091  001DE2  0012               	return		;funcret
  2092  001DE4                     __end_of_setHeatElement:
  2093                           	opt stack 0
  2094                           prodh	equ	0xFF4
  2095                           prodl	equ	0xFF3
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           status	equ	0xFD8
  2099                           
  2100 ;; *************** function _initTmr *****************
  2101 ;; Defined at:
  2102 ;;		line 570 in file "clima.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;		None
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  1    wreg      void 
  2109 ;; Registers used:
  2110 ;;		wreg, status,2
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;Total ram usage:        0 bytes
  2121 ;; Hardware stack levels used:    1
  2122 ;; Hardware stack levels required when called:    1
  2123 ;; This function calls:
  2124 ;;		Nothing
  2125 ;; This function is called by:
  2126 ;;		_init
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text15
  2131  001B38                     __ptext15:
  2132                           	opt stack 0
  2133  001B38                     _initTmr:
  2134                           	opt stack 28
  2135                           
  2136                           ;clima.c: 572: PORTJbits.RJ6 = 0;
  2137                           
  2138                           ;incstack = 0
  2139  001B38  9C88               	bcf	3976,6,c	;volatile
  2140                           
  2141                           ;clima.c: 573: PORTJbits.RJ7 = 0;
  2142  001B3A  9E88               	bcf	3976,7,c	;volatile
  2143                           
  2144                           ;clima.c: 574: TRISJbits.TRISJ7 = 0;
  2145  001B3C  9E9A               	bcf	3994,7,c	;volatile
  2146                           
  2147                           ;clima.c: 575: TRISJbits.TRISJ6 = 0;
  2148  001B3E  9C9A               	bcf	3994,6,c	;volatile
  2149                           
  2150                           ;clima.c: 577: PORTDbits.RD3 = 0;
  2151  001B40  9683               	bcf	3971,3,c	;volatile
  2152                           
  2153                           ;clima.c: 578: PORTDbits.RD4 = 0;
  2154  001B42  9883               	bcf	3971,4,c	;volatile
  2155                           
  2156                           ;clima.c: 579: PORTDbits.RD5 = 0;
  2157  001B44  9A83               	bcf	3971,5,c	;volatile
  2158                           
  2159                           ;clima.c: 580: TRISDbits.TRISD3 = 0;
  2160  001B46  9695               	bcf	3989,3,c	;volatile
  2161                           
  2162                           ;clima.c: 581: TRISDbits.TRISD4 = 0;
  2163  001B48  9895               	bcf	3989,4,c	;volatile
  2164                           
  2165                           ;clima.c: 582: TRISDbits.TRISD5 = 0;
  2166  001B4A  9A95               	bcf	3989,5,c	;volatile
  2167                           
  2168                           ;clima.c: 586: TMR0 = 0;
  2169  001B4C  0E00               	movlw	0
  2170  001B4E  6ED7               	movwf	4055,c	;volatile
  2171  001B50  0E00               	movlw	0
  2172  001B52  6ED6               	movwf	4054,c	;volatile
  2173                           
  2174                           ;clima.c: 587: T0CON = 0;
  2175  001B54  0E00               	movlw	0
  2176  001B56  6ED5               	movwf	4053,c	;volatile
  2177                           
  2178                           ;clima.c: 588: T0CONbits.TMR0ON = 0;
  2179  001B58  9ED5               	bcf	4053,7,c	;volatile
  2180                           
  2181                           ;clima.c: 589: T0CONbits.T08BIT = 0;
  2182  001B5A  9CD5               	bcf	4053,6,c	;volatile
  2183                           
  2184                           ;clima.c: 590: T0CONbits.T0CS = 0;
  2185  001B5C  9AD5               	bcf	4053,5,c	;volatile
  2186                           
  2187                           ;clima.c: 591: T0CONbits.T0SE = 0;
  2188  001B5E  98D5               	bcf	4053,4,c	;volatile
  2189                           
  2190                           ;clima.c: 592: T0CONbits.PSA = 0;
  2191  001B60  96D5               	bcf	4053,3,c	;volatile
  2192                           
  2193                           ;clima.c: 593: T0CONbits.T0PS = 0;
  2194  001B62  90D5               	bcf	4053,0,c	;volatile
  2195  001B64  92D5               	bcf	4053,1,c	;volatile
  2196  001B66  94D5               	bcf	4053,2,c	;volatile
  2197                           
  2198                           ;clima.c: 600: TMR1H = 0xFB;
  2199  001B68  0EFB               	movlw	251
  2200  001B6A  6ECF               	movwf	4047,c	;volatile
  2201                           
  2202                           ;clima.c: 601: TMR1L = 0x1D;
  2203  001B6C  0E1D               	movlw	29
  2204  001B6E  6ECE               	movwf	4046,c	;volatile
  2205                           
  2206                           ;clima.c: 602: T0IE = 1;
  2207  001B70  8AF2               	bsf	intcon,5,c	;volatile
  2208                           
  2209                           ;clima.c: 603: GIE = 1;
  2210  001B72  8EF2               	bsf	intcon,7,c	;volatile
  2211                           
  2212                           ;clima.c: 604: T0CONbits.TMR0ON = 1;
  2213  001B74  8ED5               	bsf	4053,7,c	;volatile
  2214  001B76  0012               	return		;funcret
  2215  001B78                     __end_of_initTmr:
  2216                           	opt stack 0
  2217                           prodh	equ	0xFF4
  2218                           prodl	equ	0xFF3
  2219                           intcon	equ	0xFF2
  2220                           postinc0	equ	0xFEE
  2221                           wreg	equ	0xFE8
  2222                           status	equ	0xFD8
  2223                           
  2224 ;; *************** function _initPwm *****************
  2225 ;; Defined at:
  2226 ;;		line 553 in file "clima.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		None
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2244 ;;Total ram usage:        0 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    1
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_init
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text16
  2255  001DBC                     __ptext16:
  2256                           	opt stack 0
  2257  001DBC                     _initPwm:
  2258                           	opt stack 28
  2259                           
  2260                           ;clima.c: 558: (TRISDbits.TRISD3) = 0;
  2261                           
  2262                           ;incstack = 0
  2263  001DBC  9695               	bcf	3989,3,c	;volatile
  2264                           
  2265                           ;clima.c: 560: (TRISDbits.TRISD4) = 0;
  2266  001DBE  9895               	bcf	3989,4,c	;volatile
  2267                           
  2268                           ;clima.c: 562: (TRISDbits.TRISD5) = 0;
  2269  001DC0  9A95               	bcf	3989,5,c	;volatile
  2270  001DC2  0012               	return		;funcret
  2271  001DC4                     __end_of_initPwm:
  2272                           	opt stack 0
  2273                           prodh	equ	0xFF4
  2274                           prodl	equ	0xFF3
  2275                           intcon	equ	0xFF2
  2276                           postinc0	equ	0xFEE
  2277                           wreg	equ	0xFE8
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function _initButtons *****************
  2281 ;; Defined at:
  2282 ;;		line 494 in file "clima.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  1    wreg      void 
  2289 ;; Registers used:
  2290 ;;		None
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;Total ram usage:        0 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    1
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_init
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text17
  2311  001DE4                     __ptext17:
  2312                           	opt stack 0
  2313  001DE4                     _initButtons:
  2314                           	opt stack 28
  2315                           
  2316                           ;clima.c: 497: TRISB0 = 1;
  2317                           
  2318                           ;incstack = 0
  2319  001DE4  8093               	bsf	3987,0,c	;volatile
  2320  001DE6  0012               	return		;funcret
  2321  001DE8                     __end_of_initButtons:
  2322                           	opt stack 0
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           intcon	equ	0xFF2
  2326                           postinc0	equ	0xFEE
  2327                           wreg	equ	0xFE8
  2328                           status	equ	0xFD8
  2329                           
  2330 ;; *************** function _initAdc *****************
  2331 ;; Defined at:
  2332 ;;		line 505 in file "clima.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;		None
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      void 
  2339 ;; Registers used:
  2340 ;;		wreg, status,2, status,0
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;Total ram usage:        0 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    1
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_init
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           	psect	text18
  2361  001B78                     __ptext18:
  2362                           	opt stack 0
  2363  001B78                     _initAdc:
  2364                           	opt stack 28
  2365                           
  2366                           ;clima.c: 508: TRISA = TRISA | (1<<0);
  2367                           
  2368                           ;incstack = 0
  2369  001B78  5092               	movf	3986,w,c	;volatile
  2370  001B7A  0901               	iorlw	1
  2371  001B7C  6E92               	movwf	3986,c	;volatile
  2372                           
  2373                           ;clima.c: 511: TRISA = TRISA | (1<<1);
  2374  001B7E  5092               	movf	3986,w,c	;volatile
  2375  001B80  0902               	iorlw	2
  2376  001B82  6E92               	movwf	3986,c	;volatile
  2377                           
  2378                           ;clima.c: 514: TRISA = TRISA | (1<<4);
  2379  001B84  5092               	movf	3986,w,c	;volatile
  2380  001B86  0910               	iorlw	16
  2381  001B88  6E92               	movwf	3986,c	;volatile
  2382                           
  2383                           ;clima.c: 517: ADCON0bits.CHS = 1;
  2384  001B8A  50C2               	movf	4034,w,c	;volatile
  2385  001B8C  0BC3               	andlw	-61
  2386  001B8E  0904               	iorlw	4
  2387  001B90  6EC2               	movwf	4034,c	;volatile
  2388                           
  2389                           ;clima.c: 518: ADCON0bits.GO_nDONE = 0;
  2390  001B92  92C2               	bcf	4034,1,c	;volatile
  2391                           
  2392                           ;clima.c: 519: ADCON0bits.ADON = 0;
  2393  001B94  90C2               	bcf	4034,0,c	;volatile
  2394                           
  2395                           ;clima.c: 521: ADCON1bits.VCFG = 0b00;
  2396  001B96  0ECF               	movlw	-49
  2397  001B98  16C1               	andwf	4033,f,c	;volatile
  2398                           
  2399                           ;clima.c: 522: ADCON1bits.PCFG = 0b0000;
  2400  001B9A  90C1               	bcf	4033,0,c	;volatile
  2401  001B9C  92C1               	bcf	4033,1,c	;volatile
  2402  001B9E  94C1               	bcf	4033,2,c	;volatile
  2403  001BA0  96C1               	bcf	4033,3,c	;volatile
  2404                           
  2405                           ;clima.c: 524: ADCON2bits.ADFM = 1;
  2406  001BA2  8EC0               	bsf	4032,7,c	;volatile
  2407                           
  2408                           ;clima.c: 525: ADCON2bits.ACQT = 0b111;
  2409  001BA4  86C0               	bsf	4032,3,c	;volatile
  2410  001BA6  88C0               	bsf	4032,4,c	;volatile
  2411  001BA8  8AC0               	bsf	4032,5,c	;volatile
  2412                           
  2413                           ;clima.c: 526: ADCON2bits.ADCS = 0b010;
  2414  001BAA  50C0               	movf	4032,w,c	;volatile
  2415  001BAC  0BF8               	andlw	-8
  2416  001BAE  0902               	iorlw	2
  2417  001BB0  6EC0               	movwf	4032,c	;volatile
  2418  001BB2  0012               	return		;funcret
  2419  001BB4                     __end_of_initAdc:
  2420                           	opt stack 0
  2421                           prodh	equ	0xFF4
  2422                           prodl	equ	0xFF3
  2423                           intcon	equ	0xFF2
  2424                           postinc0	equ	0xFEE
  2425                           wreg	equ	0xFE8
  2426                           status	equ	0xFD8
  2427                           
  2428 ;; *************** function _LcdInit *****************
  2429 ;; Defined at:
  2430 ;;		line 123 in file "lcd.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;		None
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;		None
  2435 ;; Return value:  Size  Location     Type
  2436 ;;                  1    wreg      void 
  2437 ;; Registers used:
  2438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2439 ;; Tracked objects:
  2440 ;;		On entry : 0/0
  2441 ;;		On exit  : 0/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;Total ram usage:        0 bytes
  2449 ;; Hardware stack levels used:    1
  2450 ;; Hardware stack levels required when called:    5
  2451 ;; This function calls:
  2452 ;;		_LcdClear
  2453 ;;		_LcdWriteString
  2454 ;;		_SWSPIOpen
  2455 ;;		_lcdCommand
  2456 ;;		_setGPIO
  2457 ;;		_setIODIR
  2458 ;; This function is called by:
  2459 ;;		_init
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           	psect	text19
  2464  001A68                     __ptext19:
  2465                           	opt stack 0
  2466  001A68                     _LcdInit:
  2467                           	opt stack 24
  2468                           
  2469                           ;lcd.c: 126: SWSPIOpen();
  2470                           
  2471                           ;incstack = 0
  2472  001A68  ECC4  F00E         	call	_SWSPIOpen	;wreg free
  2473                           
  2474                           ;lcd.c: 135: setIODIR(0x01,0x00);
  2475  001A6C  0E00               	movlw	0
  2476  001A6E  6E3A               	movwf	setIODIR@dir,c
  2477  001A70  0E01               	movlw	1
  2478  001A72  EC7A  F00E         	call	_setIODIR
  2479                           
  2480                           ;lcd.c: 137: setIODIR(0x00,0x00);
  2481  001A76  0E00               	movlw	0
  2482  001A78  6E3A               	movwf	setIODIR@dir,c
  2483  001A7A  0E00               	movlw	0
  2484  001A7C  EC7A  F00E         	call	_setIODIR
  2485                           
  2486                           ;lcd.c: 139: setGPIO(0x00,0x00);
  2487  001A80  0E00               	movlw	0
  2488  001A82  6E3A               	movwf	setGPIO@value,c
  2489  001A84  0E00               	movlw	0
  2490  001A86  EC89  F00E         	call	_setGPIO
  2491                           
  2492                           ;lcd.c: 142: lcdCommand(0b00111111);
  2493  001A8A  0E3F               	movlw	63
  2494  001A8C  EC2A  F00E         	call	_lcdCommand
  2495                           
  2496                           ;lcd.c: 145: lcdCommand(0b00001100);
  2497  001A90  0E0C               	movlw	12
  2498  001A92  EC2A  F00E         	call	_lcdCommand
  2499                           
  2500                           ;lcd.c: 148: lcdCommand(0b00000001);
  2501  001A96  0E01               	movlw	1
  2502  001A98  EC2A  F00E         	call	_lcdCommand
  2503                           
  2504                           ;lcd.c: 151: lcdCommand(0b00000110);
  2505  001A9C  0E06               	movlw	6
  2506  001A9E  EC2A  F00E         	call	_lcdCommand
  2507                           
  2508                           ;lcd.c: 154: LcdWriteString("LCD init ...");
  2509  001AA2  0EAF               	movlw	low STR_22
  2510  001AA4  6E3D               	movwf	LcdWriteString@s,c
  2511  001AA6  0E10               	movlw	high STR_22
  2512  001AA8  6E3E               	movwf	LcdWriteString@s+1,c
  2513  001AAA  ECB6  F00C         	call	_LcdWriteString	;wreg free
  2514                           
  2515                           ;lcd.c: 158: LcdClear();
  2516  001AAE  ECE2  F00E         	call	_LcdClear	;wreg free
  2517  001AB2  0012               	return		;funcret
  2518  001AB4                     __end_of_LcdInit:
  2519                           	opt stack 0
  2520                           prodh	equ	0xFF4
  2521                           prodl	equ	0xFF3
  2522                           intcon	equ	0xFF2
  2523                           postinc0	equ	0xFEE
  2524                           wreg	equ	0xFE8
  2525                           status	equ	0xFD8
  2526                           
  2527 ;; *************** function _setIODIR *****************
  2528 ;; Defined at:
  2529 ;;		line 81 in file "lcd.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;  address         1    wreg     unsigned char 
  2532 ;;  dir             1   17[COMRAM] unsigned char 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  address         1   18[COMRAM] unsigned char 
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      void 
  2537 ;; Registers used:
  2538 ;;		wreg, status,2, cstack
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2544 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;Total ram usage:        2 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    2
  2551 ;; This function calls:
  2552 ;;		_SWSPIClearCS
  2553 ;;		_SWSPISetCS
  2554 ;;		_SWSPIWrite
  2555 ;; This function is called by:
  2556 ;;		_LcdInit
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text20
  2561  001CF4                     __ptext20:
  2562                           	opt stack 0
  2563  001CF4                     _setIODIR:
  2564                           	opt stack 26
  2565                           
  2566                           ;incstack = 0
  2567                           ;setIODIR@address stored from wreg
  2568  001CF4  6E3B               	movwf	setIODIR@address,c
  2569                           
  2570                           ;lcd.c: 84: SWSPIClearCS();
  2571  001CF6  ECF6  F00E         	call	_SWSPIClearCS	;wreg free
  2572                           
  2573                           ;lcd.c: 85: SWSPIWrite(0x40);
  2574  001CFA  0E40               	movlw	64
  2575  001CFC  ECD8  F00E         	call	_SWSPIWrite
  2576                           
  2577                           ;lcd.c: 86: SWSPIWrite(address);
  2578  001D00  503B               	movf	setIODIR@address,w,c
  2579  001D02  ECD8  F00E         	call	_SWSPIWrite
  2580                           
  2581                           ;lcd.c: 87: SWSPIWrite(dir);
  2582  001D06  503A               	movf	setIODIR@dir,w,c
  2583  001D08  ECD8  F00E         	call	_SWSPIWrite
  2584                           
  2585                           ;lcd.c: 88: SWSPISetCS();
  2586  001D0C  ECF4  F00E         	call	_SWSPISetCS	;wreg free
  2587  001D10  0012               	return		;funcret
  2588  001D12                     __end_of_setIODIR:
  2589                           	opt stack 0
  2590                           prodh	equ	0xFF4
  2591                           prodl	equ	0xFF3
  2592                           intcon	equ	0xFF2
  2593                           postinc0	equ	0xFEE
  2594                           wreg	equ	0xFE8
  2595                           status	equ	0xFD8
  2596                           
  2597 ;; *************** function _SWSPIOpen *****************
  2598 ;; Defined at:
  2599 ;;		line 15 in file "swspi.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;		None
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;		None
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		None
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;Total ram usage:        0 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:    1
  2620 ;; This function calls:
  2621 ;;		Nothing
  2622 ;; This function is called by:
  2623 ;;		_LcdInit
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text21
  2628  001D88                     __ptext21:
  2629                           	opt stack 0
  2630  001D88                     _SWSPIOpen:
  2631                           	opt stack 27
  2632                           
  2633                           ;swspi.c: 17: PORTAbits.RA2 = 1;
  2634                           
  2635                           ;incstack = 0
  2636  001D88  8480               	bsf	3968,2,c	;volatile
  2637                           
  2638                           ;swspi.c: 18: PORTCbits.RC4 = 1;
  2639  001D8A  8882               	bsf	3970,4,c	;volatile
  2640                           
  2641                           ;swspi.c: 40: TRISAbits.TRISA2 = 0;
  2642  001D8C  9492               	bcf	3986,2,c	;volatile
  2643                           
  2644                           ;swspi.c: 41: TRISCbits.TRISC4 = 1;
  2645  001D8E  8894               	bsf	3988,4,c	;volatile
  2646                           
  2647                           ;swspi.c: 42: TRISCbits.TRISC5 = 0;
  2648  001D90  9A94               	bcf	3988,5,c	;volatile
  2649                           
  2650                           ;swspi.c: 43: TRISCbits.TRISC3 = 0;
  2651  001D92  9694               	bcf	3988,3,c	;volatile
  2652  001D94  0012               	return		;funcret
  2653  001D96                     __end_of_SWSPIOpen:
  2654                           	opt stack 0
  2655                           prodh	equ	0xFF4
  2656                           prodl	equ	0xFF3
  2657                           intcon	equ	0xFF2
  2658                           postinc0	equ	0xFEE
  2659                           wreg	equ	0xFE8
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _LcdWriteString *****************
  2663 ;; Defined at:
  2664 ;;		line 202 in file "lcd.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  s               2   20[COMRAM] PTR const unsigned char 
  2667 ;;		 -> STR_22(13), STR_21(2), STR_17(2), STR_16(2), 
  2668 ;;		 -> STR_15(2), STR_14(2), STR_13(2), STR_12(2), 
  2669 ;;		 -> STR_10(6), STR_9(6), STR_8(6), STR_7(6), 
  2670 ;;		 -> STR_6(6), STR_5(5), STR_4(5), STR_3(5), 
  2671 ;;		 -> msg(20), LcdLines(144), 
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;		None
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      void 
  2676 ;; Registers used:
  2677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2683 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;Total ram usage:        2 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    4
  2690 ;; This function calls:
  2691 ;;		_LcdChar
  2692 ;; This function is called by:
  2693 ;;		_setLcd
  2694 ;;		_main
  2695 ;;		_LcdInit
  2696 ;;		_updateLcd
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text22
  2701  00196C                     __ptext22:
  2702                           	opt stack 0
  2703  00196C                     _LcdWriteString:
  2704                           	opt stack 24
  2705                           
  2706                           ;lcd.c: 204: while(*s)
  2707                           
  2708                           ;incstack = 0
  2709  00196C  D015               	goto	l1763
  2710  00196E                     l1759:
  2711                           
  2712                           ;lcd.c: 205: {
  2713                           ;lcd.c: 206: LcdChar(*s++);
  2714  00196E  C03D  FFF6         	movff	LcdWriteString@s,tblptrl
  2715  001972  C03E  FFF7         	movff	LcdWriteString@s+1,tblptrh
  2716  001976  0E00               	movlw	low (__smallconst shr (0+16))
  2717  001978  6EF8               	movwf	tblptru,c
  2718  00197A  0E0F               	movlw	(high __ramtop+-1)
  2719  00197C  64F7               	cpfsgt	tblptrh,c
  2720  00197E  D003               	bra	u897
  2721  001980  0008               	tblrd		*
  2722  001982  50F5               	movf	tablat,w,c
  2723  001984  D005               	bra	u890
  2724  001986                     u897:
  2725  001986  CFF6 FFE9          	movff	tblptrl,fsr0l
  2726  00198A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2727  00198E  50EF               	movf	indf0,w,c
  2728  001990                     u890:
  2729  001990  EC14  F00E         	call	_LcdChar
  2730  001994  4A3D               	infsnz	LcdWriteString@s,f,c
  2731  001996  2A3E               	incf	LcdWriteString@s+1,f,c
  2732  001998                     l1763:
  2733  001998  C03D  FFF6         	movff	LcdWriteString@s,tblptrl
  2734  00199C  C03E  FFF7         	movff	LcdWriteString@s+1,tblptrh
  2735  0019A0  0E00               	movlw	low (__smallconst shr (0+16))
  2736  0019A2  6EF8               	movwf	tblptru,c
  2737  0019A4  0E0F               	movlw	(high __ramtop+-1)
  2738  0019A6  64F7               	cpfsgt	tblptrh,c
  2739  0019A8  D003               	bra	u907
  2740  0019AA  0008               	tblrd		*
  2741  0019AC  50F5               	movf	tablat,w,c
  2742  0019AE  D005               	bra	u900
  2743  0019B0                     u907:
  2744  0019B0  CFF6 FFE9          	movff	tblptrl,fsr0l
  2745  0019B4  CFF7 FFEA          	movff	tblptrh,fsr0h
  2746  0019B8  50EF               	movf	indf0,w,c
  2747  0019BA                     u900:
  2748  0019BA  0900               	iorlw	0
  2749  0019BC  B4D8               	btfsc	status,2,c
  2750  0019BE  0012               	return	
  2751  0019C0  D7D6               	goto	l1759
  2752  0019C2                     __end_of_LcdWriteString:
  2753                           	opt stack 0
  2754                           tblptru	equ	0xFF8
  2755                           tblptrh	equ	0xFF7
  2756                           tblptrl	equ	0xFF6
  2757                           tablat	equ	0xFF5
  2758                           prodh	equ	0xFF4
  2759                           prodl	equ	0xFF3
  2760                           intcon	equ	0xFF2
  2761                           indf0	equ	0xFEF
  2762                           postinc0	equ	0xFEE
  2763                           fsr0h	equ	0xFEA
  2764                           fsr0l	equ	0xFE9
  2765                           wreg	equ	0xFE8
  2766                           status	equ	0xFD8
  2767                           
  2768 ;; *************** function _LcdChar *****************
  2769 ;; Defined at:
  2770 ;;		line 186 in file "lcd.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  letter          1    wreg     unsigned char 
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;  letter          1   19[COMRAM] unsigned char 
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  1    wreg      void 
  2777 ;; Registers used:
  2778 ;;		wreg, status,2, cstack
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;Total ram usage:        1 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    3
  2791 ;; This function calls:
  2792 ;;		_setGPIO
  2793 ;; This function is called by:
  2794 ;;		_LcdWriteString
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text23
  2799  001C28                     __ptext23:
  2800                           	opt stack 0
  2801  001C28                     _LcdChar:
  2802                           	opt stack 24
  2803                           
  2804                           ;incstack = 0
  2805                           ;LcdChar@letter stored from wreg
  2806  001C28  6E3C               	movwf	LcdChar@letter,c
  2807                           
  2808                           ;lcd.c: 188: setGPIO(0x12,0x80);
  2809  001C2A  0E80               	movlw	128
  2810  001C2C  6E3A               	movwf	setGPIO@value,c
  2811  001C2E  0E12               	movlw	18
  2812  001C30  EC89  F00E         	call	_setGPIO
  2813                           
  2814                           ;lcd.c: 190: setGPIO(0x13,letter);
  2815  001C34  C03C  F03A         	movff	LcdChar@letter,setGPIO@value
  2816  001C38  0E13               	movlw	19
  2817  001C3A  EC89  F00E         	call	_setGPIO
  2818                           
  2819                           ;lcd.c: 192: setGPIO(0x12, 0xc0);
  2820  001C3E  0EC0               	movlw	192
  2821  001C40  6E3A               	movwf	setGPIO@value,c
  2822  001C42  0E12               	movlw	18
  2823  001C44  EC89  F00E         	call	_setGPIO
  2824                           
  2825                           ;lcd.c: 194: setGPIO(0x12,0x00);
  2826  001C48  0E00               	movlw	0
  2827  001C4A  6E3A               	movwf	setGPIO@value,c
  2828  001C4C  0E12               	movlw	18
  2829  001C4E  EC89  F00E         	call	_setGPIO
  2830  001C52  0012               	return		;funcret
  2831  001C54                     __end_of_LcdChar:
  2832                           	opt stack 0
  2833                           tblptru	equ	0xFF8
  2834                           tblptrh	equ	0xFF7
  2835                           tblptrl	equ	0xFF6
  2836                           tablat	equ	0xFF5
  2837                           prodh	equ	0xFF4
  2838                           prodl	equ	0xFF3
  2839                           intcon	equ	0xFF2
  2840                           indf0	equ	0xFEF
  2841                           postinc0	equ	0xFEE
  2842                           fsr0h	equ	0xFEA
  2843                           fsr0l	equ	0xFE9
  2844                           wreg	equ	0xFE8
  2845                           status	equ	0xFD8
  2846                           
  2847 ;; *************** function _LcdClear *****************
  2848 ;; Defined at:
  2849 ;;		line 166 in file "lcd.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2, cstack
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;Total ram usage:        0 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    4
  2870 ;; This function calls:
  2871 ;;		_lcdCommand
  2872 ;; This function is called by:
  2873 ;;		_setLcd
  2874 ;;		_main
  2875 ;;		_LcdInit
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text24
  2880  001DC4                     __ptext24:
  2881                           	opt stack 0
  2882  001DC4                     _LcdClear:
  2883                           	opt stack 24
  2884                           
  2885                           ;lcd.c: 169: lcdCommand(0x01);
  2886                           
  2887                           ;incstack = 0
  2888  001DC4  0E01               	movlw	1
  2889  001DC6  EC2A  F00E         	call	_lcdCommand
  2890  001DCA  0012               	return		;funcret
  2891  001DCC                     __end_of_LcdClear:
  2892                           	opt stack 0
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           prodh	equ	0xFF4
  2898                           prodl	equ	0xFF3
  2899                           intcon	equ	0xFF2
  2900                           indf0	equ	0xFEF
  2901                           postinc0	equ	0xFEE
  2902                           fsr0h	equ	0xFEA
  2903                           fsr0l	equ	0xFE9
  2904                           wreg	equ	0xFE8
  2905                           status	equ	0xFD8
  2906                           
  2907 ;; *************** function _lcdCommand *****************
  2908 ;; Defined at:
  2909 ;;		line 102 in file "lcd.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;  command         1    wreg     unsigned char 
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  command         1   19[COMRAM] unsigned char 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;Total ram usage:        1 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    3
  2930 ;; This function calls:
  2931 ;;		_setGPIO
  2932 ;; This function is called by:
  2933 ;;		_LcdInit
  2934 ;;		_LcdClear
  2935 ;;		_LcdGoTo
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text25
  2940  001C54                     __ptext25:
  2941                           	opt stack 0
  2942  001C54                     _lcdCommand:
  2943                           	opt stack 24
  2944                           
  2945                           ;incstack = 0
  2946                           ;lcdCommand@command stored from wreg
  2947  001C54  6E3C               	movwf	lcdCommand@command,c
  2948                           
  2949                           ;lcd.c: 104: setGPIO(0x12,0x00);
  2950  001C56  0E00               	movlw	0
  2951  001C58  6E3A               	movwf	setGPIO@value,c
  2952  001C5A  0E12               	movlw	18
  2953  001C5C  EC89  F00E         	call	_setGPIO
  2954                           
  2955                           ;lcd.c: 106: setGPIO(0x13, command);
  2956  001C60  C03C  F03A         	movff	lcdCommand@command,setGPIO@value
  2957  001C64  0E13               	movlw	19
  2958  001C66  EC89  F00E         	call	_setGPIO
  2959                           
  2960                           ;lcd.c: 108: setGPIO(0x12,0x40);
  2961  001C6A  0E40               	movlw	64
  2962  001C6C  6E3A               	movwf	setGPIO@value,c
  2963  001C6E  0E12               	movlw	18
  2964  001C70  EC89  F00E         	call	_setGPIO
  2965                           
  2966                           ;lcd.c: 110: setGPIO(0x12,0x00);
  2967  001C74  0E00               	movlw	0
  2968  001C76  6E3A               	movwf	setGPIO@value,c
  2969  001C78  0E12               	movlw	18
  2970  001C7A  EC89  F00E         	call	_setGPIO
  2971  001C7E  0012               	return		;funcret
  2972  001C80                     __end_of_lcdCommand:
  2973                           	opt stack 0
  2974                           tblptru	equ	0xFF8
  2975                           tblptrh	equ	0xFF7
  2976                           tblptrl	equ	0xFF6
  2977                           tablat	equ	0xFF5
  2978                           prodh	equ	0xFF4
  2979                           prodl	equ	0xFF3
  2980                           intcon	equ	0xFF2
  2981                           indf0	equ	0xFEF
  2982                           postinc0	equ	0xFEE
  2983                           fsr0h	equ	0xFEA
  2984                           fsr0l	equ	0xFE9
  2985                           wreg	equ	0xFE8
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function _setGPIO *****************
  2989 ;; Defined at:
  2990 ;;		line 55 in file "lcd.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  address         1    wreg     unsigned char 
  2993 ;;  value           1   17[COMRAM] unsigned char 
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;  address         1   18[COMRAM] unsigned char 
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      void 
  2998 ;; Registers used:
  2999 ;;		wreg, status,2, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3005 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;Total ram usage:        2 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    2
  3012 ;; This function calls:
  3013 ;;		_SWSPIClearCS
  3014 ;;		_SWSPISetCS
  3015 ;;		_SWSPIWrite
  3016 ;; This function is called by:
  3017 ;;		_lcdCommand
  3018 ;;		_LcdInit
  3019 ;;		_LcdChar
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text26
  3024  001D12                     __ptext26:
  3025                           	opt stack 0
  3026  001D12                     _setGPIO:
  3027                           	opt stack 24
  3028                           
  3029                           ;incstack = 0
  3030                           ;setGPIO@address stored from wreg
  3031  001D12  6E3B               	movwf	setGPIO@address,c
  3032                           
  3033                           ;lcd.c: 58: SWSPIClearCS();
  3034  001D14  ECF6  F00E         	call	_SWSPIClearCS	;wreg free
  3035                           
  3036                           ;lcd.c: 61: SWSPIWrite(0x40);
  3037  001D18  0E40               	movlw	64
  3038  001D1A  ECD8  F00E         	call	_SWSPIWrite
  3039                           
  3040                           ;lcd.c: 62: SWSPIWrite(address);
  3041  001D1E  503B               	movf	setGPIO@address,w,c
  3042  001D20  ECD8  F00E         	call	_SWSPIWrite
  3043                           
  3044                           ;lcd.c: 63: SWSPIWrite(value);
  3045  001D24  503A               	movf	setGPIO@value,w,c
  3046  001D26  ECD8  F00E         	call	_SWSPIWrite
  3047                           
  3048                           ;lcd.c: 64: SWSPISetCS();
  3049  001D2A  ECF4  F00E         	call	_SWSPISetCS	;wreg free
  3050  001D2E  0012               	return		;funcret
  3051  001D30                     __end_of_setGPIO:
  3052                           	opt stack 0
  3053                           tblptru	equ	0xFF8
  3054                           tblptrh	equ	0xFF7
  3055                           tblptrl	equ	0xFF6
  3056                           tablat	equ	0xFF5
  3057                           prodh	equ	0xFF4
  3058                           prodl	equ	0xFF3
  3059                           intcon	equ	0xFF2
  3060                           indf0	equ	0xFEF
  3061                           postinc0	equ	0xFEE
  3062                           fsr0h	equ	0xFEA
  3063                           fsr0l	equ	0xFE9
  3064                           wreg	equ	0xFE8
  3065                           status	equ	0xFD8
  3066                           
  3067 ;; *************** function _SWSPIWrite *****************
  3068 ;; Defined at:
  3069 ;;		line 75 in file "swspi.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  output          1    wreg     unsigned char 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  output          1   16[COMRAM] unsigned char 
  3074 ;;  BitCount        1   15[COMRAM] unsigned char 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      unsigned char 
  3077 ;; Registers used:
  3078 ;;		wreg, status,2
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;Total ram usage:        2 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    1
  3091 ;; This function calls:
  3092 ;;		Nothing
  3093 ;; This function is called by:
  3094 ;;		_setGPIO
  3095 ;;		_setIODIR
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text27
  3100  001DB0                     __ptext27:
  3101                           	opt stack 0
  3102  001DB0                     _SWSPIWrite:
  3103                           	opt stack 24
  3104                           
  3105                           ;incstack = 0
  3106                           ;SWSPIWrite@output stored from wreg
  3107  001DB0  6E39               	movwf	SWSPIWrite@output,c
  3108                           
  3109                           ;swspi.c: 77: char BitCount;
  3110                           ;swspi.c: 78: static char input;
  3111                           ;swspi.c: 80: BitCount = 8;
  3112  001DB2  0E08               	movlw	8
  3113  001DB4  6E38               	movwf	SWSPIWrite@BitCount,c
  3114                           
  3115                           ;swspi.c: 81: input = output;
  3116  001DB6  C039  F04F         	movff	SWSPIWrite@output,SWSPIWrite@input
  3117  001DBA  0012               	return	
  3118  001DBC                     __end_of_SWSPIWrite:
  3119                           	opt stack 0
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           intcon	equ	0xFF2
  3127                           indf0	equ	0xFEF
  3128                           postinc0	equ	0xFEE
  3129                           fsr0h	equ	0xFEA
  3130                           fsr0l	equ	0xFE9
  3131                           wreg	equ	0xFE8
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _SWSPISetCS *****************
  3135 ;; Defined at:
  3136 ;;		line 53 in file "swspi.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;		None
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;		None
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		None
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;Total ram usage:        0 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    1
  3157 ;; This function calls:
  3158 ;;		Nothing
  3159 ;; This function is called by:
  3160 ;;		_setGPIO
  3161 ;;		_setIODIR
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text28
  3166  001DE8                     __ptext28:
  3167                           	opt stack 0
  3168  001DE8                     _SWSPISetCS:
  3169                           	opt stack 24
  3170                           
  3171                           ;swspi.c: 55: PORTAbits.RA2 = 1;
  3172                           
  3173                           ;incstack = 0
  3174  001DE8  8480               	bsf	3968,2,c	;volatile
  3175  001DEA  0012               	return		;funcret
  3176  001DEC                     __end_of_SWSPISetCS:
  3177                           	opt stack 0
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           prodh	equ	0xFF4
  3183                           prodl	equ	0xFF3
  3184                           intcon	equ	0xFF2
  3185                           indf0	equ	0xFEF
  3186                           postinc0	equ	0xFEE
  3187                           fsr0h	equ	0xFEA
  3188                           fsr0l	equ	0xFE9
  3189                           wreg	equ	0xFE8
  3190                           status	equ	0xFD8
  3191                           
  3192 ;; *************** function _SWSPIClearCS *****************
  3193 ;; Defined at:
  3194 ;;		line 64 in file "swspi.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;		None
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;		None
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		None
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;Total ram usage:        0 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    1
  3215 ;; This function calls:
  3216 ;;		Nothing
  3217 ;; This function is called by:
  3218 ;;		_setGPIO
  3219 ;;		_setIODIR
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           	psect	text29
  3224  001DEC                     __ptext29:
  3225                           	opt stack 0
  3226  001DEC                     _SWSPIClearCS:
  3227                           	opt stack 24
  3228                           
  3229                           ;swspi.c: 66: PORTAbits.RA2 = 0;
  3230                           
  3231                           ;incstack = 0
  3232  001DEC  9480               	bcf	3968,2,c	;volatile
  3233  001DEE  0012               	return		;funcret
  3234  001DF0                     __end_of_SWSPIClearCS:
  3235                           	opt stack 0
  3236                           tblptru	equ	0xFF8
  3237                           tblptrh	equ	0xFF7
  3238                           tblptrl	equ	0xFF6
  3239                           tablat	equ	0xFF5
  3240                           prodh	equ	0xFF4
  3241                           prodl	equ	0xFF3
  3242                           intcon	equ	0xFF2
  3243                           indf0	equ	0xFEF
  3244                           postinc0	equ	0xFEE
  3245                           fsr0h	equ	0xFEA
  3246                           fsr0l	equ	0xFE9
  3247                           wreg	equ	0xFE8
  3248                           status	equ	0xFD8
  3249                           
  3250 ;; *************** function _checkInputs *****************
  3251 ;; Defined at:
  3252 ;;		line 319 in file "clima.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;		None
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  adcVal          2   12[BANK0 ] unsigned int 
  3257 ;;  leftButton      1   14[BANK0 ] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      void 
  3260 ;; Registers used:
  3261 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3269 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3270 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3271 ;;Total ram usage:        6 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    3
  3274 ;; This function calls:
  3275 ;;		_ADCRead
  3276 ;;		_UART_puts
  3277 ;;		___lwdiv
  3278 ;;		___wmul
  3279 ;;		_sprintf
  3280 ;; This function is called by:
  3281 ;;		_main
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text30
  3286  0015F2                     __ptext30:
  3287                           	opt stack 0
  3288  0015F2                     _checkInputs:
  3289                           	opt stack 27
  3290                           
  3291                           ;clima.c: 321: unsigned int adcVal = 0;
  3292                           
  3293                           ;incstack = 0
  3294  0015F2  0E00               	movlw	0
  3295  0015F4  0100               	movlb	0	; () banked
  3296  0015F6  6F6D               	movwf	(checkInputs@adcVal+1)& (0+255),b
  3297  0015F8  0E00               	movlw	0
  3298  0015FA  6F6C               	movwf	checkInputs@adcVal& (0+255),b
  3299                           
  3300                           ;clima.c: 322: byte leftButton = 0;
  3301  0015FC  0E00               	movlw	0
  3302  0015FE  0100               	movlb	0	; () banked
  3303  001600  6F6E               	movwf	checkInputs@leftButton& (0+255),b
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;clima.c: 324: static byte leftButton_old = 0;
  3307                           ;clima.c: 327: leftButton = PORTBbits.RB0;
  3308  001602  0E00               	movlw	0
  3309  001604  B081               	btfsc	3969,0,c	;volatile
  3310  001606  0E01               	movlw	1
  3311  001608  0100               	movlb	0	; () banked
  3312  00160A  6F6E               	movwf	checkInputs@leftButton& (0+255),b
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;clima.c: 328: if ( (leftButton == 0)
  3316                           ;clima.c: 329: && (leftButton != leftButton_old)
  3317                           ;clima.c: 330: )
  3318  00160C  0100               	movlb	0	; () banked
  3319  00160E  516E               	movf	checkInputs@leftButton& (0+255),w,b
  3320  001610  0100               	movlb	0	; () banked
  3321  001612  A4D8               	btfss	status,2,c
  3322  001614  D007               	goto	l2489
  3323                           
  3324                           ; BSR set to: 0
  3325  001616  5006               	movf	checkInputs@leftButton_old,w,c
  3326  001618  0100               	movlb	0	; () banked
  3327  00161A  196E               	xorwf	checkInputs@leftButton& (0+255),w,b
  3328  00161C  B4D8               	btfsc	status,2,c
  3329  00161E  D002               	goto	l2489
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;clima.c: 331: {
  3333                           ;clima.c: 332: leftButtonEv = 1;
  3334  001620  0E01               	movlw	1
  3335  001622  6E0C               	movwf	_leftButtonEv,c
  3336  001624                     l2489:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;clima.c: 333: }
  3340                           ;clima.c: 334: leftButton_old = leftButton;
  3341  001624  C06E  F006         	movff	checkInputs@leftButton,checkInputs@leftButton_old
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;clima.c: 344: adcVal = ADCRead(0);
  3345  001628  0E00               	movlw	0
  3346  00162A  ECF7  F00D         	call	_ADCRead
  3347  00162E  C038  F06C         	movff	?_ADCRead,checkInputs@adcVal
  3348  001632  C039  F06D         	movff	?_ADCRead+1,checkInputs@adcVal+1
  3349                           
  3350                           ;clima.c: 345: setTemp = adcVal/64 + 21;
  3351  001636  C06C  F069         	movff	checkInputs@adcVal,??_checkInputs
  3352  00163A  C06D  F06A         	movff	checkInputs@adcVal+1,??_checkInputs+1
  3353  00163E  0E06               	movlw	6
  3354  001640  0100               	movlb	0	; () banked
  3355  001642  6F6B               	movwf	(??_checkInputs+2)& (0+255),b
  3356  001644                     u1945:
  3357  001644  0100               	movlb	0	; () banked
  3358  001646  90D8               	bcf	status,0,c
  3359  001648  336A               	rrcf	(??_checkInputs+1)& (0+255),f,b
  3360  00164A  3369               	rrcf	??_checkInputs& (0+255),f,b
  3361  00164C  0100               	movlb	0	; () banked
  3362  00164E  2F6B               	decfsz	(??_checkInputs+2)& (0+255),f,b
  3363  001650  D7F9               	goto	u1945
  3364  001652  0100               	movlb	0	; () banked
  3365  001654  5169               	movf	??_checkInputs& (0+255),w,b
  3366  001656  0F15               	addlw	21
  3367  001658  6E0B               	movwf	_setTemp,c
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;clima.c: 348: if (inDeb == 0)
  3371  00165A  5007               	movf	_inDeb,w,c
  3372  00165C  A4D8               	btfss	status,2,c
  3373  00165E  D044               	goto	l2511
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;clima.c: 349: {
  3377                           ;clima.c: 359: adcVal = ADCRead(1);
  3378  001660  0E01               	movlw	1
  3379  001662  ECF7  F00D         	call	_ADCRead
  3380  001666  C038  F06C         	movff	?_ADCRead,checkInputs@adcVal
  3381  00166A  C039  F06D         	movff	?_ADCRead+1,checkInputs@adcVal+1
  3382                           
  3383                           ;clima.c: 360: outTemp = (adcVal*5 - (400))/(19);
  3384  00166E  C06C  F03F         	movff	checkInputs@adcVal,___wmul@multiplier
  3385  001672  C06D  F040         	movff	checkInputs@adcVal+1,___wmul@multiplier+1
  3386  001676  0E00               	movlw	0
  3387  001678  6E42               	movwf	___wmul@multiplicand+1,c
  3388  00167A  0E05               	movlw	5
  3389  00167C  6E41               	movwf	___wmul@multiplicand,c
  3390  00167E  EC55  F00E         	call	___wmul	;wreg free
  3391  001682  0E70               	movlw	112
  3392  001684  243F               	addwf	?___wmul,w,c
  3393  001686  6E38               	movwf	___lwdiv@dividend,c
  3394  001688  0EFE               	movlw	254
  3395  00168A  2040               	addwfc	?___wmul+1,w,c
  3396  00168C  6E39               	movwf	___lwdiv@dividend+1,c
  3397  00168E  0E00               	movlw	0
  3398  001690  6E3B               	movwf	___lwdiv@divisor+1,c
  3399  001692  0E13               	movlw	19
  3400  001694  6E3A               	movwf	___lwdiv@divisor,c
  3401  001696  EC0B  F00D         	call	___lwdiv	;wreg free
  3402  00169A  C038  F001         	movff	?___lwdiv,_outTemp
  3403  00169E  C039  F002         	movff	?___lwdiv+1,_outTemp+1
  3404                           
  3405                           ;clima.c: 361: UART_puts((char *)"-> Temperature out:");
  3406  0016A2  0E9B               	movlw	low STR_18
  3407  0016A4  6E39               	movwf	UART_puts@s,c
  3408  0016A6  0E10               	movlw	high STR_18
  3409  0016A8  6E3A               	movwf	UART_puts@s+1,c
  3410  0016AA  ECE1  F00C         	call	_UART_puts	;wreg free
  3411                           
  3412                           ;clima.c: 362: sprintf(msg, "%d", outTemp);
  3413  0016AE  0E15               	movlw	low _msg
  3414  0016B0  6E45               	movwf	sprintf@sp,c
  3415  0016B2  0E00               	movlw	high _msg
  3416  0016B4  6E46               	movwf	sprintf@sp+1,c
  3417  0016B6  0EF1               	movlw	low STR_11
  3418  0016B8  6E47               	movwf	sprintf@f,c
  3419  0016BA  0E10               	movlw	high STR_11
  3420  0016BC  6E48               	movwf	sprintf@f+1,c
  3421  0016BE  C001  F049         	movff	_outTemp,?_sprintf+4
  3422  0016C2  C002  F04A         	movff	_outTemp+1,?_sprintf+5
  3423  0016C6  EC7E  F008         	call	_sprintf	;wreg free
  3424                           
  3425                           ;clima.c: 363: UART_puts((char *)msg);
  3426  0016CA  0E15               	movlw	low _msg
  3427  0016CC  6E39               	movwf	UART_puts@s,c
  3428  0016CE  0E00               	movlw	high _msg
  3429  0016D0  6E3A               	movwf	UART_puts@s+1,c
  3430  0016D2  ECE1  F00C         	call	_UART_puts	;wreg free
  3431                           
  3432                           ;clima.c: 364: UART_puts((char *)"\n\r");
  3433  0016D6  0EEE               	movlw	low STR_20
  3434  0016D8  6E39               	movwf	UART_puts@s,c
  3435  0016DA  0E10               	movlw	high STR_20
  3436  0016DC  6E3A               	movwf	UART_puts@s+1,c
  3437  0016DE  ECE1  F00C         	call	_UART_puts	;wreg free
  3438                           
  3439                           ;clima.c: 385: inDeb = ((3000)/(100));
  3440  0016E2  0E1E               	movlw	30
  3441  0016E4  6E07               	movwf	_inDeb,c
  3442                           
  3443                           ;clima.c: 386: }
  3444  0016E6  0012               	return	
  3445  0016E8                     l2511:
  3446                           
  3447                           ;clima.c: 387: else
  3448                           ;clima.c: 388: {
  3449                           ;clima.c: 389: inDeb--;
  3450  0016E8  0607               	decf	_inDeb,f,c
  3451  0016EA  0012               	return	
  3452  0016EC                     __end_of_checkInputs:
  3453                           	opt stack 0
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           intcon	equ	0xFF2
  3461                           indf0	equ	0xFEF
  3462                           postinc0	equ	0xFEE
  3463                           fsr0h	equ	0xFEA
  3464                           fsr0l	equ	0xFE9
  3465                           wreg	equ	0xFE8
  3466                           status	equ	0xFD8
  3467                           
  3468 ;; *************** function _sprintf *****************
  3469 ;; Defined at:
  3470 ;;		line 492 in file "D:\Hella\Compiler\sources\common\doprnt.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  sp              2   28[COMRAM] PTR unsigned char 
  3473 ;;		 -> msg(20), 
  3474 ;;  f               2   30[COMRAM] PTR const unsigned char 
  3475 ;;		 -> STR_19(3), STR_11(3), STR_2(5), STR_1(5), 
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;  tmpval          4    0        struct .
  3478 ;;  cp              3    0        PTR const unsigned char 
  3479 ;;  width           2    6[BANK0 ] int 
  3480 ;;  val             2    3[BANK0 ] unsigned int 
  3481 ;;  ap              2    0[BANK0 ] PTR void [1]
  3482 ;;		 -> ?_sprintf(2), 
  3483 ;;  len             2    0        unsigned int 
  3484 ;;  c               1    8[BANK0 ] char 
  3485 ;;  flag            1    5[BANK0 ] unsigned char 
  3486 ;;  prec            1    2[BANK0 ] char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  2   28[COMRAM] int 
  3489 ;; Registers used:
  3490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3496 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Totals:        10       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;Total ram usage:       19 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    2
  3503 ;; This function calls:
  3504 ;;		___lwdiv
  3505 ;;		___lwmod
  3506 ;;		___wmul
  3507 ;;		_isdigit
  3508 ;; This function is called by:
  3509 ;;		_checkInputs
  3510 ;;		_updateLcd
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           	psect	text31
  3515  0010FC                     __ptext31:
  3516                           	opt stack 0
  3517  0010FC                     _sprintf:
  3518                           	opt stack 27
  3519                           
  3520                           ;doprnt.c: 494: va_list ap;
  3521                           ;doprnt.c: 499: signed char c;
  3522                           ;doprnt.c: 501: int width;
  3523                           ;doprnt.c: 506: signed char prec;
  3524                           ;doprnt.c: 508: unsigned char flag;
  3525                           ;doprnt.c: 523: union {
  3526                           ;doprnt.c: 524: unsigned long vd;
  3527                           ;doprnt.c: 525: double integ;
  3528                           ;doprnt.c: 526: } tmpval;
  3529                           ;doprnt.c: 528: unsigned int val;
  3530                           ;doprnt.c: 529: unsigned len;
  3531                           ;doprnt.c: 530: const char * cp;
  3532                           ;doprnt.c: 533: *ap = __va_start();
  3533                           
  3534                           ;incstack = 0
  3535  0010FC  0E49               	movlw	low (?_sprintf+4)
  3536  0010FE  0100               	movlb	0	; () banked
  3537  001100  6F60               	movwf	sprintf@ap& (0+255),b
  3538  001102  0E00               	movlw	high (?_sprintf+4)
  3539  001104  0100               	movlb	0	; () banked
  3540  001106  6F61               	movwf	(sprintf@ap+1)& (0+255),b
  3541                           
  3542                           ;doprnt.c: 536: while(c = *f++) {
  3543  001108  D16A               	goto	l2455
  3544  00110A                     l2349:
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;doprnt.c: 538: if(c != '%')
  3548  00110A  0E25               	movlw	37
  3549  00110C  0100               	movlb	0	; () banked
  3550  00110E  1968               	xorwf	sprintf@c& (0+255),w,b
  3551  001110  B4D8               	btfsc	status,2,c
  3552  001112  D009               	goto	l2355
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;doprnt.c: 540: {
  3556                           ;doprnt.c: 541: ((*sp++ = (c)));
  3557  001114  C045  FFD9         	movff	sprintf@sp,fsr2l
  3558  001118  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  3559  00111C  C068  FFDF         	movff	sprintf@c,indf2
  3560                           
  3561                           ; BSR set to: 0
  3562  001120  4A45               	infsnz	sprintf@sp,f,c
  3563  001122  2A46               	incf	sprintf@sp+1,f,c
  3564                           
  3565                           ;doprnt.c: 542: continue;
  3566  001124  D15C               	goto	l2455
  3567  001126                     l2355:
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;doprnt.c: 543: }
  3571                           ;doprnt.c: 546: width = 0;
  3572  001126  0E00               	movlw	0
  3573  001128  0100               	movlb	0	; () banked
  3574  00112A  6F67               	movwf	(sprintf@width+1)& (0+255),b
  3575  00112C  0E00               	movlw	0
  3576  00112E  6F66               	movwf	sprintf@width& (0+255),b
  3577                           
  3578                           ;doprnt.c: 548: flag = 0;
  3579  001130  0E00               	movlw	0
  3580  001132  0100               	movlb	0	; () banked
  3581  001134  6F65               	movwf	sprintf@flag& (0+255),b
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;doprnt.c: 551: switch(*f) {
  3585                           
  3586                           ;doprnt.c: 550: for(;;) {
  3587  001136  D004               	goto	l2361
  3588  001138                     l2357:
  3589                           
  3590                           ;doprnt.c: 580: flag |= 0x04;
  3591  001138  0100               	movlb	0	; () banked
  3592  00113A  8565               	bsf	sprintf@flag& (0+255),2,b
  3593                           
  3594                           ;doprnt.c: 581: f++;
  3595  00113C  4A47               	infsnz	sprintf@f,f,c
  3596  00113E  2A48               	incf	sprintf@f+1,f,c
  3597  001140                     l2361:
  3598  001140  C047  FFF6         	movff	sprintf@f,tblptrl
  3599  001144  C048  FFF7         	movff	sprintf@f+1,tblptrh
  3600  001148                     	if	0	;tblptru may be non-zero
  3601  001148                     	endif
  3602  001148                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3603  001148  0E00               	movlw	low (__mediumconst shr (0+16))
  3604  00114A  6EF8               	movwf	tblptru,c
  3605  00114C                     	endif
  3606  00114C  0008               	tblrd		*
  3607  00114E  50F5               	movf	tablat,w,c
  3608                           
  3609                           ; Switch size 1, requested type "space"
  3610                           ; Number of cases is 1, Range of values is 48 to 48
  3611                           ; switch strategies available:
  3612                           ; Name         Instructions Cycles
  3613                           ; simple_byte            4     3 (average)
  3614                           ;	Chosen strategy is simple_byte
  3615  001150  0A30               	xorlw	48	; case 48
  3616  001152  B4D8               	btfsc	status,2,c
  3617  001154  D7F1               	goto	l2357
  3618                           
  3619                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3620                           
  3621                           ;doprnt.c: 586: }
  3622                           
  3623                           ;doprnt.c: 585: break;
  3624  001156  C047  FFF6         	movff	sprintf@f,tblptrl
  3625  00115A  C048  FFF7         	movff	sprintf@f+1,tblptrh
  3626  00115E                     	if	0	;tblptru may be non-zero
  3627  00115E                     	endif
  3628  00115E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3629  00115E  0E00               	movlw	low (__mediumconst shr (0+16))
  3630  001160  6EF8               	movwf	tblptru,c
  3631  001162                     	endif
  3632  001162  0008               	tblrd		*
  3633  001164  50F5               	movf	tablat,w,c
  3634  001166  EC98  F00E         	call	_isdigit
  3635  00116A  A0D8               	btfss	status,0,c
  3636  00116C  D039               	goto	l2377
  3637                           
  3638                           ;doprnt.c: 598: width = 0;
  3639  00116E  0E00               	movlw	0
  3640  001170  0100               	movlb	0	; () banked
  3641  001172  6F67               	movwf	(sprintf@width+1)& (0+255),b
  3642  001174  0E00               	movlw	0
  3643  001176  6F66               	movwf	sprintf@width& (0+255),b
  3644  001178                     l2367:
  3645                           
  3646                           ;doprnt.c: 600: width *= 10;
  3647  001178  C066  F03F         	movff	sprintf@width,___wmul@multiplier
  3648  00117C  C067  F040         	movff	sprintf@width+1,___wmul@multiplier+1
  3649  001180  0E00               	movlw	0
  3650  001182  6E42               	movwf	___wmul@multiplicand+1,c
  3651  001184  0E0A               	movlw	10
  3652  001186  6E41               	movwf	___wmul@multiplicand,c
  3653  001188  EC55  F00E         	call	___wmul	;wreg free
  3654  00118C  C03F  F066         	movff	?___wmul,sprintf@width
  3655  001190  C040  F067         	movff	?___wmul+1,sprintf@width+1
  3656                           
  3657                           ;doprnt.c: 601: width += *f++ - '0';
  3658  001194  0ED0               	movlw	208
  3659  001196  6E4B               	movwf	??_sprintf& (0+255),c
  3660  001198  0EFF               	movlw	255
  3661  00119A  6E4C               	movwf	(??_sprintf+1)& (0+255),c
  3662  00119C  C047  FFF6         	movff	sprintf@f,tblptrl
  3663  0011A0  C048  FFF7         	movff	sprintf@f+1,tblptrh
  3664  0011A4                     	if	0	;tblptru may be non-zero
  3665  0011A4                     	endif
  3666  0011A4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3667  0011A4  0E00               	movlw	low (__mediumconst shr (0+16))
  3668  0011A6  6EF8               	movwf	tblptru,c
  3669  0011A8                     	endif
  3670  0011A8  0008               	tblrd		*
  3671  0011AA  50F5               	movf	tablat,w,c
  3672  0011AC  6E4D               	movwf	(??_sprintf+2)& (0+255),c
  3673  0011AE  6A4E               	clrf	(??_sprintf+3)& (0+255),c
  3674  0011B0  504B               	movf	??_sprintf,w,c
  3675  0011B2  264D               	addwf	??_sprintf+2,f,c
  3676  0011B4  504C               	movf	??_sprintf+1,w,c
  3677  0011B6  224E               	addwfc	??_sprintf+3,f,c
  3678  0011B8  504D               	movf	??_sprintf+2,w,c
  3679  0011BA  0100               	movlb	0	; () banked
  3680  0011BC  2766               	addwf	sprintf@width& (0+255),f,b
  3681  0011BE  504E               	movf	??_sprintf+3,w,c
  3682  0011C0  0100               	movlb	0	; () banked
  3683  0011C2  2367               	addwfc	(sprintf@width+1)& (0+255),f,b
  3684                           
  3685                           ; BSR set to: 0
  3686  0011C4  4A47               	infsnz	sprintf@f,f,c
  3687  0011C6  2A48               	incf	sprintf@f+1,f,c
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3691  0011C8  C047  FFF6         	movff	sprintf@f,tblptrl
  3692  0011CC  C048  FFF7         	movff	sprintf@f+1,tblptrh
  3693  0011D0                     	if	0	;tblptru may be non-zero
  3694  0011D0                     	endif
  3695  0011D0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3696  0011D0  0E00               	movlw	low (__mediumconst shr (0+16))
  3697  0011D2  6EF8               	movwf	tblptru,c
  3698  0011D4                     	endif
  3699  0011D4  0008               	tblrd		*
  3700  0011D6  50F5               	movf	tablat,w,c
  3701  0011D8  EC98  F00E         	call	_isdigit
  3702  0011DC  B0D8               	btfsc	status,0,c
  3703  0011DE  D7CC               	goto	l2367
  3704  0011E0                     l2377:
  3705  0011E0  C047  FFF6         	movff	sprintf@f,tblptrl
  3706  0011E4  C048  FFF7         	movff	sprintf@f+1,tblptrh
  3707  0011E8  4A47               	infsnz	sprintf@f,f,c
  3708  0011EA  2A48               	incf	sprintf@f+1,f,c
  3709  0011EC                     	if	0	;tblptru may be non-zero
  3710  0011EC                     	endif
  3711  0011EC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3712  0011EC  0E00               	movlw	low (__mediumconst shr (0+16))
  3713  0011EE  6EF8               	movwf	tblptru,c
  3714  0011F0                     	endif
  3715  0011F0  0008               	tblrd		*
  3716  0011F2  CFF5 F068          	movff	tablat,sprintf@c
  3717  0011F6  0100               	movlb	0	; () banked
  3718  0011F8  5168               	movf	sprintf@c& (0+255),w,b
  3719                           
  3720                           ; Switch size 1, requested type "space"
  3721                           ; Number of cases is 3, Range of values is 0 to 105
  3722                           ; switch strategies available:
  3723                           ; Name         Instructions Cycles
  3724                           ; simple_byte           10     6 (average)
  3725                           ;	Chosen strategy is simple_byte
  3726  0011FA  0A00               	xorlw	0	; case 0
  3727  0011FC  B4D8               	btfsc	status,2,c
  3728  0011FE  D0FE               	goto	l2457
  3729  001200  0A64               	xorlw	100	; case 100
  3730  001202  B4D8               	btfsc	status,2,c
  3731  001204  D003               	goto	l2379
  3732  001206  0A0D               	xorlw	13	; case 105
  3733  001208  A4D8               	btfss	status,2,c
  3734  00120A  D0E9               	goto	l2455
  3735  00120C                     l2379:
  3736                           
  3737                           ;doprnt.c: 1253: {
  3738                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3739  00120C  C060  FFD9         	movff	sprintf@ap,fsr2l
  3740  001210  C061  FFDA         	movff	sprintf@ap+1,fsr2h
  3741  001214  CFDE F063          	movff	postinc2,sprintf@val
  3742  001218  CFDD F064          	movff	postdec2,sprintf@val+1
  3743  00121C  0E02               	movlw	2
  3744  00121E  0100               	movlb	0	; () banked
  3745  001220  2760               	addwf	sprintf@ap& (0+255),f,b
  3746  001222  0E00               	movlw	0
  3747  001224  2361               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;doprnt.c: 1261: if((int)val < 0) {
  3751  001226  0100               	movlb	0	; () banked
  3752  001228  AF64               	btfss	(sprintf@val+1)& (0+255),7,b
  3753  00122A  D008               	goto	l2389
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;doprnt.c: 1262: flag |= 0x03;
  3757  00122C  0E03               	movlw	3
  3758  00122E  0100               	movlb	0	; () banked
  3759  001230  1365               	iorwf	sprintf@flag& (0+255),f,b
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;doprnt.c: 1263: val = -val;
  3763  001232  0100               	movlb	0	; () banked
  3764  001234  6D63               	negf	sprintf@val& (0+255),b
  3765  001236  1F64               	comf	(sprintf@val+1)& (0+255),f,b
  3766  001238  B0D8               	btfsc	status,0,c
  3767  00123A  2B64               	incf	(sprintf@val+1)& (0+255),f,b
  3768  00123C                     l2389:
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;doprnt.c: 1264: }
  3772                           ;doprnt.c: 1266: }
  3773                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3774  00123C  0E01               	movlw	1
  3775  00123E  0100               	movlb	0	; () banked
  3776  001240  6F68               	movwf	sprintf@c& (0+255),b
  3777  001242                     l2391:
  3778                           
  3779                           ; BSR set to: 0
  3780  001242  0E05               	movlw	5
  3781  001244  0100               	movlb	0	; () banked
  3782  001246  1968               	xorwf	sprintf@c& (0+255),w,b
  3783  001248  B4D8               	btfsc	status,2,c
  3784  00124A  D019               	goto	l2403
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;doprnt.c: 1306: if(val < dpowers[c])
  3788                           
  3789                           ; BSR set to: 0
  3790                           
  3791                           ; BSR set to: 0
  3792  00124C  0100               	movlb	0	; () banked
  3793  00124E  5168               	movf	sprintf@c& (0+255),w,b
  3794  001250  0D02               	mullw	2
  3795  001252  0E01               	movlw	low _dpowers
  3796  001254  24F3               	addwf	prodl,w,c
  3797  001256  6EF6               	movwf	tblptrl,c
  3798  001258  0E10               	movlw	high _dpowers
  3799  00125A  20F4               	addwfc	prodh,w,c
  3800  00125C  6EF7               	movwf	tblptrh,c
  3801  00125E                     	if	1	;There are 3 active tblptr bytes
  3802  00125E  6AF8               	clrf	tblptru,c
  3803  001260  0E00               	movlw	low (__mediumconst shr (0+16))
  3804  001262  22F8               	addwfc	tblptru,f,c
  3805  001264                     	endif
  3806  001264  0009               	tblrd		*+
  3807  001266  50F5               	movf	tablat,w,c
  3808  001268  0100               	movlb	0	; () banked
  3809  00126A  5D63               	subwf	sprintf@val& (0+255),w,b
  3810  00126C  0009               	tblrd		*+
  3811  00126E  50F5               	movf	tablat,w,c
  3812  001270  0100               	movlb	0	; () banked
  3813  001272  5964               	subwfb	(sprintf@val+1)& (0+255),w,b
  3814  001274  A0D8               	btfss	status,0,c
  3815  001276  D003               	goto	l2403
  3816                           
  3817                           ; BSR set to: 0
  3818                           
  3819                           ; BSR set to: 0
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;doprnt.c: 1307: break;
  3823  001278  0100               	movlb	0	; () banked
  3824  00127A  2B68               	incf	sprintf@c& (0+255),f,b
  3825  00127C  D7E2               	goto	l2391
  3826  00127E                     l2403:
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3830  00127E  0100               	movlb	0	; () banked
  3831  001280  5166               	movf	sprintf@width& (0+255),w,b
  3832  001282  0100               	movlb	0	; () banked
  3833  001284  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  3834  001286  B4D8               	btfsc	status,2,c
  3835  001288  D00A               	goto	l2409
  3836                           
  3837                           ; BSR set to: 0
  3838  00128A  C065  F04B         	movff	sprintf@flag,??_sprintf
  3839  00128E  0E03               	movlw	3
  3840  001290  164B               	andwf	??_sprintf,f,c
  3841  001292  B4D8               	btfsc	status,2,c
  3842  001294  D004               	goto	l2409
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;doprnt.c: 1346: width--;
  3846  001296  0100               	movlb	0	; () banked
  3847  001298  0766               	decf	sprintf@width& (0+255),f,b
  3848  00129A  A0D8               	btfss	status,0,c
  3849  00129C  0767               	decf	(sprintf@width+1)& (0+255),f,b
  3850  00129E                     l2409:
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;doprnt.c: 1381: if(width > c)
  3854  00129E  0E80               	movlw	128
  3855  0012A0  0100               	movlb	0	; () banked
  3856  0012A2  BF68               	btfsc	sprintf@c& (0+255),7,b
  3857  0012A4  0E7F               	movlw	127
  3858  0012A6  6E4B               	movwf	??_sprintf& (0+255),c
  3859  0012A8  0100               	movlb	0	; () banked
  3860  0012AA  5166               	movf	sprintf@width& (0+255),w,b
  3861  0012AC  0100               	movlb	0	; () banked
  3862  0012AE  5D68               	subwf	sprintf@c& (0+255),w,b
  3863  0012B0  0100               	movlb	0	; () banked
  3864  0012B2  5167               	movf	(sprintf@width+1)& (0+255),w,b
  3865  0012B4  0A80               	xorlw	128
  3866  0012B6  584B               	subwfb	??_sprintf& (0+255),w,c
  3867  0012B8  B0D8               	btfsc	status,0,c
  3868  0012BA  D00B               	goto	l2413
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;doprnt.c: 1382: width -= c;
  3872  0012BC  0100               	movlb	0	; () banked
  3873  0012BE  5168               	movf	sprintf@c& (0+255),w,b
  3874  0012C0  0100               	movlb	0	; () banked
  3875  0012C2  5F66               	subwf	sprintf@width& (0+255),f,b
  3876  0012C4  0E00               	movlw	0
  3877  0012C6  0100               	movlb	0	; () banked
  3878  0012C8  BF68               	btfsc	sprintf@c& (0+255),7,b
  3879  0012CA  0EFF               	movlw	255
  3880  0012CC  0100               	movlb	0	; () banked
  3881  0012CE  5B67               	subwfb	(sprintf@width+1)& (0+255),f,b
  3882  0012D0  D005               	goto	l2415
  3883  0012D2                     l2413:
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;doprnt.c: 1383: else
  3887                           ;doprnt.c: 1384: width = 0;
  3888  0012D2  0E00               	movlw	0
  3889  0012D4  0100               	movlb	0	; () banked
  3890  0012D6  6F67               	movwf	(sprintf@width+1)& (0+255),b
  3891  0012D8  0E00               	movlw	0
  3892  0012DA  6F66               	movwf	sprintf@width& (0+255),b
  3893  0012DC                     l2415:
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;doprnt.c: 1387: if(flag & 0x04) {
  3897  0012DC  0100               	movlb	0	; () banked
  3898  0012DE  A565               	btfss	sprintf@flag& (0+255),2,b
  3899  0012E0  D021               	goto	l2431
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;doprnt.c: 1392: if(flag & 0x03)
  3903  0012E2  C065  F04B         	movff	sprintf@flag,??_sprintf
  3904  0012E6  0E03               	movlw	3
  3905  0012E8  164B               	andwf	??_sprintf,f,c
  3906  0012EA  B4D8               	btfsc	status,2,c
  3907  0012EC  D008               	goto	l2423
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  3911  0012EE  C045  FFD9         	movff	sprintf@sp,fsr2l
  3912  0012F2  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  3913  0012F6  0E2D               	movlw	45
  3914  0012F8  6EDF               	movwf	indf2,c
  3915                           
  3916                           ; BSR set to: 0
  3917  0012FA  4A45               	infsnz	sprintf@sp,f,c
  3918  0012FC  2A46               	incf	sprintf@sp+1,f,c
  3919  0012FE                     l2423:
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;doprnt.c: 1415: if(width)
  3923  0012FE  0100               	movlb	0	; () banked
  3924  001300  5166               	movf	sprintf@width& (0+255),w,b
  3925  001302  0100               	movlb	0	; () banked
  3926  001304  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  3927  001306  B4D8               	btfsc	status,2,c
  3928  001308  D033               	goto	l2445
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3932                           
  3933                           ; BSR set to: 0
  3934                           
  3935                           ;doprnt.c: 1416: do
  3936  00130A  C045  FFD9         	movff	sprintf@sp,fsr2l
  3937  00130E  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  3938  001312  0E30               	movlw	48
  3939  001314  6EDF               	movwf	indf2,c
  3940                           
  3941                           ; BSR set to: 0
  3942  001316  4A45               	infsnz	sprintf@sp,f,c
  3943  001318  2A46               	incf	sprintf@sp+1,f,c
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;doprnt.c: 1418: while(--width);
  3947  00131A  0100               	movlb	0	; () banked
  3948  00131C  0766               	decf	sprintf@width& (0+255),f,b
  3949  00131E  A0D8               	btfss	status,0,c
  3950  001320  0767               	decf	(sprintf@width+1)& (0+255),f,b
  3951  001322  D7ED               	goto	l2423
  3952  001324                     l2431:
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;doprnt.c: 1422: {
  3956                           ;doprnt.c: 1424: if(width
  3957                           ;doprnt.c: 1428: )
  3958  001324  0100               	movlb	0	; () banked
  3959  001326  5166               	movf	sprintf@width& (0+255),w,b
  3960  001328  0100               	movlb	0	; () banked
  3961  00132A  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  3962  00132C  B4D8               	btfsc	status,2,c
  3963  00132E  D012               	goto	l2439
  3964  001330                     l2433:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3968  001330  C045  FFD9         	movff	sprintf@sp,fsr2l
  3969  001334  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  3970  001338  0E20               	movlw	32
  3971  00133A  6EDF               	movwf	indf2,c
  3972                           
  3973                           ; BSR set to: 0
  3974  00133C  4A45               	infsnz	sprintf@sp,f,c
  3975  00133E  2A46               	incf	sprintf@sp+1,f,c
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;doprnt.c: 1431: while(--width);
  3979  001340  0100               	movlb	0	; () banked
  3980  001342  0766               	decf	sprintf@width& (0+255),f,b
  3981  001344  A0D8               	btfss	status,0,c
  3982  001346  0767               	decf	(sprintf@width+1)& (0+255),f,b
  3983  001348  0100               	movlb	0	; () banked
  3984  00134A  5166               	movf	sprintf@width& (0+255),w,b
  3985  00134C  0100               	movlb	0	; () banked
  3986  00134E  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  3987  001350  A4D8               	btfss	status,2,c
  3988  001352  D7EE               	goto	l2433
  3989  001354                     l2439:
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;doprnt.c: 1438: if(flag & 0x03)
  3993  001354  C065  F04B         	movff	sprintf@flag,??_sprintf
  3994  001358  0E03               	movlw	3
  3995  00135A  164B               	andwf	??_sprintf,f,c
  3996  00135C  B4D8               	btfsc	status,2,c
  3997  00135E  D008               	goto	l2445
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4001  001360  C045  FFD9         	movff	sprintf@sp,fsr2l
  4002  001364  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  4003  001368  0E2D               	movlw	45
  4004  00136A  6EDF               	movwf	indf2,c
  4005                           
  4006                           ; BSR set to: 0
  4007  00136C  4A45               	infsnz	sprintf@sp,f,c
  4008  00136E  2A46               	incf	sprintf@sp+1,f,c
  4009  001370                     l2445:
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;doprnt.c: 1469: }
  4013                           ;doprnt.c: 1472: prec = c;
  4014  001370  C068  F062         	movff	sprintf@c,sprintf@prec
  4015                           
  4016                           ;doprnt.c: 1474: while(prec--) {
  4017  001374  D02E               	goto	l2453
  4018  001376                     l2447:
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;doprnt.c: 1478: {
  4022                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4023  001376  0100               	movlb	0	; () banked
  4024  001378  5162               	movf	sprintf@prec& (0+255),w,b
  4025  00137A  0D02               	mullw	2
  4026  00137C  0E01               	movlw	low _dpowers
  4027  00137E  24F3               	addwf	prodl,w,c
  4028  001380  6EF6               	movwf	tblptrl,c
  4029  001382  0E10               	movlw	high _dpowers
  4030  001384  20F4               	addwfc	prodh,w,c
  4031  001386  6EF7               	movwf	tblptrh,c
  4032  001388                     	if	1	;There are 3 active tblptr bytes
  4033  001388  6AF8               	clrf	tblptru,c
  4034  00138A  0E00               	movlw	low (__mediumconst shr (0+16))
  4035  00138C  22F8               	addwfc	tblptru,f,c
  4036  00138E                     	endif
  4037  00138E  0009               	tblrd		*+
  4038  001390  CFF5 F03A          	movff	tablat,___lwdiv@divisor
  4039  001394  000A               	tblrd		*-
  4040  001396  CFF5 F03B          	movff	tablat,___lwdiv@divisor+1
  4041  00139A  C063  F038         	movff	sprintf@val,___lwdiv@dividend
  4042  00139E  C064  F039         	movff	sprintf@val+1,___lwdiv@dividend+1
  4043  0013A2  EC0B  F00D         	call	___lwdiv	;wreg free
  4044  0013A6  C038  F03F         	movff	?___lwdiv,___lwmod@dividend
  4045  0013AA  C039  F040         	movff	?___lwdiv+1,___lwmod@dividend+1
  4046  0013AE  0E00               	movlw	0
  4047  0013B0  6E42               	movwf	___lwmod@divisor+1,c
  4048  0013B2  0E0A               	movlw	10
  4049  0013B4  6E41               	movwf	___lwmod@divisor,c
  4050  0013B6  EC7B  F00D         	call	___lwmod	;wreg free
  4051  0013BA  503F               	movf	?___lwmod,w,c
  4052  0013BC  0F30               	addlw	48
  4053  0013BE  0100               	movlb	0	; () banked
  4054  0013C0  6F68               	movwf	sprintf@c& (0+255),b
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;doprnt.c: 1523: }
  4058                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4059  0013C2  C045  FFD9         	movff	sprintf@sp,fsr2l
  4060  0013C6  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  4061  0013CA  C068  FFDF         	movff	sprintf@c,indf2
  4062                           
  4063                           ; BSR set to: 0
  4064  0013CE  4A45               	infsnz	sprintf@sp,f,c
  4065  0013D0  2A46               	incf	sprintf@sp+1,f,c
  4066  0013D2                     l2453:
  4067                           
  4068                           ; BSR set to: 0
  4069  0013D2  0100               	movlb	0	; () banked
  4070  0013D4  0762               	decf	sprintf@prec& (0+255),f,b
  4071  0013D6  0100               	movlb	0	; () banked
  4072  0013D8  2962               	incf	sprintf@prec& (0+255),w,b
  4073  0013DA  A4D8               	btfss	status,2,c
  4074  0013DC  D7CC               	goto	l2447
  4075  0013DE                     l2455:
  4076  0013DE  C047  FFF6         	movff	sprintf@f,tblptrl
  4077  0013E2  C048  FFF7         	movff	sprintf@f+1,tblptrh
  4078  0013E6  4A47               	infsnz	sprintf@f,f,c
  4079  0013E8  2A48               	incf	sprintf@f+1,f,c
  4080  0013EA                     	if	0	;tblptru may be non-zero
  4081  0013EA                     	endif
  4082  0013EA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4083  0013EA  0E00               	movlw	low (__mediumconst shr (0+16))
  4084  0013EC  6EF8               	movwf	tblptru,c
  4085  0013EE                     	endif
  4086  0013EE  0008               	tblrd		*
  4087  0013F0  CFF5 F068          	movff	tablat,sprintf@c
  4088  0013F4  0100               	movlb	0	; () banked
  4089  0013F6  5168               	movf	sprintf@c& (0+255),w,b
  4090  0013F8  A4D8               	btfss	status,2,c
  4091  0013FA  D687               	goto	l2349
  4092  0013FC                     l2457:
  4093                           
  4094                           ;doprnt.c: 1538: *sp = 0;
  4095  0013FC  C045  FFD9         	movff	sprintf@sp,fsr2l
  4096  001400  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  4097  001404  0E00               	movlw	0
  4098  001406  6EDF               	movwf	indf2,c
  4099  001408  0012               	return	
  4100  00140A                     __end_of_sprintf:
  4101                           	opt stack 0
  4102                           tblptru	equ	0xFF8
  4103                           tblptrh	equ	0xFF7
  4104                           tblptrl	equ	0xFF6
  4105                           tablat	equ	0xFF5
  4106                           prodh	equ	0xFF4
  4107                           prodl	equ	0xFF3
  4108                           intcon	equ	0xFF2
  4109                           indf0	equ	0xFEF
  4110                           postinc0	equ	0xFEE
  4111                           fsr0h	equ	0xFEA
  4112                           fsr0l	equ	0xFE9
  4113                           wreg	equ	0xFE8
  4114                           indf2	equ	0xFDF
  4115                           postinc2	equ	0xFDE
  4116                           postdec2	equ	0xFDD
  4117                           fsr2h	equ	0xFDA
  4118                           fsr2l	equ	0xFD9
  4119                           status	equ	0xFD8
  4120                           
  4121 ;; *************** function _isdigit *****************
  4122 ;; Defined at:
  4123 ;;		line 8 in file "D:\Hella\Compiler\sources\common\isdigit.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;  c               1    wreg     unsigned char 
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;  c               1   17[COMRAM] unsigned char 
  4128 ;; Return value:  Size  Location     Type
  4129 ;;		None               void
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;Total ram usage:        3 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; Hardware stack levels required when called:    1
  4144 ;; This function calls:
  4145 ;;		Nothing
  4146 ;; This function is called by:
  4147 ;;		_sprintf
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text32
  4152  001D30                     __ptext32:
  4153                           	opt stack 0
  4154  001D30                     _isdigit:
  4155                           	opt stack 27
  4156                           
  4157                           ;incstack = 0
  4158                           ;isdigit@c stored from wreg
  4159  001D30  6E3A               	movwf	isdigit@c,c
  4160  001D32  0E00               	movlw	0
  4161  001D34  6E39               	movwf	_isdigit$1759,c
  4162  001D36  0E3A               	movlw	58
  4163  001D38  603A               	cpfslt	isdigit@c,c
  4164  001D3A  D005               	goto	l2299
  4165  001D3C  0E2F               	movlw	47
  4166  001D3E  643A               	cpfsgt	isdigit@c,c
  4167  001D40  D002               	goto	l2299
  4168  001D42  0E01               	movlw	1
  4169  001D44  6E39               	movwf	_isdigit$1759,c
  4170  001D46                     l2299:
  4171  001D46  C039  F038         	movff	_isdigit$1759,??_isdigit
  4172  001D4A  3038               	rrcf	??_isdigit,w,c
  4173  001D4C  0012               	return	
  4174  001D4E                     __end_of_isdigit:
  4175                           	opt stack 0
  4176                           tblptru	equ	0xFF8
  4177                           tblptrh	equ	0xFF7
  4178                           tblptrl	equ	0xFF6
  4179                           tablat	equ	0xFF5
  4180                           prodh	equ	0xFF4
  4181                           prodl	equ	0xFF3
  4182                           intcon	equ	0xFF2
  4183                           indf0	equ	0xFEF
  4184                           postinc0	equ	0xFEE
  4185                           fsr0h	equ	0xFEA
  4186                           fsr0l	equ	0xFE9
  4187                           wreg	equ	0xFE8
  4188                           indf2	equ	0xFDF
  4189                           postinc2	equ	0xFDE
  4190                           postdec2	equ	0xFDD
  4191                           fsr2h	equ	0xFDA
  4192                           fsr2l	equ	0xFD9
  4193                           status	equ	0xFD8
  4194                           
  4195 ;; *************** function ___wmul *****************
  4196 ;; Defined at:
  4197 ;;		line 15 in file "D:\Hella\Compiler\sources\common\Umul16.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;  multiplier      2   22[COMRAM] unsigned int 
  4200 ;;  multiplicand    2   24[COMRAM] unsigned int 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;  product         2   26[COMRAM] unsigned int 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  2   22[COMRAM] unsigned int 
  4205 ;; Registers used:
  4206 ;;		wreg, status,2, status,0, prodl, prodh
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4212 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;Total ram usage:        6 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    1
  4219 ;; This function calls:
  4220 ;;		Nothing
  4221 ;; This function is called by:
  4222 ;;		_checkInputs
  4223 ;;		_stateMachine
  4224 ;;		_sprintf
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text33
  4229  001CAA                     __ptext33:
  4230                           	opt stack 0
  4231  001CAA                     ___wmul:
  4232                           	opt stack 28
  4233                           
  4234                           ;incstack = 0
  4235  001CAA  503F               	movf	___wmul@multiplier,w,c
  4236  001CAC  0241               	mulwf	___wmul@multiplicand,c
  4237  001CAE  CFF3 F043          	movff	prodl,___wmul@product
  4238  001CB2  CFF4 F044          	movff	prodh,___wmul@product+1
  4239  001CB6  503F               	movf	___wmul@multiplier,w,c
  4240  001CB8  0242               	mulwf	___wmul@multiplicand+1,c
  4241  001CBA  50F3               	movf	prodl,w,c
  4242  001CBC  2644               	addwf	___wmul@product+1,f,c
  4243  001CBE  5040               	movf	___wmul@multiplier+1,w,c
  4244  001CC0  0241               	mulwf	___wmul@multiplicand,c
  4245  001CC2  50F3               	movf	prodl,w,c
  4246  001CC4  2644               	addwf	___wmul@product+1,f,c
  4247  001CC6  C043  F03F         	movff	___wmul@product,?___wmul
  4248  001CCA  C044  F040         	movff	___wmul@product+1,?___wmul+1
  4249  001CCE  0012               	return	
  4250  001CD0                     __end_of___wmul:
  4251                           	opt stack 0
  4252                           tblptru	equ	0xFF8
  4253                           tblptrh	equ	0xFF7
  4254                           tblptrl	equ	0xFF6
  4255                           tablat	equ	0xFF5
  4256                           prodh	equ	0xFF4
  4257                           prodl	equ	0xFF3
  4258                           intcon	equ	0xFF2
  4259                           indf0	equ	0xFEF
  4260                           postinc0	equ	0xFEE
  4261                           fsr0h	equ	0xFEA
  4262                           fsr0l	equ	0xFE9
  4263                           wreg	equ	0xFE8
  4264                           indf2	equ	0xFDF
  4265                           postinc2	equ	0xFDE
  4266                           postdec2	equ	0xFDD
  4267                           fsr2h	equ	0xFDA
  4268                           fsr2l	equ	0xFD9
  4269                           status	equ	0xFD8
  4270                           
  4271 ;; *************** function ___lwmod *****************
  4272 ;; Defined at:
  4273 ;;		line 8 in file "D:\Hella\Compiler\sources\common\lwmod.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;  dividend        2   22[COMRAM] unsigned int 
  4276 ;;  divisor         2   24[COMRAM] unsigned int 
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;  counter         1   26[COMRAM] unsigned char 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  2   22[COMRAM] unsigned int 
  4281 ;; Registers used:
  4282 ;;		wreg, status,2, status,0
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;Total ram usage:        5 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    1
  4295 ;; This function calls:
  4296 ;;		Nothing
  4297 ;; This function is called by:
  4298 ;;		_sprintf
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           	psect	text34
  4303  001AF6                     __ptext34:
  4304                           	opt stack 0
  4305  001AF6                     ___lwmod:
  4306                           	opt stack 27
  4307                           
  4308                           ;incstack = 0
  4309  001AF6  5041               	movf	___lwmod@divisor,w,c
  4310  001AF8  1042               	iorwf	___lwmod@divisor+1,w,c
  4311  001AFA  B4D8               	btfsc	status,2,c
  4312  001AFC  D018               	goto	l820
  4313  001AFE  0E01               	movlw	1
  4314  001B00  6E43               	movwf	___lwmod@counter,c
  4315  001B02  D004               	goto	l2337
  4316  001B04                     l2335:
  4317  001B04  90D8               	bcf	status,0,c
  4318  001B06  3641               	rlcf	___lwmod@divisor,f,c
  4319  001B08  3642               	rlcf	___lwmod@divisor+1,f,c
  4320  001B0A  2A43               	incf	___lwmod@counter,f,c
  4321  001B0C                     l2337:
  4322  001B0C  AE42               	btfss	___lwmod@divisor+1,7,c
  4323  001B0E  D7FA               	goto	l2335
  4324  001B10                     l2339:
  4325  001B10  5041               	movf	___lwmod@divisor,w,c
  4326  001B12  5C3F               	subwf	___lwmod@dividend,w,c
  4327  001B14  5042               	movf	___lwmod@divisor+1,w,c
  4328  001B16  5840               	subwfb	___lwmod@dividend+1,w,c
  4329  001B18  A0D8               	btfss	status,0,c
  4330  001B1A  D004               	goto	l2343
  4331  001B1C  5041               	movf	___lwmod@divisor,w,c
  4332  001B1E  5E3F               	subwf	___lwmod@dividend,f,c
  4333  001B20  5042               	movf	___lwmod@divisor+1,w,c
  4334  001B22  5A40               	subwfb	___lwmod@dividend+1,f,c
  4335  001B24                     l2343:
  4336  001B24  90D8               	bcf	status,0,c
  4337  001B26  3242               	rrcf	___lwmod@divisor+1,f,c
  4338  001B28  3241               	rrcf	___lwmod@divisor,f,c
  4339  001B2A  2E43               	decfsz	___lwmod@counter,f,c
  4340  001B2C  D7F1               	goto	l2339
  4341  001B2E                     l820:
  4342  001B2E  C03F  F03F         	movff	___lwmod@dividend,?___lwmod
  4343  001B32  C040  F040         	movff	___lwmod@dividend+1,?___lwmod+1
  4344  001B36  0012               	return		;funcret
  4345  001B38                     __end_of___lwmod:
  4346                           	opt stack 0
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           prodh	equ	0xFF4
  4352                           prodl	equ	0xFF3
  4353                           intcon	equ	0xFF2
  4354                           indf0	equ	0xFEF
  4355                           postinc0	equ	0xFEE
  4356                           fsr0h	equ	0xFEA
  4357                           fsr0l	equ	0xFE9
  4358                           wreg	equ	0xFE8
  4359                           indf2	equ	0xFDF
  4360                           postinc2	equ	0xFDE
  4361                           postdec2	equ	0xFDD
  4362                           fsr2h	equ	0xFDA
  4363                           fsr2l	equ	0xFD9
  4364                           status	equ	0xFD8
  4365                           
  4366 ;; *************** function ___lwdiv *****************
  4367 ;; Defined at:
  4368 ;;		line 8 in file "D:\Hella\Compiler\sources\common\lwdiv.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;  dividend        2   15[COMRAM] unsigned int 
  4371 ;;  divisor         2   17[COMRAM] unsigned int 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;  quotient        2   20[COMRAM] unsigned int 
  4374 ;;  counter         1   19[COMRAM] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  2   15[COMRAM] unsigned int 
  4377 ;; Registers used:
  4378 ;;		wreg, status,2, status,0
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4384 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;Total ram usage:        7 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    1
  4391 ;; This function calls:
  4392 ;;		Nothing
  4393 ;; This function is called by:
  4394 ;;		_checkInputs
  4395 ;;		_stateMachine
  4396 ;;		_sprintf
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           	psect	text35
  4401  001A16                     __ptext35:
  4402                           	opt stack 0
  4403  001A16                     ___lwdiv:
  4404                           	opt stack 28
  4405                           
  4406                           ;incstack = 0
  4407  001A16  0E00               	movlw	0
  4408  001A18  6E3E               	movwf	___lwdiv@quotient+1,c
  4409  001A1A  0E00               	movlw	0
  4410  001A1C  6E3D               	movwf	___lwdiv@quotient,c
  4411  001A1E  503A               	movf	___lwdiv@divisor,w,c
  4412  001A20  103B               	iorwf	___lwdiv@divisor+1,w,c
  4413  001A22  B4D8               	btfsc	status,2,c
  4414  001A24  D01C               	goto	l810
  4415  001A26  0E01               	movlw	1
  4416  001A28  6E3C               	movwf	___lwdiv@counter,c
  4417  001A2A  D004               	goto	l2317
  4418  001A2C                     l2315:
  4419  001A2C  90D8               	bcf	status,0,c
  4420  001A2E  363A               	rlcf	___lwdiv@divisor,f,c
  4421  001A30  363B               	rlcf	___lwdiv@divisor+1,f,c
  4422  001A32  2A3C               	incf	___lwdiv@counter,f,c
  4423  001A34                     l2317:
  4424  001A34  AE3B               	btfss	___lwdiv@divisor+1,7,c
  4425  001A36  D7FA               	goto	l2315
  4426  001A38                     l2319:
  4427  001A38  90D8               	bcf	status,0,c
  4428  001A3A  363D               	rlcf	___lwdiv@quotient,f,c
  4429  001A3C  363E               	rlcf	___lwdiv@quotient+1,f,c
  4430  001A3E  503A               	movf	___lwdiv@divisor,w,c
  4431  001A40  5C38               	subwf	___lwdiv@dividend,w,c
  4432  001A42  503B               	movf	___lwdiv@divisor+1,w,c
  4433  001A44  5839               	subwfb	___lwdiv@dividend+1,w,c
  4434  001A46  A0D8               	btfss	status,0,c
  4435  001A48  D005               	goto	l2327
  4436  001A4A  503A               	movf	___lwdiv@divisor,w,c
  4437  001A4C  5E38               	subwf	___lwdiv@dividend,f,c
  4438  001A4E  503B               	movf	___lwdiv@divisor+1,w,c
  4439  001A50  5A39               	subwfb	___lwdiv@dividend+1,f,c
  4440  001A52  803D               	bsf	___lwdiv@quotient,0,c
  4441  001A54                     l2327:
  4442  001A54  90D8               	bcf	status,0,c
  4443  001A56  323B               	rrcf	___lwdiv@divisor+1,f,c
  4444  001A58  323A               	rrcf	___lwdiv@divisor,f,c
  4445  001A5A  2E3C               	decfsz	___lwdiv@counter,f,c
  4446  001A5C  D7ED               	goto	l2319
  4447  001A5E                     l810:
  4448  001A5E  C03D  F038         	movff	___lwdiv@quotient,?___lwdiv
  4449  001A62  C03E  F039         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4450  001A66  0012               	return		;funcret
  4451  001A68                     __end_of___lwdiv:
  4452                           	opt stack 0
  4453                           tblptru	equ	0xFF8
  4454                           tblptrh	equ	0xFF7
  4455                           tblptrl	equ	0xFF6
  4456                           tablat	equ	0xFF5
  4457                           prodh	equ	0xFF4
  4458                           prodl	equ	0xFF3
  4459                           intcon	equ	0xFF2
  4460                           indf0	equ	0xFEF
  4461                           postinc0	equ	0xFEE
  4462                           fsr0h	equ	0xFEA
  4463                           fsr0l	equ	0xFE9
  4464                           wreg	equ	0xFE8
  4465                           indf2	equ	0xFDF
  4466                           postinc2	equ	0xFDE
  4467                           postdec2	equ	0xFDD
  4468                           fsr2h	equ	0xFDA
  4469                           fsr2l	equ	0xFD9
  4470                           status	equ	0xFD8
  4471                           
  4472 ;; *************** function _UART_puts *****************
  4473 ;; Defined at:
  4474 ;;		line 88 in file "uart.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  s               2   16[COMRAM] PTR unsigned char 
  4477 ;;		 -> STR_20(3), STR_18(20), msg(20), 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;		None
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      void 
  4482 ;; Registers used:
  4483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4489 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;Total ram usage:        2 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    2
  4496 ;; This function calls:
  4497 ;;		_UART_putc
  4498 ;; This function is called by:
  4499 ;;		_checkInputs
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           	psect	text36
  4504  0019C2                     __ptext36:
  4505                           	opt stack 0
  4506  0019C2                     _UART_puts:
  4507                           	opt stack 27
  4508  0019C2                     
  4509                           ;uart.c: 91: {
  4510                           ;uart.c: 92: UART_putc(*s);
  4511  0019C2  C039  FFF6         	movff	UART_puts@s,tblptrl
  4512  0019C6  C03A  FFF7         	movff	UART_puts@s+1,tblptrh
  4513  0019CA  0E00               	movlw	low (__smallconst shr (0+16))
  4514  0019CC  6EF8               	movwf	tblptru,c
  4515  0019CE  0E0F               	movlw	(high __ramtop+-1)
  4516  0019D0  64F7               	cpfsgt	tblptrh,c
  4517  0019D2  D003               	bra	u1897
  4518  0019D4  0008               	tblrd		*
  4519  0019D6  50F5               	movf	tablat,w,c
  4520  0019D8  D005               	bra	u1890
  4521  0019DA                     u1897:
  4522  0019DA  CFF6 FFE9          	movff	tblptrl,fsr0l
  4523  0019DE  CFF7 FFEA          	movff	tblptrh,fsr0h
  4524  0019E2  50EF               	movf	indf0,w,c
  4525  0019E4                     u1890:
  4526  0019E4  ECCB  F00E         	call	_UART_putc
  4527                           
  4528                           ;uart.c: 93: s++;
  4529  0019E8  4A39               	infsnz	UART_puts@s,f,c
  4530  0019EA  2A3A               	incf	UART_puts@s+1,f,c
  4531                           
  4532                           ;uart.c: 96: } while(*s != 0);
  4533  0019EC  C039  FFF6         	movff	UART_puts@s,tblptrl
  4534  0019F0  C03A  FFF7         	movff	UART_puts@s+1,tblptrh
  4535  0019F4  0E00               	movlw	low (__smallconst shr (0+16))
  4536  0019F6  6EF8               	movwf	tblptru,c
  4537  0019F8  0E0F               	movlw	(high __ramtop+-1)
  4538  0019FA  64F7               	cpfsgt	tblptrh,c
  4539  0019FC  D003               	bra	u1907
  4540  0019FE  0008               	tblrd		*
  4541  001A00  50F5               	movf	tablat,w,c
  4542  001A02  D005               	bra	u1900
  4543  001A04                     u1907:
  4544  001A04  CFF6 FFE9          	movff	tblptrl,fsr0l
  4545  001A08  CFF7 FFEA          	movff	tblptrh,fsr0h
  4546  001A0C  50EF               	movf	indf0,w,c
  4547  001A0E                     u1900:
  4548  001A0E  0900               	iorlw	0
  4549  001A10  B4D8               	btfsc	status,2,c
  4550  001A12  0012               	return	
  4551  001A14  D7D6               	goto	l2473
  4552  001A16                     __end_of_UART_puts:
  4553                           	opt stack 0
  4554                           tblptru	equ	0xFF8
  4555                           tblptrh	equ	0xFF7
  4556                           tblptrl	equ	0xFF6
  4557                           tablat	equ	0xFF5
  4558                           prodh	equ	0xFF4
  4559                           prodl	equ	0xFF3
  4560                           intcon	equ	0xFF2
  4561                           indf0	equ	0xFEF
  4562                           postinc0	equ	0xFEE
  4563                           fsr0h	equ	0xFEA
  4564                           fsr0l	equ	0xFE9
  4565                           wreg	equ	0xFE8
  4566                           indf2	equ	0xFDF
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           fsr2h	equ	0xFDA
  4570                           fsr2l	equ	0xFD9
  4571                           status	equ	0xFD8
  4572                           
  4573 ;; *************** function _UART_putc *****************
  4574 ;; Defined at:
  4575 ;;		line 80 in file "uart.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;  data            1    wreg     unsigned char 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  data            1   15[COMRAM] unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      void 
  4582 ;; Registers used:
  4583 ;;		wreg
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;Total ram usage:        1 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    1
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_UART_puts
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           	psect	text37
  4604  001D96                     __ptext37:
  4605                           	opt stack 0
  4606  001D96                     _UART_putc:
  4607                           	opt stack 27
  4608                           
  4609                           ;incstack = 0
  4610                           ;UART_putc@data stored from wreg
  4611  001D96  6E38               	movwf	UART_putc@data,c
  4612                           
  4613                           ;uart.c: 82: TXREG = data;
  4614  001D98  C038  FFAD         	movff	UART_putc@data,4013	;volatile
  4615  001D9C                     l343:
  4616  001D9C  A89E               	btfss	3998,4,c	;volatile
  4617  001D9E  D7FE               	goto	l343
  4618                           
  4619                           ;uart.c: 84: PIR1bits.TXIF = 0;
  4620  001DA0  989E               	bcf	3998,4,c	;volatile
  4621  001DA2  0012               	return		;funcret
  4622  001DA4                     __end_of_UART_putc:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           intcon	equ	0xFF2
  4631                           indf0	equ	0xFEF
  4632                           postinc0	equ	0xFEE
  4633                           fsr0h	equ	0xFEA
  4634                           fsr0l	equ	0xFE9
  4635                           wreg	equ	0xFE8
  4636                           indf2	equ	0xFDF
  4637                           postinc2	equ	0xFDE
  4638                           postdec2	equ	0xFDD
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _ADCRead *****************
  4644 ;; Defined at:
  4645 ;;		line 534 in file "clima.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  ch              1    wreg     unsigned char 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  ch              1   18[COMRAM] unsigned char 
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  2   15[COMRAM] unsigned int 
  4652 ;; Registers used:
  4653 ;;		wreg, status,2, status,0
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4659 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;Total ram usage:        4 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    1
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_checkInputs
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text38
  4674  001BEE                     __ptext38:
  4675                           	opt stack 0
  4676  001BEE                     _ADCRead:
  4677                           	opt stack 28
  4678                           
  4679                           ;incstack = 0
  4680                           ;ADCRead@ch stored from wreg
  4681  001BEE  6E3B               	movwf	ADCRead@ch,c
  4682                           
  4683                           ;clima.c: 536: if(ch>13) return 0;
  4684  001BF0  0E0D               	movlw	13
  4685  001BF2  643B               	cpfsgt	ADCRead@ch,c
  4686  001BF4  D005               	goto	l195
  4687  001BF6  0E00               	movlw	0
  4688  001BF8  6E39               	movwf	?_ADCRead+1,c
  4689  001BFA  0E00               	movlw	0
  4690  001BFC  6E38               	movwf	?_ADCRead,c
  4691  001BFE  0012               	return	
  4692  001C00                     l195:
  4693                           
  4694                           ;clima.c: 538: ADCON0bits.ADON = 1;
  4695  001C00  80C2               	bsf	4034,0,c	;volatile
  4696                           
  4697                           ;clima.c: 539: ADCON0bits.CHS = ch;
  4698  001C02  C03B  F03A         	movff	ADCRead@ch,??_ADCRead
  4699  001C06  463A               	rlncf	??_ADCRead,f,c
  4700  001C08  463A               	rlncf	??_ADCRead,f,c
  4701  001C0A  50C2               	movf	4034,w,c	;volatile
  4702  001C0C  183A               	xorwf	??_ADCRead,w,c
  4703  001C0E  0BC3               	andlw	-61
  4704  001C10  183A               	xorwf	??_ADCRead,w,c
  4705  001C12  6EC2               	movwf	4034,c	;volatile
  4706                           
  4707                           ;clima.c: 540: ADCON0bits.ADON = 1;
  4708  001C14  80C2               	bsf	4034,0,c	;volatile
  4709                           
  4710                           ;clima.c: 541: ADCON0bits.GO_nDONE = 1;
  4711  001C16  82C2               	bsf	4034,1,c	;volatile
  4712  001C18                     l197:
  4713  001C18  B2C2               	btfsc	4034,1,c	;volatile
  4714  001C1A  D7FE               	goto	l197
  4715                           
  4716                           ;clima.c: 543: ADCON0bits.ADON = 0;
  4717  001C1C  90C2               	bcf	4034,0,c	;volatile
  4718                           
  4719                           ;clima.c: 545: return ADRES;
  4720  001C1E  CFC3 F038          	movff	4035,?_ADCRead	;volatile
  4721  001C22  CFC4 F039          	movff	4036,?_ADCRead+1	;volatile
  4722  001C26  0012               	return		;funcret
  4723  001C28                     __end_of_ADCRead:
  4724                           	opt stack 0
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           prodh	equ	0xFF4
  4730                           prodl	equ	0xFF3
  4731                           intcon	equ	0xFF2
  4732                           indf0	equ	0xFEF
  4733                           postinc0	equ	0xFEE
  4734                           fsr0h	equ	0xFEA
  4735                           fsr0l	equ	0xFE9
  4736                           wreg	equ	0xFE8
  4737                           indf2	equ	0xFDF
  4738                           postinc2	equ	0xFDE
  4739                           postdec2	equ	0xFDD
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function _ISR *****************
  4745 ;; Defined at:
  4746 ;;		line 614 in file "clima.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;		None
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;		None
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  1    wreg      void 
  4753 ;; Registers used:
  4754 ;;		wreg, status,2, status,0
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;Total ram usage:       15 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; This function calls:
  4767 ;;		Nothing
  4768 ;; This function is called by:
  4769 ;;		Interrupt level 2
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	intcode
  4774  000008                     __pintcode:
  4775                           	opt stack 0
  4776  000008                     _ISR:
  4777                           	opt stack 24
  4778                           
  4779                           ;incstack = 0
  4780  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4781  00000A  ED76  F00B         	call	int_func,f	;refresh shadow registers
  4782                           tblptru	equ	0xFF8
  4783                           tblptrh	equ	0xFF7
  4784                           tblptrl	equ	0xFF6
  4785                           tablat	equ	0xFF5
  4786                           prodh	equ	0xFF4
  4787                           prodl	equ	0xFF3
  4788                           intcon	equ	0xFF2
  4789                           indf0	equ	0xFEF
  4790                           postinc0	equ	0xFEE
  4791                           fsr0h	equ	0xFEA
  4792                           fsr0l	equ	0xFE9
  4793                           wreg	equ	0xFE8
  4794                           indf2	equ	0xFDF
  4795                           postinc2	equ	0xFDE
  4796                           postdec2	equ	0xFDD
  4797                           fsr2h	equ	0xFDA
  4798                           fsr2l	equ	0xFD9
  4799                           status	equ	0xFD8
  4800                           
  4801                           	psect	intcode_body
  4802  0016EC                     __pintcode_body:
  4803                           	opt stack 24
  4804  0016EC                     int_func:
  4805                           	opt stack 24
  4806  0016EC  0006               	pop		; remove dummy address from shadow register refresh
  4807  0016EE  CFFA F02A          	movff	pclath,??_ISR+1
  4808  0016F2  CFFB F02B          	movff	pclatu,??_ISR+2
  4809  0016F6  CFE9 F02C          	movff	fsr0l,??_ISR+3
  4810  0016FA  CFEA F02D          	movff	fsr0h,??_ISR+4
  4811  0016FE  CFE1 F02E          	movff	fsr1l,??_ISR+5
  4812  001702  CFE2 F02F          	movff	fsr1h,??_ISR+6
  4813  001706  CFD9 F030          	movff	fsr2l,??_ISR+7
  4814  00170A  CFDA F031          	movff	fsr2h,??_ISR+8
  4815  00170E  CFF3 F032          	movff	prodl,??_ISR+9
  4816  001712  CFF4 F033          	movff	prodh,??_ISR+10
  4817  001716  CFF6 F034          	movff	tblptrl,??_ISR+11
  4818  00171A  CFF7 F035          	movff	tblptrh,??_ISR+12
  4819  00171E  CFF8 F036          	movff	tblptru,??_ISR+13
  4820  001722  CFF5 F037          	movff	tablat,??_ISR+14
  4821                           
  4822                           ;clima.c: 617: if (T0IE && T0IF)
  4823  001726  BAF2               	btfsc	intcon,5,c	;volatile
  4824  001728  A4F2               	btfss	intcon,2,c	;volatile
  4825  00172A  D037               	goto	i2l219
  4826                           
  4827                           ;clima.c: 618: {
  4828                           ;clima.c: 619: T0IF = 0;
  4829  00172C  94F2               	bcf	intcon,2,c	;volatile
  4830                           
  4831                           ;clima.c: 620: T0CONbits.TMR0ON = 0;
  4832  00172E  9ED5               	bcf	4053,7,c	;volatile
  4833                           
  4834                           ;clima.c: 621: TMR0H = 0xFB;
  4835  001730  0EFB               	movlw	251
  4836  001732  6ED7               	movwf	4055,c	;volatile
  4837                           
  4838                           ;clima.c: 622: TMR0L = 0x1D-2;
  4839  001734  0E1B               	movlw	27
  4840  001736  6ED6               	movwf	4054,c	;volatile
  4841                           
  4842                           ;clima.c: 624: T0CONbits.TMR0ON = 1;
  4843  001738  8ED5               	bsf	4053,7,c	;volatile
  4844                           
  4845                           ;clima.c: 625: tick++;
  4846  00173A  2A0A               	incf	_tick,f,c
  4847                           
  4848                           ;clima.c: 627: if ((tick & 0b11) == 0b11)
  4849  00173C  500A               	movf	_tick,w,c
  4850  00173E  0B03               	andlw	3
  4851  001740  0A03               	xorlw	3
  4852  001742  A4D8               	btfss	status,2,c
  4853  001744  D009               	goto	i2l1667
  4854                           
  4855                           ;clima.c: 628: {
  4856                           ;clima.c: 629: cnt++;
  4857  001746  2A08               	incf	_cnt,f,c
  4858                           
  4859                           ;clima.c: 631: if (cnt == 25)
  4860  001748  0E19               	movlw	25
  4861  00174A  1808               	xorwf	_cnt,w,c
  4862  00174C  A4D8               	btfss	status,2,c
  4863  00174E  D004               	goto	i2l1667
  4864                           
  4865                           ;clima.c: 633: {
  4866                           ;clima.c: 634: ev = 1;
  4867  001750  0E01               	movlw	1
  4868  001752  6E09               	movwf	_ev,c
  4869                           
  4870                           ;clima.c: 635: cnt = 0;
  4871  001754  0E00               	movlw	0
  4872  001756  6E08               	movwf	_cnt,c
  4873  001758                     i2l1667:
  4874                           
  4875                           ;clima.c: 636: }
  4876                           ;clima.c: 637: }
  4877                           ;clima.c: 639: if (fanSpeedCool > (tick & 0x07))
  4878  001758  C00A  F029         	movff	_tick,??_ISR
  4879  00175C  0E07               	movlw	7
  4880  00175E  1629               	andwf	??_ISR,f,c
  4881  001760  5013               	movf	_fanSpeedCool,w,c
  4882  001762  5C29               	subwf	??_ISR,w,c
  4883  001764  B0D8               	btfsc	status,0,c
  4884  001766  D002               	goto	i2l213
  4885                           
  4886                           ;clima.c: 640: (PORTDbits.RD4) = 1;
  4887  001768  8883               	bsf	3971,4,c	;volatile
  4888  00176A  D001               	goto	i2l1671
  4889  00176C                     i2l213:
  4890                           
  4891                           ;clima.c: 641: else
  4892                           ;clima.c: 642: (PORTDbits.RD4) = 0;
  4893  00176C  9883               	bcf	3971,4,c	;volatile
  4894  00176E                     i2l1671:
  4895                           
  4896                           ;clima.c: 645: if (fanSpeedHeatVent > (tick & 0x07))
  4897  00176E  C00A  F029         	movff	_tick,??_ISR
  4898  001772  0E07               	movlw	7
  4899  001774  1629               	andwf	??_ISR,f,c
  4900  001776  5012               	movf	_fanSpeedHeatVent,w,c
  4901  001778  5C29               	subwf	??_ISR,w,c
  4902  00177A  B0D8               	btfsc	status,0,c
  4903  00177C  D002               	goto	i2l215
  4904                           
  4905                           ;clima.c: 646: (PORTDbits.RD5) = 1;
  4906  00177E  8A83               	bsf	3971,5,c	;volatile
  4907  001780  D001               	goto	i2l1675
  4908  001782                     i2l215:
  4909                           
  4910                           ;clima.c: 647: else
  4911                           ;clima.c: 648: (PORTDbits.RD5) = 0;
  4912  001782  9A83               	bcf	3971,5,c	;volatile
  4913  001784                     i2l1675:
  4914                           
  4915                           ;clima.c: 651: if (levelHeat > (tick & 0x07))
  4916  001784  C00A  F029         	movff	_tick,??_ISR
  4917  001788  0E07               	movlw	7
  4918  00178A  1629               	andwf	??_ISR,f,c
  4919  00178C  5011               	movf	_levelHeat,w,c
  4920  00178E  5C29               	subwf	??_ISR,w,c
  4921  001790  B0D8               	btfsc	status,0,c
  4922  001792  D002               	goto	i2l217
  4923                           
  4924                           ;clima.c: 652: (PORTDbits.RD3) = 1;
  4925  001794  8683               	bsf	3971,3,c	;volatile
  4926  001796  D001               	goto	i2l219
  4927  001798                     i2l217:
  4928                           
  4929                           ;clima.c: 653: else
  4930                           ;clima.c: 654: (PORTDbits.RD3) = 0;
  4931  001798  9683               	bcf	3971,3,c	;volatile
  4932  00179A                     i2l219:
  4933  00179A  C037  FFF5         	movff	??_ISR+14,tablat
  4934  00179E  C036  FFF8         	movff	??_ISR+13,tblptru
  4935  0017A2  C035  FFF7         	movff	??_ISR+12,tblptrh
  4936  0017A6  C034  FFF6         	movff	??_ISR+11,tblptrl
  4937  0017AA  C033  FFF4         	movff	??_ISR+10,prodh
  4938  0017AE  C032  FFF3         	movff	??_ISR+9,prodl
  4939  0017B2  C031  FFDA         	movff	??_ISR+8,fsr2h
  4940  0017B6  C030  FFD9         	movff	??_ISR+7,fsr2l
  4941  0017BA  C02F  FFE2         	movff	??_ISR+6,fsr1h
  4942  0017BE  C02E  FFE1         	movff	??_ISR+5,fsr1l
  4943  0017C2  C02D  FFEA         	movff	??_ISR+4,fsr0h
  4944  0017C6  C02C  FFE9         	movff	??_ISR+3,fsr0l
  4945  0017CA  C02B  FFFB         	movff	??_ISR+2,pclatu
  4946  0017CE  C02A  FFFA         	movff	??_ISR+1,pclath
  4947  0017D2  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4948  0017D4  0011               	retfie		f
  4949  0017D6                     __end_of_ISR:
  4950                           	opt stack 0
  4951                           pclatu	equ	0xFFB
  4952                           pclath	equ	0xFFA
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           intcon	equ	0xFF2
  4960                           indf0	equ	0xFEF
  4961                           postinc0	equ	0xFEE
  4962                           fsr0h	equ	0xFEA
  4963                           fsr0l	equ	0xFE9
  4964                           wreg	equ	0xFE8
  4965                           fsr1h	equ	0xFE2
  4966                           fsr1l	equ	0xFE1
  4967                           indf2	equ	0xFDF
  4968                           postinc2	equ	0xFDE
  4969                           postdec2	equ	0xFDD
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           pclatu	equ	0xFFB
  4974                           pclath	equ	0xFFA
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           prodh	equ	0xFF4
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           indf0	equ	0xFEF
  4983                           postinc0	equ	0xFEE
  4984                           fsr0h	equ	0xFEA
  4985                           fsr0l	equ	0xFE9
  4986                           wreg	equ	0xFE8
  4987                           fsr1h	equ	0xFE2
  4988                           fsr1l	equ	0xFE1
  4989                           indf2	equ	0xFDF
  4990                           postinc2	equ	0xFDE
  4991                           postdec2	equ	0xFDD
  4992                           fsr2h	equ	0xFDA
  4993                           fsr2l	equ	0xFD9
  4994                           status	equ	0xFD8
  4995                           
  4996                           	psect	rparam
  4997  0000                     pclatu	equ	0xFFB
  4998                           pclath	equ	0xFFA
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           intcon	equ	0xFF2
  5006                           indf0	equ	0xFEF
  5007                           postinc0	equ	0xFEE
  5008                           fsr0h	equ	0xFEA
  5009                           fsr0l	equ	0xFE9
  5010                           wreg	equ	0xFE8
  5011                           fsr1h	equ	0xFE2
  5012                           fsr1l	equ	0xFE1
  5013                           indf2	equ	0xFDF
  5014                           postinc2	equ	0xFDE
  5015                           postdec2	equ	0xFDD
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020                           	psect	temp
  5021  000050                     btemp:
  5022                           	opt stack 0
  5023  000050                     	ds	1
  5024  0000                     int$flags	set	btemp
  5025                           pclatu	equ	0xFFB
  5026                           pclath	equ	0xFFA
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           intcon	equ	0xFF2
  5034                           indf0	equ	0xFEF
  5035                           postinc0	equ	0xFEE
  5036                           fsr0h	equ	0xFEA
  5037                           fsr0l	equ	0xFE9
  5038                           wreg	equ	0xFE8
  5039                           fsr1h	equ	0xFE2
  5040                           fsr1l	equ	0xFE1
  5041                           indf2	equ	0xFDF
  5042                           postinc2	equ	0xFDE
  5043                           postdec2	equ	0xFDD
  5044                           fsr2h	equ	0xFDA
  5045                           fsr2l	equ	0xFD9
  5046                           status	equ	0xFD8


Data Sizes:
    Strings     95
    Constant    154
    Data        0
    BSS         40
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      79
    BANK0           160     15      15
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_19(CODE[3]), STR_11(CODE[3]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> msg(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    UART_puts@s	PTR unsigned char  size(2) Largest target is 20
		 -> STR_20(CODE[3]), STR_18(CODE[20]), msg(COMRAM[20]), 

    LcdWriteString@s	PTR const unsigned char  size(2) Largest target is 144
		 -> STR_22(CODE[13]), STR_21(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), 
		 -> STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_10(CODE[6]), STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), 
		 -> STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> msg(COMRAM[20]), LcdLines(CODE[144]), 


Critical Paths under _main in COMRAM

    _stateMachine->___lwtoft
    ___lwtoft->___wmul
    _setLcd->_LcdWriteString
    _LcdGoTo->_lcdCommand
    _LcdInit->_LcdWriteString
    _setIODIR->_SWSPIWrite
    _LcdWriteString->_LcdChar
    _LcdChar->_setGPIO
    _LcdClear->_lcdCommand
    _lcdCommand->_setGPIO
    _setGPIO->_SWSPIWrite
    _checkInputs->_sprintf
    _sprintf->___wmul
    ___wmul->___lwdiv
    ___lwmod->___lwdiv
    _UART_puts->_UART_putc

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_checkInputs
    _checkInputs->_sprintf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   25966
                           _LcdClear
                            _LcdGoTo
                     _LcdWriteString
                        _checkInputs
                               _init
                       _stateMachine
                      _updateOutputs
 ---------------------------------------------------------------------------------
 (1) _stateMachine                                         6     6      0    8635
                                             31 COMRAM     5     5      0
                             ___ftge
                            ___lwdiv
                           ___lwtoft
                             ___wmul
                     _setCoolElement
                     _setHeatElement
                             _setLcd
                 _setLcdBacklightLed
                    _setSpeedFanCool
                _setSpeedFanHeatVent
                      _setStandbyLed
                      _updateOutputs
 ---------------------------------------------------------------------------------
 (1) _updateOutputs                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLcdBacklightLed                                   2     0      2     150
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setCoolElement                                       2     0      2     214
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2039
                                             28 COMRAM     3     0      3
                           ___ftpack
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1953
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    8180
                            _LcdInit
                            _initAdc
                        _initButtons
                            _initPwm
                            _initTmr
                     _setHeatElement
                             _setLcd
                    _setSpeedFanCool
                _setSpeedFanHeatVent
                      _setStandbyLed
 ---------------------------------------------------------------------------------
 (2) _setStandbyLed                                        2     0      2     214
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setSpeedFanHeatVent                                  1     1      0      30
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setSpeedFanCool                                      1     1      0      30
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLcd                                               0     0      0    3382
                           _LcdClear
                            _LcdGoTo
                     _LcdWriteString
 ---------------------------------------------------------------------------------
 (3) _LcdGoTo                                              1     1      0     679
                                             20 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _setHeatElement                                       2     0      2     342
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _initTmr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPwm                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initAdc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcdInit                                              0     0      0    4182
                           _LcdClear
                     _LcdWriteString
                          _SWSPIOpen
                         _lcdCommand
                            _setGPIO
                           _setIODIR
 ---------------------------------------------------------------------------------
 (3) _setIODIR                                             2     1      1     187
                                             17 COMRAM     2     1      1
                       _SWSPIClearCS
                         _SWSPISetCS
                         _SWSPIWrite
 ---------------------------------------------------------------------------------
 (3) _SWSPIOpen                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LcdWriteString                                       2     0      2    2046
                                             20 COMRAM     2     0      2
                            _LcdChar
 ---------------------------------------------------------------------------------
 (4) _LcdChar                                              1     1      0     657
                                             19 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (3) _LcdClear                                             0     0      0     657
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (4) _lcdCommand                                           1     1      0     657
                                             19 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (5) _setGPIO                                              2     1      1     635
                                             17 COMRAM     2     1      1
                       _SWSPIClearCS
                         _SWSPISetCS
                         _SWSPIWrite
 ---------------------------------------------------------------------------------
 (6) _SWSPIWrite                                           2     2      0      15
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _SWSPISetCS                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _SWSPIClearCS                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkInputs                                          6     6      0    5769
                                              9 BANK0      6     6      0
                            _ADCRead
                          _UART_puts
                            ___lwdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             28    22      6    3822
                                             28 COMRAM    10     4      6
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     694
                                             22 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     703
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _UART_puts                                            2     0      2     318
                                             16 COMRAM     2     0      2
                          _UART_putc
 ---------------------------------------------------------------------------------
 (3) _UART_putc                                            1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     2      2      62
                                             15 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 15    15      0       0
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdClear
     _lcdCommand
       _setGPIO
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
   _LcdGoTo
     _lcdCommand
       _setGPIO
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
   _LcdWriteString
     _LcdChar
       _setGPIO
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
   _checkInputs
     _ADCRead
     _UART_puts
       _UART_putc
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___lwdiv (ARG)
       _isdigit
   _init
     _LcdInit
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _SWSPIOpen
       _lcdCommand
         _setGPIO
           _SWSPIClearCS
           _SWSPISetCS
           _SWSPIWrite
       _setGPIO
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
       _setIODIR
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
     _initAdc
     _initButtons
     _initPwm
     _initTmr
     _setHeatElement
     _setLcd
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdGoTo
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
     _setSpeedFanCool
     _setSpeedFanHeatVent
     _setStandbyLed
   _stateMachine
     ___ftge
     ___lwdiv
     ___lwtoft
       ___ftpack
       ___lwdiv (ARG)
       ___wmul (ARG)
         ___lwdiv (ARG)
     ___wmul
       ___lwdiv (ARG)
     _setCoolElement
     _setHeatElement
     _setLcd
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdGoTo
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
     _setLcdBacklightLed
     _setSpeedFanCool
     _setSpeedFanHeatVent
     _setStandbyLed
     _updateOutputs
   _updateOutputs

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      F       F       5        9.4%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      4F       1       84.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5E      32        0.0%
DATA                 0      0      5E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed May 15 18:56:30 2019

               _updateOutputs 1C80                             _a 0005                            _ev 0009  
         ___wmul@multiplicand 0041  __size_of_setSpeedFanHeatVent 0012                   __CFG_OSC$HS 000000  
                         l343 1D9C                           l195 1C00                           l197 1C18  
                         l810 1A5E                           l627 1864                           l820 1B2E  
                         _GIE 007F97                           u505 1CA6                           u506 1CA8  
                         _ISR 0008                           u475 1C88                           u900 19BA  
                         u476 1C8A                           u485 1C92                           u486 1C94  
                         u495 1C9C                           u496 1C9E                           u907 19B0  
                         u890 1990                           u897 1986                    _SWSPISetCS 1DE8  
              _setCoolElement 1DD2                           _cnt 0008                           _msg 0015  
             __end_of_ADCRead 1C28             lcdCommand@command 003C                           prod 000FF3  
                  _SWSPIWrite 1DB0                           wreg 000FE8                    _TXSTA1bits 000FAC  
                        ?_ISR 0029      setSpeedFanHeatVent@speed 0038         __size_of_SWSPIClearCS 0004  
                __CFG_WDT$OFF 000000        __end_of_setHeatElement 1DE4                          l2041 18B4  
                        l2051 1910                          l2045 18E4                          l1193 1D70  
                        l2315 1A2C                          l2403 127E                          l1187 1D82  
                        l2317 1A34                          l2413 12D2                          l2327 1A54  
                        l2319 1A38                          l2343 1B24                          l2335 1B04  
                        l2423 12FE                          l2431 1324                          l2415 12DC  
                        l2511 16E8                          l2337 1B0C                          l2433 1330  
                        l2409 129E                          l2361 1140                          l1801 17F4  
                        l2339 1B10                          l2355 1126                          l1811 1850  
                        l1803 17FE                          l2515 140C                          l2453 13D2  
                        l2445 1370                          l2357 1138                          l2349 110A  
                        l1813 185A                          l1805 181C                          l2447 1376  
                        l2439 1354                          l2391 1242                          l2367 1178  
                        l2455 13DE                          l2535 145A                          l2473 19C2  
                        l2457 13FC                          l2377 11E0                          l1809 1832  
                        l2561 1554                          l2553 1504                          l2545 14CE  
                        l2299 1D46                          l2379 120C                          l1763 1998  
                        l2563 1570                          l2389 123C                          l2573 15C4  
                        l2565 1578                          l2557 152C                          l2549 14DC  
                        l1759 196E                          l2489 1624                          l2579 15D6  
                        l1797 17E6                          l2669 1BD2                          STR_1 10DA  
                        STR_3 10E4                          STR_4 10DF                          STR_5 10E9  
                        STR_6 10BC                          STR_7 10C2                          STR_8 10C8  
                        STR_9 10CE                          _T0IE 007F95                          _T0IF 007F92  
                        u1900 1A0E                          u1907 1A04                          u1945 1644  
                        u1890 19E4                          u1897 19DA                          _RCIF 007CF5  
                        _TMR0 000FD6                          _main 1BB4                  ___ftpack@arg 0038  
                        _init 1914                  ___ftpack@exp 003B                          _tick 000A  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0050  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
             __end_of_LcdChar 1C54               __end_of_LcdGoTo 1DB0               __end_of_LcdInit 1AB4  
              ?_updateOutputs 0029                  ___param_bank 000000                  ?_initButtons 0029  
                       ??_ISR 0029        __end_of_setCoolElement 1DD8                         ?_main 0029  
                       ?_init 0029                         _ADRES 000FC3                         STR_10 10D4  
                       STR_11 10F1                         STR_12 10F4                         STR_20 10EE  
                       STR_21 10EC                         STR_13 10F8                         STR_14 10F6  
                       STR_22 10AF                         STR_18 109B                         STR_19 10F1  
                       _T0CON 000FD5               __end_of___lwdiv 1A68               __end_of___lwmod 1B38  
                       i2l213 176C                         i2l215 1782                         i2l217 1798  
                       i2l219 179A                  _SWSPIClearCS 1DEC                         _RCREG 000FAE  
                       _TMR0H 000FD7                         _TMR1H 000FCF                         _TMR0L 000FD6  
                       _TMR1L 000FCE                         _SPBRG 000FAF                         _PORTD 000F83  
                       _TRISA 000F92                         _TRMT1 007D61                         _TRISD 000F95  
                       _TXREG 000FAD          __size_of_checkInputs 00FA                __CFG_FCMEN$OFF 000000  
                       _inDeb 0007               __end_of_initAdc 1BB4              _fanSpeedHeatVent 0012  
             __end_of_dpowers 100B            __size_of_UART_putc 000E               __end_of_initPwm 1DC4  
             __end_of_initTmr 1B78            __size_of_UART_puts 0054               __end_of_setGPIO 1D30  
             __end_of_isdigit 1D4E                 ___ftpack@sign 003C               ?_setHeatElement 0038  
                       pclath 000FFA                         tablat 000FF5                         status 000FD8  
             __end_of_sprintf 140A      __size_of_setSpeedFanCool 0012              __end_of_LcdClear 1DCC  
            __end_of_LcdLines 109B            __size_of_SWSPIOpen 000E               __initialization 1D4E  
                __end_of_main 1BEE                  __end_of_init 196C                     ??_ADCRead 003A  
             ?_setCoolElement 0038                        ??_main 004F                        ??_init 003F  
               __activetblptr 000003                   ?_SWSPISetCS 0029                   ?_SWSPIWrite 0029  
                   ADCRead@ch 003B              __end_of___ftpack 1884                        i2l1671 176E  
                      i2l1675 1784                        i2l1667 1758              __end_of___lwtoft 1CF4  
                   ??_LcdChar 003C                     ??_LcdGoTo 003D                     ??_LcdInit 003F  
       __end_of_setStandbyLed 1DDE                        _TRISB0 007C98    __end_of_setLcdBacklightLed 1DD2  
             ??_updateOutputs 0038                        ___ftge 1884                        ___wmul 1CAA  
           __end_of_UART_putc 1DA4             __end_of_UART_puts 1A16                     ??___lwdiv 003C  
                      _inTemp 0003                     ??___lwmod 0043              __end_of_setIODIR 1D12  
                      clear_0 1D54                        _setLcd 1AB4                   setIODIR@dir 003A  
                   ??_initAdc 0038                     ??_initPwm 0038                     ??_initTmr 0038  
                   ??_setGPIO 003B                     ??_isdigit 0038                 LcdChar@letter 003C  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8             __end_of_SWSPIOpen 1D96                     ??_sprintf 004B  
         setHeatElement@state 0038           _setSpeedFanHeatVent 1D64                    __accesstop 0060  
     __end_of__initialization 1D5A       __size_of_LcdWriteString 0056                    ___ftge@ff1 0038  
                  ___ftge@ff2 003B                  _fanSpeedCool 0013                 ___rparam_used 000001  
         __size_of_SWSPISetCS 0004           __size_of_SWSPIWrite 000C                __pcstackCOMRAM 0029  
           ??_setSpeedFanCool 0038          ?_setSpeedFanHeatVent 0029          __size_of_initButtons 0004  
                  ___lwtoft@c 0045                     ?_LcdClear 0029                  sprintf@width 0066  
                  __pnvCOMRAM 004F                       ?___ftge 0038                    _lcdCommand 1C54  
                     ?___wmul 003F                    _climaState 0014         ??_setSpeedFanHeatVent 0038  
                     _ADCRead 1BEE                       ?_setLcd 0029                     ?___ftpack 0038  
                   ?___lwtoft 0045              ??_setHeatElement 003A                    ??_LcdClear 003D  
                     _LcdChar 1C28                       _LcdGoTo 1DA4                       _LcdInit 1A68  
                   ?_setIODIR 003A     checkInputs@leftButton_old 0006                       __Hparam 0000  
                     __Lparam 0000              ??_setCoolElement 003A               __size_of___ftge 0090  
             __size_of___wmul 0026                       ___lwdiv 1A16                       ___lwmod 1AF6  
                __psmallconst 1000             stateMachine@value 004A                       __pcinit 1D4E  
                  ??___ftpack 003D                       __ramtop 1000                 ??_checkInputs 0069  
             __size_of_setLcd 0042                       __ptext0 1BB4                       __ptext1 140A  
                     __ptext2 1C80                       __ptext3 1DCC                       __ptext4 1DD2  
                     __ptext5 1CD0                       __ptext6 17D6                       __ptext7 1884  
                     __ptext8 1914                       __ptext9 1DD8                    ??___lwtoft 0048  
                   _T0CONbits 000FD5                  __size_of_ISR 17CE                       _initAdc 1B78  
                ??_SWSPISetCS 0038                       _dpowers 1001                       _initPwm 1DBC  
                     _initTmr 1B38                       _setGPIO 1D12                       _isdigit 1D30  
                ??_SWSPIWrite 0038                       _setTemp 000B                       _outTemp 0001  
             setIODIR@address 003B                  setGPIO@value 003A                       _sprintf 10FC  
              __pintcode_body 16EC          end_of_initialization 1D5A                _LcdWriteString 196C  
                  ??_setIODIR 003B                       int_func 16EC            __end_of_SWSPISetCS 1DEC  
                   _RCSTAbits 000FAB            __end_of_SWSPIWrite 1DBC                       postdec2 000FDD  
                 ?_lcdCommand 0029                       postinc0 000FEE                       postinc2 000FDE  
          _setLcdBacklightLed 1DCC                     _PORTAbits 000F80                     _PORTBbits 000F81  
                   _PORTCbits 000F82                     _PORTDbits 000F83                     _UART_putc 1D96  
                   _UART_puts 19C2         checkInputs@leftButton 006E                     _PORTJbits 000F88  
                   _TRISAbits 000F92                     _TRISCbits 000F94                     _TRISDbits 000F95  
                  _standbyLed 000E           ?_setLcdBacklightLed 0038                     _TRISJbits 000F9A  
         __end_of_checkInputs 16EC               _lcdBacklightLed 000D        __end_of_LcdWriteString 19C2  
                   _SWSPIOpen 1D88               _setSpeedFanCool 1D76                     _TXSTAbits 000FAC  
       __end_of_updateOutputs 1CAA          ??_setLcdBacklightLed 003A                 ?_stateMachine 0029  
                _leftButtonEv 000C                __end_of___ftge 1914                __end_of___wmul 1CD0  
                  ?_UART_putc 0029                    ?_UART_puts 0039                __end_of_setLcd 1AF6  
      __size_of_setStandbyLed 0006           start_initialization 1D4E                   __end_of_ISR 17D6  
             ?_LcdWriteString 003D             __size_of_LcdClear 0008           __size_of_lcdCommand 002C  
        setSpeedFanCool@speed 0038                    ?_SWSPIOpen 0029       setLcdBacklightLed@state 0038  
              ??_stateMachine 0048                      ??___ftge 003E                 ??_initButtons 0038  
                    ??___wmul 0043                      ?_ADCRead 0038                      ??_setLcd 003F  
                 _checkInputs 15F2            setStandbyLed@state 0038                 ?_SWSPIClearCS 0029  
           __size_of___ftpack 00AE                   __pbssCOMRAM 0001             __size_of___lwtoft 0024  
               __pcstackBANK0 0060       __end_of_setSpeedFanCool 1D88                  _isdigit$1759 0039  
           checkInputs@adcVal 006C                      ?_LcdChar 0029                      ?_LcdGoTo 0029  
                    ?_LcdInit 0029                   sprintf@flag 0065                   sprintf@prec 0062  
               _setStandbyLed 1DD8             __size_of_setIODIR 001E   __end_of_setSpeedFanHeatVent 1D76  
            ___lwdiv@dividend 0038                     __pintcode 0008                   _heatElement 0010  
                    ?___lwdiv 0038                      ?___lwmod 003F                ??_SWSPIClearCS 0038  
                 ??_UART_putc 0038                   ??_UART_puts 003B           __end_of_initButtons 1DE8  
                    ?_initAdc 0029                   __smallconst 1000                      ?_initPwm 0029  
                    ?_initTmr 0029                      ?_setGPIO 003A                      ?_isdigit 0029  
                   _levelHeat 0011              ___lwdiv@quotient 003D                      ?_sprintf 0045  
          SWSPIWrite@BitCount 0038                   ??_SWSPIOpen 0038                   _coolElement 000F  
              ?_setStandbyLed 0038                ___wmul@product 0043                      _PIE1bits 000F9D  
                    _PIR1bits 000F9E                    UART_puts@s 0039                setGPIO@address 003B  
                ??_lcdCommand 003C              __size_of_ADCRead 003A                    _ADCON0bits 000FC2  
                  _ADCON1bits 000FC1                    _ADCON2bits 000FC0             ___wmul@multiplier 003F  
                    _LcdClear 1DC4          __end_of_stateMachine 15F2              ?_setSpeedFanCool 0029  
                    _LcdLines 100B            __end_of_lcdCommand 1C80       __size_of_setHeatElement 0006  
            __size_of_LcdChar 002C              __size_of_LcdGoTo 000C              __size_of_LcdInit 004C  
                    __Hrparam 0000                      __Lrparam 0000                   _initButtons 1DE4  
            __size_of___lwdiv 0052              __size_of___lwmod 0042                      ___ftpack 17D6  
                    ___lwtoft 1CD0              ??_LcdWriteString 003F                    sprintf@val 0063  
     __size_of_setCoolElement 0006              __size_of_initAdc 003C              __size_of_initPwm 0008  
            __size_of_initTmr 0040              __size_of_setGPIO 001E              __size_of_isdigit 001E  
             ___lwdiv@divisor 003A               ___lwdiv@counter 003C                      __ptext10 1D64  
                    __ptext11 1D76                      __ptext20 1CF4                      __ptext12 1AB4  
                    __ptext21 1D88                      __ptext13 1DA4                      __ptext30 15F2  
                    __ptext22 196C                      __ptext14 1DDE                      __ptext31 10FC  
                    __ptext23 1C28                      __ptext15 1B38                      __ptext32 1D30  
                    __ptext24 1DC4                      __ptext16 1DBC                      __ptext33 1CAA  
                    __ptext25 1C54                      __ptext17 1DE4                      __ptext34 1AF6  
                    __ptext26 1D12                      __ptext18 1B78                      __ptext35 1A16  
                    __ptext27 1DB0                      __ptext19 1A68                      __ptext36 19C2  
                    __ptext28 1DE8                      __ptext37 1D96                      __ptext29 1DEC  
                    __ptext38 1BEE              __size_of_sprintf 030E               ??_setStandbyLed 003A  
                    _setIODIR 1CF4                 __size_of_main 003A                 __size_of_init 0058  
               UART_putc@data 0038          __end_of_SWSPIClearCS 1DF0   __size_of_setLcdBacklightLed 0006  
                    int$flags 0050               LcdWriteString@s 003D                    _MEMCONbits 000F9C  
                ?_checkInputs 0029                      isdigit@c 003A        __size_of_updateOutputs 002A  
                    intlevel2 0000                    LcdGoTo@pos 003D                     sprintf@ap 0060  
                   sprintf@sp 0045              ___lwmod@dividend 003F                    _RCSTA1bits 000FAB  
       __size_of_stateMachine 01E8           setCoolElement@state 0038                      sprintf@c 0068  
                    sprintf@f 0047              SWSPIWrite@output 0039               ___lwmod@divisor 0041  
             ___lwmod@counter 0043               SWSPIWrite@input 004F                _setHeatElement 1DDE  
                _stateMachine 140A  
