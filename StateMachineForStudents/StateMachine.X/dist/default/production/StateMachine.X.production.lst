

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed May 15 17:58:02 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.41 (B)
    39                           ; Generated 21/02/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F8722 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _dpowers:
    78                           	opt stack 0
    79  001001  0001               	dw	1
    80  001003  000A               	dw	10
    81  001005  0064               	dw	100
    82  001007  03E8               	dw	1000
    83  001009  2710               	dw	10000
    84  00100B                     __end_of_dpowers:
    85                           	opt stack 0
    86  00100B                     _LcdLines:
    87                           	opt stack 0
    88  00100B  20                 	db	32
    89  00100C  20                 	db	32
    90  00100D  20                 	db	32
    91  00100E  20                 	db	32
    92  00100F  20                 	db	32
    93  001010  53                 	db	83
    94  001011  54                 	db	84
    95  001012  41                 	db	65
    96  001013  54                 	db	84
    97  001014  45                 	db	69
    98  001015  20                 	db	32
    99  001016  31                 	db	49
   100  001017  20                 	db	32
   101  001018  20                 	db	32
   102  001019  20                 	db	32
   103  00101A  20                 	db	32
   104  00101B  00                 	db	0
   105  00101C  00                 	db	0
   106  00101D  50                 	db	80
   107  00101E  52                 	db	82
   108  00101F  45                 	db	69
   109  001020  53                 	db	83
   110  001021  53                 	db	83
   111  001022  20                 	db	32
   112  001023  52                 	db	82
   113  001024  42                 	db	66
   114  001025  30                 	db	48
   115  001026  20                 	db	32
   116  001027  42                 	db	66
   117  001028  55                 	db	85
   118  001029  54                 	db	84
   119  00102A  54                 	db	84
   120  00102B  4F                 	db	79
   121  00102C  4E                 	db	78
   122  00102D  00                 	db	0
   123  00102E  00                 	db	0
   124  00102F  20                 	db	32
   125  001030  20                 	db	32
   126  001031  20                 	db	32
   127  001032  20                 	db	32
   128  001033  20                 	db	32
   129  001034  53                 	db	83
   130  001035  54                 	db	84
   131  001036  41                 	db	65
   132  001037  54                 	db	84
   133  001038  45                 	db	69
   134  001039  20                 	db	32
   135  00103A  32                 	db	50
   136  00103B  20                 	db	32
   137  00103C  20                 	db	32
   138  00103D  20                 	db	32
   139  00103E  20                 	db	32
   140  00103F  00                 	db	0
   141  001040  00                 	db	0
   142  001041  20                 	db	32
   143  001042  20                 	db	32
   144  001043  20                 	db	32
   145  001044  20                 	db	32
   146  001045  20                 	db	32
   147  001046  57                 	db	87
   148  001047  41                 	db	65
   149  001048  49                 	db	73
   150  001049  54                 	db	84
   151  00104A  20                 	db	32
   152  00104B  31                 	db	49
   153  00104C  30                 	db	48
   154  00104D  73                 	db	115
   155  00104E  20                 	db	32
   156  00104F  20                 	db	32
   157  001050  20                 	db	32
   158  001051  00                 	db	0
   159  001052  00                 	db	0
   160  001053  20                 	db	32
   161  001054  20                 	db	32
   162  001055  20                 	db	32
   163  001056  20                 	db	32
   164  001057  20                 	db	32
   165  001058  53                 	db	83
   166  001059  54                 	db	84
   167  00105A  41                 	db	65
   168  00105B  54                 	db	84
   169  00105C  45                 	db	69
   170  00105D  20                 	db	32
   171  00105E  33                 	db	51
   172  00105F  20                 	db	32
   173  001060  20                 	db	32
   174  001061  20                 	db	32
   175  001062  20                 	db	32
   176  001063  00                 	db	0
   177  001064  00                 	db	0
   178  001065  50                 	db	80
   179  001066  52                 	db	82
   180  001067  45                 	db	69
   181  001068  53                 	db	83
   182  001069  53                 	db	83
   183  00106A  20                 	db	32
   184  00106B  52                 	db	82
   185  00106C  42                 	db	66
   186  00106D  30                 	db	48
   187  00106E  20                 	db	32
   188  00106F  42                 	db	66
   189  001070  55                 	db	85
   190  001071  54                 	db	84
   191  001072  54                 	db	84
   192  001073  4F                 	db	79
   193  001074  4E                 	db	78
   194  001075  00                 	db	0
   195  001076  00                 	db	0
   196  001077                     __end_of_LcdLines:
   197                           	opt stack 0
   198  0000                     _PIR1bits	set	3998
   199  0000                     _SSP1BUF	set	4041
   200  0000                     _TRISCbits	set	3988
   201  0000                     _TRISFbits	set	3991
   202  0000                     _SSP1CON1bits	set	4038
   203  0000                     _SSP1STATbits	set	4039
   204  0000                     _SSP1CON1	set	4038
   205  0000                     _SSP1STAT	set	4039
   206  0000                     _TRISAbits	set	3986
   207  0000                     _PORTAbits	set	3968
   208  0000                     _PORTD	set	3971
   209  0000                     _MEMCONbits	set	3996
   210  0000                     _TRISD	set	3989
   211  0000                     _TRISB	set	3987
   212  0000                     _PORTDbits	set	3971
   213  0000                     _PORTBbits	set	3969
   214  0000                     _ADRESH	set	4036
   215  0000                     _ADCON0bits	set	4034
   216  0000                     _ADCON2	set	4032
   217  0000                     _ADCON1	set	4033
   218  0000                     _ADCON0	set	4034
   219  001077                     STR_5:
   220  001077  49                 	db	73	;'I'
   221  001078  6E                 	db	110	;'n'
   222  001079  70                 	db	112	;'p'
   223  00107A  75                 	db	117	;'u'
   224  00107B  74                 	db	116	;'t'
   225  00107C  20                 	db	32
   226  00107D  74                 	db	116	;'t'
   227  00107E  3A                 	db	58	;':'
   228  00107F  20                 	db	32
   229  001080  25                 	db	37
   230  001081  64                 	db	100	;'d'
   231  001082  20                 	db	32
   232  001083  20                 	db	32
   233  001084  20                 	db	32
   234  001085  00                 	db	0
   235  001086                     STR_3:
   236  001086  53                 	db	83	;'S'
   237  001087  54                 	db	84	;'T'
   238  001088  41                 	db	65	;'A'
   239  001089  54                 	db	84	;'T'
   240  00108A  45                 	db	69	;'E'
   241  00108B  5F                 	db	95	;'_'
   242  00108C  43                 	db	67	;'C'
   243  00108D  4F                 	db	79	;'O'
   244  00108E  4F                 	db	79	;'O'
   245  00108F  4C                 	db	76	;'L'
   246  001090  20                 	db	32
   247  001091  20                 	db	32
   248  001092  00                 	db	0
   249  001093                     STR_4:
   250  001093  53                 	db	83	;'S'
   251  001094  54                 	db	84	;'T'
   252  001095  41                 	db	65	;'A'
   253  001096  54                 	db	84	;'T'
   254  001097  45                 	db	69	;'E'
   255  001098  5F                 	db	95	;'_'
   256  001099  48                 	db	72	;'H'
   257  00109A  45                 	db	69	;'E'
   258  00109B  41                 	db	65	;'A'
   259  00109C  54                 	db	84	;'T'
   260  00109D  20                 	db	32
   261  00109E  20                 	db	32
   262  00109F  00                 	db	0
   263  0010A0                     STR_2:
   264  0010A0  53                 	db	83	;'S'
   265  0010A1  54                 	db	84	;'T'
   266  0010A2  41                 	db	65	;'A'
   267  0010A3  54                 	db	84	;'T'
   268  0010A4  45                 	db	69	;'E'
   269  0010A5  5F                 	db	95	;'_'
   270  0010A6  56                 	db	86	;'V'
   271  0010A7  45                 	db	69	;'E'
   272  0010A8  4E                 	db	78	;'N'
   273  0010A9  54                 	db	84	;'T'
   274  0010AA  20                 	db	32
   275  0010AB  20                 	db	32
   276  0010AC  00                 	db	0
   277  0010AD                     STR_1:
   278  0010AD  53                 	db	83	;'S'
   279  0010AE  54                 	db	84	;'T'
   280  0010AF  41                 	db	65	;'A'
   281  0010B0  54                 	db	84	;'T'
   282  0010B1  45                 	db	69	;'E'
   283  0010B2  5F                 	db	95	;'_'
   284  0010B3  4F                 	db	79	;'O'
   285  0010B4  46                 	db	70	;'F'
   286  0010B5  46                 	db	70	;'F'
   287  0010B6  20                 	db	32
   288  0010B7  20                 	db	32
   289  0010B8  00                 	db	0
   290                           
   291                           ; #config settings
   292  0010B9  00                 	db	0	; dummy byte at the end
   293  0000                     
   294                           	psect	cinit
   295  001742                     __pcinit:
   296                           	opt stack 0
   297  001742                     start_initialization:
   298                           	opt stack 0
   299  001742                     __initialization:
   300                           	opt stack 0
   301                           
   302                           ; Clear objects allocated to COMRAM (42 bytes)
   303  001742  EE00  F001         	lfsr	0,__pbssCOMRAM
   304  001746  0E2A               	movlw	42
   305  001748                     clear_0:
   306  001748  6AEE               	clrf	postinc0,c
   307  00174A  06E8               	decf	wreg,f,c
   308  00174C  E1FD               	bnz	clear_0
   309  00174E                     end_of_initialization:
   310                           	opt stack 0
   311  00174E                     __end_of__initialization:
   312                           	opt stack 0
   313  00174E  0100               	movlb	0
   314  001750  EF81  F00A         	goto	_main	;jump to C main() function
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           
   318                           	psect	bssCOMRAM
   319  000001                     __pbssCOMRAM:
   320                           	opt stack 0
   321  000001                     stateMachine_clima@DisplayState:
   322                           	opt stack 0
   323  000001                     	ds	1
   324  000002                     checkInput@leftButton_old:
   325                           	opt stack 0
   326  000002                     	ds	1
   327  000003                     _State:
   328                           	opt stack 0
   329  000003                     	ds	1
   330  000004                     _leftButtonEv:
   331                           	opt stack 0
   332  000004                     	ds	1
   333  000005                     _SetTemperature:
   334                           	opt stack 0
   335  000005                     	ds	1
   336  000006                     _RD7Led:
   337                           	opt stack 0
   338  000006                     	ds	1
   339  000007                     _RD8Led:
   340                           	opt stack 0
   341  000007                     	ds	1
   342  000008                     _RD5Led:
   343                           	opt stack 0
   344  000008                     	ds	1
   345  000009                     _state:
   346                           	opt stack 0
   347  000009                     	ds	1
   348  00000A                     _State_Text:
   349                           	opt stack 0
   350  00000A                     	ds	16
   351  00001A                     _s:
   352                           	opt stack 0
   353  00001A                     	ds	16
   354  00002A                     _InputTemperature:
   355                           	opt stack 0
   356  00002A                     	ds	1
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           
   360                           	psect	cstackCOMRAM
   361  00002B                     __pcstackCOMRAM:
   362                           	opt stack 0
   363  00002B                     ?___lwdiv:
   364                           	opt stack 0
   365  00002B                     checkInput@leftButton:
   366                           	opt stack 0
   367  00002B                     OpenSPI1@bus_mode:
   368                           	opt stack 0
   369  00002B                     WriteSPI1@TempVar:
   370                           	opt stack 0
   371  00002B                     Delay10TCYx@unit:
   372                           	opt stack 0
   373  00002B                     Adc_GetMess@Value:
   374                           	opt stack 0
   375  00002B                     setRD5Led@state:
   376                           	opt stack 0
   377  00002B                     setRD7Led@state:
   378                           	opt stack 0
   379  00002B                     setRD8Led@state:
   380                           	opt stack 0
   381  00002B                     ___lwdiv@dividend:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x0
   385  00002B                     	ds	1
   386  00002C                     OpenSPI1@smp_phase:
   387                           	opt stack 0
   388  00002C                     WriteSPI1@data_out:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x1
   392  00002C                     	ds	1
   393  00002D                     setGPIO@value:
   394                           	opt stack 0
   395  00002D                     setIODIR@dir:
   396                           	opt stack 0
   397  00002D                     OpenSPI1@sync_mode:
   398                           	opt stack 0
   399  00002D                     ___lwdiv@divisor:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x2
   403  00002D                     	ds	1
   404  00002E                     setGPIO@address:
   405                           	opt stack 0
   406  00002E                     setIODIR@address:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x3
   410  00002E                     	ds	1
   411  00002F                     lcdCommand@command:
   412                           	opt stack 0
   413  00002F                     LcdChar@letter:
   414                           	opt stack 0
   415  00002F                     ___lwdiv@quotient:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x4
   419  00002F                     	ds	1
   420  000030                     LcdGoTo@pos:
   421                           	opt stack 0
   422  000030                     LcdWriteString@s:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x5
   426  000030                     	ds	1
   427  000031                     ___lwdiv@counter:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x6
   431  000031                     	ds	1
   432  000032                     ?___lwmod:
   433                           	opt stack 0
   434  000032                     ___lwmod@dividend:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x7
   438  000032                     	ds	2
   439  000034                     ___lwmod@divisor:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x9
   443  000034                     	ds	2
   444  000036                     ___lwmod@counter:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0xB
   448  000036                     	ds	1
   449  000037                     ?_sprintf:
   450                           	opt stack 0
   451  000037                     sprintf@sp:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0xC
   455  000037                     	ds	2
   456  000039                     sprintf@f:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0xE
   460  000039                     	ds	4
   461  00003D                     ??_sprintf:
   462                           
   463                           ; 1 bytes @ 0x12
   464  00003D                     	ds	1
   465  00003E                     sprintf@ap:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x13
   469  00003E                     	ds	2
   470  000040                     sprintf@flag:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x15
   474  000040                     	ds	1
   475  000041                     sprintf@prec:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x16
   479  000041                     	ds	1
   480  000042                     sprintf@val:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x17
   484  000042                     	ds	2
   485  000044                     sprintf@c:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x19
   489  000044                     	ds	1
   490  000045                     postinc0	equ	0xFEE
   491                           wreg	equ	0xFE8
   492                           
   493                           ; 1 bytes @ 0x1A
   494 ;;
   495 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   496 ;;
   497 ;; *************** function _main *****************
   498 ;; Defined at:
   499 ;;		line 376 in file "StateMachine.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;		None
   502 ;; Auto vars:     Size  Location     Type
   503 ;;		None
   504 ;; Return value:  Size  Location     Type
   505 ;;                  1    wreg      void 
   506 ;; Registers used:
   507 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : 0/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   517 ;;Total ram usage:        0 bytes
   518 ;; Hardware stack levels required when called:    6
   519 ;; This function calls:
   520 ;;		_Adc_GetMess
   521 ;;		_LcdGoTo
   522 ;;		_LcdWriteString
   523 ;;		_checkInput
   524 ;;		_init
   525 ;;		_sprintf
   526 ;;		_stateMachine_clima
   527 ;;		_updateOutputs
   528 ;; This function is called by:
   529 ;;		Startup code after reset
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text0
   534  001502                     __ptext0:
   535                           	opt stack 0
   536  001502                     _main:
   537                           	opt stack 25
   538                           
   539                           ;StateMachine.c: 378: init();
   540                           
   541                           ;incstack = 0
   542  001502  EC89  F00B         	call	_init	;wreg free
   543  001506                     l1670:
   544                           
   545                           ;StateMachine.c: 381: {
   546                           ;StateMachine.c: 382: Adc_GetMess(&InputTemperature);
   547  001506  0E2A               	movlw	low _InputTemperature
   548  001508  6E2B               	movwf	Adc_GetMess@Value,c
   549  00150A  0E00               	movlw	high _InputTemperature
   550  00150C  6E2C               	movwf	Adc_GetMess@Value+1,c
   551  00150E  EC53  F00B         	call	_Adc_GetMess	;wreg free
   552                           
   553                           ;StateMachine.c: 383: checkInput();
   554  001512  EC31  F00B         	call	_checkInput	;wreg free
   555                           
   556                           ;StateMachine.c: 384: stateMachine_clima();
   557  001516  EC5D  F008         	call	_stateMachine_clima	;wreg free
   558                           
   559                           ;StateMachine.c: 385: updateOutputs();
   560  00151A  EC43  F00B         	call	_updateOutputs	;wreg free
   561                           
   562                           ;StateMachine.c: 387: sprintf(s, "Input t: %d   ", InputTemperature);
   563  00151E  0E1A               	movlw	low _s
   564  001520  6E37               	movwf	sprintf@sp,c
   565  001522  0E00               	movlw	high _s
   566  001524  6E38               	movwf	sprintf@sp+1,c
   567  001526  0E77               	movlw	low STR_5
   568  001528  6E39               	movwf	sprintf@f,c
   569  00152A  0E10               	movlw	high STR_5
   570  00152C  6E3A               	movwf	sprintf@f+1,c
   571  00152E  C02A  F03B         	movff	_InputTemperature,?_sprintf+4
   572  001532  6A3C               	clrf	?_sprintf+5,c
   573  001534  EC54  F009         	call	_sprintf	;wreg free
   574                           
   575                           ;StateMachine.c: 388: LcdGoTo(0x40);
   576  001538  0E40               	movlw	64
   577  00153A  ECB2  F00B         	call	_LcdGoTo
   578                           
   579                           ;StateMachine.c: 389: LcdWriteString(s);
   580  00153E  0E1A               	movlw	low _s
   581  001540  6E30               	movwf	LcdWriteString@s,c
   582  001542  0E00               	movlw	high _s
   583  001544  6E31               	movwf	LcdWriteString@s+1,c
   584  001546  EC02  F00A         	call	_LcdWriteString	;wreg free
   585                           
   586                           ;StateMachine.c: 392: leftButtonEv = 0;
   587  00154A  0E00               	movlw	0
   588  00154C  6E04               	movwf	_leftButtonEv,c
   589  00154E  D7DB               	goto	l1670
   590  001550                     __end_of_main:
   591                           	opt stack 0
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           
   595 ;; *************** function _updateOutputs *****************
   596 ;; Defined at:
   597 ;;		line 322 in file "StateMachine.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		None
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   615 ;;Total ram usage:        0 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; This function calls:
   618 ;;		Nothing
   619 ;; This function is called by:
   620 ;;		_main
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624                           	psect	text1
   625  001686                     __ptext1:
   626                           	opt stack 0
   627  001686                     _updateOutputs:
   628                           	opt stack 30
   629                           
   630                           ;StateMachine.c: 325: PORTDbits.RD4 = RD5Led;
   631                           
   632                           ;incstack = 0
   633  001686  B008               	btfsc	_RD5Led,0,c
   634  001688  D002               	bra	u385
   635  00168A  9883               	bcf	3971,4,c	;volatile
   636  00168C  D001               	bra	u386
   637  00168E                     u385:
   638  00168E  8883               	bsf	3971,4,c	;volatile
   639  001690                     u386:
   640                           
   641                           ;StateMachine.c: 326: PORTDbits.RD6 = RD7Led;
   642  001690  B006               	btfsc	_RD7Led,0,c
   643  001692  D002               	bra	u395
   644  001694  9C83               	bcf	3971,6,c	;volatile
   645  001696  D001               	bra	u396
   646  001698                     u395:
   647  001698  8C83               	bsf	3971,6,c	;volatile
   648  00169A                     u396:
   649                           
   650                           ;StateMachine.c: 329: PORTDbits.RD7= RD8Led;
   651  00169A  B007               	btfsc	_RD8Led,0,c
   652  00169C  D002               	bra	u405
   653  00169E  9E83               	bcf	3971,7,c	;volatile
   654  0016A0  D001               	bra	u406
   655  0016A2                     u405:
   656  0016A2  8E83               	bsf	3971,7,c	;volatile
   657  0016A4                     u406:
   658  0016A4  0012               	return		;funcret
   659  0016A6                     __end_of_updateOutputs:
   660                           	opt stack 0
   661                           postinc0	equ	0xFEE
   662                           wreg	equ	0xFE8
   663                           
   664 ;; *************** function _stateMachine_clima *****************
   665 ;; Defined at:
   666 ;;		line 165 in file "StateMachine.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;		None
   669 ;; Auto vars:     Size  Location     Type
   670 ;;		None
   671 ;; Return value:  Size  Location     Type
   672 ;;                  1    wreg      void 
   673 ;; Registers used:
   674 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   684 ;;Total ram usage:        0 bytes
   685 ;; Hardware stack levels used:    1
   686 ;; Hardware stack levels required when called:    5
   687 ;; This function calls:
   688 ;;		_UpdateLCDText
   689 ;;		_getOnOffLeftButton
   690 ;;		_setRD5Led
   691 ;;		_setRD7Led
   692 ;;		_setRD8Led
   693 ;;		_sprintf
   694 ;; This function is called by:
   695 ;;		_main
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699                           	psect	text2
   700  0010BA                     __ptext2:
   701                           	opt stack 0
   702  0010BA                     _stateMachine_clima:
   703                           	opt stack 25
   704                           
   705                           ;StateMachine.c: 166: static byte DisplayState;
   706                           ;StateMachine.c: 168: switch (State) {
   707                           
   708                           ;incstack = 0
   709  0010BA  D0E8               	goto	l1624
   710  0010BC                     l1530:
   711                           
   712                           ;StateMachine.c: 171: sprintf(State_Text, "STATE_OFF  ");
   713  0010BC  0E0A               	movlw	low _State_Text
   714  0010BE  6E37               	movwf	sprintf@sp,c
   715  0010C0  0E00               	movlw	high _State_Text
   716  0010C2  6E38               	movwf	sprintf@sp+1,c
   717  0010C4  0EAD               	movlw	low STR_1
   718  0010C6  6E39               	movwf	sprintf@f,c
   719  0010C8  0E10               	movlw	high STR_1
   720  0010CA  6E3A               	movwf	sprintf@f+1,c
   721  0010CC  EC54  F009         	call	_sprintf	;wreg free
   722                           
   723                           ;StateMachine.c: 172: if (!DisplayState)
   724  0010D0  5001               	movf	stateMachine_clima@DisplayState,w,c
   725  0010D2  A4D8               	btfss	status,2,c
   726  0010D4  D004               	goto	l1538
   727                           
   728                           ;StateMachine.c: 173: UpdateLCDText(), DisplayState = 1;
   729  0010D6  EC7D  F00B         	call	_UpdateLCDText	;wreg free
   730  0010DA  0E01               	movlw	1
   731  0010DC  6E01               	movwf	stateMachine_clima@DisplayState,c
   732  0010DE                     l1538:
   733                           
   734                           ;StateMachine.c: 175: setRD5Led(0);
   735  0010DE  0E00               	movlw	0
   736  0010E0  6E2C               	movwf	setRD5Led@state+1,c
   737  0010E2  0E00               	movlw	0
   738  0010E4  6E2B               	movwf	setRD5Led@state,c
   739  0010E6  ECC6  F00B         	call	_setRD5Led	;wreg free
   740                           
   741                           ;StateMachine.c: 176: setRD7Led(0);
   742  0010EA  0E00               	movlw	0
   743  0010EC  6E2C               	movwf	setRD7Led@state+1,c
   744  0010EE  0E00               	movlw	0
   745  0010F0  6E2B               	movwf	setRD7Led@state,c
   746  0010F2  ECC3  F00B         	call	_setRD7Led	;wreg free
   747                           
   748                           ;StateMachine.c: 177: setRD8Led(0);
   749  0010F6  0E00               	movlw	0
   750  0010F8  6E2C               	movwf	setRD8Led@state+1,c
   751  0010FA  0E00               	movlw	0
   752  0010FC  6E2B               	movwf	setRD8Led@state,c
   753  0010FE  ECC0  F00B         	call	_setRD8Led	;wreg free
   754                           
   755                           ;StateMachine.c: 181: if (getOnOffLeftButton())
   756  001102  ECC9  F00B         	call	_getOnOffLeftButton	;wreg free
   757  001106  0900               	iorlw	0
   758  001108  B4D8               	btfsc	status,2,c
   759  00110A  0012               	return	
   760                           
   761                           ;StateMachine.c: 182: DisplayState = 0, State = STATE_ON_VENT;
   762  00110C  0E00               	movlw	0
   763  00110E  6E01               	movwf	stateMachine_clima@DisplayState,c
   764  001110  0E01               	movlw	1
   765  001112  6E03               	movwf	_State,c
   766                           
   767                           ;StateMachine.c: 184: break;
   768  001114  0012               	return	
   769  001116                     l1548:
   770                           
   771                           ;StateMachine.c: 188: setRD5Led(0);
   772  001116  0E00               	movlw	0
   773  001118  6E2C               	movwf	setRD5Led@state+1,c
   774  00111A  0E00               	movlw	0
   775  00111C  6E2B               	movwf	setRD5Led@state,c
   776  00111E  ECC6  F00B         	call	_setRD5Led	;wreg free
   777                           
   778                           ;StateMachine.c: 189: setRD7Led(0);
   779  001122  0E00               	movlw	0
   780  001124  6E2C               	movwf	setRD7Led@state+1,c
   781  001126  0E00               	movlw	0
   782  001128  6E2B               	movwf	setRD7Led@state,c
   783  00112A  ECC3  F00B         	call	_setRD7Led	;wreg free
   784                           
   785                           ;StateMachine.c: 190: setRD8Led(1);
   786  00112E  0E00               	movlw	0
   787  001130  6E2C               	movwf	setRD8Led@state+1,c
   788  001132  0E01               	movlw	1
   789  001134  6E2B               	movwf	setRD8Led@state,c
   790  001136  ECC0  F00B         	call	_setRD8Led	;wreg free
   791                           
   792                           ;StateMachine.c: 192: sprintf(State_Text, "STATE_VENT  ");
   793  00113A  0E0A               	movlw	low _State_Text
   794  00113C  6E37               	movwf	sprintf@sp,c
   795  00113E  0E00               	movlw	high _State_Text
   796  001140  6E38               	movwf	sprintf@sp+1,c
   797  001142  0EA0               	movlw	low STR_2
   798  001144  6E39               	movwf	sprintf@f,c
   799  001146  0E10               	movlw	high STR_2
   800  001148  6E3A               	movwf	sprintf@f+1,c
   801  00114A  EC54  F009         	call	_sprintf	;wreg free
   802                           
   803                           ;StateMachine.c: 193: if (!DisplayState)
   804  00114E  5001               	movf	stateMachine_clima@DisplayState,w,c
   805  001150  A4D8               	btfss	status,2,c
   806  001152  D004               	goto	l1558
   807                           
   808                           ;StateMachine.c: 194: UpdateLCDText(), DisplayState = 1;
   809  001154  EC7D  F00B         	call	_UpdateLCDText	;wreg free
   810  001158  0E01               	movlw	1
   811  00115A  6E01               	movwf	stateMachine_clima@DisplayState,c
   812  00115C                     l1558:
   813                           
   814                           ;StateMachine.c: 197: if (getOnOffLeftButton())
   815  00115C  ECC9  F00B         	call	_getOnOffLeftButton	;wreg free
   816  001160  0900               	iorlw	0
   817  001162  B4D8               	btfsc	status,2,c
   818  001164  D005               	goto	l1562
   819                           
   820                           ;StateMachine.c: 198: DisplayState=0, State = STATE_OFF;
   821  001166  0E00               	movlw	0
   822  001168  6E01               	movwf	stateMachine_clima@DisplayState,c
   823  00116A  0E00               	movlw	0
   824  00116C  6E03               	movwf	_State,c
   825  00116E  0012               	return	
   826  001170                     l1562:
   827                           
   828                           ;StateMachine.c: 199: else
   829                           ;StateMachine.c: 200: if (InputTemperature > SetTemperature)
   830  001170  502A               	movf	_InputTemperature,w,c
   831  001172  5C05               	subwf	_SetTemperature,w,c
   832  001174  B0D8               	btfsc	status,0,c
   833  001176  D005               	goto	l1566
   834                           
   835                           ;StateMachine.c: 201: DisplayState = 0, State = STATE_ON_COOL;
   836  001178  0E00               	movlw	0
   837  00117A  6E01               	movwf	stateMachine_clima@DisplayState,c
   838  00117C  0E02               	movlw	2
   839  00117E  6E03               	movwf	_State,c
   840  001180  0012               	return	
   841  001182                     l1566:
   842                           
   843                           ;StateMachine.c: 202: else if (InputTemperature < SetTemperature)
   844  001182  5005               	movf	_SetTemperature,w,c
   845  001184  5C2A               	subwf	_InputTemperature,w,c
   846  001186  B0D8               	btfsc	status,0,c
   847  001188  0012               	return	
   848                           
   849                           ;StateMachine.c: 203: DisplayState= 0, State = STATE_ON_HEAT;
   850  00118A  0E00               	movlw	0
   851  00118C  6E01               	movwf	stateMachine_clima@DisplayState,c
   852  00118E  0E03               	movlw	3
   853  001190  6E03               	movwf	_State,c
   854                           
   855                           ;StateMachine.c: 206: break;
   856  001192  0012               	return	
   857  001194                     l1570:
   858                           
   859                           ;StateMachine.c: 209: sprintf(State_Text, "STATE_COOL  ");
   860  001194  0E0A               	movlw	low _State_Text
   861  001196  6E37               	movwf	sprintf@sp,c
   862  001198  0E00               	movlw	high _State_Text
   863  00119A  6E38               	movwf	sprintf@sp+1,c
   864  00119C  0E86               	movlw	low STR_3
   865  00119E  6E39               	movwf	sprintf@f,c
   866  0011A0  0E10               	movlw	high STR_3
   867  0011A2  6E3A               	movwf	sprintf@f+1,c
   868  0011A4  EC54  F009         	call	_sprintf	;wreg free
   869                           
   870                           ;StateMachine.c: 211: if (!DisplayState)
   871  0011A8  5001               	movf	stateMachine_clima@DisplayState,w,c
   872  0011AA  A4D8               	btfss	status,2,c
   873  0011AC  D004               	goto	l1578
   874                           
   875                           ;StateMachine.c: 212: UpdateLCDText(), DisplayState = 1;
   876  0011AE  EC7D  F00B         	call	_UpdateLCDText	;wreg free
   877  0011B2  0E01               	movlw	1
   878  0011B4  6E01               	movwf	stateMachine_clima@DisplayState,c
   879  0011B6                     l1578:
   880                           
   881                           ;StateMachine.c: 214: setRD7Led(1);
   882  0011B6  0E00               	movlw	0
   883  0011B8  6E2C               	movwf	setRD7Led@state+1,c
   884  0011BA  0E01               	movlw	1
   885  0011BC  6E2B               	movwf	setRD7Led@state,c
   886  0011BE  ECC3  F00B         	call	_setRD7Led	;wreg free
   887                           
   888                           ;StateMachine.c: 215: setRD5Led(0);
   889  0011C2  0E00               	movlw	0
   890  0011C4  6E2C               	movwf	setRD5Led@state+1,c
   891  0011C6  0E00               	movlw	0
   892  0011C8  6E2B               	movwf	setRD5Led@state,c
   893  0011CA  ECC6  F00B         	call	_setRD5Led	;wreg free
   894                           
   895                           ;StateMachine.c: 216: setRD8Led(1);
   896  0011CE  0E00               	movlw	0
   897  0011D0  6E2C               	movwf	setRD8Led@state+1,c
   898  0011D2  0E01               	movlw	1
   899  0011D4  6E2B               	movwf	setRD8Led@state,c
   900  0011D6  ECC0  F00B         	call	_setRD8Led	;wreg free
   901                           
   902                           ;StateMachine.c: 219: if (getOnOffLeftButton())
   903  0011DA  ECC9  F00B         	call	_getOnOffLeftButton	;wreg free
   904  0011DE  0900               	iorlw	0
   905  0011E0  B4D8               	btfsc	status,2,c
   906  0011E2  D005               	goto	l1588
   907                           
   908                           ;StateMachine.c: 220: DisplayState = 0, State = STATE_OFF;
   909  0011E4  0E00               	movlw	0
   910  0011E6  6E01               	movwf	stateMachine_clima@DisplayState,c
   911  0011E8  0E00               	movlw	0
   912  0011EA  6E03               	movwf	_State,c
   913  0011EC  0012               	return	
   914  0011EE                     l1588:
   915                           
   916                           ;StateMachine.c: 221: else {
   917                           ;StateMachine.c: 223: if (InputTemperature < SetTemperature)
   918  0011EE  5005               	movf	_SetTemperature,w,c
   919  0011F0  5C2A               	subwf	_InputTemperature,w,c
   920  0011F2  B0D8               	btfsc	status,0,c
   921  0011F4  D005               	goto	l1592
   922                           
   923                           ;StateMachine.c: 224: DisplayState = 0, State = STATE_ON_HEAT;
   924  0011F6  0E00               	movlw	0
   925  0011F8  6E01               	movwf	stateMachine_clima@DisplayState,c
   926  0011FA  0E03               	movlw	3
   927  0011FC  6E03               	movwf	_State,c
   928  0011FE  0012               	return	
   929  001200                     l1592:
   930                           
   931                           ;StateMachine.c: 225: else if (InputTemperature == SetTemperature)
   932  001200  5005               	movf	_SetTemperature,w,c
   933  001202  182A               	xorwf	_InputTemperature,w,c
   934  001204  A4D8               	btfss	status,2,c
   935  001206  0012               	return	
   936                           
   937                           ;StateMachine.c: 226: DisplayState = 0, State = STATE_ON_VENT;
   938  001208  0E00               	movlw	0
   939  00120A  6E01               	movwf	stateMachine_clima@DisplayState,c
   940  00120C  0E01               	movlw	1
   941  00120E  6E03               	movwf	_State,c
   942                           
   943                           ;StateMachine.c: 228: }
   944                           ;StateMachine.c: 230: break;
   945  001210  0012               	return	
   946  001212                     l1596:
   947                           
   948                           ;StateMachine.c: 234: sprintf(State_Text, "STATE_HEAT  ");
   949  001212  0E0A               	movlw	low _State_Text
   950  001214  6E37               	movwf	sprintf@sp,c
   951  001216  0E00               	movlw	high _State_Text
   952  001218  6E38               	movwf	sprintf@sp+1,c
   953  00121A  0E93               	movlw	low STR_4
   954  00121C  6E39               	movwf	sprintf@f,c
   955  00121E  0E10               	movlw	high STR_4
   956  001220  6E3A               	movwf	sprintf@f+1,c
   957  001222  EC54  F009         	call	_sprintf	;wreg free
   958                           
   959                           ;StateMachine.c: 235: if (!DisplayState)
   960  001226  5001               	movf	stateMachine_clima@DisplayState,w,c
   961  001228  A4D8               	btfss	status,2,c
   962  00122A  D004               	goto	l1604
   963                           
   964                           ;StateMachine.c: 236: UpdateLCDText(), DisplayState = 1;
   965  00122C  EC7D  F00B         	call	_UpdateLCDText	;wreg free
   966  001230  0E01               	movlw	1
   967  001232  6E01               	movwf	stateMachine_clima@DisplayState,c
   968  001234                     l1604:
   969                           
   970                           ;StateMachine.c: 238: setRD5Led(1);
   971  001234  0E00               	movlw	0
   972  001236  6E2C               	movwf	setRD5Led@state+1,c
   973  001238  0E01               	movlw	1
   974  00123A  6E2B               	movwf	setRD5Led@state,c
   975  00123C  ECC6  F00B         	call	_setRD5Led	;wreg free
   976                           
   977                           ;StateMachine.c: 239: setRD7Led(0);
   978  001240  0E00               	movlw	0
   979  001242  6E2C               	movwf	setRD7Led@state+1,c
   980  001244  0E00               	movlw	0
   981  001246  6E2B               	movwf	setRD7Led@state,c
   982  001248  ECC3  F00B         	call	_setRD7Led	;wreg free
   983                           
   984                           ;StateMachine.c: 240: setRD8Led(1);
   985  00124C  0E00               	movlw	0
   986  00124E  6E2C               	movwf	setRD8Led@state+1,c
   987  001250  0E01               	movlw	1
   988  001252  6E2B               	movwf	setRD8Led@state,c
   989  001254  ECC0  F00B         	call	_setRD8Led	;wreg free
   990                           
   991                           ;StateMachine.c: 242: if (getOnOffLeftButton())
   992  001258  ECC9  F00B         	call	_getOnOffLeftButton	;wreg free
   993  00125C  0900               	iorlw	0
   994  00125E  B4D8               	btfsc	status,2,c
   995  001260  D003               	goto	l1614
   996                           
   997                           ;StateMachine.c: 243: State = STATE_OFF;
   998  001262  0E00               	movlw	0
   999  001264  6E03               	movwf	_State,c
  1000  001266  0012               	return	
  1001  001268                     l1614:
  1002                           
  1003                           ;StateMachine.c: 244: else {
  1004                           ;StateMachine.c: 246: if (InputTemperature > SetTemperature)
  1005  001268  502A               	movf	_InputTemperature,w,c
  1006  00126A  5C05               	subwf	_SetTemperature,w,c
  1007  00126C  B0D8               	btfsc	status,0,c
  1008  00126E  D005               	goto	l1618
  1009                           
  1010                           ;StateMachine.c: 247: DisplayState = 0, State = STATE_ON_COOL;
  1011  001270  0E00               	movlw	0
  1012  001272  6E01               	movwf	stateMachine_clima@DisplayState,c
  1013  001274  0E02               	movlw	2
  1014  001276  6E03               	movwf	_State,c
  1015  001278  0012               	return	
  1016  00127A                     l1618:
  1017                           
  1018                           ;StateMachine.c: 248: else if (InputTemperature == SetTemperature)
  1019  00127A  5005               	movf	_SetTemperature,w,c
  1020  00127C  182A               	xorwf	_InputTemperature,w,c
  1021  00127E  A4D8               	btfss	status,2,c
  1022  001280  0012               	return	
  1023                           
  1024                           ;StateMachine.c: 249: DisplayState = 0, State = STATE_ON_VENT;
  1025  001282  0E00               	movlw	0
  1026  001284  6E01               	movwf	stateMachine_clima@DisplayState,c
  1027  001286  0E01               	movlw	1
  1028  001288  6E03               	movwf	_State,c
  1029                           
  1030                           ;StateMachine.c: 255: }
  1031                           
  1032                           ;StateMachine.c: 252: }
  1033                           ;StateMachine.c: 254: break;
  1034  00128A  0012               	return	
  1035  00128C                     l1624:
  1036  00128C  5003               	movf	_State,w,c
  1037                           
  1038                           ; Switch size 1, requested type "space"
  1039                           ; Number of cases is 4, Range of values is 0 to 3
  1040                           ; switch strategies available:
  1041                           ; Name         Instructions Cycles
  1042                           ; simple_byte           13     7 (average)
  1043                           ;	Chosen strategy is simple_byte
  1044  00128E  0A00               	xorlw	0	; case 0
  1045  001290  B4D8               	btfsc	status,2,c
  1046  001292  D714               	goto	l1530
  1047  001294  0A01               	xorlw	1	; case 1
  1048  001296  B4D8               	btfsc	status,2,c
  1049  001298  D73E               	goto	l1548
  1050  00129A  0A03               	xorlw	3	; case 2
  1051  00129C  B4D8               	btfsc	status,2,c
  1052  00129E  D77A               	goto	l1570
  1053  0012A0  0A01               	xorlw	1	; case 3
  1054  0012A2  A4D8               	btfss	status,2,c
  1055  0012A4  0012               	return	
  1056  0012A6  D7B5               	goto	l1596
  1057  0012A8                     __end_of_stateMachine_clima:
  1058                           	opt stack 0
  1059                           postinc0	equ	0xFEE
  1060                           wreg	equ	0xFE8
  1061                           status	equ	0xFD8
  1062                           
  1063 ;; *************** function _sprintf *****************
  1064 ;; Defined at:
  1065 ;;		line 492 in file "D:\Hella\Compiler\sources\common\doprnt.c"
  1066 ;; Parameters:    Size  Location     Type
  1067 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1068 ;;		 -> s(16), State_Text(16), 
  1069 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1070 ;;		 -> STR_5(15), STR_4(13), STR_3(13), STR_2(13), 
  1071 ;;		 -> STR_1(12), 
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;  tmpval          4    0        struct .
  1074 ;;  cp              3    0        PTR const unsigned char 
  1075 ;;  val             2   23[COMRAM] unsigned int 
  1076 ;;  ap              2   19[COMRAM] PTR void [1]
  1077 ;;		 -> ?_sprintf(2), 
  1078 ;;  len             2    0        unsigned int 
  1079 ;;  c               1   25[COMRAM] char 
  1080 ;;  prec            1   22[COMRAM] char 
  1081 ;;  flag            1   21[COMRAM] unsigned char 
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  2   12[COMRAM] int 
  1084 ;; Registers used:
  1085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1091 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1095 ;;Total ram usage:       14 bytes
  1096 ;; Hardware stack levels used:    1
  1097 ;; Hardware stack levels required when called:    1
  1098 ;; This function calls:
  1099 ;;		___lwdiv
  1100 ;;		___lwmod
  1101 ;; This function is called by:
  1102 ;;		_stateMachine_clima
  1103 ;;		_main
  1104 ;; This function uses a non-reentrant model
  1105 ;;
  1106                           
  1107                           	psect	text3
  1108  0012A8                     __ptext3:
  1109                           	opt stack 0
  1110  0012A8                     _sprintf:
  1111                           	opt stack 28
  1112                           
  1113                           ;doprnt.c: 494: va_list ap;
  1114                           ;doprnt.c: 499: signed char c;
  1115                           ;doprnt.c: 506: signed char prec;
  1116                           ;doprnt.c: 508: unsigned char flag;
  1117                           ;doprnt.c: 523: union {
  1118                           ;doprnt.c: 524: unsigned long vd;
  1119                           ;doprnt.c: 525: double integ;
  1120                           ;doprnt.c: 526: } tmpval;
  1121                           ;doprnt.c: 528: unsigned int val;
  1122                           ;doprnt.c: 529: unsigned len;
  1123                           ;doprnt.c: 530: const char * cp;
  1124                           ;doprnt.c: 533: *ap = __va_start();
  1125                           
  1126                           ;incstack = 0
  1127  0012A8  0E3B               	movlw	low (?_sprintf+4)
  1128  0012AA  6E3E               	movwf	sprintf@ap,c
  1129  0012AC  0E00               	movlw	high (?_sprintf+4)
  1130  0012AE  6E3F               	movwf	sprintf@ap+1,c
  1131                           
  1132                           ;doprnt.c: 536: while(c = *f++) {
  1133  0012B0  D094               	goto	l1486
  1134  0012B2                     l1434:
  1135                           
  1136                           ;doprnt.c: 538: if(c != '%')
  1137  0012B2  0E25               	movlw	37
  1138  0012B4  1844               	xorwf	sprintf@c,w,c
  1139  0012B6  B4D8               	btfsc	status,2,c
  1140  0012B8  D009               	goto	l1440
  1141                           
  1142                           ;doprnt.c: 540: {
  1143                           ;doprnt.c: 541: ((*sp++ = (c)));
  1144  0012BA  C037  FFD9         	movff	sprintf@sp,fsr2l
  1145  0012BE  C038  FFDA         	movff	sprintf@sp+1,fsr2h
  1146  0012C2  C044  FFDF         	movff	sprintf@c,indf2
  1147  0012C6  4A37               	infsnz	sprintf@sp,f,c
  1148  0012C8  2A38               	incf	sprintf@sp+1,f,c
  1149                           
  1150                           ;doprnt.c: 542: continue;
  1151  0012CA  D087               	goto	l1486
  1152  0012CC                     l1440:
  1153                           
  1154                           ;doprnt.c: 543: }
  1155                           ;doprnt.c: 548: flag = 0;
  1156  0012CC  0E00               	movlw	0
  1157  0012CE  6E40               	movwf	sprintf@flag,c
  1158                           
  1159                           ;doprnt.c: 822: }
  1160                           
  1161                           ;doprnt.c: 813: continue;
  1162                           
  1163                           ;doprnt.c: 802: default:
  1164                           
  1165                           ;doprnt.c: 698: case 'i':
  1166                           ;doprnt.c: 699: break;
  1167                           
  1168                           ;doprnt.c: 697: case 'd':
  1169                           
  1170                           ;doprnt.c: 638: goto alldone;
  1171                           
  1172                           ;doprnt.c: 637: case 0:
  1173                           
  1174                           ;doprnt.c: 635: switch(c = *f++) {
  1175  0012D0  C039  FFF6         	movff	sprintf@f,tblptrl
  1176  0012D4  C03A  FFF7         	movff	sprintf@f+1,tblptrh
  1177  0012D8  4A39               	infsnz	sprintf@f,f,c
  1178  0012DA  2A3A               	incf	sprintf@f+1,f,c
  1179  0012DC                     	if	0	;tblptru may be non-zero
  1180  0012DC                     	endif
  1181  0012DC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1182  0012DC  0E00               	movlw	low (__mediumconst shr (0+16))
  1183  0012DE  6EF8               	movwf	tblptru,c
  1184  0012E0                     	endif
  1185  0012E0  0008               	tblrd		*
  1186  0012E2  CFF5 F044          	movff	tablat,sprintf@c
  1187  0012E6  5044               	movf	sprintf@c,w,c
  1188                           
  1189                           ; Switch size 1, requested type "space"
  1190                           ; Number of cases is 3, Range of values is 0 to 105
  1191                           ; switch strategies available:
  1192                           ; Name         Instructions Cycles
  1193                           ; simple_byte           10     6 (average)
  1194                           ;	Chosen strategy is simple_byte
  1195  0012E8  0A00               	xorlw	0	; case 0
  1196  0012EA  B4D8               	btfsc	status,2,c
  1197  0012EC  D084               	goto	l1488
  1198  0012EE  0A64               	xorlw	100	; case 100
  1199  0012F0  B4D8               	btfsc	status,2,c
  1200  0012F2  D003               	goto	l1446
  1201  0012F4  0A0D               	xorlw	13	; case 105
  1202  0012F6  A4D8               	btfss	status,2,c
  1203  0012F8  D070               	goto	l1486
  1204  0012FA                     l1446:
  1205                           
  1206                           ;doprnt.c: 1253: {
  1207                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1208  0012FA  C03E  FFD9         	movff	sprintf@ap,fsr2l
  1209  0012FE  C03F  FFDA         	movff	sprintf@ap+1,fsr2h
  1210  001302  CFDE F042          	movff	postinc2,sprintf@val
  1211  001306  CFDD F043          	movff	postdec2,sprintf@val+1
  1212  00130A  0E02               	movlw	2
  1213  00130C  263E               	addwf	sprintf@ap,f,c
  1214  00130E  0E00               	movlw	0
  1215  001310  223F               	addwfc	sprintf@ap+1,f,c
  1216                           
  1217                           ;doprnt.c: 1261: if((int)val < 0) {
  1218  001312  AE43               	btfss	sprintf@val+1,7,c
  1219  001314  D006               	goto	l1456
  1220                           
  1221                           ;doprnt.c: 1262: flag |= 0x03;
  1222  001316  0E03               	movlw	3
  1223  001318  1240               	iorwf	sprintf@flag,f,c
  1224                           
  1225                           ;doprnt.c: 1263: val = -val;
  1226  00131A  6C42               	negf	sprintf@val,c
  1227  00131C  1E43               	comf	sprintf@val+1,f,c
  1228  00131E  B0D8               	btfsc	status,0,c
  1229  001320  2A43               	incf	sprintf@val+1,f,c
  1230  001322                     l1456:
  1231                           
  1232                           ;doprnt.c: 1264: }
  1233                           ;doprnt.c: 1266: }
  1234                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1235  001322  0E01               	movlw	1
  1236  001324  6E44               	movwf	sprintf@c,c
  1237  001326                     l1458:
  1238  001326  0E05               	movlw	5
  1239  001328  1844               	xorwf	sprintf@c,w,c
  1240  00132A  B4D8               	btfsc	status,2,c
  1241  00132C  D015               	goto	l1470
  1242                           
  1243                           ;doprnt.c: 1306: if(val < dpowers[c])
  1244  00132E  5044               	movf	sprintf@c,w,c
  1245  001330  0D02               	mullw	2
  1246  001332  0E01               	movlw	low _dpowers
  1247  001334  24F3               	addwf	prodl,w,c
  1248  001336  6EF6               	movwf	tblptrl,c
  1249  001338  0E10               	movlw	high _dpowers
  1250  00133A  20F4               	addwfc	prodh,w,c
  1251  00133C  6EF7               	movwf	tblptrh,c
  1252  00133E                     	if	1	;There are 3 active tblptr bytes
  1253  00133E  6AF8               	clrf	tblptru,c
  1254  001340  0E00               	movlw	low (__mediumconst shr (0+16))
  1255  001342  22F8               	addwfc	tblptru,f,c
  1256  001344                     	endif
  1257  001344  0009               	tblrd		*+
  1258  001346  50F5               	movf	tablat,w,c
  1259  001348  5C42               	subwf	sprintf@val,w,c
  1260  00134A  0009               	tblrd		*+
  1261  00134C  50F5               	movf	tablat,w,c
  1262  00134E  5843               	subwfb	sprintf@val+1,w,c
  1263  001350  A0D8               	btfss	status,0,c
  1264  001352  D002               	goto	l1470
  1265                           
  1266                           ;doprnt.c: 1307: break;
  1267  001354  2A44               	incf	sprintf@c,f,c
  1268  001356  D7E7               	goto	l1458
  1269  001358                     l1470:
  1270                           
  1271                           ;doprnt.c: 1422: {
  1272                           ;doprnt.c: 1438: if(flag & 0x03)
  1273  001358  C040  F03D         	movff	sprintf@flag,??_sprintf
  1274  00135C  0E03               	movlw	3
  1275  00135E  163D               	andwf	??_sprintf,f,c
  1276  001360  B4D8               	btfsc	status,2,c
  1277  001362  D008               	goto	l1476
  1278                           
  1279                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1280  001364  C037  FFD9         	movff	sprintf@sp,fsr2l
  1281  001368  C038  FFDA         	movff	sprintf@sp+1,fsr2h
  1282  00136C  0E2D               	movlw	45
  1283  00136E  6EDF               	movwf	indf2,c
  1284  001370  4A37               	infsnz	sprintf@sp,f,c
  1285  001372  2A38               	incf	sprintf@sp+1,f,c
  1286  001374                     l1476:
  1287                           
  1288                           ;doprnt.c: 1469: }
  1289                           ;doprnt.c: 1472: prec = c;
  1290  001374  C044  F041         	movff	sprintf@c,sprintf@prec
  1291                           
  1292                           ;doprnt.c: 1474: while(prec--) {
  1293  001378  D02C               	goto	l1484
  1294  00137A                     l1478:
  1295                           
  1296                           ;doprnt.c: 1478: {
  1297                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1298  00137A  5041               	movf	sprintf@prec,w,c
  1299  00137C  0D02               	mullw	2
  1300  00137E  0E01               	movlw	low _dpowers
  1301  001380  24F3               	addwf	prodl,w,c
  1302  001382  6EF6               	movwf	tblptrl,c
  1303  001384  0E10               	movlw	high _dpowers
  1304  001386  20F4               	addwfc	prodh,w,c
  1305  001388  6EF7               	movwf	tblptrh,c
  1306  00138A                     	if	1	;There are 3 active tblptr bytes
  1307  00138A  6AF8               	clrf	tblptru,c
  1308  00138C  0E00               	movlw	low (__mediumconst shr (0+16))
  1309  00138E  22F8               	addwfc	tblptru,f,c
  1310  001390                     	endif
  1311  001390  0009               	tblrd		*+
  1312  001392  CFF5 F02D          	movff	tablat,___lwdiv@divisor
  1313  001396  000A               	tblrd		*-
  1314  001398  CFF5 F02E          	movff	tablat,___lwdiv@divisor+1
  1315  00139C  C042  F02B         	movff	sprintf@val,___lwdiv@dividend
  1316  0013A0  C043  F02C         	movff	sprintf@val+1,___lwdiv@dividend+1
  1317  0013A4  EC58  F00A         	call	___lwdiv	;wreg free
  1318  0013A8  C02B  F032         	movff	?___lwdiv,___lwmod@dividend
  1319  0013AC  C02C  F033         	movff	?___lwdiv+1,___lwmod@dividend+1
  1320  0013B0  0E00               	movlw	0
  1321  0013B2  6E35               	movwf	___lwmod@divisor+1,c
  1322  0013B4  0E0A               	movlw	10
  1323  0013B6  6E34               	movwf	___lwmod@divisor,c
  1324  0013B8  ECF1  F00A         	call	___lwmod	;wreg free
  1325  0013BC  5032               	movf	?___lwmod,w,c
  1326  0013BE  0F30               	addlw	48
  1327  0013C0  6E44               	movwf	sprintf@c,c
  1328                           
  1329                           ;doprnt.c: 1523: }
  1330                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1331  0013C2  C037  FFD9         	movff	sprintf@sp,fsr2l
  1332  0013C6  C038  FFDA         	movff	sprintf@sp+1,fsr2h
  1333  0013CA  C044  FFDF         	movff	sprintf@c,indf2
  1334  0013CE  4A37               	infsnz	sprintf@sp,f,c
  1335  0013D0  2A38               	incf	sprintf@sp+1,f,c
  1336  0013D2                     l1484:
  1337  0013D2  0641               	decf	sprintf@prec,f,c
  1338  0013D4  2841               	incf	sprintf@prec,w,c
  1339  0013D6  A4D8               	btfss	status,2,c
  1340  0013D8  D7D0               	goto	l1478
  1341  0013DA                     l1486:
  1342  0013DA  C039  FFF6         	movff	sprintf@f,tblptrl
  1343  0013DE  C03A  FFF7         	movff	sprintf@f+1,tblptrh
  1344  0013E2  4A39               	infsnz	sprintf@f,f,c
  1345  0013E4  2A3A               	incf	sprintf@f+1,f,c
  1346  0013E6                     	if	0	;tblptru may be non-zero
  1347  0013E6                     	endif
  1348  0013E6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1349  0013E6  0E00               	movlw	low (__mediumconst shr (0+16))
  1350  0013E8  6EF8               	movwf	tblptru,c
  1351  0013EA                     	endif
  1352  0013EA  0008               	tblrd		*
  1353  0013EC  CFF5 F044          	movff	tablat,sprintf@c
  1354  0013F0  5044               	movf	sprintf@c,w,c
  1355  0013F2  A4D8               	btfss	status,2,c
  1356  0013F4  D75E               	goto	l1434
  1357  0013F6                     l1488:
  1358                           
  1359                           ;doprnt.c: 1538: *sp = 0;
  1360  0013F6  C037  FFD9         	movff	sprintf@sp,fsr2l
  1361  0013FA  C038  FFDA         	movff	sprintf@sp+1,fsr2h
  1362  0013FE  0E00               	movlw	0
  1363  001400  6EDF               	movwf	indf2,c
  1364  001402  0012               	return	
  1365  001404                     __end_of_sprintf:
  1366                           	opt stack 0
  1367                           tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           prodh	equ	0xFF4
  1372                           prodl	equ	0xFF3
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           indf2	equ	0xFDF
  1376                           postinc2	equ	0xFDE
  1377                           postdec2	equ	0xFDD
  1378                           fsr2h	equ	0xFDA
  1379                           fsr2l	equ	0xFD9
  1380                           status	equ	0xFD8
  1381                           
  1382 ;; *************** function ___lwmod *****************
  1383 ;; Defined at:
  1384 ;;		line 8 in file "D:\Hella\Compiler\sources\common\lwmod.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  dividend        2    7[COMRAM] unsigned int 
  1387 ;;  divisor         2    9[COMRAM] unsigned int 
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;  counter         1   11[COMRAM] unsigned char 
  1390 ;; Return value:  Size  Location     Type
  1391 ;;                  2    7[COMRAM] unsigned int 
  1392 ;; Registers used:
  1393 ;;		wreg, status,2, status,0
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1399 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;Total ram usage:        5 bytes
  1404 ;; Hardware stack levels used:    1
  1405 ;; This function calls:
  1406 ;;		Nothing
  1407 ;; This function is called by:
  1408 ;;		_sprintf
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text4
  1413  0015E2                     __ptext4:
  1414                           	opt stack 0
  1415  0015E2                     ___lwmod:
  1416                           	opt stack 28
  1417                           
  1418                           ;incstack = 0
  1419  0015E2  5034               	movf	___lwmod@divisor,w,c
  1420  0015E4  1035               	iorwf	___lwmod@divisor+1,w,c
  1421  0015E6  B4D8               	btfsc	status,2,c
  1422  0015E8  D018               	goto	l687
  1423  0015EA  0E01               	movlw	1
  1424  0015EC  6E36               	movwf	___lwmod@counter,c
  1425  0015EE  D004               	goto	l1410
  1426  0015F0                     l1408:
  1427  0015F0  90D8               	bcf	status,0,c
  1428  0015F2  3634               	rlcf	___lwmod@divisor,f,c
  1429  0015F4  3635               	rlcf	___lwmod@divisor+1,f,c
  1430  0015F6  2A36               	incf	___lwmod@counter,f,c
  1431  0015F8                     l1410:
  1432  0015F8  AE35               	btfss	___lwmod@divisor+1,7,c
  1433  0015FA  D7FA               	goto	l1408
  1434  0015FC                     l1412:
  1435  0015FC  5034               	movf	___lwmod@divisor,w,c
  1436  0015FE  5C32               	subwf	___lwmod@dividend,w,c
  1437  001600  5035               	movf	___lwmod@divisor+1,w,c
  1438  001602  5833               	subwfb	___lwmod@dividend+1,w,c
  1439  001604  A0D8               	btfss	status,0,c
  1440  001606  D004               	goto	l1416
  1441  001608  5034               	movf	___lwmod@divisor,w,c
  1442  00160A  5E32               	subwf	___lwmod@dividend,f,c
  1443  00160C  5035               	movf	___lwmod@divisor+1,w,c
  1444  00160E  5A33               	subwfb	___lwmod@dividend+1,f,c
  1445  001610                     l1416:
  1446  001610  90D8               	bcf	status,0,c
  1447  001612  3235               	rrcf	___lwmod@divisor+1,f,c
  1448  001614  3234               	rrcf	___lwmod@divisor,f,c
  1449  001616  2E36               	decfsz	___lwmod@counter,f,c
  1450  001618  D7F1               	goto	l1412
  1451  00161A                     l687:
  1452  00161A  C032  F032         	movff	___lwmod@dividend,?___lwmod
  1453  00161E  C033  F033         	movff	___lwmod@dividend+1,?___lwmod+1
  1454  001622  0012               	return		;funcret
  1455  001624                     __end_of___lwmod:
  1456                           	opt stack 0
  1457                           tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           prodh	equ	0xFF4
  1462                           prodl	equ	0xFF3
  1463                           postinc0	equ	0xFEE
  1464                           wreg	equ	0xFE8
  1465                           indf2	equ	0xFDF
  1466                           postinc2	equ	0xFDE
  1467                           postdec2	equ	0xFDD
  1468                           fsr2h	equ	0xFDA
  1469                           fsr2l	equ	0xFD9
  1470                           status	equ	0xFD8
  1471                           
  1472 ;; *************** function ___lwdiv *****************
  1473 ;; Defined at:
  1474 ;;		line 8 in file "D:\Hella\Compiler\sources\common\lwdiv.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;  dividend        2    0[COMRAM] unsigned int 
  1477 ;;  divisor         2    2[COMRAM] unsigned int 
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  quotient        2    4[COMRAM] unsigned int 
  1480 ;;  counter         1    6[COMRAM] unsigned char 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  2    0[COMRAM] unsigned int 
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, status,0
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1490 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;Total ram usage:        7 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; This function calls:
  1497 ;;		Nothing
  1498 ;; This function is called by:
  1499 ;;		_sprintf
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text5
  1504  0014B0                     __ptext5:
  1505                           	opt stack 0
  1506  0014B0                     ___lwdiv:
  1507                           	opt stack 28
  1508                           
  1509                           ;incstack = 0
  1510  0014B0  0E00               	movlw	0
  1511  0014B2  6E30               	movwf	___lwdiv@quotient+1,c
  1512  0014B4  0E00               	movlw	0
  1513  0014B6  6E2F               	movwf	___lwdiv@quotient,c
  1514  0014B8  502D               	movf	___lwdiv@divisor,w,c
  1515  0014BA  102E               	iorwf	___lwdiv@divisor+1,w,c
  1516  0014BC  B4D8               	btfsc	status,2,c
  1517  0014BE  D01C               	goto	l677
  1518  0014C0  0E01               	movlw	1
  1519  0014C2  6E31               	movwf	___lwdiv@counter,c
  1520  0014C4  D004               	goto	l1390
  1521  0014C6                     l1388:
  1522  0014C6  90D8               	bcf	status,0,c
  1523  0014C8  362D               	rlcf	___lwdiv@divisor,f,c
  1524  0014CA  362E               	rlcf	___lwdiv@divisor+1,f,c
  1525  0014CC  2A31               	incf	___lwdiv@counter,f,c
  1526  0014CE                     l1390:
  1527  0014CE  AE2E               	btfss	___lwdiv@divisor+1,7,c
  1528  0014D0  D7FA               	goto	l1388
  1529  0014D2                     l1392:
  1530  0014D2  90D8               	bcf	status,0,c
  1531  0014D4  362F               	rlcf	___lwdiv@quotient,f,c
  1532  0014D6  3630               	rlcf	___lwdiv@quotient+1,f,c
  1533  0014D8  502D               	movf	___lwdiv@divisor,w,c
  1534  0014DA  5C2B               	subwf	___lwdiv@dividend,w,c
  1535  0014DC  502E               	movf	___lwdiv@divisor+1,w,c
  1536  0014DE  582C               	subwfb	___lwdiv@dividend+1,w,c
  1537  0014E0  A0D8               	btfss	status,0,c
  1538  0014E2  D005               	goto	l1400
  1539  0014E4  502D               	movf	___lwdiv@divisor,w,c
  1540  0014E6  5E2B               	subwf	___lwdiv@dividend,f,c
  1541  0014E8  502E               	movf	___lwdiv@divisor+1,w,c
  1542  0014EA  5A2C               	subwfb	___lwdiv@dividend+1,f,c
  1543  0014EC  802F               	bsf	___lwdiv@quotient,0,c
  1544  0014EE                     l1400:
  1545  0014EE  90D8               	bcf	status,0,c
  1546  0014F0  322E               	rrcf	___lwdiv@divisor+1,f,c
  1547  0014F2  322D               	rrcf	___lwdiv@divisor,f,c
  1548  0014F4  2E31               	decfsz	___lwdiv@counter,f,c
  1549  0014F6  D7ED               	goto	l1392
  1550  0014F8                     l677:
  1551  0014F8  C02F  F02B         	movff	___lwdiv@quotient,?___lwdiv
  1552  0014FC  C030  F02C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1553  001500  0012               	return		;funcret
  1554  001502                     __end_of___lwdiv:
  1555                           	opt stack 0
  1556                           tblptru	equ	0xFF8
  1557                           tblptrh	equ	0xFF7
  1558                           tblptrl	equ	0xFF6
  1559                           tablat	equ	0xFF5
  1560                           prodh	equ	0xFF4
  1561                           prodl	equ	0xFF3
  1562                           postinc0	equ	0xFEE
  1563                           wreg	equ	0xFE8
  1564                           indf2	equ	0xFDF
  1565                           postinc2	equ	0xFDE
  1566                           postdec2	equ	0xFDD
  1567                           fsr2h	equ	0xFDA
  1568                           fsr2l	equ	0xFD9
  1569                           status	equ	0xFD8
  1570                           
  1571 ;; *************** function _setRD8Led *****************
  1572 ;; Defined at:
  1573 ;;		line 103 in file "StateMachine.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  state           2    0[COMRAM] unsigned int 
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;		None
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  1    wreg      void 
  1580 ;; Registers used:
  1581 ;;		None
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1587 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1590 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;Total ram usage:        2 bytes
  1592 ;; Hardware stack levels used:    1
  1593 ;; This function calls:
  1594 ;;		Nothing
  1595 ;; This function is called by:
  1596 ;;		_stateMachine_clima
  1597 ;;		_stateMachine
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           	psect	text6
  1602  001780                     __ptext6:
  1603                           	opt stack 0
  1604  001780                     _setRD8Led:
  1605                           	opt stack 29
  1606                           
  1607                           ;StateMachine.c: 105: RD8Led = state;
  1608                           
  1609                           ;incstack = 0
  1610  001780  C02B  F007         	movff	setRD8Led@state,_RD8Led
  1611  001784  0012               	return		;funcret
  1612  001786                     __end_of_setRD8Led:
  1613                           	opt stack 0
  1614                           tblptru	equ	0xFF8
  1615                           tblptrh	equ	0xFF7
  1616                           tblptrl	equ	0xFF6
  1617                           tablat	equ	0xFF5
  1618                           prodh	equ	0xFF4
  1619                           prodl	equ	0xFF3
  1620                           postinc0	equ	0xFEE
  1621                           wreg	equ	0xFE8
  1622                           indf2	equ	0xFDF
  1623                           postinc2	equ	0xFDE
  1624                           postdec2	equ	0xFDD
  1625                           fsr2h	equ	0xFDA
  1626                           fsr2l	equ	0xFD9
  1627                           status	equ	0xFD8
  1628                           
  1629 ;; *************** function _setRD7Led *****************
  1630 ;; Defined at:
  1631 ;;		line 94 in file "StateMachine.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  state           2    0[COMRAM] unsigned int 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;		None
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      void 
  1638 ;; Registers used:
  1639 ;;		None
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;Total ram usage:        2 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		_stateMachine_clima
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text7
  1659  001786                     __ptext7:
  1660                           	opt stack 0
  1661  001786                     _setRD7Led:
  1662                           	opt stack 29
  1663                           
  1664                           ;StateMachine.c: 96: RD7Led = state;
  1665                           
  1666                           ;incstack = 0
  1667  001786  C02B  F006         	movff	setRD7Led@state,_RD7Led
  1668  00178A  0012               	return		;funcret
  1669  00178C                     __end_of_setRD7Led:
  1670                           	opt stack 0
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           prodh	equ	0xFF4
  1676                           prodl	equ	0xFF3
  1677                           postinc0	equ	0xFEE
  1678                           wreg	equ	0xFE8
  1679                           indf2	equ	0xFDF
  1680                           postinc2	equ	0xFDE
  1681                           postdec2	equ	0xFDD
  1682                           fsr2h	equ	0xFDA
  1683                           fsr2l	equ	0xFD9
  1684                           status	equ	0xFD8
  1685                           
  1686 ;; *************** function _setRD5Led *****************
  1687 ;; Defined at:
  1688 ;;		line 87 in file "StateMachine.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;  state           2    0[COMRAM] unsigned int 
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		None
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1706 ;;Total ram usage:        2 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; This function calls:
  1709 ;;		Nothing
  1710 ;; This function is called by:
  1711 ;;		_stateMachine_clima
  1712 ;;		_stateMachine
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           	psect	text8
  1717  00178C                     __ptext8:
  1718                           	opt stack 0
  1719  00178C                     _setRD5Led:
  1720                           	opt stack 29
  1721                           
  1722                           ;StateMachine.c: 89: RD5Led = state;
  1723                           
  1724                           ;incstack = 0
  1725  00178C  C02B  F008         	movff	setRD5Led@state,_RD5Led
  1726  001790  0012               	return		;funcret
  1727  001792                     __end_of_setRD5Led:
  1728                           	opt stack 0
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           prodh	equ	0xFF4
  1734                           prodl	equ	0xFF3
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           indf2	equ	0xFDF
  1738                           postinc2	equ	0xFDE
  1739                           postdec2	equ	0xFDD
  1740                           fsr2h	equ	0xFDA
  1741                           fsr2l	equ	0xFD9
  1742                           status	equ	0xFD8
  1743                           
  1744 ;; *************** function _getOnOffLeftButton *****************
  1745 ;; Defined at:
  1746 ;;		line 112 in file "StateMachine.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;		None
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      unsigned char 
  1753 ;; Registers used:
  1754 ;;		wreg, status,2
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1764 ;;Total ram usage:        0 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; This function calls:
  1767 ;;		Nothing
  1768 ;; This function is called by:
  1769 ;;		_stateMachine_clima
  1770 ;;		_stateMachine
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text9
  1775  001792                     __ptext9:
  1776                           	opt stack 0
  1777  001792                     _getOnOffLeftButton:
  1778                           	opt stack 29
  1779                           
  1780                           ;StateMachine.c: 114: return leftButtonEv;
  1781                           
  1782                           ;incstack = 0
  1783  001792  5004               	movf	_leftButtonEv,w,c
  1784  001794  0012               	return	
  1785  001796                     __end_of_getOnOffLeftButton:
  1786                           	opt stack 0
  1787                           tblptru	equ	0xFF8
  1788                           tblptrh	equ	0xFF7
  1789                           tblptrl	equ	0xFF6
  1790                           tablat	equ	0xFF5
  1791                           prodh	equ	0xFF4
  1792                           prodl	equ	0xFF3
  1793                           postinc0	equ	0xFEE
  1794                           wreg	equ	0xFE8
  1795                           indf2	equ	0xFDF
  1796                           postinc2	equ	0xFDE
  1797                           postdec2	equ	0xFDD
  1798                           fsr2h	equ	0xFDA
  1799                           fsr2l	equ	0xFD9
  1800                           status	equ	0xFD8
  1801                           
  1802 ;; *************** function _UpdateLCDText *****************
  1803 ;; Defined at:
  1804 ;;		line 60 in file "StateMachine.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;		None
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;		None
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1822 ;;Total ram usage:        0 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; Hardware stack levels required when called:    4
  1825 ;; This function calls:
  1826 ;;		_LcdClear
  1827 ;;		_LcdGoTo
  1828 ;;		_LcdWriteString
  1829 ;; This function is called by:
  1830 ;;		_stateMachine_clima
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           	psect	text10
  1835  0016FA                     __ptext10:
  1836                           	opt stack 0
  1837  0016FA                     _UpdateLCDText:
  1838                           	opt stack 25
  1839                           
  1840                           ;StateMachine.c: 63: LcdClear();
  1841                           
  1842                           ;incstack = 0
  1843  0016FA  ECBC  F00B         	call	_LcdClear	;wreg free
  1844                           
  1845                           ;StateMachine.c: 65: LcdGoTo(0);
  1846  0016FE  0E00               	movlw	0
  1847  001700  ECB2  F00B         	call	_LcdGoTo
  1848                           
  1849                           ;StateMachine.c: 66: LcdWriteString(State_Text);
  1850  001704  0E0A               	movlw	low _State_Text
  1851  001706  6E30               	movwf	LcdWriteString@s,c
  1852  001708  0E00               	movlw	high _State_Text
  1853  00170A  6E31               	movwf	LcdWriteString@s+1,c
  1854  00170C  EC02  F00A         	call	_LcdWriteString	;wreg free
  1855  001710  0012               	return		;funcret
  1856  001712                     __end_of_UpdateLCDText:
  1857                           	opt stack 0
  1858                           tblptru	equ	0xFF8
  1859                           tblptrh	equ	0xFF7
  1860                           tblptrl	equ	0xFF6
  1861                           tablat	equ	0xFF5
  1862                           prodh	equ	0xFF4
  1863                           prodl	equ	0xFF3
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           indf2	equ	0xFDF
  1867                           postinc2	equ	0xFDE
  1868                           postdec2	equ	0xFDD
  1869                           fsr2h	equ	0xFDA
  1870                           fsr2l	equ	0xFD9
  1871                           status	equ	0xFD8
  1872                           
  1873 ;; *************** function _LcdWriteString *****************
  1874 ;; Defined at:
  1875 ;;		line 168 in file "LCD.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  s               2    5[COMRAM] PTR const unsigned char 
  1878 ;;		 -> s(16), LcdLines(108), State_Text(16), 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1890 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1893 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1894 ;;Total ram usage:        2 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    3
  1897 ;; This function calls:
  1898 ;;		_LcdChar
  1899 ;; This function is called by:
  1900 ;;		_UpdateLCDText
  1901 ;;		_main
  1902 ;;		_setLcd
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text11
  1907  001404                     __ptext11:
  1908                           	opt stack 0
  1909  001404                     _LcdWriteString:
  1910                           	opt stack 25
  1911                           
  1912                           ;LCD.c: 170: while(*s)
  1913                           
  1914                           ;incstack = 0
  1915  001404  D015               	goto	l1352
  1916  001406                     l1348:
  1917                           
  1918                           ;LCD.c: 171: {
  1919                           ;LCD.c: 172: LcdChar(*s++);
  1920  001406  C030  FFF6         	movff	LcdWriteString@s,tblptrl
  1921  00140A  C031  FFF7         	movff	LcdWriteString@s+1,tblptrh
  1922  00140E  0E00               	movlw	low (__smallconst shr (0+16))
  1923  001410  6EF8               	movwf	tblptru,c
  1924  001412  0E0F               	movlw	(high __ramtop+-1)
  1925  001414  64F7               	cpfsgt	tblptrh,c
  1926  001416  D003               	bra	u437
  1927  001418  0008               	tblrd		*
  1928  00141A  50F5               	movf	tablat,w,c
  1929  00141C  D005               	bra	u430
  1930  00141E                     u437:
  1931  00141E  CFF6 FFE9          	movff	tblptrl,fsr0l
  1932  001422  CFF7 FFEA          	movff	tblptrh,fsr0h
  1933  001426  50EF               	movf	indf0,w,c
  1934  001428                     u430:
  1935  001428  EC12  F00B         	call	_LcdChar
  1936  00142C  4A30               	infsnz	LcdWriteString@s,f,c
  1937  00142E  2A31               	incf	LcdWriteString@s+1,f,c
  1938  001430                     l1352:
  1939  001430  C030  FFF6         	movff	LcdWriteString@s,tblptrl
  1940  001434  C031  FFF7         	movff	LcdWriteString@s+1,tblptrh
  1941  001438  0E00               	movlw	low (__smallconst shr (0+16))
  1942  00143A  6EF8               	movwf	tblptru,c
  1943  00143C  0E0F               	movlw	(high __ramtop+-1)
  1944  00143E  64F7               	cpfsgt	tblptrh,c
  1945  001440  D003               	bra	u447
  1946  001442  0008               	tblrd		*
  1947  001444  50F5               	movf	tablat,w,c
  1948  001446  D005               	bra	u440
  1949  001448                     u447:
  1950  001448  CFF6 FFE9          	movff	tblptrl,fsr0l
  1951  00144C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1952  001450  50EF               	movf	indf0,w,c
  1953  001452                     u440:
  1954  001452  0900               	iorlw	0
  1955  001454  B4D8               	btfsc	status,2,c
  1956  001456  0012               	return	
  1957  001458  D7D6               	goto	l1348
  1958  00145A                     __end_of_LcdWriteString:
  1959                           	opt stack 0
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           tblptrl	equ	0xFF6
  1963                           tablat	equ	0xFF5
  1964                           prodh	equ	0xFF4
  1965                           prodl	equ	0xFF3
  1966                           indf0	equ	0xFEF
  1967                           postinc0	equ	0xFEE
  1968                           fsr0h	equ	0xFEA
  1969                           fsr0l	equ	0xFE9
  1970                           wreg	equ	0xFE8
  1971                           indf2	equ	0xFDF
  1972                           postinc2	equ	0xFDE
  1973                           postdec2	equ	0xFDD
  1974                           fsr2h	equ	0xFDA
  1975                           fsr2l	equ	0xFD9
  1976                           status	equ	0xFD8
  1977                           
  1978 ;; *************** function _LcdChar *****************
  1979 ;; Defined at:
  1980 ;;		line 152 in file "LCD.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;  letter          1    wreg     unsigned char 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  letter          1    4[COMRAM] unsigned char 
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  1    wreg      void 
  1987 ;; Registers used:
  1988 ;;		wreg, status,2, cstack
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;Total ram usage:        1 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    2
  2001 ;; This function calls:
  2002 ;;		_Delay10TCYx
  2003 ;;		_setGPIO
  2004 ;; This function is called by:
  2005 ;;		_LcdWriteString
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           	psect	text12
  2010  001624                     __ptext12:
  2011                           	opt stack 0
  2012  001624                     _LcdChar:
  2013                           	opt stack 25
  2014                           
  2015                           ;incstack = 0
  2016                           ;LcdChar@letter stored from wreg
  2017  001624  6E2F               	movwf	LcdChar@letter,c
  2018                           
  2019                           ;LCD.c: 154: setGPIO(0x12,0x80);
  2020  001626  0E80               	movlw	128
  2021  001628  6E2D               	movwf	setGPIO@value,c
  2022  00162A  0E12               	movlw	18
  2023  00162C  EC70  F00B         	call	_setGPIO
  2024                           
  2025                           ;LCD.c: 155: Delay10TCYx(0);
  2026  001630  0E00               	movlw	0
  2027  001632  ECAA  F00B         	call	_Delay10TCYx
  2028                           
  2029                           ;LCD.c: 156: setGPIO(0x13,letter);
  2030  001636  C02F  F02D         	movff	LcdChar@letter,setGPIO@value
  2031  00163A  0E13               	movlw	19
  2032  00163C  EC70  F00B         	call	_setGPIO
  2033                           
  2034                           ;LCD.c: 158: setGPIO(0x12, 0xc0);
  2035  001640  0EC0               	movlw	192
  2036  001642  6E2D               	movwf	setGPIO@value,c
  2037  001644  0E12               	movlw	18
  2038  001646  EC70  F00B         	call	_setGPIO
  2039                           
  2040                           ;LCD.c: 159: Delay10TCYx(0);
  2041  00164A  0E00               	movlw	0
  2042  00164C  ECAA  F00B         	call	_Delay10TCYx
  2043                           
  2044                           ;LCD.c: 160: setGPIO(0x12,0x00);
  2045  001650  0E00               	movlw	0
  2046  001652  6E2D               	movwf	setGPIO@value,c
  2047  001654  0E12               	movlw	18
  2048  001656  EC70  F00B         	call	_setGPIO
  2049                           
  2050                           ;LCD.c: 161: Delay10TCYx(0);
  2051  00165A  0E00               	movlw	0
  2052  00165C  ECAA  F00B         	call	_Delay10TCYx
  2053  001660  0012               	return		;funcret
  2054  001662                     __end_of_LcdChar:
  2055                           	opt stack 0
  2056                           tblptru	equ	0xFF8
  2057                           tblptrh	equ	0xFF7
  2058                           tblptrl	equ	0xFF6
  2059                           tablat	equ	0xFF5
  2060                           prodh	equ	0xFF4
  2061                           prodl	equ	0xFF3
  2062                           indf0	equ	0xFEF
  2063                           postinc0	equ	0xFEE
  2064                           fsr0h	equ	0xFEA
  2065                           fsr0l	equ	0xFE9
  2066                           wreg	equ	0xFE8
  2067                           indf2	equ	0xFDF
  2068                           postinc2	equ	0xFDE
  2069                           postdec2	equ	0xFDD
  2070                           fsr2h	equ	0xFDA
  2071                           fsr2l	equ	0xFD9
  2072                           status	equ	0xFD8
  2073                           
  2074 ;; *************** function _LcdGoTo *****************
  2075 ;; Defined at:
  2076 ;;		line 142 in file "LCD.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;  pos             1    wreg     unsigned char 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  pos             1    5[COMRAM] unsigned char 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, status,2, status,0, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;Total ram usage:        1 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    3
  2097 ;; This function calls:
  2098 ;;		_lcdCommand
  2099 ;; This function is called by:
  2100 ;;		_UpdateLCDText
  2101 ;;		_main
  2102 ;;		_setLcd
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text13
  2107  001764                     __ptext13:
  2108                           	opt stack 0
  2109  001764                     _LcdGoTo:
  2110                           	opt stack 25
  2111                           
  2112                           ;incstack = 0
  2113                           ;LcdGoTo@pos stored from wreg
  2114  001764  6E30               	movwf	LcdGoTo@pos,c
  2115                           
  2116                           ;LCD.c: 145: lcdCommand(0x80+pos);
  2117  001766  5030               	movf	LcdGoTo@pos,w,c
  2118  001768  0F80               	addlw	128
  2119  00176A  ECCF  F00A         	call	_lcdCommand
  2120  00176E  0012               	return		;funcret
  2121  001770                     __end_of_LcdGoTo:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           tblptrh	equ	0xFF7
  2125                           tblptrl	equ	0xFF6
  2126                           tablat	equ	0xFF5
  2127                           prodh	equ	0xFF4
  2128                           prodl	equ	0xFF3
  2129                           indf0	equ	0xFEF
  2130                           postinc0	equ	0xFEE
  2131                           fsr0h	equ	0xFEA
  2132                           fsr0l	equ	0xFE9
  2133                           wreg	equ	0xFE8
  2134                           indf2	equ	0xFDF
  2135                           postinc2	equ	0xFDE
  2136                           postdec2	equ	0xFDD
  2137                           fsr2h	equ	0xFDA
  2138                           fsr2l	equ	0xFD9
  2139                           status	equ	0xFD8
  2140                           
  2141 ;; *************** function _init *****************
  2142 ;; Defined at:
  2143 ;;		line 350 in file "StateMachine.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;		None
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;		None
  2148 ;; Return value:  Size  Location     Type
  2149 ;;                  1    wreg      void 
  2150 ;; Registers used:
  2151 ;;		wreg, status,2, status,0, cstack
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2161 ;;Total ram usage:        0 bytes
  2162 ;; Hardware stack levels used:    1
  2163 ;; Hardware stack levels required when called:    5
  2164 ;; This function calls:
  2165 ;;		_LcdInit
  2166 ;;		_initButtons
  2167 ;; This function is called by:
  2168 ;;		_main
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           	psect	text14
  2173  001712                     __ptext14:
  2174                           	opt stack 0
  2175  001712                     _init:
  2176                           	opt stack 25
  2177                           
  2178                           ;StateMachine.c: 353: initButtons();
  2179                           
  2180                           ;incstack = 0
  2181  001712  ECB8  F00B         	call	_initButtons	;wreg free
  2182                           
  2183                           ;StateMachine.c: 355: TRISD=0;
  2184  001716  0E00               	movlw	0
  2185  001718  6E95               	movwf	3989,c	;volatile
  2186                           
  2187                           ;StateMachine.c: 356: MEMCONbits.EBDIS=1;
  2188  00171A  8E9C               	bsf	3996,7,c	;volatile
  2189                           
  2190                           ;StateMachine.c: 357: PORTD=0;
  2191  00171C  0E00               	movlw	0
  2192  00171E  6E83               	movwf	3971,c	;volatile
  2193                           
  2194                           ;StateMachine.c: 360: LcdInit();
  2195  001720  ECA8  F00A         	call	_LcdInit	;wreg free
  2196                           
  2197                           ;StateMachine.c: 362: SetTemperature = 50;
  2198  001724  0E32               	movlw	50
  2199  001726  6E05               	movwf	_SetTemperature,c
  2200  001728  0012               	return		;funcret
  2201  00172A                     __end_of_init:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           tblptrh	equ	0xFF7
  2205                           tblptrl	equ	0xFF6
  2206                           tablat	equ	0xFF5
  2207                           prodh	equ	0xFF4
  2208                           prodl	equ	0xFF3
  2209                           indf0	equ	0xFEF
  2210                           postinc0	equ	0xFEE
  2211                           fsr0h	equ	0xFEA
  2212                           fsr0l	equ	0xFE9
  2213                           wreg	equ	0xFE8
  2214                           indf2	equ	0xFDF
  2215                           postinc2	equ	0xFDE
  2216                           postdec2	equ	0xFDD
  2217                           fsr2h	equ	0xFDA
  2218                           fsr2l	equ	0xFD9
  2219                           status	equ	0xFD8
  2220                           
  2221 ;; *************** function _initButtons *****************
  2222 ;; Defined at:
  2223 ;;		line 337 in file "StateMachine.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;		None
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;		None
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      void 
  2230 ;; Registers used:
  2231 ;;		wreg, status,2, status,0
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2241 ;;Total ram usage:        0 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_init
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text15
  2251  001770                     __ptext15:
  2252                           	opt stack 0
  2253  001770                     _initButtons:
  2254                           	opt stack 29
  2255                           
  2256                           ;StateMachine.c: 340: TRISB = TRISB | (1<<0);
  2257                           
  2258                           ;incstack = 0
  2259  001770  5093               	movf	3987,w,c	;volatile
  2260  001772  0901               	iorlw	1
  2261  001774  6E93               	movwf	3987,c	;volatile
  2262  001776  0012               	return		;funcret
  2263  001778                     __end_of_initButtons:
  2264                           	opt stack 0
  2265                           tblptru	equ	0xFF8
  2266                           tblptrh	equ	0xFF7
  2267                           tblptrl	equ	0xFF6
  2268                           tablat	equ	0xFF5
  2269                           prodh	equ	0xFF4
  2270                           prodl	equ	0xFF3
  2271                           indf0	equ	0xFEF
  2272                           postinc0	equ	0xFEE
  2273                           fsr0h	equ	0xFEA
  2274                           fsr0l	equ	0xFE9
  2275                           wreg	equ	0xFE8
  2276                           indf2	equ	0xFDF
  2277                           postinc2	equ	0xFDE
  2278                           postdec2	equ	0xFDD
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function _LcdInit *****************
  2284 ;; Defined at:
  2285 ;;		line 93 in file "LCD.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      void 
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, status,0, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;Total ram usage:        0 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    4
  2306 ;; This function calls:
  2307 ;;		_LcdClear
  2308 ;;		_OpenSPI1
  2309 ;;		_lcdCommand
  2310 ;;		_setGPIO
  2311 ;;		_setIODIR
  2312 ;; This function is called by:
  2313 ;;		_init
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text16
  2318  001550                     __ptext16:
  2319                           	opt stack 0
  2320  001550                     _LcdInit:
  2321                           	opt stack 25
  2322                           
  2323                           ;LCD.c: 95: TRISAbits.RA2=0;
  2324                           
  2325                           ;incstack = 0
  2326  001550  9492               	bcf	3986,2,c	;volatile
  2327                           
  2328                           ;LCD.c: 96: PORTAbits.RA2=1;
  2329  001552  8480               	bsf	3968,2,c	;volatile
  2330                           
  2331                           ;LCD.c: 99: OpenSPI1(0b00000010, 0b00000010, 0b10000000);
  2332  001554  0E02               	movlw	2
  2333  001556  6E2B               	movwf	OpenSPI1@bus_mode,c
  2334  001558  0E80               	movlw	128
  2335  00155A  6E2C               	movwf	OpenSPI1@smp_phase,c
  2336  00155C  0E02               	movlw	2
  2337  00155E  EC2D  F00A         	call	_OpenSPI1
  2338                           
  2339                           ;LCD.c: 101: setIODIR(0x01,0x00);
  2340  001562  0E00               	movlw	0
  2341  001564  6E2D               	movwf	setIODIR@dir,c
  2342  001566  0E01               	movlw	1
  2343  001568  EC63  F00B         	call	_setIODIR
  2344                           
  2345                           ;LCD.c: 103: setIODIR(0x00,0x00);
  2346  00156C  0E00               	movlw	0
  2347  00156E  6E2D               	movwf	setIODIR@dir,c
  2348  001570  0E00               	movlw	0
  2349  001572  EC63  F00B         	call	_setIODIR
  2350                           
  2351                           ;LCD.c: 105: setGPIO(0x00,0x00);
  2352  001576  0E00               	movlw	0
  2353  001578  6E2D               	movwf	setGPIO@value,c
  2354  00157A  0E00               	movlw	0
  2355  00157C  EC70  F00B         	call	_setGPIO
  2356                           
  2357                           ;LCD.c: 108: lcdCommand(0b00111111);
  2358  001580  0E3F               	movlw	63
  2359  001582  ECCF  F00A         	call	_lcdCommand
  2360                           
  2361                           ;LCD.c: 111: lcdCommand(0b00001100);
  2362  001586  0E0C               	movlw	12
  2363  001588  ECCF  F00A         	call	_lcdCommand
  2364                           
  2365                           ;LCD.c: 114: lcdCommand(0b00000001);
  2366  00158C  0E01               	movlw	1
  2367  00158E  ECCF  F00A         	call	_lcdCommand
  2368                           
  2369                           ;LCD.c: 117: lcdCommand(0b00000110);
  2370  001592  0E06               	movlw	6
  2371  001594  ECCF  F00A         	call	_lcdCommand
  2372                           
  2373                           ;LCD.c: 124: LcdClear();
  2374  001598  ECBC  F00B         	call	_LcdClear	;wreg free
  2375  00159C  0012               	return		;funcret
  2376  00159E                     __end_of_LcdInit:
  2377                           	opt stack 0
  2378                           tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           prodh	equ	0xFF4
  2383                           prodl	equ	0xFF3
  2384                           indf0	equ	0xFEF
  2385                           postinc0	equ	0xFEE
  2386                           fsr0h	equ	0xFEA
  2387                           fsr0l	equ	0xFE9
  2388                           wreg	equ	0xFE8
  2389                           indf2	equ	0xFDF
  2390                           postinc2	equ	0xFDE
  2391                           postdec2	equ	0xFDD
  2392                           fsr2h	equ	0xFDA
  2393                           fsr2l	equ	0xFD9
  2394                           status	equ	0xFD8
  2395                           
  2396 ;; *************** function _setIODIR *****************
  2397 ;; Defined at:
  2398 ;;		line 61 in file "LCD.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;  address         1    wreg     unsigned char 
  2401 ;;  dir             1    2[COMRAM] unsigned char 
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  address         1    3[COMRAM] unsigned char 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2413 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2417 ;;Total ram usage:        2 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    1
  2420 ;; This function calls:
  2421 ;;		_WriteSPI1
  2422 ;; This function is called by:
  2423 ;;		_LcdInit
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text17
  2428  0016C6                     __ptext17:
  2429                           	opt stack 0
  2430  0016C6                     _setIODIR:
  2431                           	opt stack 27
  2432                           
  2433                           ;incstack = 0
  2434                           ;setIODIR@address stored from wreg
  2435  0016C6  6E2E               	movwf	setIODIR@address,c
  2436                           
  2437                           ;LCD.c: 62: PORTAbits.RA2=0;
  2438  0016C8  9480               	bcf	3968,2,c	;volatile
  2439                           
  2440                           ;LCD.c: 63: WriteSPI1(0x40);
  2441  0016CA  0E40               	movlw	64
  2442  0016CC  EC95  F00B         	call	_WriteSPI1
  2443                           
  2444                           ;LCD.c: 64: WriteSPI1(address);
  2445  0016D0  502E               	movf	setIODIR@address,w,c
  2446  0016D2  EC95  F00B         	call	_WriteSPI1
  2447                           
  2448                           ;LCD.c: 65: WriteSPI1(dir);
  2449  0016D6  502D               	movf	setIODIR@dir,w,c
  2450  0016D8  EC95  F00B         	call	_WriteSPI1
  2451                           
  2452                           ;LCD.c: 66: PORTAbits.RA2=1;
  2453  0016DC  8480               	bsf	3968,2,c	;volatile
  2454  0016DE  0012               	return		;funcret
  2455  0016E0                     __end_of_setIODIR:
  2456                           	opt stack 0
  2457                           tblptru	equ	0xFF8
  2458                           tblptrh	equ	0xFF7
  2459                           tblptrl	equ	0xFF6
  2460                           tablat	equ	0xFF5
  2461                           prodh	equ	0xFF4
  2462                           prodl	equ	0xFF3
  2463                           indf0	equ	0xFEF
  2464                           postinc0	equ	0xFEE
  2465                           fsr0h	equ	0xFEA
  2466                           fsr0l	equ	0xFE9
  2467                           wreg	equ	0xFE8
  2468                           indf2	equ	0xFDF
  2469                           postinc2	equ	0xFDE
  2470                           postdec2	equ	0xFDD
  2471                           fsr2h	equ	0xFDA
  2472                           fsr2l	equ	0xFD9
  2473                           status	equ	0xFD8
  2474                           
  2475 ;; *************** function _OpenSPI1 *****************
  2476 ;; Defined at:
  2477 ;;		line 13 in file "D:\Hella\Compiler\sources\pic18\plib\SPI\spi1open.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;  sync_mode       1    wreg     unsigned char 
  2480 ;;  bus_mode        1    0[COMRAM] unsigned char 
  2481 ;;  smp_phase       1    1[COMRAM] unsigned char 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  sync_mode       1    2[COMRAM] unsigned char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2493 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;Total ram usage:        3 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; This function calls:
  2500 ;;		Nothing
  2501 ;; This function is called by:
  2502 ;;		_LcdInit
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text18
  2507  00145A                     __ptext18:
  2508                           	opt stack 0
  2509  00145A                     _OpenSPI1:
  2510                           	opt stack 28
  2511                           
  2512                           ;incstack = 0
  2513                           ;OpenSPI1@sync_mode stored from wreg
  2514  00145A  6E2D               	movwf	OpenSPI1@sync_mode,c
  2515  00145C  0E3F               	movlw	63
  2516  00145E  16C7               	andwf	4039,f,c	;volatile
  2517  001460  0E00               	movlw	0
  2518  001462  6EC6               	movwf	4038,c	;volatile
  2519  001464  502D               	movf	OpenSPI1@sync_mode,w,c
  2520  001466  12C6               	iorwf	4038,f,c	;volatile
  2521  001468  502C               	movf	OpenSPI1@smp_phase,w,c
  2522  00146A  12C7               	iorwf	4039,f,c	;volatile
  2523  00146C  D005               	goto	l1374
  2524  00146E                     l234:
  2525  00146E  8CC7               	bsf	4039,6,c	;volatile
  2526  001470  D013               	goto	l1378
  2527  001472                     l236:
  2528  001472  8CC7               	bsf	4039,6,c	;volatile
  2529  001474                     l237:
  2530  001474  88C6               	bsf	4038,4,c	;volatile
  2531  001476  D010               	goto	l1378
  2532  001478                     l1374:
  2533  001478  502B               	movf	OpenSPI1@bus_mode,w,c
  2534                           
  2535                           ; Switch size 1, requested type "space"
  2536                           ; Number of cases is 3, Range of values is 0 to 3
  2537                           ; switch strategies available:
  2538                           ; Name         Instructions Cycles
  2539                           ; simple_byte           10     6 (average)
  2540                           ;	Chosen strategy is simple_byte
  2541  00147A  0A00               	xorlw	0	; case 0
  2542  00147C  B4D8               	btfsc	status,2,c
  2543  00147E  D7F7               	goto	l234
  2544  001480  0A02               	xorlw	2	; case 2
  2545  001482  B4D8               	btfsc	status,2,c
  2546  001484  D7F6               	goto	l236
  2547  001486  0A01               	xorlw	1	; case 3
  2548  001488  B4D8               	btfsc	status,2,c
  2549  00148A  D7F4               	goto	l237
  2550  00148C  D005               	goto	l1378
  2551  00148E                     l240:
  2552  00148E  8E97               	bsf	3991,7,c	;volatile
  2553  001490                     l242:
  2554  001490  8694               	bsf	3988,3,c	;volatile
  2555  001492  D00A               	goto	l241
  2556  001494                     l243:
  2557  001494  9694               	bcf	3988,3,c	;volatile
  2558  001496  D008               	goto	l241
  2559  001498                     l1378:
  2560  001498  502D               	movf	OpenSPI1@sync_mode,w,c
  2561                           
  2562                           ; Switch size 1, requested type "space"
  2563                           ; Number of cases is 2, Range of values is 4 to 5
  2564                           ; switch strategies available:
  2565                           ; Name         Instructions Cycles
  2566                           ; simple_byte            7     4 (average)
  2567                           ;	Chosen strategy is simple_byte
  2568  00149A  0A04               	xorlw	4	; case 4
  2569  00149C  B4D8               	btfsc	status,2,c
  2570  00149E  D7F7               	goto	l240
  2571  0014A0  0A01               	xorlw	1	; case 5
  2572  0014A2  B4D8               	btfsc	status,2,c
  2573  0014A4  D7F5               	goto	l242
  2574  0014A6  D7F6               	goto	l243
  2575  0014A8                     l241:
  2576  0014A8  8894               	bsf	3988,4,c	;volatile
  2577  0014AA  9A94               	bcf	3988,5,c	;volatile
  2578  0014AC  8AC6               	bsf	4038,5,c	;volatile
  2579  0014AE  0012               	return		;funcret
  2580  0014B0                     __end_of_OpenSPI1:
  2581                           	opt stack 0
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           prodh	equ	0xFF4
  2587                           prodl	equ	0xFF3
  2588                           indf0	equ	0xFEF
  2589                           postinc0	equ	0xFEE
  2590                           fsr0h	equ	0xFEA
  2591                           fsr0l	equ	0xFE9
  2592                           wreg	equ	0xFE8
  2593                           indf2	equ	0xFDF
  2594                           postinc2	equ	0xFDE
  2595                           postdec2	equ	0xFDD
  2596                           fsr2h	equ	0xFDA
  2597                           fsr2l	equ	0xFD9
  2598                           status	equ	0xFD8
  2599                           
  2600 ;; *************** function _LcdClear *****************
  2601 ;; Defined at:
  2602 ;;		line 132 in file "LCD.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;		None
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  1    wreg      void 
  2609 ;; Registers used:
  2610 ;;		wreg, status,2, cstack
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;Total ram usage:        0 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; Hardware stack levels required when called:    3
  2623 ;; This function calls:
  2624 ;;		_lcdCommand
  2625 ;; This function is called by:
  2626 ;;		_UpdateLCDText
  2627 ;;		_LcdInit
  2628 ;;		_setLcd
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text19
  2633  001778                     __ptext19:
  2634                           	opt stack 0
  2635  001778                     _LcdClear:
  2636                           	opt stack 25
  2637                           
  2638                           ;LCD.c: 135: lcdCommand(0x01);
  2639                           
  2640                           ;incstack = 0
  2641  001778  0E01               	movlw	1
  2642  00177A  ECCF  F00A         	call	_lcdCommand
  2643  00177E  0012               	return		;funcret
  2644  001780                     __end_of_LcdClear:
  2645                           	opt stack 0
  2646                           tblptru	equ	0xFF8
  2647                           tblptrh	equ	0xFF7
  2648                           tblptrl	equ	0xFF6
  2649                           tablat	equ	0xFF5
  2650                           prodh	equ	0xFF4
  2651                           prodl	equ	0xFF3
  2652                           indf0	equ	0xFEF
  2653                           postinc0	equ	0xFEE
  2654                           fsr0h	equ	0xFEA
  2655                           fsr0l	equ	0xFE9
  2656                           wreg	equ	0xFE8
  2657                           indf2	equ	0xFDF
  2658                           postinc2	equ	0xFDE
  2659                           postdec2	equ	0xFDD
  2660                           fsr2h	equ	0xFDA
  2661                           fsr2l	equ	0xFD9
  2662                           status	equ	0xFD8
  2663                           
  2664 ;; *************** function _lcdCommand *****************
  2665 ;; Defined at:
  2666 ;;		line 73 in file "LCD.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  command         1    wreg     unsigned char 
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  command         1    4[COMRAM] unsigned char 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      void 
  2673 ;; Registers used:
  2674 ;;		wreg, status,2, cstack
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;Total ram usage:        1 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; Hardware stack levels required when called:    2
  2687 ;; This function calls:
  2688 ;;		_Delay10TCYx
  2689 ;;		_setGPIO
  2690 ;; This function is called by:
  2691 ;;		_LcdInit
  2692 ;;		_LcdClear
  2693 ;;		_LcdGoTo
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text20
  2698  00159E                     __ptext20:
  2699                           	opt stack 0
  2700  00159E                     _lcdCommand:
  2701                           	opt stack 25
  2702                           
  2703                           ;incstack = 0
  2704                           ;lcdCommand@command stored from wreg
  2705  00159E  6E2F               	movwf	lcdCommand@command,c
  2706                           
  2707                           ;LCD.c: 74: setGPIO(0x12,0x00);
  2708  0015A0  0E00               	movlw	0
  2709  0015A2  6E2D               	movwf	setGPIO@value,c
  2710  0015A4  0E12               	movlw	18
  2711  0015A6  EC70  F00B         	call	_setGPIO
  2712                           
  2713                           ;LCD.c: 75: Delay10TCYx(0);
  2714  0015AA  0E00               	movlw	0
  2715  0015AC  ECAA  F00B         	call	_Delay10TCYx
  2716                           
  2717                           ;LCD.c: 76: setGPIO(0x13, command);
  2718  0015B0  C02F  F02D         	movff	lcdCommand@command,setGPIO@value
  2719  0015B4  0E13               	movlw	19
  2720  0015B6  EC70  F00B         	call	_setGPIO
  2721                           
  2722                           ;LCD.c: 77: Delay10TCYx(0);
  2723  0015BA  0E00               	movlw	0
  2724  0015BC  ECAA  F00B         	call	_Delay10TCYx
  2725                           
  2726                           ;LCD.c: 78: setGPIO(0x12,0x40);
  2727  0015C0  0E40               	movlw	64
  2728  0015C2  6E2D               	movwf	setGPIO@value,c
  2729  0015C4  0E12               	movlw	18
  2730  0015C6  EC70  F00B         	call	_setGPIO
  2731                           
  2732                           ;LCD.c: 79: Delay10TCYx(0);
  2733  0015CA  0E00               	movlw	0
  2734  0015CC  ECAA  F00B         	call	_Delay10TCYx
  2735                           
  2736                           ;LCD.c: 80: setGPIO(0x12,0x00);
  2737  0015D0  0E00               	movlw	0
  2738  0015D2  6E2D               	movwf	setGPIO@value,c
  2739  0015D4  0E12               	movlw	18
  2740  0015D6  EC70  F00B         	call	_setGPIO
  2741                           
  2742                           ;LCD.c: 81: Delay10TCYx(0);
  2743  0015DA  0E00               	movlw	0
  2744  0015DC  ECAA  F00B         	call	_Delay10TCYx
  2745  0015E0  0012               	return		;funcret
  2746  0015E2                     __end_of_lcdCommand:
  2747                           	opt stack 0
  2748                           tblptru	equ	0xFF8
  2749                           tblptrh	equ	0xFF7
  2750                           tblptrl	equ	0xFF6
  2751                           tablat	equ	0xFF5
  2752                           prodh	equ	0xFF4
  2753                           prodl	equ	0xFF3
  2754                           indf0	equ	0xFEF
  2755                           postinc0	equ	0xFEE
  2756                           fsr0h	equ	0xFEA
  2757                           fsr0l	equ	0xFE9
  2758                           wreg	equ	0xFE8
  2759                           indf2	equ	0xFDF
  2760                           postinc2	equ	0xFDE
  2761                           postdec2	equ	0xFDD
  2762                           fsr2h	equ	0xFDA
  2763                           fsr2l	equ	0xFD9
  2764                           status	equ	0xFD8
  2765                           
  2766 ;; *************** function _setGPIO *****************
  2767 ;; Defined at:
  2768 ;;		line 46 in file "LCD.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;  address         1    wreg     unsigned char 
  2771 ;;  value           1    2[COMRAM] unsigned char 
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;  address         1    3[COMRAM] unsigned char 
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      void 
  2776 ;; Registers used:
  2777 ;;		wreg, status,2, cstack
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2783 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;Total ram usage:        2 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; Hardware stack levels required when called:    1
  2790 ;; This function calls:
  2791 ;;		_WriteSPI1
  2792 ;; This function is called by:
  2793 ;;		_lcdCommand
  2794 ;;		_LcdInit
  2795 ;;		_LcdChar
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text21
  2800  0016E0                     __ptext21:
  2801                           	opt stack 0
  2802  0016E0                     _setGPIO:
  2803                           	opt stack 25
  2804                           
  2805                           ;incstack = 0
  2806                           ;setGPIO@address stored from wreg
  2807  0016E0  6E2E               	movwf	setGPIO@address,c
  2808                           
  2809                           ;LCD.c: 47: PORTAbits.RA2=0;
  2810  0016E2  9480               	bcf	3968,2,c	;volatile
  2811                           
  2812                           ;LCD.c: 50: WriteSPI1(0x40);
  2813  0016E4  0E40               	movlw	64
  2814  0016E6  EC95  F00B         	call	_WriteSPI1
  2815                           
  2816                           ;LCD.c: 51: WriteSPI1(address);
  2817  0016EA  502E               	movf	setGPIO@address,w,c
  2818  0016EC  EC95  F00B         	call	_WriteSPI1
  2819                           
  2820                           ;LCD.c: 52: WriteSPI1(value);
  2821  0016F0  502D               	movf	setGPIO@value,w,c
  2822  0016F2  EC95  F00B         	call	_WriteSPI1
  2823                           
  2824                           ;LCD.c: 53: PORTAbits.RA2=1;
  2825  0016F6  8480               	bsf	3968,2,c	;volatile
  2826  0016F8  0012               	return		;funcret
  2827  0016FA                     __end_of_setGPIO:
  2828                           	opt stack 0
  2829                           tblptru	equ	0xFF8
  2830                           tblptrh	equ	0xFF7
  2831                           tblptrl	equ	0xFF6
  2832                           tablat	equ	0xFF5
  2833                           prodh	equ	0xFF4
  2834                           prodl	equ	0xFF3
  2835                           indf0	equ	0xFEF
  2836                           postinc0	equ	0xFEE
  2837                           fsr0h	equ	0xFEA
  2838                           fsr0l	equ	0xFE9
  2839                           wreg	equ	0xFE8
  2840                           indf2	equ	0xFDF
  2841                           postinc2	equ	0xFDE
  2842                           postdec2	equ	0xFDD
  2843                           fsr2h	equ	0xFDA
  2844                           fsr2l	equ	0xFD9
  2845                           status	equ	0xFD8
  2846                           
  2847 ;; *************** function _WriteSPI1 *****************
  2848 ;; Defined at:
  2849 ;;		line 13 in file "D:\Hella\Compiler\sources\pic18\plib\SPI\spi1writ.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;  data_out        1    wreg     unsigned char 
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;  data_out        1    1[COMRAM] unsigned char 
  2854 ;;  TempVar         1    0[COMRAM] unsigned char 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      char 
  2857 ;; Registers used:
  2858 ;;		wreg
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;Total ram usage:        2 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_setGPIO
  2874 ;;		_setIODIR
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text22
  2879  00172A                     __ptext22:
  2880                           	opt stack 0
  2881  00172A                     _WriteSPI1:
  2882                           	opt stack 25
  2883                           
  2884                           ;incstack = 0
  2885                           ;WriteSPI1@data_out stored from wreg
  2886  00172A  6E2C               	movwf	WriteSPI1@data_out,c
  2887  00172C  CFC9 F02B          	movff	4041,WriteSPI1@TempVar	;volatile
  2888  001730  969E               	bcf	3998,3,c	;volatile
  2889  001732  9EC6               	bcf	4038,7,c	;volatile
  2890  001734  C02C  FFC9         	movff	WriteSPI1@data_out,4041	;volatile
  2891  001738  BEC6               	btfsc	4038,7,c	;volatile
  2892  00173A  0012               	return	
  2893  00173C                     l258:
  2894  00173C  B69E               	btfsc	3998,3,c	;volatile
  2895  00173E  0012               	return	
  2896  001740  D7FD               	goto	l258
  2897  001742                     __end_of_WriteSPI1:
  2898                           	opt stack 0
  2899                           tblptru	equ	0xFF8
  2900                           tblptrh	equ	0xFF7
  2901                           tblptrl	equ	0xFF6
  2902                           tablat	equ	0xFF5
  2903                           prodh	equ	0xFF4
  2904                           prodl	equ	0xFF3
  2905                           indf0	equ	0xFEF
  2906                           postinc0	equ	0xFEE
  2907                           fsr0h	equ	0xFEA
  2908                           fsr0l	equ	0xFE9
  2909                           wreg	equ	0xFE8
  2910                           indf2	equ	0xFDF
  2911                           postinc2	equ	0xFDE
  2912                           postdec2	equ	0xFDD
  2913                           fsr2h	equ	0xFDA
  2914                           fsr2l	equ	0xFD9
  2915                           status	equ	0xFD8
  2916                           
  2917 ;; *************** function _Delay10TCYx *****************
  2918 ;; Defined at:
  2919 ;;		line 8 in file "D:\Hella\Compiler\sources\pic18\d10tcyx.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;  unit            1    wreg     unsigned char 
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;  unit            1    0[COMRAM] unsigned char 
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      void 
  2926 ;; Registers used:
  2927 ;;		wreg
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;Total ram usage:        1 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; This function calls:
  2940 ;;		Nothing
  2941 ;; This function is called by:
  2942 ;;		_lcdCommand
  2943 ;;		_LcdChar
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text23
  2948  001754                     __ptext23:
  2949                           	opt stack 0
  2950  001754                     _Delay10TCYx:
  2951                           	opt stack 26
  2952                           
  2953                           ;incstack = 0
  2954                           ;Delay10TCYx@unit stored from wreg
  2955  001754  6E2B               	movwf	Delay10TCYx@unit,c
  2956  001756  0E03               	movlw	3
  2957  001758                     u777:
  2958  001758  2EE8               	decfsz	wreg,f,c
  2959  00175A  D7FE               	bra	u777
  2960  00175C  F000               	nop	
  2961  00175E  2E2B               	decfsz	Delay10TCYx@unit,f,c
  2962  001760  D7FA               	goto	l908
  2963  001762  0012               	return	
  2964  001764                     __end_of_Delay10TCYx:
  2965                           	opt stack 0
  2966                           tblptru	equ	0xFF8
  2967                           tblptrh	equ	0xFF7
  2968                           tblptrl	equ	0xFF6
  2969                           tablat	equ	0xFF5
  2970                           prodh	equ	0xFF4
  2971                           prodl	equ	0xFF3
  2972                           indf0	equ	0xFEF
  2973                           postinc0	equ	0xFEE
  2974                           fsr0h	equ	0xFEA
  2975                           fsr0l	equ	0xFE9
  2976                           wreg	equ	0xFE8
  2977                           indf2	equ	0xFDF
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _checkInput *****************
  2985 ;; Defined at:
  2986 ;;		line 132 in file "StateMachine.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  leftButton      1    0[COMRAM] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;Total ram usage:        1 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		_main
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text24
  3014  001662                     __ptext24:
  3015                           	opt stack 0
  3016  001662                     _checkInput:
  3017                           	opt stack 30
  3018                           
  3019                           ;StateMachine.c: 134: byte leftButton = 0;
  3020                           
  3021                           ;incstack = 0
  3022  001662  0E00               	movlw	0
  3023  001664  6E2B               	movwf	checkInput@leftButton,c
  3024                           
  3025                           ;StateMachine.c: 135: static byte leftButton_old = 0;
  3026                           ;StateMachine.c: 138: leftButton = PORTBbits.RB0;
  3027  001666  0E00               	movlw	0
  3028  001668  B081               	btfsc	3969,0,c	;volatile
  3029  00166A  0E01               	movlw	1
  3030  00166C  6E2B               	movwf	checkInput@leftButton,c
  3031                           
  3032                           ;StateMachine.c: 139: if ( (leftButton == 0)
  3033                           ;StateMachine.c: 140: && (leftButton != leftButton_old)
  3034                           ;StateMachine.c: 141: )
  3035  00166E  502B               	movf	checkInput@leftButton,w,c
  3036  001670  A4D8               	btfss	status,2,c
  3037  001672  D006               	goto	l1138
  3038  001674  5002               	movf	checkInput@leftButton_old,w,c
  3039  001676  182B               	xorwf	checkInput@leftButton,w,c
  3040  001678  B4D8               	btfsc	status,2,c
  3041  00167A  D002               	goto	l1138
  3042                           
  3043                           ;StateMachine.c: 142: {
  3044                           ;StateMachine.c: 143: leftButtonEv = 1;
  3045  00167C  0E01               	movlw	1
  3046  00167E  6E04               	movwf	_leftButtonEv,c
  3047  001680                     l1138:
  3048                           
  3049                           ;StateMachine.c: 144: }
  3050                           ;StateMachine.c: 145: leftButton_old = leftButton;
  3051  001680  C02B  F002         	movff	checkInput@leftButton,checkInput@leftButton_old
  3052  001684  0012               	return		;funcret
  3053  001686                     __end_of_checkInput:
  3054                           	opt stack 0
  3055                           tblptru	equ	0xFF8
  3056                           tblptrh	equ	0xFF7
  3057                           tblptrl	equ	0xFF6
  3058                           tablat	equ	0xFF5
  3059                           prodh	equ	0xFF4
  3060                           prodl	equ	0xFF3
  3061                           indf0	equ	0xFEF
  3062                           postinc0	equ	0xFEE
  3063                           fsr0h	equ	0xFEA
  3064                           fsr0l	equ	0xFE9
  3065                           wreg	equ	0xFE8
  3066                           indf2	equ	0xFDF
  3067                           postinc2	equ	0xFDE
  3068                           postdec2	equ	0xFDD
  3069                           fsr2h	equ	0xFDA
  3070                           fsr2l	equ	0xFD9
  3071                           status	equ	0xFD8
  3072                           
  3073 ;; *************** function _Adc_GetMess *****************
  3074 ;; Defined at:
  3075 ;;		line 70 in file "StateMachine.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  Value           2    0[COMRAM] PTR unsigned char 
  3078 ;;		 -> InputTemperature(1), 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;		None
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      void 
  3083 ;; Registers used:
  3084 ;;		wreg, fsr2l, fsr2h, status,2
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3093 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;Total ram usage:        2 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_main
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text25
  3104  0016A6                     __ptext25:
  3105                           	opt stack 0
  3106  0016A6                     _Adc_GetMess:
  3107                           	opt stack 30
  3108                           
  3109                           ;StateMachine.c: 72: ADCON0 = 0b00000001;
  3110                           
  3111                           ;incstack = 0
  3112  0016A6  0E01               	movlw	1
  3113  0016A8  6EC2               	movwf	4034,c	;volatile
  3114                           
  3115                           ;StateMachine.c: 73: ADCON1 = 0b00001110;
  3116  0016AA  0E0E               	movlw	14
  3117  0016AC  6EC1               	movwf	4033,c	;volatile
  3118                           
  3119                           ;StateMachine.c: 74: ADCON2 = 0b00111010;
  3120  0016AE  0E3A               	movlw	58
  3121  0016B0  6EC0               	movwf	4032,c	;volatile
  3122                           
  3123                           ;StateMachine.c: 75: ADCON0bits.GO = 1;
  3124  0016B2  82C2               	bsf	4034,1,c	;volatile
  3125  0016B4                     l62:
  3126  0016B4  B2C2               	btfsc	4034,1,c	;volatile
  3127  0016B6  D7FE               	goto	l62
  3128                           
  3129                           ;StateMachine.c: 79: }
  3130                           ;StateMachine.c: 81: *Value = ADRESH;
  3131  0016B8  C02B  FFD9         	movff	Adc_GetMess@Value,fsr2l
  3132  0016BC  C02C  FFDA         	movff	Adc_GetMess@Value+1,fsr2h
  3133  0016C0  CFC4 FFDF          	movff	4036,indf2	;volatile
  3134  0016C4  0012               	return		;funcret
  3135  0016C6                     __end_of_Adc_GetMess:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           prodh	equ	0xFF4
  3142                           prodl	equ	0xFF3
  3143                           indf0	equ	0xFEF
  3144                           postinc0	equ	0xFEE
  3145                           fsr0h	equ	0xFEA
  3146                           fsr0l	equ	0xFE9
  3147                           wreg	equ	0xFE8
  3148                           indf2	equ	0xFDF
  3149                           postinc2	equ	0xFDE
  3150                           postdec2	equ	0xFDD
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           tblptru	equ	0xFF8
  3155                           tblptrh	equ	0xFF7
  3156                           tblptrl	equ	0xFF6
  3157                           tablat	equ	0xFF5
  3158                           prodh	equ	0xFF4
  3159                           prodl	equ	0xFF3
  3160                           indf0	equ	0xFEF
  3161                           postinc0	equ	0xFEE
  3162                           fsr0h	equ	0xFEA
  3163                           fsr0l	equ	0xFE9
  3164                           wreg	equ	0xFE8
  3165                           indf2	equ	0xFDF
  3166                           postinc2	equ	0xFDE
  3167                           postdec2	equ	0xFDD
  3168                           fsr2h	equ	0xFDA
  3169                           fsr2l	equ	0xFD9
  3170                           status	equ	0xFD8
  3171                           
  3172                           	psect	rparam
  3173  0000                     tblptru	equ	0xFF8
  3174                           tblptrh	equ	0xFF7
  3175                           tblptrl	equ	0xFF6
  3176                           tablat	equ	0xFF5
  3177                           prodh	equ	0xFF4
  3178                           prodl	equ	0xFF3
  3179                           indf0	equ	0xFEF
  3180                           postinc0	equ	0xFEE
  3181                           fsr0h	equ	0xFEA
  3182                           fsr0l	equ	0xFE9
  3183                           wreg	equ	0xFE8
  3184                           indf2	equ	0xFDF
  3185                           postinc2	equ	0xFDE
  3186                           postdec2	equ	0xFDD
  3187                           fsr2h	equ	0xFDA
  3188                           fsr2l	equ	0xFD9
  3189                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    118
    Data        0
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     26      68
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_5(CODE[15]), STR_4(CODE[13]), STR_3(CODE[13]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> s(COMRAM[16]), State_Text(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LcdWriteString@s	PTR const unsigned char  size(2) Largest target is 108
		 -> s(COMRAM[16]), LcdLines(CODE[108]), State_Text(COMRAM[16]), 

    Adc_GetMess@Value	PTR unsigned char  size(2) Largest target is 1
		 -> InputTemperature(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _stateMachine_clima->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UpdateLCDText->_LcdWriteString
    _LcdWriteString->_LcdChar
    _LcdChar->_setGPIO
    _LcdGoTo->_lcdCommand
    _LcdInit->_lcdCommand
    _setIODIR->_WriteSPI1
    _LcdClear->_lcdCommand
    _lcdCommand->_setGPIO
    _setGPIO->_WriteSPI1

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10997
                        _Adc_GetMess
                            _LcdGoTo
                     _LcdWriteString
                         _checkInput
                               _init
                            _sprintf
                 _stateMachine_clima
                      _updateOutputs
 ---------------------------------------------------------------------------------
 (1) _updateOutputs                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stateMachine_clima                                   0     0      0    5123
                      _UpdateLCDText
                 _getOnOffLeftButton
                          _setRD5Led
                          _setRD7Led
                          _setRD8Led
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    1694
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _setRD8Led                                            2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setRD7Led                                            2     0      2     278
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setRD5Led                                            2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getOnOffLeftButton                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UpdateLCDText                                        0     0      0    2339
                           _LcdClear
                            _LcdGoTo
                     _LcdWriteString
 ---------------------------------------------------------------------------------
 (3) _LcdWriteString                                       2     0      2     973
                                              5 COMRAM     2     0      2
                            _LcdChar
 ---------------------------------------------------------------------------------
 (4) _LcdChar                                              1     1      0     672
                                              4 COMRAM     1     1      0
                        _Delay10TCYx
                            _setGPIO
 ---------------------------------------------------------------------------------
 (3) _LcdGoTo                                              1     1      0     694
                                              5 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    2382
                            _LcdInit
                        _initButtons
 ---------------------------------------------------------------------------------
 (2) _initButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcdInit                                              0     0      0    2382
                           _LcdClear
                           _OpenSPI1
                         _lcdCommand
                            _setGPIO
                           _setIODIR
 ---------------------------------------------------------------------------------
 (3) _setIODIR                                             2     1      1     187
                                              2 COMRAM     2     1      1
                          _WriteSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _LcdClear                                             0     0      0     672
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (4) _lcdCommand                                           1     1      0     672
                                              4 COMRAM     1     1      0
                        _Delay10TCYx
                            _setGPIO
 ---------------------------------------------------------------------------------
 (5) _setGPIO                                              2     1      1     635
                                              2 COMRAM     2     1      1
                          _WriteSPI1
 ---------------------------------------------------------------------------------
 (6) _WriteSPI1                                            2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay10TCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkInput                                           1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Adc_GetMess                                          2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Adc_GetMess
   _LcdGoTo
     _lcdCommand
       _Delay10TCYx
       _setGPIO
         _WriteSPI1
   _LcdWriteString
     _LcdChar
       _Delay10TCYx
       _setGPIO
         _WriteSPI1
   _checkInput
   _init
     _LcdInit
       _LcdClear
         _lcdCommand
           _Delay10TCYx
           _setGPIO
             _WriteSPI1
       _OpenSPI1
       _lcdCommand
         _Delay10TCYx
         _setGPIO
           _WriteSPI1
       _setGPIO
         _WriteSPI1
       _setIODIR
         _WriteSPI1
     _initButtons
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _stateMachine_clima
     _UpdateLCDText
       _LcdClear
         _lcdCommand
           _Delay10TCYx
           _setGPIO
             _WriteSPI1
       _LcdGoTo
         _lcdCommand
           _Delay10TCYx
           _setGPIO
             _WriteSPI1
       _LcdWriteString
         _LcdChar
           _Delay10TCYx
           _setGPIO
             _WriteSPI1
     _getOnOffLeftButton
     _setRD5Led
     _setRD7Led
     _setRD8Led
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _updateOutputs

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1A      44       1       71.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      44      32        0.0%
DATA                 0      0      44       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed May 15 17:58:02 2019

                 _updateOutputs 1686                               _s 001A                              l62 16B4  
                   __CFG_OSC$HS 000000                             l240 148E                             l241 14A8  
                           l242 1490                             l234 146E                             l243 1494  
                           l236 1472                             l237 1474                             l258 173C  
                           l908 1756                             l677 14F8                             l687 161A  
                           u405 16A2                             u430 1428                             u406 16A4  
                           u440 1452                             u437 141E                             u447 1448  
                           u385 168E                             u386 1690                             u395 1698  
                           u396 169A                             u777 1758               lcdCommand@command 002F  
                           wreg 000FE8                    __CFG_WDT$OFF 000000                            l1400 14EE  
                          l1138 1680                            l1410 15F8                            l1412 15FC  
                          l1352 1430                            l1416 1610                            l1408 15F0  
                          l1440 12CC                            l1434 12B2                            l1530 10BC  
                          l1348 1406                            l1604 1234                            l1374 1478  
                          l1390 14CE                            l1470 1358                            l1446 12FA  
                          l1614 1268                            l1392 14D2                            l1456 1322  
                          l1624 128C                            l1378 1498                            l1458 1326  
                          l1618 127A                            l1570 1194                            l1562 1170  
                          l1538 10DE                            l1388 14C6                            l1484 13D2  
                          l1476 1374                            l1548 1116                            l1478 137A  
                          l1486 13DA                            l1566 1182                            l1558 115C  
                          l1670 1506                            l1488 13F6                            l1592 1200  
                          l1578 11B6                            l1596 1212                            l1588 11EE  
                          STR_1 10AD                            STR_2 10A0                            STR_3 1086  
                          STR_4 1093                            STR_5 1077                            _main 1502  
                          _init 1712                            fsr0h 000FEA                            indf0 000FEF  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf2 000FDF  
                          fsr2l 000FD9                            prodh 000FF4                            prodl 000FF3  
                          start 0000                 __end_of_LcdChar 1662                 __end_of_LcdGoTo 1770  
               __end_of_LcdInit 159E                  ?_updateOutputs 002B                    ___param_bank 000000  
                  ?_initButtons 002B                     _Delay10TCYx 1754                           ?_main 002B  
                         ?_init 002B                 __end_of___lwdiv 1502                 __end_of___lwmod 1624  
                         _PORTD 000F83                           _TRISB 000F93                           _TRISD 000F95  
                __CFG_FCMEN$OFF 000000                           _State 0003              _stateMachine_clima 10BA  
               __end_of_dpowers 100B                 __end_of_setGPIO 16FA                           _state 0009  
                         tablat 000FF5             ?_stateMachine_clima 002B                           status 000FD8  
               __end_of_sprintf 1404                __end_of_LcdClear 1780                __end_of_LcdLines 1077  
               __initialization 1742                    __end_of_main 1550                    __end_of_init 172A  
    __end_of_getOnOffLeftButton 1796            ??_stateMachine_clima 0045                __end_of_OpenSPI1 14B0  
                        ??_main 0045                          ??_init 0030                   __activetblptr 000003  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        _ADRESH 000FC4                          _RD5Led 0008                          _RD7Led 0006  
                        _RD8Led 0007                       ??_LcdChar 002F                       ??_LcdGoTo 0030  
                     ??_LcdInit 0030                 ??_updateOutputs 002B                OpenSPI1@bus_mode 002B  
                     ??___lwdiv 002F                       ??___lwmod 0036                __end_of_setIODIR 16E0  
                        clear_0 1748                     setIODIR@dir 002D                       ??_setGPIO 002E  
                 LcdChar@letter 002F                    __mediumconst 0000                    ?_Adc_GetMess 002B  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                    _State_Text 000A                       ??_sprintf 003D                      __accesstop 0060  
       __end_of__initialization 174E         __size_of_LcdWriteString 0056              __size_of_WriteSPI1 0018  
                 ___rparam_used 000001                  __pcstackCOMRAM 002B            __size_of_initButtons 0008  
                     ?_LcdClear 002B                      _checkInput 1662                WriteSPI1@TempVar 002B  
         __end_of_UpdateLCDText 1712                       ?_OpenSPI1 002B              __size_of_setRD5Led 0006  
            __size_of_setRD7Led 0006              __size_of_setRD8Led 0006                    ?_Delay10TCYx 002B  
                    _lcdCommand 159E               __end_of_WriteSPI1 1742                      ??_LcdClear 0030  
                       _SSP1BUF 000FC9                         _LcdChar 1624                         _LcdGoTo 1764  
                       _LcdInit 1550                       ?_setIODIR 002D                      ??_OpenSPI1 002D  
                       __Hparam 0000                         __Lparam 0000                         ___lwdiv 14B0  
                       ___lwmod 15E2                    __psmallconst 1000                         __pcinit 1742  
               Delay10TCYx@unit 002B                         __ramtop 1000                         __ptext0 1502  
                       __ptext1 1686                         __ptext2 10BA                         __ptext3 12A8  
                       __ptext4 15E2                         __ptext5 14B0                         __ptext6 1780  
                       __ptext7 1786                         __ptext8 178C                         __ptext9 1792  
                       _dpowers 1001                         _setGPIO 16E0               __end_of_setRD5Led 1792  
             __end_of_setRD7Led 178C               __end_of_setRD8Led 1786              _getOnOffLeftButton 1792  
               setIODIR@address 002E                    setGPIO@value 002D                         _sprintf 12A8  
          __size_of_Adc_GetMess 0020                     ?_checkInput 002B            end_of_initialization 174E  
                _LcdWriteString 1404             ?_getOnOffLeftButton 002B                      ??_setIODIR 002E  
             OpenSPI1@smp_phase 002C                _InputTemperature 002A                         postdec2 000FDD  
                   ?_lcdCommand 002B                         postinc0 000FEE                         postinc2 000FDE  
             OpenSPI1@sync_mode 002D            ??_getOnOffLeftButton 002B                       _PORTAbits 000F80  
                     _PORTBbits 000F81                       _PORTDbits 000F83     __size_of_stateMachine_clima 01EE  
                     _TRISAbits 000F92                       _TRISCbits 000F94                       _TRISFbits 000F97  
        __end_of_LcdWriteString 145A           __end_of_updateOutputs 16A6                    _leftButtonEv 0004  
           __size_of_checkInput 0024            __size_of_Delay10TCYx 0010             start_initialization 1742  
               ?_LcdWriteString 0030               __size_of_LcdClear 0008             __size_of_lcdCommand 0044  
             __size_of_OpenSPI1 0056                   ??_initButtons 002B                     __pbssCOMRAM 0001  
      checkInput@leftButton_old 0002                       _WriteSPI1 172A                        ?_LcdChar 002B  
                      ?_LcdGoTo 002B                        ?_LcdInit 002B                     sprintf@flag 0040  
                   sprintf@prec 0041               WriteSPI1@data_out 002C               __size_of_setIODIR 001A  
              ___lwdiv@dividend 002B                        ?___lwdiv 002B                        ?___lwmod 0032  
           __end_of_initButtons 1778          __size_of_UpdateLCDText 0018                     __smallconst 1000  
                      ?_setGPIO 002D                      ?_WriteSPI1 002B                ___lwdiv@quotient 002F  
                      ?_sprintf 0037                       _setRD5Led 178C                       _setRD7Led 1786  
                     _setRD8Led 1780                    ??_checkInput 002B            checkInput@leftButton 002B  
                      _PIR1bits 000F9E                  setGPIO@address 002E                    ??_lcdCommand 002F  
                      _SSP1CON1 000FC6                        _SSP1STAT 000FC7              __end_of_checkInput 1686  
                    _ADCON0bits 000FC2                   ??_Adc_GetMess 002D                        _LcdClear 1778  
                      _LcdLines 100B                      ?_setRD5Led 002B                      ?_setRD7Led 002B  
                    ?_setRD8Led 002B              __end_of_lcdCommand 15E2                __size_of_LcdChar 003E  
              __size_of_LcdGoTo 000C                  setRD5Led@state 002B                __size_of_LcdInit 004E  
                 _UpdateLCDText 16FA                        _OpenSPI1 145A                        __Hrparam 0000  
                      __Lrparam 0000                  setRD7Led@state 002B                     _initButtons 1770  
    __end_of_stateMachine_clima 12A8                  setRD8Led@state 002B                __size_of___lwdiv 0052  
              __size_of___lwmod 0042     __size_of_getOnOffLeftButton 0004                ??_LcdWriteString 0032  
                    sprintf@val 0042                __size_of_setGPIO 001A                     ??_WriteSPI1 002B  
               ___lwdiv@divisor 002D                 ___lwdiv@counter 0031                        __ptext10 16FA  
                      __ptext11 1404                        __ptext20 159E                        __ptext12 1624  
                      __ptext21 16E0                        __ptext13 1764                        __ptext22 172A  
                      __ptext14 1712                        __ptext23 1754                        __ptext15 1770  
                      __ptext24 1662                        __ptext16 1550                        __ptext25 16A6  
                      __ptext17 16C6                        __ptext18 145A                        __ptext19 1778  
                  _SSP1CON1bits 000FC6                __size_of_sprintf 015C             __end_of_Adc_GetMess 16C6  
                ?_UpdateLCDText 002B                        _setIODIR 16C6                   __size_of_main 004E  
                 __size_of_init 0018  stateMachine_clima@DisplayState 0001                   ??_Delay10TCYx 002B  
               LcdWriteString@s 0030                      _MEMCONbits 000F9C                    _SSP1STATbits 000FC7  
        __size_of_updateOutputs 0020                     ??_setRD5Led 002D                     ??_setRD7Led 002D  
                   ??_setRD8Led 002D                      LcdGoTo@pos 0030                       sprintf@ap 003E  
                     sprintf@sp 0037                ___lwmod@dividend 0032                  _SetTemperature 0005  
           __end_of_Delay10TCYx 1764                        sprintf@c 0044                        sprintf@f 0039  
               ___lwmod@divisor 0034                 ___lwmod@counter 0036                     _Adc_GetMess 16A6  
               ??_UpdateLCDText 0032                Adc_GetMess@Value 002B  
