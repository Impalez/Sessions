

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Apr 03 18:49:46 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54  0000                     
    55                           ; Version 1.41 (B)
    56                           ; Generated 21/02/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F8722 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataBANK0
    91  003844                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for sequence2@F6598
    95  003844  50                 	db	80
    96  003845  6F                 	db	111
    97  003846  74                 	db	116
    98  003847  69                 	db	105
    99  003848  20                 	db	32
   100  003849  76                 	db	118
   101  00384A  61                 	db	97
   102  00384B  6C                 	db	108
   103  00384C  75                 	db	117
   104  00384D  65                 	db	101
   105  00384E  20                 	db	32
   106  00384F  20                 	db	32
   107  003850  20                 	db	32
   108  003851  20                 	db	32
   109  003852  20                 	db	32
   110  003853  00                 	db	0
   111                           
   112                           ;initializer for _state
   113  003854  0004               	dw	4
   114                           
   115                           	psect	smallconst
   116  001000                     __psmallconst:
   117                           	opt stack 0
   118  001000  00                 	db	0
   119  001001                     _dpowers:
   120                           	opt stack 0
   121  001001  0001               	dw	1
   122  001003  0000               	dw	0
   123  001005  000A               	dw	10
   124  001007  0000               	dw	0
   125  001009  0064               	dw	100
   126  00100B  0000               	dw	0
   127  00100D  03E8               	dw	1000
   128  00100F  0000               	dw	0
   129  001011  2710               	dw	10000
   130  001013  0000               	dw	0
   131  001015  86A0               	dw	34464
   132  001017  0001               	dw	1
   133  001019  4240               	dw	16960
   134  00101B  000F               	dw	15
   135  00101D  9680               	dw	38528
   136  00101F  0098               	dw	152
   137  001021  E100               	dw	57600
   138  001023  05F5               	dw	1525
   139  001025  CA00               	dw	51712
   140  001027  3B9A               	dw	15258
   141  001029                     __end_of_dpowers:
   142                           	opt stack 0
   143  001029                     __powers_:
   144                           	opt stack 0
   145  001029  00                 	db	0
   146  00102A  80                 	db	128
   147  00102B  3F                 	db	63
   148  00102C  00                 	db	0
   149  00102D  20                 	db	32
   150  00102E  41                 	db	65
   151  00102F  00                 	db	0
   152  001030  C8                 	db	200
   153  001031  42                 	db	66
   154  001032  00                 	db	0
   155  001033  7A                 	db	122
   156  001034  44                 	db	68
   157  001035  40                 	db	64
   158  001036  1C                 	db	28
   159  001037  46                 	db	70
   160  001038  50                 	db	80
   161  001039  C3                 	db	195
   162  00103A  47                 	db	71
   163  00103B  24                 	db	36
   164  00103C  74                 	db	116
   165  00103D  49                 	db	73
   166  00103E  97                 	db	151
   167  00103F  18                 	db	24
   168  001040  4B                 	db	75
   169  001041  BC                 	db	188
   170  001042  BE                 	db	190
   171  001043  4C                 	db	76
   172  001044  6B                 	db	107
   173  001045  6E                 	db	110
   174  001046  4E                 	db	78
   175  001047  03                 	db	3
   176  001048  15                 	db	21
   177  001049  50                 	db	80
   178  00104A  79                 	db	121
   179  00104B  AD                 	db	173
   180  00104C  60                 	db	96
   181  00104D  F3                 	db	243
   182  00104E  49                 	db	73
   183  00104F  71                 	db	113
   184  001050                     __end_of__powers_:
   185                           	opt stack 0
   186  001050                     __npowers_:
   187                           	opt stack 0
   188  001050  00                 	db	0
   189  001051  80                 	db	128
   190  001052  3F                 	db	63
   191  001053  CD                 	db	205
   192  001054  CC                 	db	204
   193  001055  3D                 	db	61
   194  001056  D7                 	db	215
   195  001057  23                 	db	35
   196  001058  3C                 	db	60
   197  001059  12                 	db	18
   198  00105A  83                 	db	131
   199  00105B  3A                 	db	58
   200  00105C  B7                 	db	183
   201  00105D  D1                 	db	209
   202  00105E  38                 	db	56
   203  00105F  C6                 	db	198
   204  001060  27                 	db	39
   205  001061  37                 	db	55
   206  001062  38                 	db	56
   207  001063  86                 	db	134
   208  001064  35                 	db	53
   209  001065  C0                 	db	192
   210  001066  D6                 	db	214
   211  001067  33                 	db	51
   212  001068  CC                 	db	204
   213  001069  2B                 	db	43
   214  00106A  32                 	db	50
   215  00106B  70                 	db	112
   216  00106C  89                 	db	137
   217  00106D  30                 	db	48
   218  00106E  E7                 	db	231
   219  00106F  DB                 	db	219
   220  001070  2E                 	db	46
   221  001071  E5                 	db	229
   222  001072  3C                 	db	60
   223  001073  1E                 	db	30
   224  001074  42                 	db	66
   225  001075  A2                 	db	162
   226  001076  0D                 	db	13
   227  001077                     __end_of__npowers_:
   228                           	opt stack 0
   229  0000                     _PIR1bits	set	3998
   230  0000                     _SSP1BUF	set	4041
   231  0000                     _TRISCbits	set	3988
   232  0000                     _TRISFbits	set	3991
   233  0000                     _SSP1CON1bits	set	4038
   234  0000                     _SSP1STATbits	set	4039
   235  0000                     _SSP1CON1	set	4038
   236  0000                     _SSP1STAT	set	4039
   237  0000                     _ADRESH	set	4036
   238  0000                     _ADCON0bits	set	4034
   239  0000                     _ADCON2	set	4032
   240  0000                     _ADCON1	set	4033
   241  0000                     _ADCON0	set	4034
   242  0000                     _TRISA	set	3986
   243  0000                     _LATD	set	3980
   244  0000                     _TRISD	set	3989
   245  0000                     _TRISAbits	set	3986
   246  0000                     _PORTAbits	set	3968
   247  0000                     _TRISA5	set	31893
   248  0000                     _TRISB0	set	31896
   249  001077                     STR_2:
   250  001077  25                 	db	37
   251  001078  2E                 	db	46
   252  001079  34                 	db	52	;'4'
   253  00107A  67                 	db	103	;'g'
   254  00107B  20                 	db	32
   255  00107C  56                 	db	86	;'V'
   256  00107D  20                 	db	32
   257  00107E  20                 	db	32
   258  00107F  25                 	db	37
   259  001080  64                 	db	100	;'d'
   260  001081  20                 	db	32
   261  001082  20                 	db	32
   262  001083  20                 	db	32
   263  001084  20                 	db	32
   264  001085  20                 	db	32
   265  001086  20                 	db	32
   266  001087  20                 	db	32
   267  001088  20                 	db	32
   268  001089  20                 	db	32
   269  00108A  20                 	db	32
   270  00108B  20                 	db	32
   271  00108C  20                 	db	32
   272  00108D  00                 	db	0
   273  00108E                     STR_1:
   274  00108E  25                 	db	37
   275  00108F  64                 	db	100	;'d'
   276  001090  20                 	db	32
   277  001091  2D                 	db	45
   278  001092  3E                 	db	62	;'>'
   279  001093  20                 	db	32
   280  001094  25                 	db	37
   281  001095  2E                 	db	46
   282  001096  34                 	db	52	;'4'
   283  001097  67                 	db	103	;'g'
   284  001098  20                 	db	32
   285  001099  56                 	db	86	;'V'
   286  00109A  20                 	db	32
   287  00109B  20                 	db	32
   288  00109C  20                 	db	32
   289  00109D  20                 	db	32
   290  00109E  20                 	db	32
   291  00109F  20                 	db	32
   292  0010A0  20                 	db	32
   293  0010A1  20                 	db	32
   294  0010A2  20                 	db	32
   295  0010A3  20                 	db	32
   296  0010A4  00                 	db	0
   297  0010A5                     STR_3:
   298  0010A5  25                 	db	37
   299  0010A6  2E                 	db	46
   300  0010A7  34                 	db	52	;'4'
   301  0010A8  67                 	db	103	;'g'
   302  0010A9  20                 	db	32
   303  0010AA  56                 	db	86	;'V'
   304  0010AB  20                 	db	32
   305  0010AC  20                 	db	32
   306  0010AD  25                 	db	37
   307  0010AE  64                 	db	100	;'d'
   308  0010AF  20                 	db	32
   309  0010B0  20                 	db	32
   310  0010B1  20                 	db	32
   311  0010B2  20                 	db	32
   312  0010B3  20                 	db	32
   313  0010B4  20                 	db	32
   314  0010B5  20                 	db	32
   315  0010B6  20                 	db	32
   316  0010B7  20                 	db	32
   317  0010B8  00                 	db	0
   318                           
   319                           ; #config settings
   320  0010B9  00                 	db	0	; dummy byte at the end
   321  0000                     
   322                           	psect	cinit
   323  003690                     __pcinit:
   324                           	opt stack 0
   325  003690                     start_initialization:
   326                           	opt stack 0
   327  003690                     __initialization:
   328                           	opt stack 0
   329                           
   330                           ; Initialize objects allocated to BANK0 (18 bytes)
   331                           ; load TBLPTR registers with __pidataBANK0
   332  003690  0E44               	movlw	low __pidataBANK0
   333  003692  6EF6               	movwf	tblptrl,c
   334  003694  0E38               	movlw	high __pidataBANK0
   335  003696  6EF7               	movwf	tblptrh,c
   336  003698  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   337  00369A  6EF8               	movwf	tblptru,c
   338  00369C  EE00  F0A5         	lfsr	0,__pdataBANK0
   339  0036A0  EE10 F012          	lfsr	1,18
   340  0036A4                     copy_data0:
   341  0036A4  0009               	tblrd		*+
   342  0036A6  CFF5 FFEE          	movff	tablat,postinc0
   343  0036AA  50E5               	movf	postdec1,w,c
   344  0036AC  50E1               	movf	fsr1l,w,c
   345  0036AE  E1FA               	bnz	copy_data0
   346                           
   347                           ; Clear objects allocated to BANK0 (2 bytes)
   348  0036B0  0100               	movlb	0
   349  0036B2  6BB8               	clrf	(__pbssBANK0+1)& (0+255),b
   350  0036B4  6BB7               	clrf	__pbssBANK0& (0+255),b
   351  0036B6                     end_of_initialization:
   352                           	opt stack 0
   353  0036B6                     __end_of__initialization:
   354                           	opt stack 0
   355  0036B6  0100               	movlb	0
   356  0036B8  EF8E  F01A         	goto	_main	;jump to C main() function
   357                           tblptru	equ	0xFF8
   358                           tblptrh	equ	0xFF7
   359                           tblptrl	equ	0xFF6
   360                           tablat	equ	0xFF5
   361                           postinc0	equ	0xFEE
   362                           postdec1	equ	0xFE5
   363                           fsr1l	equ	0xFE1
   364                           
   365                           	psect	bssBANK0
   366  0000B7                     __pbssBANK0:
   367                           	opt stack 0
   368  0000B7                     sequence4@VARR:
   369                           	opt stack 0
   370  0000B7                     	ds	2
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           postdec1	equ	0xFE5
   377                           fsr1l	equ	0xFE1
   378                           
   379                           	psect	dataBANK0
   380  0000A5                     __pdataBANK0:
   381                           	opt stack 0
   382  0000A5                     sequence2@F6598:
   383                           	opt stack 0
   384  0000A5                     	ds	16
   385  0000B5                     _state:
   386                           	opt stack 0
   387  0000B5                     	ds	2
   388                           tblptru	equ	0xFF8
   389                           tblptrh	equ	0xFF7
   390                           tblptrl	equ	0xFF6
   391                           tablat	equ	0xFF5
   392                           postinc0	equ	0xFEE
   393                           postdec1	equ	0xFE5
   394                           fsr1l	equ	0xFE1
   395                           
   396                           	psect	cstackBANK0
   397  000060                     __pcstackBANK0:
   398                           	opt stack 0
   399  000060                     ?_sprintf:
   400                           	opt stack 0
   401  000060                     sprintf@sp:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x0
   405  000060                     	ds	2
   406  000062                     sprintf@f:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x2
   410  000062                     	ds	7
   411  000069                     ??_sprintf:
   412                           
   413                           ; 1 bytes @ 0x9
   414  000069                     	ds	6
   415  00006F                     _sprintf$1460:
   416                           	opt stack 0
   417                           
   418                           ; 3 bytes @ 0xF
   419  00006F                     	ds	3
   420  000072                     sprintf@temp:
   421                           	opt stack 0
   422                           
   423                           ; 3 bytes @ 0x12
   424  000072                     	ds	3
   425  000075                     sprintf@ap:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x15
   429  000075                     	ds	2
   430  000077                     sprintf@flag:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x17
   434  000077                     	ds	2
   435  000079                     sprintf@tmpval:
   436                           	opt stack 0
   437                           
   438                           ; 4 bytes @ 0x19
   439  000079                     	ds	4
   440  00007D                     sprintf@val:
   441                           	opt stack 0
   442                           
   443                           ; 4 bytes @ 0x1D
   444  00007D                     	ds	4
   445  000081                     sprintf@exp:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x21
   449  000081                     	ds	2
   450  000083                     sprintf@prec:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x23
   454  000083                     	ds	2
   455  000085                     sprintf@fval:
   456                           	opt stack 0
   457                           
   458                           ; 3 bytes @ 0x25
   459  000085                     	ds	3
   460  000088                     sprintf@c:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x28
   464  000088                     	ds	1
   465  000089                     ??_sequence4:
   466  000089                     sequence2@message:
   467                           	opt stack 0
   468  000089                     sequence3@message:
   469                           	opt stack 0
   470                           
   471                           ; 16 bytes @ 0x29
   472  000089                     	ds	3
   473  00008C                     sequence4@message:
   474                           	opt stack 0
   475                           
   476                           ; 16 bytes @ 0x2C
   477  00008C                     	ds	13
   478  000099                     _sequence2$1454:
   479                           	opt stack 0
   480  000099                     _sequence3$1455:
   481                           	opt stack 0
   482                           
   483                           ; 3 bytes @ 0x39
   484  000099                     	ds	3
   485  00009C                     sequence2@potiValue:
   486                           	opt stack 0
   487  00009C                     sequence3@potiValue:
   488                           	opt stack 0
   489  00009C                     _sequence4$1456:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0x3C
   493  00009C                     	ds	1
   494  00009D                     sequence3@i:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x3D
   498  00009D                     	ds	2
   499  00009F                     sequence4@j:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x3F
   503  00009F                     	ds	2
   504  0000A1                     sequence4@potiValue:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x41
   508  0000A1                     	ds	1
   509  0000A2                     sequence4@i:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x42
   513  0000A2                     	ds	1
   514  0000A3                     ??_main:
   515                           
   516                           ; 1 bytes @ 0x43
   517  0000A3                     	ds	2
   518                           tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           postinc0	equ	0xFEE
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	cstackCOMRAM
   527  000001                     __pcstackCOMRAM:
   528                           	opt stack 0
   529  000001                     ??_isdigit:
   530  000001                     ??_delay50:
   531  000001                     ?___awmod:
   532                           	opt stack 0
   533  000001                     ?___ftpack:
   534                           	opt stack 0
   535  000001                     ?__tdiv_to_l_:
   536                           	opt stack 0
   537  000001                     ?__div_to_l_:
   538                           	opt stack 0
   539  000001                     ?___lldiv:
   540                           	opt stack 0
   541  000001                     OpenSPI1@bus_mode:
   542                           	opt stack 0
   543  000001                     WriteSPI1@TempVar:
   544                           	opt stack 0
   545  000001                     ___awmod@dividend:
   546                           	opt stack 0
   547  000001                     __div_to_l_@f1:
   548                           	opt stack 0
   549  000001                     ___ftpack@arg:
   550                           	opt stack 0
   551  000001                     __tdiv_to_l_@f1:
   552                           	opt stack 0
   553  000001                     ___lldiv@dividend:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0x0
   557  000001                     	ds	1
   558  000002                     OpenSPI1@smp_phase:
   559                           	opt stack 0
   560  000002                     WriteSPI1@data_out:
   561                           	opt stack 0
   562  000002                     _isdigit$1107:
   563                           	opt stack 0
   564  000002                     delay50@i:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x1
   568  000002                     	ds	1
   569  000003                     setGPIO@value:
   570                           	opt stack 0
   571  000003                     setIODIR@dir:
   572                           	opt stack 0
   573  000003                     OpenSPI1@sync_mode:
   574                           	opt stack 0
   575  000003                     isdigit@c:
   576                           	opt stack 0
   577  000003                     ___awmod@divisor:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x2
   581  000003                     	ds	1
   582  000004                     setGPIO@address:
   583                           	opt stack 0
   584  000004                     setIODIR@address:
   585                           	opt stack 0
   586  000004                     sequence1@potiValue:
   587                           	opt stack 0
   588  000004                     ___ftpack@exp:
   589                           	opt stack 0
   590  000004                     __div_to_l_@f2:
   591                           	opt stack 0
   592  000004                     __tdiv_to_l_@f2:
   593                           	opt stack 0
   594                           
   595                           ; 3 bytes @ 0x3
   596  000004                     	ds	1
   597  000005                     lcdCommand@command:
   598                           	opt stack 0
   599  000005                     LcdChar@letter:
   600                           	opt stack 0
   601  000005                     ___awmod@counter:
   602                           	opt stack 0
   603  000005                     ___ftpack@sign:
   604                           	opt stack 0
   605  000005                     ___lldiv@divisor:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x4
   609  000005                     	ds	1
   610  000006                     ??___ftpack:
   611  000006                     LcdGoTo@pos:
   612                           	opt stack 0
   613  000006                     ___awmod@sign:
   614                           	opt stack 0
   615  000006                     LcdWriteString@s:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x5
   619  000006                     	ds	1
   620  000007                     ??__tdiv_to_l_:
   621  000007                     ?___awdiv:
   622                           	opt stack 0
   623  000007                     ___awdiv@dividend:
   624                           	opt stack 0
   625  000007                     __div_to_l_@quot:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x6
   629  000007                     	ds	1
   630  000008                     
   631                           ; 1 bytes @ 0x7
   632  000008                     	ds	1
   633  000009                     ?___awtoft:
   634                           	opt stack 0
   635  000009                     ___awdiv@divisor:
   636                           	opt stack 0
   637  000009                     ___awtoft@c:
   638                           	opt stack 0
   639  000009                     ___lldiv@quotient:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x8
   643  000009                     	ds	1
   644  00000A                     __tdiv_to_l_@quot:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0x9
   648  00000A                     	ds	1
   649  00000B                     ___awdiv@counter:
   650                           	opt stack 0
   651  00000B                     __div_to_l_@cntr:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0xA
   655  00000B                     	ds	1
   656  00000C                     ___awdiv@sign:
   657                           	opt stack 0
   658  00000C                     ___awtoft@sign:
   659                           	opt stack 0
   660  00000C                     __div_to_l_@exp1:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0xB
   664  00000C                     	ds	1
   665  00000D                     ___lldiv@counter:
   666                           	opt stack 0
   667  00000D                     ___awdiv@quotient:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0xC
   671  00000D                     	ds	1
   672  00000E                     ?___llmod:
   673                           	opt stack 0
   674  00000E                     __tdiv_to_l_@cntr:
   675                           	opt stack 0
   676  00000E                     ___llmod@dividend:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0xD
   680  00000E                     	ds	1
   681  00000F                     ?___wmul:
   682                           	opt stack 0
   683  00000F                     __tdiv_to_l_@exp1:
   684                           	opt stack 0
   685  00000F                     ___wmul@multiplier:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0xE
   689  00000F                     	ds	2
   690  000011                     ___wmul@multiplicand:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x10
   694  000011                     	ds	1
   695  000012                     ___llmod@divisor:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x11
   699  000012                     	ds	1
   700  000013                     ___wmul@product:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x12
   704  000013                     	ds	2
   705  000015                     ?___fttol:
   706                           	opt stack 0
   707  000015                     ___fttol@f1:
   708                           	opt stack 0
   709                           
   710                           ; 3 bytes @ 0x14
   711  000015                     	ds	1
   712  000016                     ___llmod@counter:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x15
   716  000016                     	ds	3
   717  000019                     ??___fttol:
   718                           
   719                           ; 1 bytes @ 0x18
   720  000019                     	ds	5
   721  00001E                     ___fttol@sign1:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x1D
   725  00001E                     	ds	1
   726  00001F                     ___fttol@lval:
   727                           	opt stack 0
   728                           
   729                           ; 4 bytes @ 0x1E
   730  00001F                     	ds	4
   731  000023                     ___fttol@exp1:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x22
   735  000023                     	ds	1
   736  000024                     ?___lltoft:
   737                           	opt stack 0
   738  000024                     ___lltoft@c:
   739                           	opt stack 0
   740                           
   741                           ; 4 bytes @ 0x23
   742  000024                     	ds	4
   743  000028                     ??___lltoft:
   744                           
   745                           ; 1 bytes @ 0x27
   746  000028                     	ds	4
   747  00002C                     ___lltoft@exp:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x2B
   751  00002C                     	ds	1
   752  00002D                     ?___ftneg:
   753                           	opt stack 0
   754  00002D                     ___ftneg@f1:
   755                           	opt stack 0
   756                           
   757                           ; 3 bytes @ 0x2C
   758  00002D                     	ds	3
   759  000030                     ?___ftmul:
   760                           	opt stack 0
   761  000030                     ___ftmul@f1:
   762                           	opt stack 0
   763                           
   764                           ; 3 bytes @ 0x2F
   765  000030                     	ds	3
   766  000033                     ___ftmul@f2:
   767                           	opt stack 0
   768                           
   769                           ; 3 bytes @ 0x32
   770  000033                     	ds	3
   771  000036                     ??___ftmul:
   772                           
   773                           ; 1 bytes @ 0x35
   774  000036                     	ds	3
   775  000039                     ___ftmul@exp:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x38
   779  000039                     	ds	1
   780  00003A                     ___ftmul@f3_as_product:
   781                           	opt stack 0
   782                           
   783                           ; 3 bytes @ 0x39
   784  00003A                     	ds	3
   785  00003D                     ___ftmul@cntr:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x3C
   789  00003D                     	ds	1
   790  00003E                     ___ftmul@sign:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x3D
   794  00003E                     	ds	1
   795  00003F                     ?_fround:
   796                           	opt stack 0
   797  00003F                     ?_scale:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x3E
   801  00003F                     	ds	3
   802  000042                     _fround$1458:
   803                           	opt stack 0
   804  000042                     _scale$1459:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x41
   808  000042                     	ds	3
   809  000045                     scale@scl:
   810                           	opt stack 0
   811  000045                     _fround$1457:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x44
   815  000045                     	ds	1
   816  000046                     ?___ftdiv:
   817                           	opt stack 0
   818  000046                     ___ftdiv@f1:
   819                           	opt stack 0
   820                           
   821                           ; 3 bytes @ 0x45
   822  000046                     	ds	2
   823  000048                     fround@prec:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0x47
   827  000048                     	ds	1
   828  000049                     ?___ftadd:
   829                           	opt stack 0
   830  000049                     ___ftadd@f1:
   831                           	opt stack 0
   832  000049                     ___ftdiv@f2:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x48
   836  000049                     	ds	3
   837  00004C                     ??___ftdiv:
   838  00004C                     ___ftadd@f2:
   839                           	opt stack 0
   840                           
   841                           ; 3 bytes @ 0x4B
   842  00004C                     	ds	3
   843  00004F                     ??___ftadd:
   844  00004F                     ___ftdiv@cntr:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x4E
   848  00004F                     	ds	1
   849  000050                     ___ftdiv@f3:
   850                           	opt stack 0
   851                           
   852                           ; 3 bytes @ 0x4F
   853  000050                     	ds	2
   854  000052                     ___ftadd@sign:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x51
   858  000052                     	ds	1
   859  000053                     ___ftadd@exp2:
   860                           	opt stack 0
   861  000053                     ___ftdiv@exp:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x52
   865  000053                     	ds	1
   866  000054                     ___ftadd@exp1:
   867                           	opt stack 0
   868  000054                     ___ftdiv@sign:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x53
   872  000054                     	ds	1
   873  000055                     ?___ftsub:
   874                           	opt stack 0
   875  000055                     ___ftge@ff1:
   876                           	opt stack 0
   877  000055                     ___ftsub@f1:
   878                           	opt stack 0
   879                           
   880                           ; 3 bytes @ 0x54
   881  000055                     	ds	3
   882  000058                     ___ftge@ff2:
   883                           	opt stack 0
   884  000058                     ___ftsub@f2:
   885                           	opt stack 0
   886                           
   887                           ; 3 bytes @ 0x57
   888  000058                     	ds	3
   889  00005B                     ??___ftge:
   890                           
   891                           ; 1 bytes @ 0x5A
   892  00005B                     	ds	3
   893  00005E                     ??_sequence3:
   894                           
   895                           ; 1 bytes @ 0x5D
   896  00005E                     	ds	2
   897                           tblptru	equ	0xFF8
   898                           tblptrh	equ	0xFF7
   899                           tblptrl	equ	0xFF6
   900                           tablat	equ	0xFF5
   901                           postinc0	equ	0xFEE
   902                           postdec1	equ	0xFE5
   903                           fsr1l	equ	0xFE1
   904                           
   905 ;;
   906 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   907 ;;
   908 ;; *************** function _main *****************
   909 ;; Defined at:
   910 ;;		line 197 in file "AnalogInputs.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   928 ;;Total ram usage:        2 bytes
   929 ;; Hardware stack levels required when called:    5
   930 ;; This function calls:
   931 ;;		_LcdInit
   932 ;;		_initAdc
   933 ;;		_initButtons
   934 ;;		_initLEDs
   935 ;;		_sequence1
   936 ;;		_sequence2
   937 ;;		_sequence3
   938 ;;		_sequence4
   939 ;; This function is called by:
   940 ;;		Startup code after reset
   941 ;; This function uses a non-reentrant model
   942 ;;
   943                           
   944                           	psect	text0
   945  00351C                     __ptext0:
   946                           	opt stack 0
   947  00351C                     _main:
   948                           	opt stack 26
   949                           
   950                           ;AnalogInputs.c: 200: initButtons();
   951                           
   952                           ;incstack = 0
   953  00351C  EC3A  F01C         	call	_initButtons	;wreg free
   954                           
   955                           ;AnalogInputs.c: 201: initAdc();
   956  003520  EC18  F01C         	call	_initAdc	;wreg free
   957                           
   958                           ;AnalogInputs.c: 202: LcdInit();
   959  003524  ECE5  F01A         	call	_LcdInit	;wreg free
   960                           
   961                           ;AnalogInputs.c: 203: initLEDs();
   962  003528  EC31  F01C         	call	_initLEDs	;wreg free
   963                           
   964                           ;AnalogInputs.c: 205: {
   965                           ;AnalogInputs.c: 206: switch(state)
   966                           
   967                           ;AnalogInputs.c: 204: while(1)
   968  00352C  D00B               	goto	l3356
   969  00352E                     l3346:
   970                           
   971                           ;AnalogInputs.c: 209: {
   972                           ;AnalogInputs.c: 210: sequence1();
   973  00352E  EC00  F01C         	call	_sequence1	;wreg free
   974                           
   975                           ;AnalogInputs.c: 211: break;
   976  003532  D008               	goto	l3356
   977  003534                     l3348:
   978                           
   979                           ;AnalogInputs.c: 214: {
   980                           ;AnalogInputs.c: 215: sequence2();
   981  003534  ECD8  F018         	call	_sequence2	;wreg free
   982                           
   983                           ;AnalogInputs.c: 216: break;
   984  003538  D005               	goto	l3356
   985  00353A                     l3350:
   986                           
   987                           ;AnalogInputs.c: 219: {
   988                           ;AnalogInputs.c: 220: sequence3();
   989  00353A  EC1B  F018         	call	_sequence3	;wreg free
   990                           
   991                           ;AnalogInputs.c: 221: break;
   992  00353E  D002               	goto	l3356
   993  003540                     l3352:
   994                           
   995                           ;AnalogInputs.c: 224: {
   996                           ;AnalogInputs.c: 225: sequence4();
   997  003540  EC8A  F015         	call	_sequence4	;wreg free
   998  003544                     l3356:
   999  003544  C0B5  F0A3         	movff	_state,??_main	;volatile
  1000  003548  C0B6  F0A4         	movff	_state+1,??_main+1	;volatile
  1001                           
  1002                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1003                           ; Switch size 1, requested type "space"
  1004                           ; Number of cases is 1, Range of values is 0 to 0
  1005                           ; switch strategies available:
  1006                           ; Name         Instructions Cycles
  1007                           ; simple_byte            4     3 (average)
  1008                           ;	Chosen strategy is simple_byte
  1009  00354C  0100               	movlb	0	; () banked
  1010  00354E  51A4               	movf	(??_main+1)& (0+255),w,b
  1011  003550  0A00               	xorlw	0	; case 0
  1012  003552  A4D8               	btfss	status,2,c
  1013  003554  D7F7               	goto	l3356
  1014                           
  1015                           ; BSR set to: 0
  1016                           ; Switch size 1, requested type "space"
  1017                           ; Number of cases is 4, Range of values is 1 to 4
  1018                           ; switch strategies available:
  1019                           ; Name         Instructions Cycles
  1020                           ; simple_byte           13     7 (average)
  1021                           ;	Chosen strategy is simple_byte
  1022  003556  0100               	movlb	0	; () banked
  1023  003558  51A3               	movf	??_main& (0+255),w,b
  1024  00355A  0A01               	xorlw	1	; case 1
  1025  00355C  B4D8               	btfsc	status,2,c
  1026  00355E  D7E7               	goto	l3346
  1027  003560  0A03               	xorlw	3	; case 2
  1028  003562  B4D8               	btfsc	status,2,c
  1029  003564  D7E7               	goto	l3348
  1030  003566  0A01               	xorlw	1	; case 3
  1031  003568  B4D8               	btfsc	status,2,c
  1032  00356A  D7E7               	goto	l3350
  1033  00356C  0A07               	xorlw	7	; case 4
  1034  00356E  B4D8               	btfsc	status,2,c
  1035  003570  D7E7               	goto	l3352
  1036                           
  1037                           ; BSR set to: 0
  1038                           
  1039                           ; BSR set to: 0
  1040  003572  D7E8               	goto	l3356
  1041  003574                     __end_of_main:
  1042                           	opt stack 0
  1043                           tblptru	equ	0xFF8
  1044                           tblptrh	equ	0xFF7
  1045                           tblptrl	equ	0xFF6
  1046                           tablat	equ	0xFF5
  1047                           postinc0	equ	0xFEE
  1048                           postdec1	equ	0xFE5
  1049                           fsr1l	equ	0xFE1
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _sequence4 *****************
  1053 ;; Defined at:
  1054 ;;		line 163 in file "AnalogInputs.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  j               2   63[BANK0 ] int 
  1059 ;;  message        16   44[BANK0 ] unsigned char [16]
  1060 ;;  i               1   66[BANK0 ] unsigned char 
  1061 ;;  potiValue       1   65[BANK0 ] unsigned char 
  1062 ;; Return value:  Size  Location     Type
  1063 ;;                  1    wreg      void 
  1064 ;; Registers used:
  1065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1066 ;; Tracked objects:
  1067 ;;		On entry : 0/0
  1068 ;;		On exit  : 0/0
  1069 ;;		Unchanged: 0/0
  1070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1072 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1073 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1074 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;Total ram usage:       26 bytes
  1076 ;; Hardware stack levels used:    1
  1077 ;; Hardware stack levels required when called:    4
  1078 ;; This function calls:
  1079 ;;		_LcdGoTo
  1080 ;;		_LcdWriteString
  1081 ;;		___awdiv
  1082 ;;		___awtoft
  1083 ;;		___ftdiv
  1084 ;;		_sprintf
  1085 ;; This function is called by:
  1086 ;;		_main
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text1
  1091  002B14                     __ptext1:
  1092                           	opt stack 0
  1093  002B14                     _sequence4:
  1094                           	opt stack 26
  1095                           
  1096                           ;AnalogInputs.c: 165: byte potiValue = 0;
  1097                           
  1098                           ; BSR set to: 0
  1099                           ;incstack = 0
  1100  002B14  0E00               	movlw	0
  1101  002B16  0100               	movlb	0	; () banked
  1102  002B18  6FA1               	movwf	sequence4@potiValue& (0+255),b
  1103                           
  1104                           ;AnalogInputs.c: 166: byte i =0;
  1105  002B1A  0E00               	movlw	0
  1106  002B1C  0100               	movlb	0	; () banked
  1107  002B1E  6FA2               	movwf	sequence4@i& (0+255),b
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;AnalogInputs.c: 167: char message[16];
  1111                           ;AnalogInputs.c: 168: static int VARR;
  1112                           ;AnalogInputs.c: 171: ADCON0bits.GO_DONE = 0x01;
  1113  002B20  82C2               	bsf	4034,1,c	;volatile
  1114  002B22                     l108:
  1115  002B22  B2C2               	btfsc	4034,1,c	;volatile
  1116  002B24  D7FE               	goto	l108
  1117                           
  1118                           ;AnalogInputs.c: 173: potiValue = ADRESH;
  1119  002B26  CFC4 F0A1          	movff	4036,sequence4@potiValue	;volatile
  1120                           
  1121                           ;AnalogInputs.c: 175: i = potiValue/32;
  1122  002B2A  C0A1  F007         	movff	sequence4@potiValue,___awdiv@dividend
  1123  002B2E  6A08               	clrf	___awdiv@dividend+1,c
  1124  002B30  0E00               	movlw	0
  1125  002B32  6E0A               	movwf	___awdiv@divisor+1,c
  1126  002B34  0E20               	movlw	32
  1127  002B36  6E09               	movwf	___awdiv@divisor,c
  1128  002B38  EC72  F019         	call	___awdiv	;wreg free
  1129  002B3C  5007               	movf	?___awdiv,w,c
  1130  002B3E  0100               	movlb	0	; () banked
  1131  002B40  6FA2               	movwf	sequence4@i& (0+255),b
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;AnalogInputs.c: 178: if(!VARR)
  1135  002B42  0100               	movlb	0	; () banked
  1136  002B44  51B7               	movf	sequence4@VARR& (0+255),w,b
  1137  002B46  0100               	movlb	0	; () banked
  1138  002B48  11B8               	iorwf	(sequence4@VARR+1)& (0+255),w,b
  1139  002B4A  A4D8               	btfss	status,2,c
  1140  002B4C  D035               	goto	l3328
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;AnalogInputs.c: 179: { VARR = 1;
  1144  002B4E  0E00               	movlw	0
  1145  002B50  0100               	movlb	0	; () banked
  1146  002B52  6FB8               	movwf	(sequence4@VARR+1)& (0+255),b
  1147  002B54  0E01               	movlw	1
  1148  002B56  6FB7               	movwf	sequence4@VARR& (0+255),b
  1149                           
  1150                           ;AnalogInputs.c: 180: for(int j = 0; j<= i; j++)
  1151  002B58  0E00               	movlw	0
  1152  002B5A  0100               	movlb	0	; () banked
  1153  002B5C  6FA0               	movwf	(sequence4@j+1)& (0+255),b
  1154  002B5E  0E00               	movlw	0
  1155  002B60  6F9F               	movwf	sequence4@j& (0+255),b
  1156  002B62  D014               	goto	l3326
  1157  002B64                     l3322:
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;AnalogInputs.c: 181: LATD |= 1 << j; }
  1161  002B64  C09F  F089         	movff	sequence4@j,??_sequence4
  1162  002B68  0E01               	movlw	1
  1163  002B6A  0100               	movlb	0	; () banked
  1164  002B6C  6F8A               	movwf	(??_sequence4+1)& (0+255),b
  1165  002B6E  0100               	movlb	0	; () banked
  1166  002B70  2B89               	incf	??_sequence4& (0+255),f,b
  1167  002B72  D003               	goto	u3514
  1168  002B74                     u3515:
  1169  002B74  0100               	movlb	0	; () banked
  1170  002B76  90D8               	bcf	status,0,c
  1171  002B78  378A               	rlcf	(??_sequence4+1)& (0+255),f,b
  1172  002B7A                     u3514:
  1173  002B7A  0100               	movlb	0	; () banked
  1174  002B7C  2F89               	decfsz	??_sequence4& (0+255),f,b
  1175  002B7E  D7FA               	goto	u3515
  1176  002B80  0100               	movlb	0	; () banked
  1177  002B82  518A               	movf	(??_sequence4+1)& (0+255),w,b
  1178  002B84  128C               	iorwf	3980,f,c	;volatile
  1179                           
  1180                           ; BSR set to: 0
  1181  002B86  0100               	movlb	0	; () banked
  1182  002B88  4B9F               	infsnz	sequence4@j& (0+255),f,b
  1183  002B8A  2BA0               	incf	(sequence4@j+1)& (0+255),f,b
  1184  002B8C                     l3326:
  1185                           
  1186                           ; BSR set to: 0
  1187  002B8C  0100               	movlb	0	; () banked
  1188  002B8E  51A2               	movf	sequence4@i& (0+255),w,b
  1189  002B90  0100               	movlb	0	; () banked
  1190  002B92  6F89               	movwf	??_sequence4& (0+255),b
  1191  002B94  6B8A               	clrf	(??_sequence4+1)& (0+255),b
  1192  002B96  0100               	movlb	0	; () banked
  1193  002B98  519F               	movf	sequence4@j& (0+255),w,b
  1194  002B9A  0100               	movlb	0	; () banked
  1195  002B9C  5D89               	subwf	??_sequence4& (0+255),w,b
  1196  002B9E  0100               	movlb	0	; () banked
  1197  002BA0  518A               	movf	(??_sequence4+1)& (0+255),w,b
  1198  002BA2  0A80               	xorlw	128
  1199  002BA4  0100               	movlb	0	; () banked
  1200  002BA6  6F8B               	movwf	(??_sequence4+2)& (0+255),b
  1201  002BA8  0100               	movlb	0	; () banked
  1202  002BAA  51A0               	movf	(sequence4@j+1)& (0+255),w,b
  1203  002BAC  0A80               	xorlw	128
  1204  002BAE  0100               	movlb	0	; () banked
  1205  002BB0  598B               	subwfb	(??_sequence4+2)& (0+255),w,b
  1206  002BB2  A0D8               	btfss	status,0,c
  1207  002BB4  D006               	goto	l3330
  1208  002BB6  D7D6               	goto	l3322
  1209  002BB8                     l3328:
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;AnalogInputs.c: 182: else
  1213                           ;AnalogInputs.c: 183: {
  1214                           ;AnalogInputs.c: 184: VARR = 0;
  1215  002BB8  0E00               	movlw	0
  1216  002BBA  0100               	movlb	0	; () banked
  1217  002BBC  6FB8               	movwf	(sequence4@VARR+1)& (0+255),b
  1218  002BBE  0E00               	movlw	0
  1219  002BC0  6FB7               	movwf	sequence4@VARR& (0+255),b
  1220  002BC2                     l3330:
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;AnalogInputs.c: 185: }
  1224                           ;AnalogInputs.c: 188: sprintf(message, "%.4g V  %d         ",(float) (potiValue*5)/255, 
      +                          i);
  1225  002BC2  0100               	movlb	0	; () banked
  1226  002BC4  51A1               	movf	sequence4@potiValue& (0+255),w,b
  1227  002BC6  0D05               	mullw	5
  1228  002BC8  CFF3 F009          	movff	prodl,___awtoft@c
  1229  002BCC  CFF4 F00A          	movff	prodh,___awtoft@c+1
  1230  002BD0  EC2C  F01B         	call	___awtoft	;wreg free
  1231  002BD4  C009  F046         	movff	?___awtoft,___ftdiv@f1
  1232  002BD8  C00A  F047         	movff	?___awtoft+1,___ftdiv@f1+1
  1233  002BDC  C00B  F048         	movff	?___awtoft+2,___ftdiv@f1+2
  1234  002BE0  0E00               	movlw	0
  1235  002BE2  6E49               	movwf	___ftdiv@f2,c
  1236  002BE4  0E7F               	movlw	127
  1237  002BE6  6E4A               	movwf	___ftdiv@f2+1,c
  1238  002BE8  0E43               	movlw	67
  1239  002BEA  6E4B               	movwf	___ftdiv@f2+2,c
  1240  002BEC  ECA8  F017         	call	___ftdiv	;wreg free
  1241  002BF0  C046  F09C         	movff	?___ftdiv,_sequence4$1456
  1242  002BF4  C047  F09D         	movff	?___ftdiv+1,_sequence4$1456+1
  1243  002BF8  C048  F09E         	movff	?___ftdiv+2,_sequence4$1456+2
  1244                           
  1245                           ;AnalogInputs.c: 185: }
  1246                           ;AnalogInputs.c: 188: sprintf(message, "%.4g V  %d         ",(float) (potiValue*5)/255, 
      +                          i);
  1247  002BFC  0E8C               	movlw	low sequence4@message
  1248  002BFE  0100               	movlb	0	; () banked
  1249  002C00  6F60               	movwf	sprintf@sp& (0+255),b
  1250  002C02  0E00               	movlw	high sequence4@message
  1251  002C04  0100               	movlb	0	; () banked
  1252  002C06  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1253  002C08  0EA5               	movlw	low STR_3
  1254  002C0A  0100               	movlb	0	; () banked
  1255  002C0C  6F62               	movwf	sprintf@f& (0+255),b
  1256  002C0E  0E10               	movlw	high STR_3
  1257  002C10  0100               	movlb	0	; () banked
  1258  002C12  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1259  002C14  C09C  F064         	movff	_sequence4$1456,?_sprintf+4
  1260  002C18  C09D  F065         	movff	_sequence4$1456+1,?_sprintf+5
  1261  002C1C  C09E  F066         	movff	_sequence4$1456+2,?_sprintf+6
  1262  002C20  C0A2  F067         	movff	sequence4@i,?_sprintf+7
  1263  002C24  0100               	movlb	0	; () banked
  1264  002C26  6B68               	clrf	(?_sprintf+8)& (0+255),b
  1265  002C28  EC5D  F008         	call	_sprintf	;wreg free
  1266                           
  1267                           ;AnalogInputs.c: 191: LcdGoTo(0);
  1268  002C2C  0E00               	movlw	0
  1269  002C2E  EC2B  F01C         	call	_LcdGoTo
  1270                           
  1271                           ;AnalogInputs.c: 192: LcdWriteString(message);
  1272  002C32  0E8C               	movlw	low sequence4@message
  1273  002C34  6E06               	movwf	LcdWriteString@s,c
  1274  002C36  0E00               	movlw	high sequence4@message
  1275  002C38  6E07               	movwf	LcdWriteString@s+1,c
  1276  002C3A  ECC5  F01B         	call	_LcdWriteString	;wreg free
  1277  002C3E  0012               	return		;funcret
  1278  002C40                     __end_of_sequence4:
  1279                           	opt stack 0
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           tblptrl	equ	0xFF6
  1283                           tablat	equ	0xFF5
  1284                           prodh	equ	0xFF4
  1285                           prodl	equ	0xFF3
  1286                           postinc0	equ	0xFEE
  1287                           postdec1	equ	0xFE5
  1288                           fsr1l	equ	0xFE1
  1289                           status	equ	0xFD8
  1290                           
  1291 ;; *************** function _sequence3 *****************
  1292 ;; Defined at:
  1293 ;;		line 137 in file "AnalogInputs.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;		None
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;  message        16   41[BANK0 ] unsigned char [16]
  1298 ;;  i               1   61[BANK0 ] unsigned char 
  1299 ;;  potiValue       1   60[BANK0 ] unsigned char 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1310 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1312 ;;      Totals:         2      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1313 ;;Total ram usage:       23 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:    4
  1316 ;; This function calls:
  1317 ;;		_LcdGoTo
  1318 ;;		_LcdWriteString
  1319 ;;		___awdiv
  1320 ;;		___awtoft
  1321 ;;		___ftdiv
  1322 ;;		_sprintf
  1323 ;; This function is called by:
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text2
  1329  003036                     __ptext2:
  1330                           	opt stack 0
  1331  003036                     _sequence3:
  1332                           	opt stack 26
  1333                           
  1334                           ;AnalogInputs.c: 139: byte potiValue = 0;
  1335                           
  1336                           ;incstack = 0
  1337  003036  0E00               	movlw	0
  1338  003038  0100               	movlb	0	; () banked
  1339  00303A  6F9C               	movwf	sequence3@potiValue& (0+255),b
  1340                           
  1341                           ;AnalogInputs.c: 140: byte i =0;
  1342  00303C  0E00               	movlw	0
  1343  00303E  0100               	movlb	0	; () banked
  1344  003040  6F9D               	movwf	sequence3@i& (0+255),b
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;AnalogInputs.c: 141: char message[16];
  1348                           ;AnalogInputs.c: 144: ADCON0bits.GO_DONE = 0x01;
  1349  003042  82C2               	bsf	4034,1,c	;volatile
  1350  003044                     l100:
  1351  003044  B2C2               	btfsc	4034,1,c	;volatile
  1352  003046  D7FE               	goto	l100
  1353                           
  1354                           ;AnalogInputs.c: 146: potiValue = ADRESH;
  1355  003048  CFC4 F09C          	movff	4036,sequence3@potiValue	;volatile
  1356                           
  1357                           ;AnalogInputs.c: 148: i = potiValue/32;
  1358  00304C  C09C  F007         	movff	sequence3@potiValue,___awdiv@dividend
  1359  003050  6A08               	clrf	___awdiv@dividend+1,c
  1360  003052  0E00               	movlw	0
  1361  003054  6E0A               	movwf	___awdiv@divisor+1,c
  1362  003056  0E20               	movlw	32
  1363  003058  6E09               	movwf	___awdiv@divisor,c
  1364  00305A  EC72  F019         	call	___awdiv	;wreg free
  1365  00305E  5007               	movf	?___awdiv,w,c
  1366  003060  0100               	movlb	0	; () banked
  1367  003062  6F9D               	movwf	sequence3@i& (0+255),b
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;AnalogInputs.c: 150: LATD = 1 << (7-i);
  1371  003064  0100               	movlb	0	; () banked
  1372  003066  519D               	movf	sequence3@i& (0+255),w,b
  1373  003068  0800               	sublw	0
  1374  00306A  6E5E               	movwf	??_sequence3& (0+255),c
  1375  00306C  0E07               	movlw	7
  1376  00306E  265E               	addwf	??_sequence3,f,c
  1377  003070  0E01               	movlw	1
  1378  003072  6E5F               	movwf	(??_sequence3+1)& (0+255),c
  1379  003074  2A5E               	incf	??_sequence3,f,c
  1380  003076  D002               	goto	u3484
  1381  003078                     u3485:
  1382  003078  90D8               	bcf	status,0,c
  1383  00307A  365F               	rlcf	??_sequence3+1,f,c
  1384  00307C                     u3484:
  1385  00307C  2E5E               	decfsz	??_sequence3,f,c
  1386  00307E  D7FC               	goto	u3485
  1387  003080  505F               	movf	??_sequence3+1,w,c
  1388  003082  6E8C               	movwf	3980,c	;volatile
  1389                           
  1390                           ;AnalogInputs.c: 152: sprintf(message, "%.4g V  %d            ",(float) (potiValue*5)/25
      +                          5, i);
  1391  003084  0100               	movlb	0	; () banked
  1392  003086  519C               	movf	sequence3@potiValue& (0+255),w,b
  1393  003088  0D05               	mullw	5
  1394  00308A  CFF3 F009          	movff	prodl,___awtoft@c
  1395  00308E  CFF4 F00A          	movff	prodh,___awtoft@c+1
  1396  003092  EC2C  F01B         	call	___awtoft	;wreg free
  1397  003096  C009  F046         	movff	?___awtoft,___ftdiv@f1
  1398  00309A  C00A  F047         	movff	?___awtoft+1,___ftdiv@f1+1
  1399  00309E  C00B  F048         	movff	?___awtoft+2,___ftdiv@f1+2
  1400  0030A2  0E00               	movlw	0
  1401  0030A4  6E49               	movwf	___ftdiv@f2,c
  1402  0030A6  0E7F               	movlw	127
  1403  0030A8  6E4A               	movwf	___ftdiv@f2+1,c
  1404  0030AA  0E43               	movlw	67
  1405  0030AC  6E4B               	movwf	___ftdiv@f2+2,c
  1406  0030AE  ECA8  F017         	call	___ftdiv	;wreg free
  1407  0030B2  C046  F099         	movff	?___ftdiv,_sequence3$1455
  1408  0030B6  C047  F09A         	movff	?___ftdiv+1,_sequence3$1455+1
  1409  0030BA  C048  F09B         	movff	?___ftdiv+2,_sequence3$1455+2
  1410                           
  1411                           ;AnalogInputs.c: 152: sprintf(message, "%.4g V  %d            ",(float) (potiValue*5)/25
      +                          5, i);
  1412  0030BE  0E89               	movlw	low sequence3@message
  1413  0030C0  0100               	movlb	0	; () banked
  1414  0030C2  6F60               	movwf	sprintf@sp& (0+255),b
  1415  0030C4  0E00               	movlw	high sequence3@message
  1416  0030C6  0100               	movlb	0	; () banked
  1417  0030C8  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1418  0030CA  0E77               	movlw	low STR_2
  1419  0030CC  0100               	movlb	0	; () banked
  1420  0030CE  6F62               	movwf	sprintf@f& (0+255),b
  1421  0030D0  0E10               	movlw	high STR_2
  1422  0030D2  0100               	movlb	0	; () banked
  1423  0030D4  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1424  0030D6  C099  F064         	movff	_sequence3$1455,?_sprintf+4
  1425  0030DA  C09A  F065         	movff	_sequence3$1455+1,?_sprintf+5
  1426  0030DE  C09B  F066         	movff	_sequence3$1455+2,?_sprintf+6
  1427  0030E2  C09D  F067         	movff	sequence3@i,?_sprintf+7
  1428  0030E6  0100               	movlb	0	; () banked
  1429  0030E8  6B68               	clrf	(?_sprintf+8)& (0+255),b
  1430  0030EA  EC5D  F008         	call	_sprintf	;wreg free
  1431                           
  1432                           ;AnalogInputs.c: 155: LcdGoTo(0);
  1433  0030EE  0E00               	movlw	0
  1434  0030F0  EC2B  F01C         	call	_LcdGoTo
  1435                           
  1436                           ;AnalogInputs.c: 156: LcdWriteString(message);
  1437  0030F4  0E89               	movlw	low sequence3@message
  1438  0030F6  6E06               	movwf	LcdWriteString@s,c
  1439  0030F8  0E00               	movlw	high sequence3@message
  1440  0030FA  6E07               	movwf	LcdWriteString@s+1,c
  1441  0030FC  ECC5  F01B         	call	_LcdWriteString	;wreg free
  1442  003100  0012               	return		;funcret
  1443  003102                     __end_of_sequence3:
  1444                           	opt stack 0
  1445                           tblptru	equ	0xFF8
  1446                           tblptrh	equ	0xFF7
  1447                           tblptrl	equ	0xFF6
  1448                           tablat	equ	0xFF5
  1449                           prodh	equ	0xFF4
  1450                           prodl	equ	0xFF3
  1451                           postinc0	equ	0xFEE
  1452                           postdec1	equ	0xFE5
  1453                           fsr1l	equ	0xFE1
  1454                           status	equ	0xFD8
  1455                           
  1456 ;; *************** function _sequence2 *****************
  1457 ;; Defined at:
  1458 ;;		line 111 in file "AnalogInputs.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;		None
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  message        16   41[BANK0 ] unsigned char [16]
  1463 ;;  potiValue       1   60[BANK0 ] unsigned char 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      void 
  1466 ;; Registers used:
  1467 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1474 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1476 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1477 ;;Total ram usage:       20 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:    4
  1480 ;; This function calls:
  1481 ;;		_LcdGoTo
  1482 ;;		_LcdWriteString
  1483 ;;		___awtoft
  1484 ;;		___ftdiv
  1485 ;;		_sprintf
  1486 ;; This function is called by:
  1487 ;;		_main
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text3
  1492  0031B0                     __ptext3:
  1493                           	opt stack 0
  1494  0031B0                     _sequence2:
  1495                           	opt stack 26
  1496                           
  1497                           ;AnalogInputs.c: 113: byte potiValue = 0;
  1498                           
  1499                           ;incstack = 0
  1500  0031B0  0E00               	movlw	0
  1501  0031B2  0100               	movlb	0	; () banked
  1502  0031B4  6F9C               	movwf	sequence2@potiValue& (0+255),b
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;AnalogInputs.c: 114: char message[16] = "Poti value     ";
  1506  0031B6  EE20  F0A5         	lfsr	2,sequence2@F6598
  1507  0031BA  EE10  F089         	lfsr	1,sequence2@message
  1508  0031BE  0E0F               	movlw	15
  1509  0031C0                     u3451:
  1510  0031C0  CFDB FFE3          	movff	plusw2,plusw1
  1511  0031C4  06E8               	decf	wreg,f,c
  1512  0031C6  E2FC               	bc	u3451
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;AnalogInputs.c: 116: ADCON0bits.GO_DONE = 0x01;
  1516  0031C8  82C2               	bsf	4034,1,c	;volatile
  1517  0031CA                     l94:
  1518  0031CA  B2C2               	btfsc	4034,1,c	;volatile
  1519  0031CC  D7FE               	goto	l94
  1520                           
  1521                           ;AnalogInputs.c: 118: potiValue = ADRESH;
  1522  0031CE  CFC4 F09C          	movff	4036,sequence2@potiValue	;volatile
  1523                           
  1524                           ;AnalogInputs.c: 120: LATD = potiValue;
  1525  0031D2  C09C  FF8C         	movff	sequence2@potiValue,3980	;volatile
  1526                           
  1527                           ;AnalogInputs.c: 122: sprintf(message, "%d -> %.4g V          ", potiValue, (float) (pot
      +                          iValue*5)/255);
  1528  0031D6  0100               	movlb	0	; () banked
  1529  0031D8  519C               	movf	sequence2@potiValue& (0+255),w,b
  1530  0031DA  0D05               	mullw	5
  1531  0031DC  CFF3 F009          	movff	prodl,___awtoft@c
  1532  0031E0  CFF4 F00A          	movff	prodh,___awtoft@c+1
  1533  0031E4  EC2C  F01B         	call	___awtoft	;wreg free
  1534  0031E8  C009  F046         	movff	?___awtoft,___ftdiv@f1
  1535  0031EC  C00A  F047         	movff	?___awtoft+1,___ftdiv@f1+1
  1536  0031F0  C00B  F048         	movff	?___awtoft+2,___ftdiv@f1+2
  1537  0031F4  0E00               	movlw	0
  1538  0031F6  6E49               	movwf	___ftdiv@f2,c
  1539  0031F8  0E7F               	movlw	127
  1540  0031FA  6E4A               	movwf	___ftdiv@f2+1,c
  1541  0031FC  0E43               	movlw	67
  1542  0031FE  6E4B               	movwf	___ftdiv@f2+2,c
  1543  003200  ECA8  F017         	call	___ftdiv	;wreg free
  1544  003204  C046  F099         	movff	?___ftdiv,_sequence2$1454
  1545  003208  C047  F09A         	movff	?___ftdiv+1,_sequence2$1454+1
  1546  00320C  C048  F09B         	movff	?___ftdiv+2,_sequence2$1454+2
  1547                           
  1548                           ;AnalogInputs.c: 122: sprintf(message, "%d -> %.4g V          ", potiValue, (float) (pot
      +                          iValue*5)/255);
  1549  003210  0E89               	movlw	low sequence2@message
  1550  003212  0100               	movlb	0	; () banked
  1551  003214  6F60               	movwf	sprintf@sp& (0+255),b
  1552  003216  0E00               	movlw	high sequence2@message
  1553  003218  0100               	movlb	0	; () banked
  1554  00321A  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1555  00321C  0E8E               	movlw	low STR_1
  1556  00321E  0100               	movlb	0	; () banked
  1557  003220  6F62               	movwf	sprintf@f& (0+255),b
  1558  003222  0E10               	movlw	high STR_1
  1559  003224  0100               	movlb	0	; () banked
  1560  003226  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1561  003228  C09C  F064         	movff	sequence2@potiValue,?_sprintf+4
  1562  00322C  0100               	movlb	0	; () banked
  1563  00322E  6B65               	clrf	(?_sprintf+5)& (0+255),b
  1564  003230  C099  F066         	movff	_sequence2$1454,?_sprintf+6
  1565  003234  C09A  F067         	movff	_sequence2$1454+1,?_sprintf+7
  1566  003238  C09B  F068         	movff	_sequence2$1454+2,?_sprintf+8
  1567  00323C  EC5D  F008         	call	_sprintf	;wreg free
  1568                           
  1569                           ;AnalogInputs.c: 127: LcdGoTo(0);
  1570  003240  0E00               	movlw	0
  1571  003242  EC2B  F01C         	call	_LcdGoTo
  1572                           
  1573                           ;AnalogInputs.c: 128: LcdWriteString(message);
  1574  003246  0E89               	movlw	low sequence2@message
  1575  003248  6E06               	movwf	LcdWriteString@s,c
  1576  00324A  0E00               	movlw	high sequence2@message
  1577  00324C  6E07               	movwf	LcdWriteString@s+1,c
  1578  00324E  ECC5  F01B         	call	_LcdWriteString	;wreg free
  1579  003252  0012               	return		;funcret
  1580  003254                     __end_of_sequence2:
  1581                           	opt stack 0
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           prodh	equ	0xFF4
  1587                           prodl	equ	0xFF3
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           postdec1	equ	0xFE5
  1591                           plusw1	equ	0xFE3
  1592                           fsr1l	equ	0xFE1
  1593                           plusw2	equ	0xFDB
  1594                           status	equ	0xFD8
  1595                           
  1596 ;; *************** function _sprintf *****************
  1597 ;; Defined at:
  1598 ;;		line 492 in file "D:\Hella\Compiler\sources\common\doprnt.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  1601 ;;		 -> sequence4@message(16), sequence3@message(16), sequence2@message(16), 
  1602 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  1603 ;;		 -> STR_3(20), STR_2(23), STR_1(23), 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  temp            3   18[BANK0 ] PTR const unsigned char 
  1606 ;;  val             4   29[BANK0 ] unsigned long 
  1607 ;;  tmpval          4   25[BANK0 ] struct .
  1608 ;;  fval            3   37[BANK0 ] struct .
  1609 ;;  cp              3    0        PTR const unsigned char 
  1610 ;;  prec            2   35[BANK0 ] int 
  1611 ;;  exp             2   33[BANK0 ] int 
  1612 ;;  flag            2   23[BANK0 ] unsigned short 
  1613 ;;  ap              2   21[BANK0 ] PTR void [1]
  1614 ;;		 -> ?_sprintf(2), 
  1615 ;;  len             2    0        unsigned int 
  1616 ;;  width           2    0        int 
  1617 ;;  c               1   40[BANK0 ] char 
  1618 ;;  d               1    0        unsigned char 
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  2    0[BANK0 ] int 
  1621 ;; Registers used:
  1622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1628 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1629 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1630 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1631 ;;      Totals:         0      41       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1632 ;;Total ram usage:       41 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    3
  1635 ;; This function calls:
  1636 ;;		___awdiv
  1637 ;;		___awmod
  1638 ;;		___ftadd
  1639 ;;		___ftdiv
  1640 ;;		___ftge
  1641 ;;		___ftmul
  1642 ;;		___ftneg
  1643 ;;		___ftsub
  1644 ;;		___fttol
  1645 ;;		___lldiv
  1646 ;;		___llmod
  1647 ;;		___lltoft
  1648 ;;		___wmul
  1649 ;;		__div_to_l_
  1650 ;;		__tdiv_to_l_
  1651 ;;		_fround
  1652 ;;		_isdigit
  1653 ;;		_scale
  1654 ;; This function is called by:
  1655 ;;		_sequence2
  1656 ;;		_sequence3
  1657 ;;		_sequence4
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           	psect	text4
  1662  0010BA                     __ptext4:
  1663                           	opt stack 0
  1664  0010BA                     _sprintf:
  1665                           	opt stack 26
  1666                           
  1667                           ;doprnt.c: 494: va_list ap;
  1668                           ;doprnt.c: 499: signed char c;
  1669                           ;doprnt.c: 501: int width;
  1670                           ;doprnt.c: 504: int prec;
  1671                           ;doprnt.c: 508: unsigned short flag;
  1672                           ;doprnt.c: 515: char d;
  1673                           ;doprnt.c: 516: double fval;
  1674                           ;doprnt.c: 517: int exp;
  1675                           ;doprnt.c: 523: union {
  1676                           ;doprnt.c: 524: unsigned long vd;
  1677                           ;doprnt.c: 525: double integ;
  1678                           ;doprnt.c: 526: } tmpval;
  1679                           ;doprnt.c: 528: unsigned long val;
  1680                           ;doprnt.c: 529: unsigned len;
  1681                           ;doprnt.c: 530: const char * cp;
  1682                           ;doprnt.c: 533: *ap = __va_start();
  1683                           
  1684                           ;incstack = 0
  1685  0010BA  0E64               	movlw	low (?_sprintf+4)
  1686  0010BC  0100               	movlb	0	; () banked
  1687  0010BE  6F75               	movwf	sprintf@ap& (0+255),b
  1688  0010C0  0E00               	movlw	high (?_sprintf+4)
  1689  0010C2  0100               	movlb	0	; () banked
  1690  0010C4  6F76               	movwf	(sprintf@ap+1)& (0+255),b
  1691                           
  1692                           ;doprnt.c: 536: while(c = *f++) {
  1693  0010C6  EFB2  F010         	goto	l3226
  1694  0010CA                     l2856:
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;doprnt.c: 538: if(c != '%')
  1698  0010CA  0E25               	movlw	37
  1699  0010CC  0100               	movlb	0	; () banked
  1700  0010CE  1988               	xorwf	sprintf@c& (0+255),w,b
  1701  0010D0  B4D8               	btfsc	status,2,c
  1702  0010D2  D007               	goto	l2862
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;doprnt.c: 540: {
  1706                           ;doprnt.c: 541: ((*sp++ = (c)));
  1707  0010D4  C060  FFD9         	movff	sprintf@sp,fsr2l
  1708  0010D8  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1709  0010DC  C088  FFDF         	movff	sprintf@c,indf2
  1710  0010E0  D3E3               	goto	l3032
  1711  0010E2                     l2862:
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;doprnt.c: 543: }
  1715                           ;doprnt.c: 548: flag = 0;
  1716  0010E2  0E00               	movlw	0
  1717  0010E4  0100               	movlb	0	; () banked
  1718  0010E6  6F78               	movwf	(sprintf@flag+1)& (0+255),b
  1719  0010E8  0E00               	movlw	0
  1720  0010EA  6F77               	movwf	sprintf@flag& (0+255),b
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;doprnt.c: 611: if(*f == '.') {
  1724  0010EC  C062  FFF6         	movff	sprintf@f,tblptrl
  1725  0010F0  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1726  0010F4                     	if	0	;tblptru may be non-zero
  1727  0010F4                     	endif
  1728  0010F4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1729  0010F4  0E00               	movlw	low (__mediumconst shr (0+16))
  1730  0010F6  6EF8               	movwf	tblptru,c
  1731  0010F8                     	endif
  1732  0010F8  0008               	tblrd		*
  1733  0010FA  50F5               	movf	tablat,w,c
  1734  0010FC  0A2E               	xorlw	46
  1735  0010FE  A4D8               	btfss	status,2,c
  1736  001100  D038               	goto	l2876
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;doprnt.c: 612: flag |= 0x4000;
  1740  001102  0100               	movlb	0	; () banked
  1741  001104  8D78               	bsf	(sprintf@flag+1)& (0+255),6,b
  1742                           
  1743                           ;doprnt.c: 613: f++;
  1744  001106  0100               	movlb	0	; () banked
  1745  001108  4B62               	infsnz	sprintf@f& (0+255),f,b
  1746  00110A  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;doprnt.c: 620: {
  1750                           ;doprnt.c: 621: prec = 0;
  1751  00110C  0E00               	movlw	0
  1752  00110E  0100               	movlb	0	; () banked
  1753  001110  6F84               	movwf	(sprintf@prec+1)& (0+255),b
  1754  001112  0E00               	movlw	0
  1755  001114  6F83               	movwf	sprintf@prec& (0+255),b
  1756                           
  1757                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1758  001116  D020               	goto	l2874
  1759  001118                     l2870:
  1760                           
  1761                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1762  001118  C083  F00F         	movff	sprintf@prec,___wmul@multiplier
  1763  00111C  C084  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1764  001120  0E00               	movlw	0
  1765  001122  6E12               	movwf	___wmul@multiplicand+1,c
  1766  001124  0E0A               	movlw	10
  1767  001126  6E11               	movwf	___wmul@multiplicand,c
  1768  001128  ECA0  F01B         	call	___wmul	;wreg free
  1769  00112C  C062  FFF6         	movff	sprintf@f,tblptrl
  1770  001130  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1771  001134                     	if	0	;tblptru may be non-zero
  1772  001134                     	endif
  1773  001134                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1774  001134  0E00               	movlw	low (__mediumconst shr (0+16))
  1775  001136  6EF8               	movwf	tblptru,c
  1776  001138                     	endif
  1777  001138  0008               	tblrd		*
  1778  00113A  50F5               	movf	tablat,w,c
  1779  00113C  260F               	addwf	?___wmul,f,c
  1780  00113E  0E00               	movlw	0
  1781  001140  2210               	addwfc	?___wmul+1,f,c
  1782  001142  0ED0               	movlw	208
  1783  001144  240F               	addwf	?___wmul,w,c
  1784  001146  0100               	movlb	0	; () banked
  1785  001148  6F83               	movwf	sprintf@prec& (0+255),b
  1786  00114A  0EFF               	movlw	255
  1787  00114C  2010               	addwfc	?___wmul+1,w,c
  1788  00114E  0100               	movlb	0	; () banked
  1789  001150  6F84               	movwf	(sprintf@prec+1)& (0+255),b
  1790                           
  1791                           ; BSR set to: 0
  1792  001152  0100               	movlb	0	; () banked
  1793  001154  4B62               	infsnz	sprintf@f& (0+255),f,b
  1794  001156  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1795  001158                     l2874:
  1796                           
  1797                           ; BSR set to: 0
  1798  001158  C062  FFF6         	movff	sprintf@f,tblptrl
  1799  00115C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1800  001160                     	if	0	;tblptru may be non-zero
  1801  001160                     	endif
  1802  001160                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1803  001160  0E00               	movlw	low (__mediumconst shr (0+16))
  1804  001162  6EF8               	movwf	tblptru,c
  1805  001164                     	endif
  1806  001164  0008               	tblrd		*
  1807  001166  50F5               	movf	tablat,w,c
  1808  001168  ECD7  F01B         	call	_isdigit
  1809  00116C  A0D8               	btfss	status,0,c
  1810  00116E  D00C               	goto	l2884
  1811  001170  D7D3               	goto	l2870
  1812  001172                     l2876:
  1813                           
  1814                           ;doprnt.c: 626: prec = 0;
  1815  001172  0E00               	movlw	0
  1816  001174  0100               	movlb	0	; () banked
  1817  001176  6F84               	movwf	(sprintf@prec+1)& (0+255),b
  1818  001178  0E00               	movlw	0
  1819  00117A  6F83               	movwf	sprintf@prec& (0+255),b
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;doprnt.c: 628: flag |= 0x1000;
  1823  00117C  0100               	movlb	0	; () banked
  1824  00117E  8978               	bsf	(sprintf@flag+1)& (0+255),4,b
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;doprnt.c: 630: }
  1828                           ;doprnt.c: 635: switch(c = *f++) {
  1829  001180  D003               	goto	l2884
  1830  001182                     l2880:
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;doprnt.c: 683: flag |= 0x200;
  1834  001182  0100               	movlb	0	; () banked
  1835  001184  8378               	bsf	(sprintf@flag+1)& (0+255),1,b
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;doprnt.c: 698: case 'i':
  1839                           ;doprnt.c: 699: break;
  1840                           
  1841                           ; BSR set to: 0
  1842                           
  1843                           ;doprnt.c: 697: case 'd':
  1844                           
  1845                           ;doprnt.c: 684: break;
  1846  001186  D01C               	goto	l2886
  1847  001188                     l2884:
  1848  001188  C062  FFF6         	movff	sprintf@f,tblptrl
  1849  00118C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1850  001190  0100               	movlb	0	; () banked
  1851  001192  4B62               	infsnz	sprintf@f& (0+255),f,b
  1852  001194  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1853  001196                     	if	0	;tblptru may be non-zero
  1854  001196                     	endif
  1855  001196                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1856  001196  0E00               	movlw	low (__mediumconst shr (0+16))
  1857  001198  6EF8               	movwf	tblptru,c
  1858  00119A                     	endif
  1859  00119A  0008               	tblrd		*
  1860  00119C  CFF5 F088          	movff	tablat,sprintf@c
  1861  0011A0  0100               	movlb	0	; () banked
  1862  0011A2  5188               	movf	sprintf@c& (0+255),w,b
  1863                           
  1864                           ; Switch size 1, requested type "space"
  1865                           ; Number of cases is 4, Range of values is 0 to 105
  1866                           ; switch strategies available:
  1867                           ; Name         Instructions Cycles
  1868                           ; simple_byte           13     7 (average)
  1869                           ;	Chosen strategy is simple_byte
  1870  0011A4  0A00               	xorlw	0	; case 0
  1871  0011A6  B4D8               	btfsc	status,2,c
  1872  0011A8  EFC3  F010         	goto	l3228
  1873  0011AC  0A64               	xorlw	100	; case 100
  1874  0011AE  B4D8               	btfsc	status,2,c
  1875  0011B0  D007               	goto	l2886
  1876  0011B2  0A03               	xorlw	3	; case 103
  1877  0011B4  B4D8               	btfsc	status,2,c
  1878  0011B6  D7E5               	goto	l2880
  1879  0011B8  0A0E               	xorlw	14	; case 105
  1880  0011BA  A4D8               	btfss	status,2,c
  1881  0011BC  EFB2  F010         	goto	l3226
  1882  0011C0                     l2886:
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;doprnt.c: 825: if(flag & (0x700)) {
  1886  0011C0  0E07               	movlw	7
  1887  0011C2  0100               	movlb	0	; () banked
  1888  0011C4  1578               	andwf	(sprintf@flag+1)& (0+255),w,b
  1889  0011C6  B4D8               	btfsc	status,2,c
  1890  0011C8  EFBB  F00F         	goto	l3174
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;doprnt.c: 827: if(flag & 0x1000)
  1894  0011CC  0100               	movlb	0	; () banked
  1895  0011CE  A978               	btfss	(sprintf@flag+1)& (0+255),4,b
  1896  0011D0  D005               	goto	l2892
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;doprnt.c: 829: prec = 6;
  1900  0011D2  0E00               	movlw	0
  1901  0011D4  0100               	movlb	0	; () banked
  1902  0011D6  6F84               	movwf	(sprintf@prec+1)& (0+255),b
  1903  0011D8  0E06               	movlw	6
  1904  0011DA  6F83               	movwf	sprintf@prec& (0+255),b
  1905  0011DC                     l2892:
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1909  0011DC  C075  FFD9         	movff	sprintf@ap,fsr2l
  1910  0011E0  C076  FFDA         	movff	sprintf@ap+1,fsr2h
  1911  0011E4  CFDE F085          	movff	postinc2,sprintf@fval
  1912  0011E8  CFDE F086          	movff	postinc2,sprintf@fval+1
  1913  0011EC  CFDD F087          	movff	postdec2,sprintf@fval+2
  1914                           
  1915                           ; BSR set to: 0
  1916  0011F0  0E03               	movlw	3
  1917  0011F2  0100               	movlb	0	; () banked
  1918  0011F4  2775               	addwf	sprintf@ap& (0+255),f,b
  1919  0011F6  0E00               	movlw	0
  1920  0011F8  2376               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;doprnt.c: 831: if(fval < 0.0) {
  1924  0011FA  0100               	movlb	0	; () banked
  1925  0011FC  AF87               	btfss	(sprintf@fval+2)& (0+255),7,b
  1926  0011FE  D011               	goto	l2902
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;doprnt.c: 832: fval = -fval;
  1930  001200  C085  F02D         	movff	sprintf@fval,___ftneg@f1
  1931  001204  C086  F02E         	movff	sprintf@fval+1,___ftneg@f1+1
  1932  001208  C087  F02F         	movff	sprintf@fval+2,___ftneg@f1+2
  1933  00120C  ECB3  F01B         	call	___ftneg	;wreg free
  1934  001210  C02D  F085         	movff	?___ftneg,sprintf@fval
  1935  001214  C02E  F086         	movff	?___ftneg+1,sprintf@fval+1
  1936  001218  C02F  F087         	movff	?___ftneg+2,sprintf@fval+2
  1937                           
  1938                           ;doprnt.c: 833: flag |= 0x03;
  1939  00121C  0E03               	movlw	3
  1940  00121E  0100               	movlb	0	; () banked
  1941  001220  1377               	iorwf	sprintf@flag& (0+255),f,b
  1942  001222                     l2902:
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;doprnt.c: 834: }
  1946                           ;doprnt.c: 835: exp = 0;
  1947  001222  0E00               	movlw	0
  1948  001224  0100               	movlb	0	; () banked
  1949  001226  6F82               	movwf	(sprintf@exp+1)& (0+255),b
  1950  001228  0E00               	movlw	0
  1951  00122A  6F81               	movwf	sprintf@exp& (0+255),b
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;doprnt.c: 836: if( fval!=0) {
  1955  00122C  0100               	movlb	0	; () banked
  1956  00122E  5185               	movf	sprintf@fval& (0+255),w,b
  1957  001230  0100               	movlb	0	; () banked
  1958  001232  1186               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1959  001234  0100               	movlb	0	; () banked
  1960  001236  1187               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1961  001238  B4D8               	btfsc	status,2,c
  1962  00123A  D091               	goto	l2930
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1966  00123C  0E82               	movlw	130
  1967  00123E  0100               	movlb	0	; () banked
  1968  001240  6F69               	movwf	??_sprintf& (0+255),b
  1969  001242  0EFF               	movlw	255
  1970  001244  0100               	movlb	0	; () banked
  1971  001246  6F6A               	movwf	(??_sprintf+1)& (0+255),b
  1972  001248  C085  F06B         	movff	sprintf@fval,??_sprintf+2
  1973  00124C  C086  F06C         	movff	sprintf@fval+1,??_sprintf+3
  1974  001250  C087  F06D         	movff	sprintf@fval+2,??_sprintf+4
  1975  001254  C088  F06E         	movff	sprintf@fval+3,??_sprintf+5
  1976  001258  0E10               	movlw	16
  1977  00125A  D006               	goto	u2860
  1978  00125C                     u2865:
  1979  00125C  0100               	movlb	0	; () banked
  1980  00125E  90D8               	bcf	status,0,c
  1981  001260  336E               	rrcf	(??_sprintf+5)& (0+255),f,b
  1982  001262  336D               	rrcf	(??_sprintf+4)& (0+255),f,b
  1983  001264  336C               	rrcf	(??_sprintf+3)& (0+255),f,b
  1984  001266  336B               	rrcf	(??_sprintf+2)& (0+255),f,b
  1985  001268                     u2860:
  1986  001268  2EE8               	decfsz	wreg,f,c
  1987  00126A  D7F8               	goto	u2865
  1988  00126C  0100               	movlb	0	; () banked
  1989  00126E  516B               	movf	(??_sprintf+2)& (0+255),w,b
  1990  001270  0100               	movlb	0	; () banked
  1991  001272  2569               	addwf	??_sprintf& (0+255),w,b
  1992  001274  0100               	movlb	0	; () banked
  1993  001276  6F81               	movwf	sprintf@exp& (0+255),b
  1994  001278  0E00               	movlw	0
  1995  00127A  0100               	movlb	0	; () banked
  1996  00127C  216A               	addwfc	(??_sprintf+1)& (0+255),w,b
  1997  00127E  0100               	movlb	0	; () banked
  1998  001280  6F82               	movwf	(sprintf@exp+1)& (0+255),b
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;doprnt.c: 838: exp--;
  2002  001282  0100               	movlb	0	; () banked
  2003  001284  0781               	decf	sprintf@exp& (0+255),f,b
  2004  001286  A0D8               	btfss	status,0,c
  2005  001288  0782               	decf	(sprintf@exp+1)& (0+255),f,b
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;doprnt.c: 839: exp *= 3;
  2009  00128A  C081  F00F         	movff	sprintf@exp,___wmul@multiplier
  2010  00128E  C082  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  2011  001292  0E00               	movlw	0
  2012  001294  6E12               	movwf	___wmul@multiplicand+1,c
  2013  001296  0E03               	movlw	3
  2014  001298  6E11               	movwf	___wmul@multiplicand,c
  2015  00129A  ECA0  F01B         	call	___wmul	;wreg free
  2016  00129E  C00F  F081         	movff	?___wmul,sprintf@exp
  2017  0012A2  C010  F082         	movff	?___wmul+1,sprintf@exp+1
  2018                           
  2019                           ;doprnt.c: 840: exp /= 10;
  2020  0012A6  C081  F007         	movff	sprintf@exp,___awdiv@dividend
  2021  0012AA  C082  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2022  0012AE  0E00               	movlw	0
  2023  0012B0  6E0A               	movwf	___awdiv@divisor+1,c
  2024  0012B2  0E0A               	movlw	10
  2025  0012B4  6E09               	movwf	___awdiv@divisor,c
  2026  0012B6  EC72  F019         	call	___awdiv	;wreg free
  2027  0012BA  C007  F081         	movff	?___awdiv,sprintf@exp
  2028  0012BE  C008  F082         	movff	?___awdiv+1,sprintf@exp+1
  2029                           
  2030                           ;doprnt.c: 841: if(exp < 0)
  2031  0012C2  0100               	movlb	0	; () banked
  2032  0012C4  AF82               	btfss	(sprintf@exp+1)& (0+255),7,b
  2033  0012C6  D004               	goto	l2918
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;doprnt.c: 842: exp--;
  2037  0012C8  0100               	movlb	0	; () banked
  2038  0012CA  0781               	decf	sprintf@exp& (0+255),f,b
  2039  0012CC  A0D8               	btfss	status,0,c
  2040  0012CE  0782               	decf	(sprintf@exp+1)& (0+255),f,b
  2041  0012D0                     l2918:
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2045  0012D0  0100               	movlb	0	; () banked
  2046  0012D2  5181               	movf	sprintf@exp& (0+255),w,b
  2047  0012D4  0800               	sublw	0
  2048  0012D6  ECCA  F010         	call	_scale
  2049  0012DA  C03F  F079         	movff	?_scale,sprintf@tmpval
  2050  0012DE  C040  F07A         	movff	?_scale+1,sprintf@tmpval+1
  2051  0012E2  C041  F07B         	movff	?_scale+2,sprintf@tmpval+2
  2052                           
  2053                           ;doprnt.c: 847: tmpval.integ *= fval;
  2054  0012E6  C079  F030         	movff	sprintf@tmpval,___ftmul@f1
  2055  0012EA  C07A  F031         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2056  0012EE  C07B  F032         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2057  0012F2  C085  F033         	movff	sprintf@fval,___ftmul@f2
  2058  0012F6  C086  F034         	movff	sprintf@fval+1,___ftmul@f2+1
  2059  0012FA  C087  F035         	movff	sprintf@fval+2,___ftmul@f2+2
  2060  0012FE  ECB4  F016         	call	___ftmul	;wreg free
  2061  001302  C030  F079         	movff	?___ftmul,sprintf@tmpval
  2062  001306  C031  F07A         	movff	?___ftmul+1,sprintf@tmpval+1
  2063  00130A  C032  F07B         	movff	?___ftmul+2,sprintf@tmpval+2
  2064                           
  2065                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2066  00130E  C079  F055         	movff	sprintf@tmpval,___ftge@ff1
  2067  001312  C07A  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2068  001316  C07B  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2069  00131A  0E00               	movlw	0
  2070  00131C  6E58               	movwf	___ftge@ff2,c
  2071  00131E  0E80               	movlw	128
  2072  001320  6E59               	movwf	___ftge@ff2+1,c
  2073  001322  0E3F               	movlw	63
  2074  001324  6E5A               	movwf	___ftge@ff2+2,c
  2075  001326  EC2A  F019         	call	___ftge	;wreg free
  2076  00132A  B0D8               	btfsc	status,0,c
  2077  00132C  D005               	goto	l2926
  2078                           
  2079                           ;doprnt.c: 849: exp--;
  2080  00132E  0100               	movlb	0	; () banked
  2081  001330  0781               	decf	sprintf@exp& (0+255),f,b
  2082  001332  A0D8               	btfss	status,0,c
  2083  001334  0782               	decf	(sprintf@exp+1)& (0+255),f,b
  2084  001336  D013               	goto	l2930
  2085  001338                     l2926:
  2086                           
  2087                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2088  001338  C079  F055         	movff	sprintf@tmpval,___ftge@ff1
  2089  00133C  C07A  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2090  001340  C07B  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2091  001344  0E00               	movlw	0
  2092  001346  6E58               	movwf	___ftge@ff2,c
  2093  001348  0E20               	movlw	32
  2094  00134A  6E59               	movwf	___ftge@ff2+1,c
  2095  00134C  0E41               	movlw	65
  2096  00134E  6E5A               	movwf	___ftge@ff2+2,c
  2097  001350  EC2A  F019         	call	___ftge	;wreg free
  2098  001354  A0D8               	btfss	status,0,c
  2099  001356  D003               	goto	l2930
  2100                           
  2101                           ;doprnt.c: 851: exp++;
  2102  001358  0100               	movlb	0	; () banked
  2103  00135A  4B81               	infsnz	sprintf@exp& (0+255),f,b
  2104  00135C  2B82               	incf	(sprintf@exp+1)& (0+255),f,b
  2105  00135E                     l2930:
  2106                           
  2107                           ;doprnt.c: 852: }
  2108                           ;doprnt.c: 854: if(exp <= 0)
  2109  00135E  0100               	movlb	0	; () banked
  2110  001360  BF82               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2111  001362  D007               	goto	l2932
  2112  001364  0100               	movlb	0	; () banked
  2113  001366  5182               	movf	(sprintf@exp+1)& (0+255),w,b
  2114  001368  E108               	bnz	l188
  2115  00136A  0100               	movlb	0	; () banked
  2116  00136C  0581               	decf	sprintf@exp& (0+255),w,b
  2117  00136E  B0D8               	btfsc	status,0,c
  2118  001370  D004               	goto	l188
  2119  001372                     l2932:
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;doprnt.c: 855: c = 1;
  2123  001372  0E01               	movlw	1
  2124  001374  0100               	movlb	0	; () banked
  2125  001376  6F88               	movwf	sprintf@c& (0+255),b
  2126  001378  D002               	goto	l189
  2127  00137A                     l188:
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;doprnt.c: 856: else
  2131                           ;doprnt.c: 857: c = exp;
  2132  00137A  C081  F088         	movff	sprintf@exp,sprintf@c
  2133  00137E                     l189:
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;doprnt.c: 858: if(
  2137                           ;doprnt.c: 866: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  2138                           ;doprnt.c: 868: ) {
  2139  00137E  0100               	movlb	0	; () banked
  2140  001380  A378               	btfss	(sprintf@flag+1)& (0+255),1,b
  2141  001382  D297               	goto	l190
  2142                           
  2143                           ; BSR set to: 0
  2144  001384  0100               	movlb	0	; () banked
  2145  001386  AF82               	btfss	(sprintf@exp+1)& (0+255),7,b
  2146  001388  D008               	goto	l2936
  2147  00138A  0EFC               	movlw	252
  2148  00138C  0100               	movlb	0	; () banked
  2149  00138E  5D81               	subwf	sprintf@exp& (0+255),w,b
  2150  001390  0EFF               	movlw	255
  2151  001392  0100               	movlb	0	; () banked
  2152  001394  5982               	subwfb	(sprintf@exp+1)& (0+255),w,b
  2153  001396  A0D8               	btfss	status,0,c
  2154  001398  D010               	goto	l2938
  2155  00139A                     l2936:
  2156                           
  2157                           ; BSR set to: 0
  2158  00139A  0100               	movlb	0	; () banked
  2159  00139C  5183               	movf	sprintf@prec& (0+255),w,b
  2160  00139E  0100               	movlb	0	; () banked
  2161  0013A0  5D81               	subwf	sprintf@exp& (0+255),w,b
  2162  0013A2  0100               	movlb	0	; () banked
  2163  0013A4  5182               	movf	(sprintf@exp+1)& (0+255),w,b
  2164  0013A6  0A80               	xorlw	128
  2165  0013A8  0100               	movlb	0	; () banked
  2166  0013AA  6F69               	movwf	??_sprintf& (0+255),b
  2167  0013AC  0100               	movlb	0	; () banked
  2168  0013AE  5184               	movf	(sprintf@prec+1)& (0+255),w,b
  2169  0013B0  0A80               	xorlw	128
  2170  0013B2  0100               	movlb	0	; () banked
  2171  0013B4  5969               	subwfb	??_sprintf& (0+255),w,b
  2172  0013B6  A0D8               	btfss	status,0,c
  2173  0013B8  D27C               	goto	l190
  2174  0013BA                     l2938:
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;doprnt.c: 870: if(prec && flag & 0x200)
  2178  0013BA  0100               	movlb	0	; () banked
  2179  0013BC  5183               	movf	sprintf@prec& (0+255),w,b
  2180  0013BE  0100               	movlb	0	; () banked
  2181  0013C0  1184               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2182  0013C2  B4D8               	btfsc	status,2,c
  2183  0013C4  D007               	goto	l2944
  2184                           
  2185                           ; BSR set to: 0
  2186  0013C6  0100               	movlb	0	; () banked
  2187  0013C8  A378               	btfss	(sprintf@flag+1)& (0+255),1,b
  2188  0013CA  D004               	goto	l2944
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;doprnt.c: 871: prec--;
  2192  0013CC  0100               	movlb	0	; () banked
  2193  0013CE  0783               	decf	sprintf@prec& (0+255),f,b
  2194  0013D0  A0D8               	btfss	status,0,c
  2195  0013D2  0784               	decf	(sprintf@prec+1)& (0+255),f,b
  2196  0013D4                     l2944:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;doprnt.c: 873: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  2200  0013D4  0100               	movlb	0	; () banked
  2201  0013D6  5184               	movf	(sprintf@prec+1)& (0+255),w,b
  2202  0013D8  E105               	bnz	u2960
  2203  0013DA  0E09               	movlw	9
  2204  0013DC  0100               	movlb	0	; () banked
  2205  0013DE  5D83               	subwf	sprintf@prec& (0+255),w,b
  2206  0013E0  A0D8               	btfss	status,0,c
  2207  0013E2  D004               	goto	l194
  2208  0013E4                     u2960:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;doprnt.c: 874: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  2212  0013E4  0E08               	movlw	8
  2213  0013E6  0100               	movlb	0	; () banked
  2214  0013E8  6F88               	movwf	sprintf@c& (0+255),b
  2215  0013EA  D002               	goto	l2948
  2216  0013EC                     l194:
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;doprnt.c: 875: else
  2220                           ;doprnt.c: 876: c = prec;
  2221  0013EC  C083  F088         	movff	sprintf@prec,sprintf@c
  2222  0013F0                     l2948:
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;doprnt.c: 877: if( fval!=0) {
  2226  0013F0  0100               	movlb	0	; () banked
  2227  0013F2  5185               	movf	sprintf@fval& (0+255),w,b
  2228  0013F4  0100               	movlb	0	; () banked
  2229  0013F6  1186               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2230  0013F8  0100               	movlb	0	; () banked
  2231  0013FA  1187               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2232  0013FC  B4D8               	btfsc	status,2,c
  2233  0013FE  D0EC               	goto	l2968
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;doprnt.c: 878: fval /= scale(exp-c);
  2237  001400  C085  F046         	movff	sprintf@fval,___ftdiv@f1
  2238  001404  C086  F047         	movff	sprintf@fval+1,___ftdiv@f1+1
  2239  001408  C087  F048         	movff	sprintf@fval+2,___ftdiv@f1+2
  2240  00140C  0100               	movlb	0	; () banked
  2241  00140E  5188               	movf	sprintf@c& (0+255),w,b
  2242  001410  0800               	sublw	0
  2243  001412  0100               	movlb	0	; () banked
  2244  001414  2581               	addwf	sprintf@exp& (0+255),w,b
  2245  001416  ECCA  F010         	call	_scale
  2246  00141A  C03F  F049         	movff	?_scale,___ftdiv@f2
  2247  00141E  C040  F04A         	movff	?_scale+1,___ftdiv@f2+1
  2248  001422  C041  F04B         	movff	?_scale+2,___ftdiv@f2+2
  2249  001426  ECA8  F017         	call	___ftdiv	;wreg free
  2250  00142A  C046  F085         	movff	?___ftdiv,sprintf@fval
  2251  00142E  C047  F086         	movff	?___ftdiv+1,sprintf@fval+1
  2252  001432  C048  F087         	movff	?___ftdiv+2,sprintf@fval+2
  2253                           
  2254                           ;doprnt.c: 893: if(fval - (double)(unsigned long)fval >= 0.5)
  2255  001436  C085  F04C         	movff	sprintf@fval,___ftadd@f2
  2256  00143A  C086  F04D         	movff	sprintf@fval+1,___ftadd@f2+1
  2257  00143E  C087  F04E         	movff	sprintf@fval+2,___ftadd@f2+2
  2258  001442  C085  F015         	movff	sprintf@fval,___fttol@f1
  2259  001446  C086  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2260  00144A  C087  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2261  00144E  EC2E  F017         	call	___fttol	;wreg free
  2262  001452  C015  F024         	movff	?___fttol,___lltoft@c
  2263  001456  C016  F025         	movff	?___fttol+1,___lltoft@c+1
  2264  00145A  C017  F026         	movff	?___fttol+2,___lltoft@c+2
  2265  00145E  C018  F027         	movff	?___fttol+3,___lltoft@c+3
  2266  001462  EC60  F01A         	call	___lltoft	;wreg free
  2267  001466  C024  F02D         	movff	?___lltoft,___ftneg@f1
  2268  00146A  C025  F02E         	movff	?___lltoft+1,___ftneg@f1+1
  2269  00146E  C026  F02F         	movff	?___lltoft+2,___ftneg@f1+2
  2270  001472  ECB3  F01B         	call	___ftneg	;wreg free
  2271  001476  C02D  F049         	movff	?___ftneg,___ftadd@f1
  2272  00147A  C02E  F04A         	movff	?___ftneg+1,___ftadd@f1+1
  2273  00147E  C02F  F04B         	movff	?___ftneg+2,___ftadd@f1+2
  2274  001482  EC1B  F014         	call	___ftadd	;wreg free
  2275  001486  C049  F055         	movff	?___ftadd,___ftge@ff1
  2276  00148A  C04A  F056         	movff	?___ftadd+1,___ftge@ff1+1
  2277  00148E  C04B  F057         	movff	?___ftadd+2,___ftge@ff1+2
  2278  001492  0E00               	movlw	0
  2279  001494  6E58               	movwf	___ftge@ff2,c
  2280  001496  0E00               	movlw	0
  2281  001498  6E59               	movwf	___ftge@ff2+1,c
  2282  00149A  0E3F               	movlw	63
  2283  00149C  6E5A               	movwf	___ftge@ff2+2,c
  2284  00149E  EC2A  F019         	call	___ftge	;wreg free
  2285  0014A2  A0D8               	btfss	status,0,c
  2286  0014A4  D014               	goto	l2956
  2287                           
  2288                           ;doprnt.c: 894: fval += 0.5;
  2289  0014A6  C085  F049         	movff	sprintf@fval,___ftadd@f1
  2290  0014AA  C086  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  2291  0014AE  C087  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  2292  0014B2  0E00               	movlw	0
  2293  0014B4  6E4C               	movwf	___ftadd@f2,c
  2294  0014B6  0E00               	movlw	0
  2295  0014B8  6E4D               	movwf	___ftadd@f2+1,c
  2296  0014BA  0E3F               	movlw	63
  2297  0014BC  6E4E               	movwf	___ftadd@f2+2,c
  2298  0014BE  EC1B  F014         	call	___ftadd	;wreg free
  2299  0014C2  C049  F085         	movff	?___ftadd,sprintf@fval
  2300  0014C6  C04A  F086         	movff	?___ftadd+1,sprintf@fval+1
  2301  0014CA  C04B  F087         	movff	?___ftadd+2,sprintf@fval+2
  2302  0014CE                     l2956:
  2303                           
  2304                           ;doprnt.c: 895: if((unsigned long)fval >= dpowers[c+1]) {
  2305  0014CE  C088  F069         	movff	sprintf@c,??_sprintf
  2306  0014D2  0100               	movlb	0	; () banked
  2307  0014D4  6B6A               	clrf	(??_sprintf+1)& (0+255),b
  2308  0014D6  BF69               	btfsc	??_sprintf& (0+255),7,b
  2309  0014D8  076A               	decf	(??_sprintf+1)& (0+255),f,b
  2310  0014DA  0100               	movlb	0	; () banked
  2311  0014DC  90D8               	bcf	status,0,c
  2312  0014DE  3769               	rlcf	??_sprintf& (0+255),f,b
  2313  0014E0  376A               	rlcf	(??_sprintf+1)& (0+255),f,b
  2314  0014E2  0100               	movlb	0	; () banked
  2315  0014E4  90D8               	bcf	status,0,c
  2316  0014E6  3769               	rlcf	??_sprintf& (0+255),f,b
  2317  0014E8  376A               	rlcf	(??_sprintf+1)& (0+255),f,b
  2318  0014EA  0E04               	movlw	4
  2319  0014EC  0100               	movlb	0	; () banked
  2320  0014EE  2769               	addwf	??_sprintf& (0+255),f,b
  2321  0014F0  0E00               	movlw	0
  2322  0014F2  236A               	addwfc	(??_sprintf+1)& (0+255),f,b
  2323  0014F4  0E01               	movlw	low _dpowers
  2324  0014F6  0100               	movlb	0	; () banked
  2325  0014F8  2569               	addwf	??_sprintf& (0+255),w,b
  2326  0014FA  6EF6               	movwf	tblptrl,c
  2327  0014FC  0E10               	movlw	high _dpowers
  2328  0014FE  216A               	addwfc	(??_sprintf+1)& (0+255),w,b
  2329  001500  6EF7               	movwf	tblptrh,c
  2330  001502                     	if	1	;There are 3 active tblptr bytes
  2331  001502  6AF8               	clrf	tblptru,c
  2332  001504  0E00               	movlw	low (__mediumconst shr (0+16))
  2333  001506  22F8               	addwfc	tblptru,f,c
  2334  001508                     	endif
  2335  001508  C085  F015         	movff	sprintf@fval,___fttol@f1
  2336  00150C  C086  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2337  001510  C087  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2338  001514  EC2E  F017         	call	___fttol	;wreg free
  2339  001518  0009               	tblrd		*+
  2340  00151A  50F5               	movf	tablat,w,c
  2341  00151C  5C15               	subwf	?___fttol,w,c
  2342  00151E  0009               	tblrd		*+
  2343  001520  50F5               	movf	tablat,w,c
  2344  001522  5816               	subwfb	?___fttol+1,w,c
  2345  001524  0009               	tblrd		*+
  2346  001526  50F5               	movf	tablat,w,c
  2347  001528  5817               	subwfb	?___fttol+2,w,c
  2348  00152A  0009               	tblrd		*+
  2349  00152C  50F5               	movf	tablat,w,c
  2350  00152E  5818               	subwfb	?___fttol+3,w,c
  2351  001530  A0D8               	btfss	status,0,c
  2352  001532  D018               	goto	l2962
  2353                           
  2354                           ;doprnt.c: 896: fval *= 1e-1;
  2355  001534  C085  F030         	movff	sprintf@fval,___ftmul@f1
  2356  001538  C086  F031         	movff	sprintf@fval+1,___ftmul@f1+1
  2357  00153C  C087  F032         	movff	sprintf@fval+2,___ftmul@f1+2
  2358  001540  0ECD               	movlw	205
  2359  001542  6E33               	movwf	___ftmul@f2,c
  2360  001544  0ECC               	movlw	204
  2361  001546  6E34               	movwf	___ftmul@f2+1,c
  2362  001548  0E3D               	movlw	61
  2363  00154A  6E35               	movwf	___ftmul@f2+2,c
  2364  00154C  ECB4  F016         	call	___ftmul	;wreg free
  2365  001550  C030  F085         	movff	?___ftmul,sprintf@fval
  2366  001554  C031  F086         	movff	?___ftmul+1,sprintf@fval+1
  2367  001558  C032  F087         	movff	?___ftmul+2,sprintf@fval+2
  2368                           
  2369                           ;doprnt.c: 897: exp++;
  2370  00155C  0100               	movlb	0	; () banked
  2371  00155E  4B81               	infsnz	sprintf@exp& (0+255),f,b
  2372  001560  2B82               	incf	(sprintf@exp+1)& (0+255),f,b
  2373                           
  2374                           ;doprnt.c: 898: } else if((unsigned long)fval < dpowers[c]) {
  2375  001562  D03A               	goto	l2968
  2376  001564                     l2962:
  2377  001564  0100               	movlb	0	; () banked
  2378  001566  5188               	movf	sprintf@c& (0+255),w,b
  2379  001568  0D04               	mullw	4
  2380  00156A  0E01               	movlw	low _dpowers
  2381  00156C  24F3               	addwf	prodl,w,c
  2382  00156E  6EF6               	movwf	tblptrl,c
  2383  001570  0E10               	movlw	high _dpowers
  2384  001572  20F4               	addwfc	prodh,w,c
  2385  001574  6EF7               	movwf	tblptrh,c
  2386  001576                     	if	1	;There are 3 active tblptr bytes
  2387  001576  6AF8               	clrf	tblptru,c
  2388  001578  0E00               	movlw	low (__mediumconst shr (0+16))
  2389  00157A  22F8               	addwfc	tblptru,f,c
  2390  00157C                     	endif
  2391  00157C  C085  F015         	movff	sprintf@fval,___fttol@f1
  2392  001580  C086  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2393  001584  C087  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2394  001588  EC2E  F017         	call	___fttol	;wreg free
  2395  00158C  0009               	tblrd		*+
  2396  00158E  50F5               	movf	tablat,w,c
  2397  001590  5C15               	subwf	?___fttol,w,c
  2398  001592  0009               	tblrd		*+
  2399  001594  50F5               	movf	tablat,w,c
  2400  001596  5816               	subwfb	?___fttol+1,w,c
  2401  001598  0009               	tblrd		*+
  2402  00159A  50F5               	movf	tablat,w,c
  2403  00159C  5817               	subwfb	?___fttol+2,w,c
  2404  00159E  0009               	tblrd		*+
  2405  0015A0  50F5               	movf	tablat,w,c
  2406  0015A2  5818               	subwfb	?___fttol+3,w,c
  2407  0015A4  B0D8               	btfsc	status,0,c
  2408  0015A6  D018               	goto	l2968
  2409                           
  2410                           ;doprnt.c: 899: fval *= 10.0;
  2411  0015A8  C085  F030         	movff	sprintf@fval,___ftmul@f1
  2412  0015AC  C086  F031         	movff	sprintf@fval+1,___ftmul@f1+1
  2413  0015B0  C087  F032         	movff	sprintf@fval+2,___ftmul@f1+2
  2414  0015B4  0E00               	movlw	0
  2415  0015B6  6E33               	movwf	___ftmul@f2,c
  2416  0015B8  0E20               	movlw	32
  2417  0015BA  6E34               	movwf	___ftmul@f2+1,c
  2418  0015BC  0E41               	movlw	65
  2419  0015BE  6E35               	movwf	___ftmul@f2+2,c
  2420  0015C0  ECB4  F016         	call	___ftmul	;wreg free
  2421  0015C4  C030  F085         	movff	?___ftmul,sprintf@fval
  2422  0015C8  C031  F086         	movff	?___ftmul+1,sprintf@fval+1
  2423  0015CC  C032  F087         	movff	?___ftmul+2,sprintf@fval+2
  2424                           
  2425                           ;doprnt.c: 900: exp--;
  2426  0015D0  0100               	movlb	0	; () banked
  2427  0015D2  0781               	decf	sprintf@exp& (0+255),f,b
  2428  0015D4  A0D8               	btfss	status,0,c
  2429  0015D6  0782               	decf	(sprintf@exp+1)& (0+255),f,b
  2430  0015D8                     l2968:
  2431                           
  2432                           ;doprnt.c: 901: }
  2433                           ;doprnt.c: 903: }
  2434                           ;doprnt.c: 959: {
  2435                           ;doprnt.c: 973: if(flag & 0x03)
  2436  0015D8  0E03               	movlw	3
  2437  0015DA  0100               	movlb	0	; () banked
  2438  0015DC  1577               	andwf	sprintf@flag& (0+255),w,b
  2439  0015DE  0100               	movlb	0	; () banked
  2440  0015E0  6F69               	movwf	??_sprintf& (0+255),b
  2441  0015E2  0E00               	movlw	0
  2442  0015E4  0100               	movlb	0	; () banked
  2443  0015E6  1578               	andwf	(sprintf@flag+1)& (0+255),w,b
  2444  0015E8  0100               	movlb	0	; () banked
  2445  0015EA  6F6A               	movwf	(??_sprintf+1)& (0+255),b
  2446  0015EC  0100               	movlb	0	; () banked
  2447  0015EE  5169               	movf	??_sprintf& (0+255),w,b
  2448  0015F0  0100               	movlb	0	; () banked
  2449  0015F2  116A               	iorwf	(??_sprintf+1)& (0+255),w,b
  2450  0015F4  B4D8               	btfsc	status,2,c
  2451  0015F6  D009               	goto	l2974
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;doprnt.c: 974: ((*sp++ = ('-')));
  2455  0015F8  C060  FFD9         	movff	sprintf@sp,fsr2l
  2456  0015FC  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2457  001600  0E2D               	movlw	45
  2458  001602  6EDF               	movwf	indf2,c
  2459                           
  2460                           ; BSR set to: 0
  2461  001604  0100               	movlb	0	; () banked
  2462  001606  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2463  001608  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2464  00160A                     l2974:
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;doprnt.c: 980: }
  2468                           ;doprnt.c: 985: val = (unsigned long)fval;
  2469  00160A  C085  F015         	movff	sprintf@fval,___fttol@f1
  2470  00160E  C086  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2471  001612  C087  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2472  001616  EC2E  F017         	call	___fttol	;wreg free
  2473  00161A  C015  F07D         	movff	?___fttol,sprintf@val
  2474  00161E  C016  F07E         	movff	?___fttol+1,sprintf@val+1
  2475  001622  C017  F07F         	movff	?___fttol+2,sprintf@val+2
  2476  001626  C018  F080         	movff	?___fttol+3,sprintf@val+3
  2477                           
  2478                           ;doprnt.c: 986: ((*sp++ = (val/dpowers[c] + '0')));
  2479  00162A  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  2480  00162E  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2481  001632  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2482  001636  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2483  00163A  0100               	movlb	0	; () banked
  2484  00163C  5188               	movf	sprintf@c& (0+255),w,b
  2485  00163E  0D04               	mullw	4
  2486  001640  0E01               	movlw	low _dpowers
  2487  001642  24F3               	addwf	prodl,w,c
  2488  001644  6EF6               	movwf	tblptrl,c
  2489  001646  0E10               	movlw	high _dpowers
  2490  001648  20F4               	addwfc	prodh,w,c
  2491  00164A  6EF7               	movwf	tblptrh,c
  2492  00164C                     	if	1	;There are 3 active tblptr bytes
  2493  00164C  6AF8               	clrf	tblptru,c
  2494  00164E  0E00               	movlw	low (__mediumconst shr (0+16))
  2495  001650  22F8               	addwfc	tblptru,f,c
  2496  001652                     	endif
  2497  001652  0009               	tblrd		*+
  2498  001654  CFF5 F005          	movff	tablat,___lldiv@divisor
  2499  001658  0009               	tblrd		*+
  2500  00165A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2501  00165E  0009               	tblrd		*+
  2502  001660  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2503  001664  000A               	tblrd		*-
  2504  001666  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2505  00166A  ECB4  F019         	call	___lldiv	;wreg free
  2506  00166E  5001               	movf	?___lldiv,w,c
  2507  001670  0F30               	addlw	48
  2508  001672  C060  FFD9         	movff	sprintf@sp,fsr2l
  2509  001676  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2510  00167A  6EDF               	movwf	indf2,c
  2511  00167C  0100               	movlb	0	; () banked
  2512  00167E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2513  001680  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;doprnt.c: 987: val %= dpowers[c];
  2517  001682  C07D  F00E         	movff	sprintf@val,___llmod@dividend
  2518  001686  C07E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  2519  00168A  C07F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  2520  00168E  C080  F011         	movff	sprintf@val+3,___llmod@dividend+3
  2521  001692  0100               	movlb	0	; () banked
  2522  001694  5188               	movf	sprintf@c& (0+255),w,b
  2523  001696  0D04               	mullw	4
  2524  001698  0E01               	movlw	low _dpowers
  2525  00169A  24F3               	addwf	prodl,w,c
  2526  00169C  6EF6               	movwf	tblptrl,c
  2527  00169E  0E10               	movlw	high _dpowers
  2528  0016A0  20F4               	addwfc	prodh,w,c
  2529  0016A2  6EF7               	movwf	tblptrh,c
  2530  0016A4                     	if	1	;There are 3 active tblptr bytes
  2531  0016A4  6AF8               	clrf	tblptru,c
  2532  0016A6  0E00               	movlw	low (__mediumconst shr (0+16))
  2533  0016A8  22F8               	addwfc	tblptru,f,c
  2534  0016AA                     	endif
  2535  0016AA  0009               	tblrd		*+
  2536  0016AC  CFF5 F012          	movff	tablat,___llmod@divisor
  2537  0016B0  0009               	tblrd		*+
  2538  0016B2  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2539  0016B6  0009               	tblrd		*+
  2540  0016B8  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2541  0016BC  000A               	tblrd		*-
  2542  0016BE  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2543  0016C2  EC2D  F01A         	call	___llmod	;wreg free
  2544  0016C6  C00E  F07D         	movff	?___llmod,sprintf@val
  2545  0016CA  C00F  F07E         	movff	?___llmod+1,sprintf@val+1
  2546  0016CE  C010  F07F         	movff	?___llmod+2,sprintf@val+2
  2547  0016D2  C011  F080         	movff	?___llmod+3,sprintf@val+3
  2548                           
  2549                           ;doprnt.c: 992: if(prec)
  2550  0016D6  0100               	movlb	0	; () banked
  2551  0016D8  5183               	movf	sprintf@prec& (0+255),w,b
  2552  0016DA  0100               	movlb	0	; () banked
  2553  0016DC  1184               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2554  0016DE  B4D8               	btfsc	status,2,c
  2555  0016E0  D09C               	goto	l3010
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;doprnt.c: 994: {
  2559                           ;doprnt.c: 995: ((*sp++ = ('.')));
  2560  0016E2  C060  FFD9         	movff	sprintf@sp,fsr2l
  2561  0016E6  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2562  0016EA  0E2E               	movlw	46
  2563  0016EC  6EDF               	movwf	indf2,c
  2564                           
  2565                           ; BSR set to: 0
  2566  0016EE  0100               	movlb	0	; () banked
  2567  0016F0  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2568  0016F2  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;doprnt.c: 996: prec -= c;
  2572  0016F4  0100               	movlb	0	; () banked
  2573  0016F6  5188               	movf	sprintf@c& (0+255),w,b
  2574  0016F8  0100               	movlb	0	; () banked
  2575  0016FA  5F83               	subwf	sprintf@prec& (0+255),f,b
  2576  0016FC  0E00               	movlw	0
  2577  0016FE  0100               	movlb	0	; () banked
  2578  001700  BF88               	btfsc	sprintf@c& (0+255),7,b
  2579  001702  0EFF               	movlw	255
  2580  001704  0100               	movlb	0	; () banked
  2581  001706  5B84               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2582                           
  2583                           ;doprnt.c: 997: while(c--) {
  2584  001708  D06E               	goto	l3000
  2585  00170A                     l204:
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;doprnt.c: 1002: if(flag & 0x200 && val == 0) {
  2589  00170A  0100               	movlb	0	; () banked
  2590  00170C  A378               	btfss	(sprintf@flag+1)& (0+255),1,b
  2591  00170E  D015               	goto	l2994
  2592                           
  2593                           ; BSR set to: 0
  2594  001710  0100               	movlb	0	; () banked
  2595  001712  517D               	movf	sprintf@val& (0+255),w,b
  2596  001714  0100               	movlb	0	; () banked
  2597  001716  117E               	iorwf	(sprintf@val+1)& (0+255),w,b
  2598  001718  0100               	movlb	0	; () banked
  2599  00171A  117F               	iorwf	(sprintf@val+2)& (0+255),w,b
  2600  00171C  0100               	movlb	0	; () banked
  2601  00171E  1180               	iorwf	(sprintf@val+3)& (0+255),w,b
  2602  001720  A4D8               	btfss	status,2,c
  2603  001722  D00B               	goto	l2994
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;doprnt.c: 1003: prec = c = 0;
  2607  001724  0E00               	movlw	0
  2608  001726  0100               	movlb	0	; () banked
  2609  001728  6F88               	movwf	sprintf@c& (0+255),b
  2610  00172A  0100               	movlb	0	; () banked
  2611  00172C  5188               	movf	sprintf@c& (0+255),w,b
  2612  00172E  0100               	movlb	0	; () banked
  2613  001730  6F83               	movwf	sprintf@prec& (0+255),b
  2614  001732  6B84               	clrf	(sprintf@prec+1)& (0+255),b
  2615  001734  BF83               	btfsc	sprintf@prec& (0+255),7,b
  2616  001736  0784               	decf	(sprintf@prec+1)& (0+255),f,b
  2617                           
  2618                           ;doprnt.c: 1004: break;
  2619  001738  D06A               	goto	l3008
  2620  00173A                     l2994:
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;doprnt.c: 1005: }
  2624                           ;doprnt.c: 1007: ((*sp++ = ('0' + (val/dpowers[c]))));
  2625  00173A  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  2626  00173E  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2627  001742  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2628  001746  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2629  00174A  0100               	movlb	0	; () banked
  2630  00174C  5188               	movf	sprintf@c& (0+255),w,b
  2631  00174E  0D04               	mullw	4
  2632  001750  0E01               	movlw	low _dpowers
  2633  001752  24F3               	addwf	prodl,w,c
  2634  001754  6EF6               	movwf	tblptrl,c
  2635  001756  0E10               	movlw	high _dpowers
  2636  001758  20F4               	addwfc	prodh,w,c
  2637  00175A  6EF7               	movwf	tblptrh,c
  2638  00175C                     	if	1	;There are 3 active tblptr bytes
  2639  00175C  6AF8               	clrf	tblptru,c
  2640  00175E  0E00               	movlw	low (__mediumconst shr (0+16))
  2641  001760  22F8               	addwfc	tblptru,f,c
  2642  001762                     	endif
  2643  001762  0009               	tblrd		*+
  2644  001764  CFF5 F005          	movff	tablat,___lldiv@divisor
  2645  001768  0009               	tblrd		*+
  2646  00176A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2647  00176E  0009               	tblrd		*+
  2648  001770  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2649  001774  000A               	tblrd		*-
  2650  001776  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2651  00177A  ECB4  F019         	call	___lldiv	;wreg free
  2652  00177E  5001               	movf	?___lldiv,w,c
  2653  001780  0F30               	addlw	48
  2654  001782  C060  FFD9         	movff	sprintf@sp,fsr2l
  2655  001786  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2656  00178A  6EDF               	movwf	indf2,c
  2657  00178C  0100               	movlb	0	; () banked
  2658  00178E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2659  001790  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;doprnt.c: 1008: val %= dpowers[c];
  2663  001792  C07D  F00E         	movff	sprintf@val,___llmod@dividend
  2664  001796  C07E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  2665  00179A  C07F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  2666  00179E  C080  F011         	movff	sprintf@val+3,___llmod@dividend+3
  2667  0017A2  0100               	movlb	0	; () banked
  2668  0017A4  5188               	movf	sprintf@c& (0+255),w,b
  2669  0017A6  0D04               	mullw	4
  2670  0017A8  0E01               	movlw	low _dpowers
  2671  0017AA  24F3               	addwf	prodl,w,c
  2672  0017AC  6EF6               	movwf	tblptrl,c
  2673  0017AE  0E10               	movlw	high _dpowers
  2674  0017B0  20F4               	addwfc	prodh,w,c
  2675  0017B2  6EF7               	movwf	tblptrh,c
  2676  0017B4                     	if	1	;There are 3 active tblptr bytes
  2677  0017B4  6AF8               	clrf	tblptru,c
  2678  0017B6  0E00               	movlw	low (__mediumconst shr (0+16))
  2679  0017B8  22F8               	addwfc	tblptru,f,c
  2680  0017BA                     	endif
  2681  0017BA  0009               	tblrd		*+
  2682  0017BC  CFF5 F012          	movff	tablat,___llmod@divisor
  2683  0017C0  0009               	tblrd		*+
  2684  0017C2  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2685  0017C6  0009               	tblrd		*+
  2686  0017C8  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2687  0017CC  000A               	tblrd		*-
  2688  0017CE  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2689  0017D2  EC2D  F01A         	call	___llmod	;wreg free
  2690  0017D6  C00E  F07D         	movff	?___llmod,sprintf@val
  2691  0017DA  C00F  F07E         	movff	?___llmod+1,sprintf@val+1
  2692  0017DE  C010  F07F         	movff	?___llmod+2,sprintf@val+2
  2693  0017E2  C011  F080         	movff	?___llmod+3,sprintf@val+3
  2694  0017E6                     l3000:
  2695  0017E6  0100               	movlb	0	; () banked
  2696  0017E8  0788               	decf	sprintf@c& (0+255),f,b
  2697  0017EA  0100               	movlb	0	; () banked
  2698  0017EC  2988               	incf	sprintf@c& (0+255),w,b
  2699  0017EE  B4D8               	btfsc	status,2,c
  2700  0017F0  D00E               	goto	l3008
  2701  0017F2  D78B               	goto	l204
  2702  0017F4                     l3002:
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;doprnt.c: 1012: ((*sp++ = ('0')));
  2706  0017F4  C060  FFD9         	movff	sprintf@sp,fsr2l
  2707  0017F8  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2708  0017FC  0E30               	movlw	48
  2709  0017FE  6EDF               	movwf	indf2,c
  2710                           
  2711                           ; BSR set to: 0
  2712  001800  0100               	movlb	0	; () banked
  2713  001802  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2714  001804  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;doprnt.c: 1013: prec--;
  2718  001806  0100               	movlb	0	; () banked
  2719  001808  0783               	decf	sprintf@prec& (0+255),f,b
  2720  00180A  A0D8               	btfss	status,0,c
  2721  00180C  0784               	decf	(sprintf@prec+1)& (0+255),f,b
  2722  00180E                     l3008:
  2723                           
  2724                           ; BSR set to: 0
  2725  00180E  0100               	movlb	0	; () banked
  2726  001810  5183               	movf	sprintf@prec& (0+255),w,b
  2727  001812  0100               	movlb	0	; () banked
  2728  001814  1184               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2729  001816  A4D8               	btfss	status,2,c
  2730  001818  D7ED               	goto	l3002
  2731  00181A                     l3010:
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;doprnt.c: 1014: }
  2735                           ;doprnt.c: 1015: }
  2736                           ;doprnt.c: 1021: ((*sp++ = ('e')));
  2737  00181A  C060  FFD9         	movff	sprintf@sp,fsr2l
  2738  00181E  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2739  001822  0E65               	movlw	101
  2740  001824  6EDF               	movwf	indf2,c
  2741                           
  2742                           ; BSR set to: 0
  2743  001826  0100               	movlb	0	; () banked
  2744  001828  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2745  00182A  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;doprnt.c: 1022: if(exp < 0) {
  2749  00182C  0100               	movlb	0	; () banked
  2750  00182E  AF82               	btfss	(sprintf@exp+1)& (0+255),7,b
  2751  001830  D00F               	goto	l3022
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;doprnt.c: 1023: exp = -exp;
  2755  001832  0100               	movlb	0	; () banked
  2756  001834  6D81               	negf	sprintf@exp& (0+255),b
  2757  001836  1F82               	comf	(sprintf@exp+1)& (0+255),f,b
  2758  001838  B0D8               	btfsc	status,0,c
  2759  00183A  2B82               	incf	(sprintf@exp+1)& (0+255),f,b
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;doprnt.c: 1024: ((*sp++ = ('-')));
  2763  00183C  C060  FFD9         	movff	sprintf@sp,fsr2l
  2764  001840  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2765  001844  0E2D               	movlw	45
  2766  001846  D009               	goto	L1
  2767  001848                     l3020:
  2768                           
  2769                           ; BSR set to: 0
  2770  001848  0100               	movlb	0	; () banked
  2771  00184A  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2772  00184C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2773                           
  2774                           ;doprnt.c: 1025: } else
  2775  00184E  D007               	goto	l3026
  2776  001850                     l3022:
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;doprnt.c: 1026: ((*sp++ = ('+')));
  2780  001850  C060  FFD9         	movff	sprintf@sp,fsr2l
  2781  001854  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2782  001858  0E2B               	movlw	43
  2783  00185A                     L1:
  2784  00185A  6EDF               	movwf	indf2,c
  2785  00185C  D7F5               	goto	l3020
  2786  00185E                     l3026:
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;doprnt.c: 1039: ((*sp++ = (exp / 10 + '0')));
  2790  00185E  C081  F007         	movff	sprintf@exp,___awdiv@dividend
  2791  001862  C082  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2792  001866  0E00               	movlw	0
  2793  001868  6E0A               	movwf	___awdiv@divisor+1,c
  2794  00186A  0E0A               	movlw	10
  2795  00186C  6E09               	movwf	___awdiv@divisor,c
  2796  00186E  EC72  F019         	call	___awdiv	;wreg free
  2797  001872  5007               	movf	?___awdiv,w,c
  2798  001874  0F30               	addlw	48
  2799  001876  C060  FFD9         	movff	sprintf@sp,fsr2l
  2800  00187A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2801  00187E  6EDF               	movwf	indf2,c
  2802  001880  0100               	movlb	0	; () banked
  2803  001882  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2804  001884  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;doprnt.c: 1040: ((*sp++ = (exp % 10 + '0')));
  2808  001886  C081  F001         	movff	sprintf@exp,___awmod@dividend
  2809  00188A  C082  F002         	movff	sprintf@exp+1,___awmod@dividend+1
  2810  00188E  0E00               	movlw	0
  2811  001890  6E04               	movwf	___awmod@divisor+1,c
  2812  001892  0E0A               	movlw	10
  2813  001894  6E03               	movwf	___awmod@divisor,c
  2814  001896  ECF5  F019         	call	___awmod	;wreg free
  2815  00189A  5001               	movf	?___awmod,w,c
  2816  00189C  0F30               	addlw	48
  2817  00189E  C060  FFD9         	movff	sprintf@sp,fsr2l
  2818  0018A2  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2819  0018A6  6EDF               	movwf	indf2,c
  2820  0018A8                     l3032:
  2821  0018A8  0100               	movlb	0	; () banked
  2822  0018AA  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2823  0018AC  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2824                           
  2825                           ;doprnt.c: 1047: continue;
  2826  0018AE  EFB2  F010         	goto	l3226
  2827  0018B2                     l190:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;doprnt.c: 1048: }
  2831                           ;doprnt.c: 1087: if(flag & 0x200) {
  2832  0018B2  0100               	movlb	0	; () banked
  2833  0018B4  A378               	btfss	(sprintf@flag+1)& (0+255),1,b
  2834  0018B6  D107               	goto	l3070
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;doprnt.c: 1088: if(exp < 0)
  2838  0018B8  0100               	movlb	0	; () banked
  2839  0018BA  AF82               	btfss	(sprintf@exp+1)& (0+255),7,b
  2840  0018BC  D012               	goto	l3038
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;doprnt.c: 1089: prec -= (exp+1);
  2844  0018BE  0E01               	movlw	1
  2845  0018C0  0100               	movlb	0	; () banked
  2846  0018C2  2581               	addwf	sprintf@exp& (0+255),w,b
  2847  0018C4  0100               	movlb	0	; () banked
  2848  0018C6  6F69               	movwf	??_sprintf& (0+255),b
  2849  0018C8  0E00               	movlw	0
  2850  0018CA  0100               	movlb	0	; () banked
  2851  0018CC  2182               	addwfc	(sprintf@exp+1)& (0+255),w,b
  2852  0018CE  0100               	movlb	0	; () banked
  2853  0018D0  6F6A               	movwf	(??_sprintf+1)& (0+255),b
  2854  0018D2  0100               	movlb	0	; () banked
  2855  0018D4  5169               	movf	??_sprintf& (0+255),w,b
  2856  0018D6  0100               	movlb	0	; () banked
  2857  0018D8  5F83               	subwf	sprintf@prec& (0+255),f,b
  2858  0018DA  0100               	movlb	0	; () banked
  2859  0018DC  516A               	movf	(??_sprintf+1)& (0+255),w,b
  2860  0018DE  0100               	movlb	0	; () banked
  2861  0018E0  5B84               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2862  0018E2                     l3038:
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;doprnt.c: 1091: val = (unsigned long)fval;
  2866  0018E2  C085  F015         	movff	sprintf@fval,___fttol@f1
  2867  0018E6  C086  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2868  0018EA  C087  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2869  0018EE  EC2E  F017         	call	___fttol	;wreg free
  2870  0018F2  C015  F07D         	movff	?___fttol,sprintf@val
  2871  0018F6  C016  F07E         	movff	?___fttol+1,sprintf@val+1
  2872  0018FA  C017  F07F         	movff	?___fttol+2,sprintf@val+2
  2873  0018FE  C018  F080         	movff	?___fttol+3,sprintf@val+3
  2874                           
  2875                           ;doprnt.c: 1092: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2876  001902  0E00               	movlw	0
  2877  001904  0100               	movlb	0	; () banked
  2878  001906  6F88               	movwf	sprintf@c& (0+255),b
  2879  001908                     l3042:
  2880                           
  2881                           ; BSR set to: 0
  2882  001908  0E0A               	movlw	10
  2883  00190A  0100               	movlb	0	; () banked
  2884  00190C  1988               	xorwf	sprintf@c& (0+255),w,b
  2885  00190E  B4D8               	btfsc	status,2,c
  2886  001910  D021               	goto	l3054
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;doprnt.c: 1093: if(val < dpowers[c])
  2890                           
  2891                           ; BSR set to: 0
  2892                           
  2893                           ; BSR set to: 0
  2894  001912  0100               	movlb	0	; () banked
  2895  001914  5188               	movf	sprintf@c& (0+255),w,b
  2896  001916  0D04               	mullw	4
  2897  001918  0E01               	movlw	low _dpowers
  2898  00191A  24F3               	addwf	prodl,w,c
  2899  00191C  6EF6               	movwf	tblptrl,c
  2900  00191E  0E10               	movlw	high _dpowers
  2901  001920  20F4               	addwfc	prodh,w,c
  2902  001922  6EF7               	movwf	tblptrh,c
  2903  001924                     	if	1	;There are 3 active tblptr bytes
  2904  001924  6AF8               	clrf	tblptru,c
  2905  001926  0E00               	movlw	low (__mediumconst shr (0+16))
  2906  001928  22F8               	addwfc	tblptru,f,c
  2907  00192A                     	endif
  2908  00192A  0009               	tblrd		*+
  2909  00192C  50F5               	movf	tablat,w,c
  2910  00192E  0100               	movlb	0	; () banked
  2911  001930  5D7D               	subwf	sprintf@val& (0+255),w,b
  2912  001932  0009               	tblrd		*+
  2913  001934  50F5               	movf	tablat,w,c
  2914  001936  0100               	movlb	0	; () banked
  2915  001938  597E               	subwfb	(sprintf@val+1)& (0+255),w,b
  2916  00193A  0009               	tblrd		*+
  2917  00193C  50F5               	movf	tablat,w,c
  2918  00193E  0100               	movlb	0	; () banked
  2919  001940  597F               	subwfb	(sprintf@val+2)& (0+255),w,b
  2920  001942  0009               	tblrd		*+
  2921  001944  50F5               	movf	tablat,w,c
  2922  001946  0100               	movlb	0	; () banked
  2923  001948  5980               	subwfb	(sprintf@val+3)& (0+255),w,b
  2924  00194A  A0D8               	btfss	status,0,c
  2925  00194C  D003               	goto	l3054
  2926                           
  2927                           ; BSR set to: 0
  2928                           
  2929                           ; BSR set to: 0
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;doprnt.c: 1094: break;
  2933  00194E  0100               	movlb	0	; () banked
  2934  001950  2B88               	incf	sprintf@c& (0+255),f,b
  2935  001952  D7DA               	goto	l3042
  2936  001954                     l3054:
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;doprnt.c: 1095: prec -= c;
  2940  001954  0100               	movlb	0	; () banked
  2941  001956  5188               	movf	sprintf@c& (0+255),w,b
  2942  001958  0100               	movlb	0	; () banked
  2943  00195A  5F83               	subwf	sprintf@prec& (0+255),f,b
  2944  00195C  0E00               	movlw	0
  2945  00195E  0100               	movlb	0	; () banked
  2946  001960  BF88               	btfsc	sprintf@c& (0+255),7,b
  2947  001962  0EFF               	movlw	255
  2948  001964  0100               	movlb	0	; () banked
  2949  001966  5B84               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2950                           
  2951                           ;doprnt.c: 1096: if(prec <= 12)
  2952  001968  0100               	movlb	0	; () banked
  2953  00196A  BF84               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2954  00196C  D008               	goto	l3056
  2955  00196E  0100               	movlb	0	; () banked
  2956  001970  5184               	movf	(sprintf@prec+1)& (0+255),w,b
  2957  001972  E11D               	bnz	l217
  2958  001974  0E0D               	movlw	13
  2959  001976  0100               	movlb	0	; () banked
  2960  001978  5D83               	subwf	sprintf@prec& (0+255),w,b
  2961  00197A  B0D8               	btfsc	status,0,c
  2962  00197C  D018               	goto	l217
  2963  00197E                     l3056:
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;doprnt.c: 1097: fval += fround(prec);
  2967  00197E  C085  F049         	movff	sprintf@fval,___ftadd@f1
  2968  001982  C086  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  2969  001986  C087  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  2970  00198A  0100               	movlb	0	; () banked
  2971  00198C  5183               	movf	sprintf@prec& (0+255),w,b
  2972  00198E  ECE6  F012         	call	_fround
  2973  001992  C03F  F04C         	movff	?_fround,___ftadd@f2
  2974  001996  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  2975  00199A  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  2976  00199E  EC1B  F014         	call	___ftadd	;wreg free
  2977  0019A2  C049  F085         	movff	?___ftadd,sprintf@fval
  2978  0019A6  C04A  F086         	movff	?___ftadd+1,sprintf@fval+1
  2979  0019AA  C04B  F087         	movff	?___ftadd+2,sprintf@fval+2
  2980  0019AE                     l217:
  2981                           
  2982                           ;doprnt.c: 1100: {
  2983                           ;doprnt.c: 1101: double temp;
  2984                           ;doprnt.c: 1102: temp = scale(prec);
  2985  0019AE  0100               	movlb	0	; () banked
  2986  0019B0  5183               	movf	sprintf@prec& (0+255),w,b
  2987  0019B2  ECCA  F010         	call	_scale
  2988  0019B6  C03F  F072         	movff	?_scale,sprintf@temp
  2989  0019BA  C040  F073         	movff	?_scale+1,sprintf@temp+1
  2990  0019BE  C041  F074         	movff	?_scale+2,sprintf@temp+2
  2991                           
  2992                           ;doprnt.c: 1103: temp *= fval - (double)val;
  2993  0019C2  C072  F030         	movff	sprintf@temp,___ftmul@f1
  2994  0019C6  C073  F031         	movff	sprintf@temp+1,___ftmul@f1+1
  2995  0019CA  C074  F032         	movff	sprintf@temp+2,___ftmul@f1+2
  2996  0019CE  C085  F04C         	movff	sprintf@fval,___ftadd@f2
  2997  0019D2  C086  F04D         	movff	sprintf@fval+1,___ftadd@f2+1
  2998  0019D6  C087  F04E         	movff	sprintf@fval+2,___ftadd@f2+2
  2999  0019DA  C07D  F024         	movff	sprintf@val,___lltoft@c
  3000  0019DE  C07E  F025         	movff	sprintf@val+1,___lltoft@c+1
  3001  0019E2  C07F  F026         	movff	sprintf@val+2,___lltoft@c+2
  3002  0019E6  C080  F027         	movff	sprintf@val+3,___lltoft@c+3
  3003  0019EA  EC60  F01A         	call	___lltoft	;wreg free
  3004  0019EE  C024  F02D         	movff	?___lltoft,___ftneg@f1
  3005  0019F2  C025  F02E         	movff	?___lltoft+1,___ftneg@f1+1
  3006  0019F6  C026  F02F         	movff	?___lltoft+2,___ftneg@f1+2
  3007  0019FA  ECB3  F01B         	call	___ftneg	;wreg free
  3008  0019FE  C02D  F049         	movff	?___ftneg,___ftadd@f1
  3009  001A02  C02E  F04A         	movff	?___ftneg+1,___ftadd@f1+1
  3010  001A06  C02F  F04B         	movff	?___ftneg+2,___ftadd@f1+2
  3011  001A0A  EC1B  F014         	call	___ftadd	;wreg free
  3012  001A0E  C049  F033         	movff	?___ftadd,___ftmul@f2
  3013  001A12  C04A  F034         	movff	?___ftadd+1,___ftmul@f2+1
  3014  001A16  C04B  F035         	movff	?___ftadd+2,___ftmul@f2+2
  3015  001A1A  ECB4  F016         	call	___ftmul	;wreg free
  3016  001A1E  C030  F072         	movff	?___ftmul,sprintf@temp
  3017  001A22  C031  F073         	movff	?___ftmul+1,sprintf@temp+1
  3018  001A26  C032  F074         	movff	?___ftmul+2,sprintf@temp+2
  3019                           
  3020                           ;doprnt.c: 1104: val = (unsigned long)temp;
  3021  001A2A  C072  F015         	movff	sprintf@temp,___fttol@f1
  3022  001A2E  C073  F016         	movff	sprintf@temp+1,___fttol@f1+1
  3023  001A32  C074  F017         	movff	sprintf@temp+2,___fttol@f1+2
  3024  001A36  EC2E  F017         	call	___fttol	;wreg free
  3025  001A3A  C015  F07D         	movff	?___fttol,sprintf@val
  3026  001A3E  C016  F07E         	movff	?___fttol+1,sprintf@val+1
  3027  001A42  C017  F07F         	movff	?___fttol+2,sprintf@val+2
  3028  001A46  C018  F080         	movff	?___fttol+3,sprintf@val+3
  3029                           
  3030                           ;doprnt.c: 1105: }
  3031                           ;doprnt.c: 1106: while(prec && val % 10 == 0) {
  3032  001A4A  D01E               	goto	l3066
  3033  001A4C                     l3062:
  3034                           
  3035                           ;doprnt.c: 1107: val /= 10;
  3036  001A4C  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  3037  001A50  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3038  001A54  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3039  001A58  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3040  001A5C  0E0A               	movlw	10
  3041  001A5E  6E05               	movwf	___lldiv@divisor,c
  3042  001A60  0E00               	movlw	0
  3043  001A62  6E06               	movwf	___lldiv@divisor+1,c
  3044  001A64  0E00               	movlw	0
  3045  001A66  6E07               	movwf	___lldiv@divisor+2,c
  3046  001A68  0E00               	movlw	0
  3047  001A6A  6E08               	movwf	___lldiv@divisor+3,c
  3048  001A6C  ECB4  F019         	call	___lldiv	;wreg free
  3049  001A70  C001  F07D         	movff	?___lldiv,sprintf@val
  3050  001A74  C002  F07E         	movff	?___lldiv+1,sprintf@val+1
  3051  001A78  C003  F07F         	movff	?___lldiv+2,sprintf@val+2
  3052  001A7C  C004  F080         	movff	?___lldiv+3,sprintf@val+3
  3053                           
  3054                           ;doprnt.c: 1108: prec--;
  3055  001A80  0100               	movlb	0	; () banked
  3056  001A82  0783               	decf	sprintf@prec& (0+255),f,b
  3057  001A84  A0D8               	btfss	status,0,c
  3058  001A86  0784               	decf	(sprintf@prec+1)& (0+255),f,b
  3059  001A88                     l3066:
  3060  001A88  0100               	movlb	0	; () banked
  3061  001A8A  5183               	movf	sprintf@prec& (0+255),w,b
  3062  001A8C  0100               	movlb	0	; () banked
  3063  001A8E  1184               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3064  001A90  B4D8               	btfsc	status,2,c
  3065  001A92  D03C               	goto	l3074
  3066                           
  3067                           ; BSR set to: 0
  3068  001A94  C07D  F00E         	movff	sprintf@val,___llmod@dividend
  3069  001A98  C07E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  3070  001A9C  C07F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  3071  001AA0  C080  F011         	movff	sprintf@val+3,___llmod@dividend+3
  3072  001AA4  0E0A               	movlw	10
  3073  001AA6  6E12               	movwf	___llmod@divisor,c
  3074  001AA8  0E00               	movlw	0
  3075  001AAA  6E13               	movwf	___llmod@divisor+1,c
  3076  001AAC  0E00               	movlw	0
  3077  001AAE  6E14               	movwf	___llmod@divisor+2,c
  3078  001AB0  0E00               	movlw	0
  3079  001AB2  6E15               	movwf	___llmod@divisor+3,c
  3080  001AB4  EC2D  F01A         	call	___llmod	;wreg free
  3081  001AB8  500E               	movf	?___llmod,w,c
  3082  001ABA  100F               	iorwf	?___llmod+1,w,c
  3083  001ABC  1010               	iorwf	?___llmod+2,w,c
  3084  001ABE  1011               	iorwf	?___llmod+3,w,c
  3085  001AC0  A4D8               	btfss	status,2,c
  3086  001AC2  D024               	goto	l3074
  3087  001AC4  D7C3               	goto	l3062
  3088  001AC6                     l3070:
  3089                           
  3090                           ;doprnt.c: 1112: if(prec <= 12)
  3091  001AC6  0100               	movlb	0	; () banked
  3092  001AC8  BF84               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3093  001ACA  D008               	goto	l3072
  3094  001ACC  0100               	movlb	0	; () banked
  3095  001ACE  5184               	movf	(sprintf@prec+1)& (0+255),w,b
  3096  001AD0  E11D               	bnz	l3074
  3097  001AD2  0E0D               	movlw	13
  3098  001AD4  0100               	movlb	0	; () banked
  3099  001AD6  5D83               	subwf	sprintf@prec& (0+255),w,b
  3100  001AD8  B0D8               	btfsc	status,0,c
  3101  001ADA  D018               	goto	l3074
  3102  001ADC                     l3072:
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;doprnt.c: 1113: fval += fround(prec);
  3106  001ADC  C085  F049         	movff	sprintf@fval,___ftadd@f1
  3107  001AE0  C086  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  3108  001AE4  C087  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  3109  001AE8  0100               	movlb	0	; () banked
  3110  001AEA  5183               	movf	sprintf@prec& (0+255),w,b
  3111  001AEC  ECE6  F012         	call	_fround
  3112  001AF0  C03F  F04C         	movff	?_fround,___ftadd@f2
  3113  001AF4  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  3114  001AF8  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  3115  001AFC  EC1B  F014         	call	___ftadd	;wreg free
  3116  001B00  C049  F085         	movff	?___ftadd,sprintf@fval
  3117  001B04  C04A  F086         	movff	?___ftadd+1,sprintf@fval+1
  3118  001B08  C04B  F087         	movff	?___ftadd+2,sprintf@fval+2
  3119  001B0C                     l3074:
  3120                           
  3121                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3122  001B0C  0100               	movlb	0	; () banked
  3123  001B0E  BF82               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3124  001B10  D008               	goto	l3076
  3125  001B12  0100               	movlb	0	; () banked
  3126  001B14  5182               	movf	(sprintf@exp+1)& (0+255),w,b
  3127  001B16  E126               	bnz	l3082
  3128  001B18  0E0A               	movlw	10
  3129  001B1A  0100               	movlb	0	; () banked
  3130  001B1C  5D81               	subwf	sprintf@exp& (0+255),w,b
  3131  001B1E  B0D8               	btfsc	status,0,c
  3132  001B20  D021               	goto	l3082
  3133  001B22                     l3076:
  3134                           
  3135                           ; BSR set to: 0
  3136  001B22  0100               	movlb	0	; () banked
  3137  001B24  5185               	movf	sprintf@fval& (0+255),w,b
  3138  001B26  0100               	movlb	0	; () banked
  3139  001B28  1186               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3140  001B2A  0100               	movlb	0	; () banked
  3141  001B2C  1187               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3142  001B2E  B4D8               	btfsc	status,2,c
  3143  001B30  D05B               	goto	l3096
  3144                           
  3145                           ; BSR set to: 0
  3146  001B32  C085  F015         	movff	sprintf@fval,___fttol@f1
  3147  001B36  C086  F016         	movff	sprintf@fval+1,___fttol@f1+1
  3148  001B3A  C087  F017         	movff	sprintf@fval+2,___fttol@f1+2
  3149  001B3E  EC2E  F017         	call	___fttol	;wreg free
  3150  001B42  5015               	movf	?___fttol,w,c
  3151  001B44  1016               	iorwf	?___fttol+1,w,c
  3152  001B46  1017               	iorwf	?___fttol+2,w,c
  3153  001B48  1018               	iorwf	?___fttol+3,w,c
  3154  001B4A  A4D8               	btfss	status,2,c
  3155  001B4C  D04D               	goto	l3096
  3156  001B4E  0100               	movlb	0	; () banked
  3157  001B50  BF82               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3158  001B52  D04A               	goto	l3096
  3159  001B54  0100               	movlb	0	; () banked
  3160  001B56  5182               	movf	(sprintf@exp+1)& (0+255),w,b
  3161  001B58  E105               	bnz	l3082
  3162  001B5A  0E02               	movlw	2
  3163  001B5C  0100               	movlb	0	; () banked
  3164  001B5E  5D81               	subwf	sprintf@exp& (0+255),w,b
  3165  001B60  A0D8               	btfss	status,0,c
  3166  001B62  D042               	goto	l3096
  3167  001B64                     l3082:
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3171  001B64  C079  F055         	movff	sprintf@tmpval,___ftge@ff1
  3172  001B68  C07A  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3173  001B6C  C07B  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3174  001B70  0E70               	movlw	112
  3175  001B72  6E58               	movwf	___ftge@ff2,c
  3176  001B74  0E89               	movlw	137
  3177  001B76  6E59               	movwf	___ftge@ff2+1,c
  3178  001B78  0E40               	movlw	64
  3179  001B7A  6E5A               	movwf	___ftge@ff2+2,c
  3180  001B7C  EC2A  F019         	call	___ftge	;wreg free
  3181  001B80  B0D8               	btfsc	status,0,c
  3182  001B82  D003               	goto	l3086
  3183                           
  3184                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3185  001B84  0100               	movlb	0	; () banked
  3186  001B86  0EF7               	movlw	247
  3187  001B88  D002               	goto	L2
  3188  001B8A                     l3086:
  3189                           
  3190                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3191  001B8A  0100               	movlb	0	; () banked
  3192  001B8C  0EF8               	movlw	248
  3193  001B8E                     L2:
  3194  001B8E  2781               	addwf	sprintf@exp& (0+255),f,b
  3195  001B90  0EFF               	movlw	255
  3196  001B92  2382               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;doprnt.c: 1124: }
  3200                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3201                           
  3202                           ; BSR set to: 0
  3203  001B94  0100               	movlb	0	; () banked
  3204  001B96  5181               	movf	sprintf@exp& (0+255),w,b
  3205  001B98  ECCA  F010         	call	_scale
  3206  001B9C  C03F  F079         	movff	?_scale,sprintf@tmpval
  3207  001BA0  C040  F07A         	movff	?_scale+1,sprintf@tmpval+1
  3208  001BA4  C041  F07B         	movff	?_scale+2,sprintf@tmpval+2
  3209                           
  3210                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3211  001BA8  C085  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  3212  001BAC  C086  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3213  001BB0  C087  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3214  001BB4  C079  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3215  001BB8  C07A  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3216  001BBC  C07B  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3217  001BC0  ECF1  F014         	call	__tdiv_to_l_	;wreg free
  3218  001BC4  C001  F07D         	movff	?__tdiv_to_l_,sprintf@val
  3219  001BC8  C002  F07E         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3220  001BCC  C003  F07F         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3221  001BD0  C004  F080         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3222                           
  3223                           ;doprnt.c: 1129: fval = 0.0;
  3224  001BD4  0E00               	movlw	0
  3225  001BD6  0100               	movlb	0	; () banked
  3226  001BD8  6F85               	movwf	sprintf@fval& (0+255),b
  3227  001BDA  0E00               	movlw	0
  3228  001BDC  0100               	movlb	0	; () banked
  3229  001BDE  6F86               	movwf	(sprintf@fval+1)& (0+255),b
  3230  001BE0  0E00               	movlw	0
  3231  001BE2  0100               	movlb	0	; () banked
  3232  001BE4  6F87               	movwf	(sprintf@fval+2)& (0+255),b
  3233                           
  3234                           ;doprnt.c: 1130: } else {
  3235  001BE6  D033               	goto	l3100
  3236  001BE8                     l3096:
  3237                           
  3238                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3239  001BE8  C085  F015         	movff	sprintf@fval,___fttol@f1
  3240  001BEC  C086  F016         	movff	sprintf@fval+1,___fttol@f1+1
  3241  001BF0  C087  F017         	movff	sprintf@fval+2,___fttol@f1+2
  3242  001BF4  EC2E  F017         	call	___fttol	;wreg free
  3243  001BF8  C015  F07D         	movff	?___fttol,sprintf@val
  3244  001BFC  C016  F07E         	movff	?___fttol+1,sprintf@val+1
  3245  001C00  C017  F07F         	movff	?___fttol+2,sprintf@val+2
  3246  001C04  C018  F080         	movff	?___fttol+3,sprintf@val+3
  3247                           
  3248                           ;doprnt.c: 1132: fval -= (double)val;
  3249  001C08  C085  F055         	movff	sprintf@fval,___ftsub@f1
  3250  001C0C  C086  F056         	movff	sprintf@fval+1,___ftsub@f1+1
  3251  001C10  C087  F057         	movff	sprintf@fval+2,___ftsub@f1+2
  3252  001C14  C07D  F024         	movff	sprintf@val,___lltoft@c
  3253  001C18  C07E  F025         	movff	sprintf@val+1,___lltoft@c+1
  3254  001C1C  C07F  F026         	movff	sprintf@val+2,___lltoft@c+2
  3255  001C20  C080  F027         	movff	sprintf@val+3,___lltoft@c+3
  3256  001C24  EC60  F01A         	call	___lltoft	;wreg free
  3257  001C28  C024  F058         	movff	?___lltoft,___ftsub@f2
  3258  001C2C  C025  F059         	movff	?___lltoft+1,___ftsub@f2+1
  3259  001C30  C026  F05A         	movff	?___lltoft+2,___ftsub@f2+2
  3260  001C34  EC0C  F01B         	call	___ftsub	;wreg free
  3261  001C38  C055  F085         	movff	?___ftsub,sprintf@fval
  3262  001C3C  C056  F086         	movff	?___ftsub+1,sprintf@fval+1
  3263  001C40  C057  F087         	movff	?___ftsub+2,sprintf@fval+2
  3264                           
  3265                           ;doprnt.c: 1133: exp = 0;
  3266  001C44  0E00               	movlw	0
  3267  001C46  0100               	movlb	0	; () banked
  3268  001C48  6F82               	movwf	(sprintf@exp+1)& (0+255),b
  3269  001C4A  0E00               	movlw	0
  3270  001C4C  6F81               	movwf	sprintf@exp& (0+255),b
  3271  001C4E                     l3100:
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;doprnt.c: 1134: }
  3275                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3276  001C4E  0E01               	movlw	1
  3277  001C50  0100               	movlb	0	; () banked
  3278  001C52  6F88               	movwf	sprintf@c& (0+255),b
  3279  001C54                     l3102:
  3280                           
  3281                           ; BSR set to: 0
  3282  001C54  0E0A               	movlw	10
  3283  001C56  0100               	movlb	0	; () banked
  3284  001C58  1988               	xorwf	sprintf@c& (0+255),w,b
  3285  001C5A  B4D8               	btfsc	status,2,c
  3286  001C5C  D021               	goto	l3114
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;doprnt.c: 1137: if(val < dpowers[c])
  3290                           
  3291                           ; BSR set to: 0
  3292                           
  3293                           ; BSR set to: 0
  3294  001C5E  0100               	movlb	0	; () banked
  3295  001C60  5188               	movf	sprintf@c& (0+255),w,b
  3296  001C62  0D04               	mullw	4
  3297  001C64  0E01               	movlw	low _dpowers
  3298  001C66  24F3               	addwf	prodl,w,c
  3299  001C68  6EF6               	movwf	tblptrl,c
  3300  001C6A  0E10               	movlw	high _dpowers
  3301  001C6C  20F4               	addwfc	prodh,w,c
  3302  001C6E  6EF7               	movwf	tblptrh,c
  3303  001C70                     	if	1	;There are 3 active tblptr bytes
  3304  001C70  6AF8               	clrf	tblptru,c
  3305  001C72  0E00               	movlw	low (__mediumconst shr (0+16))
  3306  001C74  22F8               	addwfc	tblptru,f,c
  3307  001C76                     	endif
  3308  001C76  0009               	tblrd		*+
  3309  001C78  50F5               	movf	tablat,w,c
  3310  001C7A  0100               	movlb	0	; () banked
  3311  001C7C  5D7D               	subwf	sprintf@val& (0+255),w,b
  3312  001C7E  0009               	tblrd		*+
  3313  001C80  50F5               	movf	tablat,w,c
  3314  001C82  0100               	movlb	0	; () banked
  3315  001C84  597E               	subwfb	(sprintf@val+1)& (0+255),w,b
  3316  001C86  0009               	tblrd		*+
  3317  001C88  50F5               	movf	tablat,w,c
  3318  001C8A  0100               	movlb	0	; () banked
  3319  001C8C  597F               	subwfb	(sprintf@val+2)& (0+255),w,b
  3320  001C8E  0009               	tblrd		*+
  3321  001C90  50F5               	movf	tablat,w,c
  3322  001C92  0100               	movlb	0	; () banked
  3323  001C94  5980               	subwfb	(sprintf@val+3)& (0+255),w,b
  3324  001C96  A0D8               	btfss	status,0,c
  3325  001C98  D003               	goto	l3114
  3326                           
  3327                           ; BSR set to: 0
  3328                           
  3329                           ; BSR set to: 0
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;doprnt.c: 1138: break;
  3333  001C9A  0100               	movlb	0	; () banked
  3334  001C9C  2B88               	incf	sprintf@c& (0+255),f,b
  3335  001C9E  D7DA               	goto	l3102
  3336  001CA0                     l3114:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;doprnt.c: 1175: {
  3340                           ;doprnt.c: 1188: if(flag & 0x03)
  3341  001CA0  0E03               	movlw	3
  3342  001CA2  0100               	movlb	0	; () banked
  3343  001CA4  1577               	andwf	sprintf@flag& (0+255),w,b
  3344  001CA6  0100               	movlb	0	; () banked
  3345  001CA8  6F69               	movwf	??_sprintf& (0+255),b
  3346  001CAA  0E00               	movlw	0
  3347  001CAC  0100               	movlb	0	; () banked
  3348  001CAE  1578               	andwf	(sprintf@flag+1)& (0+255),w,b
  3349  001CB0  0100               	movlb	0	; () banked
  3350  001CB2  6F6A               	movwf	(??_sprintf+1)& (0+255),b
  3351  001CB4  0100               	movlb	0	; () banked
  3352  001CB6  5169               	movf	??_sprintf& (0+255),w,b
  3353  001CB8  0100               	movlb	0	; () banked
  3354  001CBA  116A               	iorwf	(??_sprintf+1)& (0+255),w,b
  3355  001CBC  B4D8               	btfsc	status,2,c
  3356  001CBE  D057               	goto	l3128
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3360  001CC0  C060  FFD9         	movff	sprintf@sp,fsr2l
  3361  001CC4  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3362  001CC8  0E2D               	movlw	45
  3363  001CCA  D04F               	goto	L3
  3364  001CCC                     l3118:
  3365                           
  3366                           ; BSR set to: 0
  3367  001CCC  0100               	movlb	0	; () banked
  3368  001CCE  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3369  001CD0  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;doprnt.c: 1195: }
  3373                           ;doprnt.c: 1196: while(c--) {
  3374  001CD2  D04D               	goto	l3128
  3375  001CD4                     l3120:
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;doprnt.c: 1200: {
  3379                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3380  001CD4  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  3381  001CD8  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3382  001CDC  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3383  001CE0  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3384  001CE4  0100               	movlb	0	; () banked
  3385  001CE6  5188               	movf	sprintf@c& (0+255),w,b
  3386  001CE8  0D04               	mullw	4
  3387  001CEA  0E01               	movlw	low _dpowers
  3388  001CEC  24F3               	addwf	prodl,w,c
  3389  001CEE  6EF6               	movwf	tblptrl,c
  3390  001CF0  0E10               	movlw	high _dpowers
  3391  001CF2  20F4               	addwfc	prodh,w,c
  3392  001CF4  6EF7               	movwf	tblptrh,c
  3393  001CF6                     	if	1	;There are 3 active tblptr bytes
  3394  001CF6  6AF8               	clrf	tblptru,c
  3395  001CF8  0E00               	movlw	low (__mediumconst shr (0+16))
  3396  001CFA  22F8               	addwfc	tblptru,f,c
  3397  001CFC                     	endif
  3398  001CFC  0009               	tblrd		*+
  3399  001CFE  CFF5 F005          	movff	tablat,___lldiv@divisor
  3400  001D02  0009               	tblrd		*+
  3401  001D04  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3402  001D08  0009               	tblrd		*+
  3403  001D0A  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3404  001D0E  000A               	tblrd		*-
  3405  001D10  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3406  001D14  ECB4  F019         	call	___lldiv	;wreg free
  3407  001D18  C001  F079         	movff	?___lldiv,sprintf@tmpval
  3408  001D1C  C002  F07A         	movff	?___lldiv+1,sprintf@tmpval+1
  3409  001D20  C003  F07B         	movff	?___lldiv+2,sprintf@tmpval+2
  3410  001D24  C004  F07C         	movff	?___lldiv+3,sprintf@tmpval+3
  3411                           
  3412                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3413  001D28  C079  F00E         	movff	sprintf@tmpval,___llmod@dividend
  3414  001D2C  C07A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3415  001D30  C07B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3416  001D34  C07C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3417  001D38  0E0A               	movlw	10
  3418  001D3A  6E12               	movwf	___llmod@divisor,c
  3419  001D3C  0E00               	movlw	0
  3420  001D3E  6E13               	movwf	___llmod@divisor+1,c
  3421  001D40  0E00               	movlw	0
  3422  001D42  6E14               	movwf	___llmod@divisor+2,c
  3423  001D44  0E00               	movlw	0
  3424  001D46  6E15               	movwf	___llmod@divisor+3,c
  3425  001D48  EC2D  F01A         	call	___llmod	;wreg free
  3426  001D4C  C00E  F079         	movff	?___llmod,sprintf@tmpval
  3427  001D50  C00F  F07A         	movff	?___llmod+1,sprintf@tmpval+1
  3428  001D54  C010  F07B         	movff	?___llmod+2,sprintf@tmpval+2
  3429  001D58  C011  F07C         	movff	?___llmod+3,sprintf@tmpval+3
  3430                           
  3431                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3432  001D5C  0100               	movlb	0	; () banked
  3433  001D5E  5179               	movf	sprintf@tmpval& (0+255),w,b
  3434  001D60  0F30               	addlw	48
  3435  001D62  C060  FFD9         	movff	sprintf@sp,fsr2l
  3436  001D66  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3437  001D6A                     L3:
  3438  001D6A  6EDF               	movwf	indf2,c
  3439  001D6C  D7AF               	goto	l3118
  3440  001D6E                     l3128:
  3441                           
  3442                           ; BSR set to: 0
  3443  001D6E  0100               	movlb	0	; () banked
  3444  001D70  0788               	decf	sprintf@c& (0+255),f,b
  3445  001D72  0100               	movlb	0	; () banked
  3446  001D74  2988               	incf	sprintf@c& (0+255),w,b
  3447  001D76  B4D8               	btfsc	status,2,c
  3448  001D78  D00E               	goto	l3136
  3449  001D7A  D7AC               	goto	l3120
  3450  001D7C                     l3130:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3454  001D7C  C060  FFD9         	movff	sprintf@sp,fsr2l
  3455  001D80  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3456  001D84  0E30               	movlw	48
  3457  001D86  6EDF               	movwf	indf2,c
  3458                           
  3459                           ; BSR set to: 0
  3460  001D88  0100               	movlb	0	; () banked
  3461  001D8A  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3462  001D8C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;doprnt.c: 1209: exp--;
  3466  001D8E  0100               	movlb	0	; () banked
  3467  001D90  0781               	decf	sprintf@exp& (0+255),f,b
  3468  001D92  A0D8               	btfss	status,0,c
  3469  001D94  0782               	decf	(sprintf@exp+1)& (0+255),f,b
  3470  001D96                     l3136:
  3471                           
  3472                           ; BSR set to: 0
  3473  001D96  0100               	movlb	0	; () banked
  3474  001D98  BF82               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3475  001D9A  D007               	goto	l3138
  3476  001D9C  0100               	movlb	0	; () banked
  3477  001D9E  5182               	movf	(sprintf@exp+1)& (0+255),w,b
  3478  001DA0  E1ED               	bnz	l3130
  3479  001DA2  0100               	movlb	0	; () banked
  3480  001DA4  0581               	decf	sprintf@exp& (0+255),w,b
  3481  001DA6  B0D8               	btfsc	status,0,c
  3482  001DA8  D7E9               	goto	l3130
  3483  001DAA                     l3138:
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;doprnt.c: 1210: }
  3487                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3488  001DAA  0100               	movlb	0	; () banked
  3489  001DAC  BF84               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3490  001DAE  D00C               	goto	l245
  3491  001DB0  0100               	movlb	0	; () banked
  3492  001DB2  5184               	movf	(sprintf@prec+1)& (0+255),w,b
  3493  001DB4  E105               	bnz	u3280
  3494  001DB6  0E09               	movlw	9
  3495  001DB8  0100               	movlb	0	; () banked
  3496  001DBA  5D83               	subwf	sprintf@prec& (0+255),w,b
  3497  001DBC  A0D8               	btfss	status,0,c
  3498  001DBE  D004               	goto	l245
  3499  001DC0                     u3280:
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3503  001DC0  0E08               	movlw	8
  3504  001DC2  0100               	movlb	0	; () banked
  3505  001DC4  6F88               	movwf	sprintf@c& (0+255),b
  3506  001DC6  D002               	goto	l3142
  3507  001DC8                     l245:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;doprnt.c: 1213: else
  3511                           ;doprnt.c: 1214: c = prec;
  3512  001DC8  C083  F088         	movff	sprintf@prec,sprintf@c
  3513  001DCC                     l3142:
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;doprnt.c: 1215: prec -= c;
  3517  001DCC  0100               	movlb	0	; () banked
  3518  001DCE  5188               	movf	sprintf@c& (0+255),w,b
  3519  001DD0  0100               	movlb	0	; () banked
  3520  001DD2  5F83               	subwf	sprintf@prec& (0+255),f,b
  3521  001DD4  0E00               	movlw	0
  3522  001DD6  0100               	movlb	0	; () banked
  3523  001DD8  BF88               	btfsc	sprintf@c& (0+255),7,b
  3524  001DDA  0EFF               	movlw	255
  3525  001DDC  0100               	movlb	0	; () banked
  3526  001DDE  5B84               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;doprnt.c: 1219: if(c)
  3530  001DE0  0100               	movlb	0	; () banked
  3531  001DE2  5188               	movf	sprintf@c& (0+255),w,b
  3532  001DE4  0100               	movlb	0	; () banked
  3533  001DE6  B4D8               	btfsc	status,2,c
  3534  001DE8  D009               	goto	l3150
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3538  001DEA  C060  FFD9         	movff	sprintf@sp,fsr2l
  3539  001DEE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3540  001DF2  0E2E               	movlw	46
  3541  001DF4  6EDF               	movwf	indf2,c
  3542                           
  3543                           ; BSR set to: 0
  3544  001DF6  0100               	movlb	0	; () banked
  3545  001DF8  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3546  001DFA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3547  001DFC                     l3150:
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3551  001DFC  0100               	movlb	0	; () banked
  3552  001DFE  5188               	movf	sprintf@c& (0+255),w,b
  3553  001E00  ECCA  F010         	call	_scale
  3554  001E04  C03F  F06F         	movff	?_scale,_sprintf$1460
  3555  001E08  C040  F070         	movff	?_scale+1,_sprintf$1460+1
  3556  001E0C  C041  F071         	movff	?_scale+2,_sprintf$1460+2
  3557                           
  3558                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3559  001E10  C085  F033         	movff	sprintf@fval,___ftmul@f2
  3560  001E14  C086  F034         	movff	sprintf@fval+1,___ftmul@f2+1
  3561  001E18  C087  F035         	movff	sprintf@fval+2,___ftmul@f2+2
  3562  001E1C  C06F  F030         	movff	_sprintf$1460,___ftmul@f1
  3563  001E20  C070  F031         	movff	_sprintf$1460+1,___ftmul@f1+1
  3564  001E24  C071  F032         	movff	_sprintf$1460+2,___ftmul@f1+2
  3565  001E28  ECB4  F016         	call	___ftmul	;wreg free
  3566  001E2C  C030  F015         	movff	?___ftmul,___fttol@f1
  3567  001E30  C031  F016         	movff	?___ftmul+1,___fttol@f1+1
  3568  001E34  C032  F017         	movff	?___ftmul+2,___fttol@f1+2
  3569  001E38  EC2E  F017         	call	___fttol	;wreg free
  3570  001E3C  C015  F07D         	movff	?___fttol,sprintf@val
  3571  001E40  C016  F07E         	movff	?___fttol+1,sprintf@val+1
  3572  001E44  C017  F07F         	movff	?___fttol+2,sprintf@val+2
  3573  001E48  C018  F080         	movff	?___fttol+3,sprintf@val+3
  3574                           
  3575                           ;doprnt.c: 1228: while(c--) {
  3576  001E4C  D079               	goto	l3164
  3577  001E4E                     l3154:
  3578                           
  3579                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3580  001E4E  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  3581  001E52  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3582  001E56  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3583  001E5A  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3584  001E5E  0100               	movlb	0	; () banked
  3585  001E60  5188               	movf	sprintf@c& (0+255),w,b
  3586  001E62  0D04               	mullw	4
  3587  001E64  0E01               	movlw	low _dpowers
  3588  001E66  24F3               	addwf	prodl,w,c
  3589  001E68  6EF6               	movwf	tblptrl,c
  3590  001E6A  0E10               	movlw	high _dpowers
  3591  001E6C  20F4               	addwfc	prodh,w,c
  3592  001E6E  6EF7               	movwf	tblptrh,c
  3593  001E70                     	if	1	;There are 3 active tblptr bytes
  3594  001E70  6AF8               	clrf	tblptru,c
  3595  001E72  0E00               	movlw	low (__mediumconst shr (0+16))
  3596  001E74  22F8               	addwfc	tblptru,f,c
  3597  001E76                     	endif
  3598  001E76  0009               	tblrd		*+
  3599  001E78  CFF5 F005          	movff	tablat,___lldiv@divisor
  3600  001E7C  0009               	tblrd		*+
  3601  001E7E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3602  001E82  0009               	tblrd		*+
  3603  001E84  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3604  001E88  000A               	tblrd		*-
  3605  001E8A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3606  001E8E  ECB4  F019         	call	___lldiv	;wreg free
  3607  001E92  C001  F079         	movff	?___lldiv,sprintf@tmpval
  3608  001E96  C002  F07A         	movff	?___lldiv+1,sprintf@tmpval+1
  3609  001E9A  C003  F07B         	movff	?___lldiv+2,sprintf@tmpval+2
  3610  001E9E  C004  F07C         	movff	?___lldiv+3,sprintf@tmpval+3
  3611                           
  3612                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3613  001EA2  C079  F00E         	movff	sprintf@tmpval,___llmod@dividend
  3614  001EA6  C07A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3615  001EAA  C07B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3616  001EAE  C07C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3617  001EB2  0E0A               	movlw	10
  3618  001EB4  6E12               	movwf	___llmod@divisor,c
  3619  001EB6  0E00               	movlw	0
  3620  001EB8  6E13               	movwf	___llmod@divisor+1,c
  3621  001EBA  0E00               	movlw	0
  3622  001EBC  6E14               	movwf	___llmod@divisor+2,c
  3623  001EBE  0E00               	movlw	0
  3624  001EC0  6E15               	movwf	___llmod@divisor+3,c
  3625  001EC2  EC2D  F01A         	call	___llmod	;wreg free
  3626  001EC6  C00E  F079         	movff	?___llmod,sprintf@tmpval
  3627  001ECA  C00F  F07A         	movff	?___llmod+1,sprintf@tmpval+1
  3628  001ECE  C010  F07B         	movff	?___llmod+2,sprintf@tmpval+2
  3629  001ED2  C011  F07C         	movff	?___llmod+3,sprintf@tmpval+3
  3630                           
  3631                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3632  001ED6  0100               	movlb	0	; () banked
  3633  001ED8  5179               	movf	sprintf@tmpval& (0+255),w,b
  3634  001EDA  0F30               	addlw	48
  3635  001EDC  C060  FFD9         	movff	sprintf@sp,fsr2l
  3636  001EE0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3637  001EE4  6EDF               	movwf	indf2,c
  3638                           
  3639                           ; BSR set to: 0
  3640  001EE6  0100               	movlb	0	; () banked
  3641  001EE8  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3642  001EEA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;doprnt.c: 1232: val %= dpowers[c];
  3646  001EEC  C07D  F00E         	movff	sprintf@val,___llmod@dividend
  3647  001EF0  C07E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  3648  001EF4  C07F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  3649  001EF8  C080  F011         	movff	sprintf@val+3,___llmod@dividend+3
  3650  001EFC  0100               	movlb	0	; () banked
  3651  001EFE  5188               	movf	sprintf@c& (0+255),w,b
  3652  001F00  0D04               	mullw	4
  3653  001F02  0E01               	movlw	low _dpowers
  3654  001F04  24F3               	addwf	prodl,w,c
  3655  001F06  6EF6               	movwf	tblptrl,c
  3656  001F08  0E10               	movlw	high _dpowers
  3657  001F0A  20F4               	addwfc	prodh,w,c
  3658  001F0C  6EF7               	movwf	tblptrh,c
  3659  001F0E                     	if	1	;There are 3 active tblptr bytes
  3660  001F0E  6AF8               	clrf	tblptru,c
  3661  001F10  0E00               	movlw	low (__mediumconst shr (0+16))
  3662  001F12  22F8               	addwfc	tblptru,f,c
  3663  001F14                     	endif
  3664  001F14  0009               	tblrd		*+
  3665  001F16  CFF5 F012          	movff	tablat,___llmod@divisor
  3666  001F1A  0009               	tblrd		*+
  3667  001F1C  CFF5 F013          	movff	tablat,___llmod@divisor+1
  3668  001F20  0009               	tblrd		*+
  3669  001F22  CFF5 F014          	movff	tablat,___llmod@divisor+2
  3670  001F26  000A               	tblrd		*-
  3671  001F28  CFF5 F015          	movff	tablat,___llmod@divisor+3
  3672  001F2C  EC2D  F01A         	call	___llmod	;wreg free
  3673  001F30  C00E  F07D         	movff	?___llmod,sprintf@val
  3674  001F34  C00F  F07E         	movff	?___llmod+1,sprintf@val+1
  3675  001F38  C010  F07F         	movff	?___llmod+2,sprintf@val+2
  3676  001F3C  C011  F080         	movff	?___llmod+3,sprintf@val+3
  3677  001F40                     l3164:
  3678  001F40  0100               	movlb	0	; () banked
  3679  001F42  0788               	decf	sprintf@c& (0+255),f,b
  3680  001F44  0100               	movlb	0	; () banked
  3681  001F46  2988               	incf	sprintf@c& (0+255),w,b
  3682  001F48  B4D8               	btfsc	status,2,c
  3683  001F4A  D00E               	goto	l3172
  3684  001F4C  D780               	goto	l3154
  3685  001F4E                     l3166:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3689  001F4E  C060  FFD9         	movff	sprintf@sp,fsr2l
  3690  001F52  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3691  001F56  0E30               	movlw	48
  3692  001F58  6EDF               	movwf	indf2,c
  3693                           
  3694                           ; BSR set to: 0
  3695  001F5A  0100               	movlb	0	; () banked
  3696  001F5C  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3697  001F5E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;doprnt.c: 1237: prec--;
  3701  001F60  0100               	movlb	0	; () banked
  3702  001F62  0783               	decf	sprintf@prec& (0+255),f,b
  3703  001F64  A0D8               	btfss	status,0,c
  3704  001F66  0784               	decf	(sprintf@prec+1)& (0+255),f,b
  3705  001F68                     l3172:
  3706                           
  3707                           ; BSR set to: 0
  3708  001F68  0100               	movlb	0	; () banked
  3709  001F6A  5183               	movf	sprintf@prec& (0+255),w,b
  3710  001F6C  0100               	movlb	0	; () banked
  3711  001F6E  1184               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3712  001F70  B4D8               	btfsc	status,2,c
  3713  001F72  D0F8               	goto	l3226
  3714  001F74  D7EC               	goto	l3166
  3715  001F76                     l3174:
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;doprnt.c: 1246: }
  3719                           ;doprnt.c: 1253: {
  3720                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3721  001F76  C075  FFD9         	movff	sprintf@ap,fsr2l
  3722  001F7A  C076  FFDA         	movff	sprintf@ap+1,fsr2h
  3723  001F7E  CFDE F07D          	movff	postinc2,sprintf@val
  3724  001F82  CFDD F07E          	movff	postdec2,sprintf@val+1
  3725  001F86  0100               	movlb	0	; () banked
  3726  001F88  0E00               	movlw	0
  3727  001F8A  BF7E               	btfsc	(sprintf@val+1)& (0+255),7,b
  3728  001F8C  0EFF               	movlw	-1
  3729  001F8E  6F7F               	movwf	(sprintf@val+2)& (0+255),b
  3730  001F90  6F80               	movwf	(sprintf@val+3)& (0+255),b
  3731                           
  3732                           ; BSR set to: 0
  3733  001F92  0E02               	movlw	2
  3734  001F94  0100               	movlb	0	; () banked
  3735  001F96  2775               	addwf	sprintf@ap& (0+255),f,b
  3736  001F98  0E00               	movlw	0
  3737  001F9A  2376               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;doprnt.c: 1261: if((long)val < 0) {
  3741  001F9C  0100               	movlb	0	; () banked
  3742  001F9E  AF80               	btfss	(sprintf@val+3)& (0+255),7,b
  3743  001FA0  D00C               	goto	l3184
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;doprnt.c: 1262: flag |= 0x03;
  3747  001FA2  0E03               	movlw	3
  3748  001FA4  0100               	movlb	0	; () banked
  3749  001FA6  1377               	iorwf	sprintf@flag& (0+255),f,b
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;doprnt.c: 1263: val = -val;
  3753  001FA8  0100               	movlb	0	; () banked
  3754  001FAA  1F80               	comf	(sprintf@val+3)& (0+255),f,b
  3755  001FAC  1F7F               	comf	(sprintf@val+2)& (0+255),f,b
  3756  001FAE  1F7E               	comf	(sprintf@val+1)& (0+255),f,b
  3757  001FB0  6D7D               	negf	sprintf@val& (0+255),b
  3758  001FB2  0E00               	movlw	0
  3759  001FB4  237E               	addwfc	(sprintf@val+1)& (0+255),f,b
  3760  001FB6  237F               	addwfc	(sprintf@val+2)& (0+255),f,b
  3761  001FB8  2380               	addwfc	(sprintf@val+3)& (0+255),f,b
  3762  001FBA                     l3184:
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;doprnt.c: 1264: }
  3766                           ;doprnt.c: 1266: }
  3767                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3768  001FBA  0100               	movlb	0	; () banked
  3769  001FBC  5183               	movf	sprintf@prec& (0+255),w,b
  3770  001FBE  0100               	movlb	0	; () banked
  3771  001FC0  1184               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3772  001FC2  A4D8               	btfss	status,2,c
  3773  001FC4  D00D               	goto	l3190
  3774                           
  3775                           ; BSR set to: 0
  3776  001FC6  0100               	movlb	0	; () banked
  3777  001FC8  517D               	movf	sprintf@val& (0+255),w,b
  3778  001FCA  0100               	movlb	0	; () banked
  3779  001FCC  117E               	iorwf	(sprintf@val+1)& (0+255),w,b
  3780  001FCE  0100               	movlb	0	; () banked
  3781  001FD0  117F               	iorwf	(sprintf@val+2)& (0+255),w,b
  3782  001FD2  0100               	movlb	0	; () banked
  3783  001FD4  1180               	iorwf	(sprintf@val+3)& (0+255),w,b
  3784  001FD6  A4D8               	btfss	status,2,c
  3785  001FD8  D003               	goto	l3190
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;doprnt.c: 1291: prec++;
  3789  001FDA  0100               	movlb	0	; () banked
  3790  001FDC  4B83               	infsnz	sprintf@prec& (0+255),f,b
  3791  001FDE  2B84               	incf	(sprintf@prec+1)& (0+255),f,b
  3792  001FE0                     l3190:
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3796  001FE0  0E01               	movlw	1
  3797  001FE2  0100               	movlb	0	; () banked
  3798  001FE4  6F88               	movwf	sprintf@c& (0+255),b
  3799  001FE6                     l3192:
  3800                           
  3801                           ; BSR set to: 0
  3802  001FE6  0E0A               	movlw	10
  3803  001FE8  0100               	movlb	0	; () banked
  3804  001FEA  1988               	xorwf	sprintf@c& (0+255),w,b
  3805  001FEC  B4D8               	btfsc	status,2,c
  3806  001FEE  D021               	goto	l3204
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;doprnt.c: 1306: if(val < dpowers[c])
  3810                           
  3811                           ; BSR set to: 0
  3812                           
  3813                           ; BSR set to: 0
  3814  001FF0  0100               	movlb	0	; () banked
  3815  001FF2  5188               	movf	sprintf@c& (0+255),w,b
  3816  001FF4  0D04               	mullw	4
  3817  001FF6  0E01               	movlw	low _dpowers
  3818  001FF8  24F3               	addwf	prodl,w,c
  3819  001FFA  6EF6               	movwf	tblptrl,c
  3820  001FFC  0E10               	movlw	high _dpowers
  3821  001FFE  20F4               	addwfc	prodh,w,c
  3822  002000  6EF7               	movwf	tblptrh,c
  3823  002002                     	if	1	;There are 3 active tblptr bytes
  3824  002002  6AF8               	clrf	tblptru,c
  3825  002004  0E00               	movlw	low (__mediumconst shr (0+16))
  3826  002006  22F8               	addwfc	tblptru,f,c
  3827  002008                     	endif
  3828  002008  0009               	tblrd		*+
  3829  00200A  50F5               	movf	tablat,w,c
  3830  00200C  0100               	movlb	0	; () banked
  3831  00200E  5D7D               	subwf	sprintf@val& (0+255),w,b
  3832  002010  0009               	tblrd		*+
  3833  002012  50F5               	movf	tablat,w,c
  3834  002014  0100               	movlb	0	; () banked
  3835  002016  597E               	subwfb	(sprintf@val+1)& (0+255),w,b
  3836  002018  0009               	tblrd		*+
  3837  00201A  50F5               	movf	tablat,w,c
  3838  00201C  0100               	movlb	0	; () banked
  3839  00201E  597F               	subwfb	(sprintf@val+2)& (0+255),w,b
  3840  002020  0009               	tblrd		*+
  3841  002022  50F5               	movf	tablat,w,c
  3842  002024  0100               	movlb	0	; () banked
  3843  002026  5980               	subwfb	(sprintf@val+3)& (0+255),w,b
  3844  002028  A0D8               	btfss	status,0,c
  3845  00202A  D003               	goto	l3204
  3846                           
  3847                           ; BSR set to: 0
  3848                           
  3849                           ; BSR set to: 0
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;doprnt.c: 1307: break;
  3853  00202C  0100               	movlb	0	; () banked
  3854  00202E  2B88               	incf	sprintf@c& (0+255),f,b
  3855  002030  D7DA               	goto	l3192
  3856  002032                     l3204:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;doprnt.c: 1339: if(c < prec)
  3860  002032  0E80               	movlw	128
  3861  002034  0100               	movlb	0	; () banked
  3862  002036  BF88               	btfsc	sprintf@c& (0+255),7,b
  3863  002038  0E7F               	movlw	127
  3864  00203A  0100               	movlb	0	; () banked
  3865  00203C  6F69               	movwf	??_sprintf& (0+255),b
  3866  00203E  0100               	movlb	0	; () banked
  3867  002040  5183               	movf	sprintf@prec& (0+255),w,b
  3868  002042  0100               	movlb	0	; () banked
  3869  002044  5D88               	subwf	sprintf@c& (0+255),w,b
  3870  002046  0100               	movlb	0	; () banked
  3871  002048  5184               	movf	(sprintf@prec+1)& (0+255),w,b
  3872  00204A  0A80               	xorlw	128
  3873  00204C  0100               	movlb	0	; () banked
  3874  00204E  5969               	subwfb	??_sprintf& (0+255),w,b
  3875  002050  B0D8               	btfsc	status,0,c
  3876  002052  D003               	goto	l3208
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;doprnt.c: 1340: c = prec;
  3880  002054  C083  F088         	movff	sprintf@prec,sprintf@c
  3881  002058  D018               	goto	l3212
  3882  00205A                     l3208:
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;doprnt.c: 1341: else if(prec < c)
  3886  00205A  0100               	movlb	0	; () banked
  3887  00205C  5184               	movf	(sprintf@prec+1)& (0+255),w,b
  3888  00205E  0A80               	xorlw	128
  3889  002060  0100               	movlb	0	; () banked
  3890  002062  6F69               	movwf	??_sprintf& (0+255),b
  3891  002064  0100               	movlb	0	; () banked
  3892  002066  5188               	movf	sprintf@c& (0+255),w,b
  3893  002068  0100               	movlb	0	; () banked
  3894  00206A  5D83               	subwf	sprintf@prec& (0+255),w,b
  3895  00206C  0E80               	movlw	128
  3896  00206E  0100               	movlb	0	; () banked
  3897  002070  BF88               	btfsc	sprintf@c& (0+255),7,b
  3898  002072  0E7F               	movlw	127
  3899  002074  0100               	movlb	0	; () banked
  3900  002076  5969               	subwfb	??_sprintf& (0+255),w,b
  3901  002078  B0D8               	btfsc	status,0,c
  3902  00207A  D007               	goto	l3212
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;doprnt.c: 1342: prec = c;
  3906  00207C  0100               	movlb	0	; () banked
  3907  00207E  5188               	movf	sprintf@c& (0+255),w,b
  3908  002080  0100               	movlb	0	; () banked
  3909  002082  6F83               	movwf	sprintf@prec& (0+255),b
  3910  002084  6B84               	clrf	(sprintf@prec+1)& (0+255),b
  3911  002086  BF83               	btfsc	sprintf@prec& (0+255),7,b
  3912  002088  0784               	decf	(sprintf@prec+1)& (0+255),f,b
  3913  00208A                     l3212:
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;doprnt.c: 1422: {
  3917                           ;doprnt.c: 1438: if(flag & 0x03)
  3918  00208A  0E03               	movlw	3
  3919  00208C  0100               	movlb	0	; () banked
  3920  00208E  1577               	andwf	sprintf@flag& (0+255),w,b
  3921  002090  0100               	movlb	0	; () banked
  3922  002092  6F69               	movwf	??_sprintf& (0+255),b
  3923  002094  0E00               	movlw	0
  3924  002096  0100               	movlb	0	; () banked
  3925  002098  1578               	andwf	(sprintf@flag+1)& (0+255),w,b
  3926  00209A  0100               	movlb	0	; () banked
  3927  00209C  6F6A               	movwf	(??_sprintf+1)& (0+255),b
  3928  00209E  0100               	movlb	0	; () banked
  3929  0020A0  5169               	movf	??_sprintf& (0+255),w,b
  3930  0020A2  0100               	movlb	0	; () banked
  3931  0020A4  116A               	iorwf	(??_sprintf+1)& (0+255),w,b
  3932  0020A6  B4D8               	btfsc	status,2,c
  3933  0020A8  D052               	goto	l3224
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3937  0020AA  C060  FFD9         	movff	sprintf@sp,fsr2l
  3938  0020AE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3939  0020B2  0E2D               	movlw	45
  3940  0020B4  6EDF               	movwf	indf2,c
  3941  0020B6  D048               	goto	l3222
  3942  0020B8                     l3218:
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;doprnt.c: 1478: {
  3946                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3947  0020B8  C083  F069         	movff	sprintf@prec,??_sprintf
  3948  0020BC  C084  F06A         	movff	sprintf@prec+1,??_sprintf+1
  3949  0020C0  0100               	movlb	0	; () banked
  3950  0020C2  90D8               	bcf	status,0,c
  3951  0020C4  3769               	rlcf	??_sprintf& (0+255),f,b
  3952  0020C6  376A               	rlcf	(??_sprintf+1)& (0+255),f,b
  3953  0020C8  0100               	movlb	0	; () banked
  3954  0020CA  90D8               	bcf	status,0,c
  3955  0020CC  3769               	rlcf	??_sprintf& (0+255),f,b
  3956  0020CE  376A               	rlcf	(??_sprintf+1)& (0+255),f,b
  3957  0020D0  0E01               	movlw	low _dpowers
  3958  0020D2  0100               	movlb	0	; () banked
  3959  0020D4  2569               	addwf	??_sprintf& (0+255),w,b
  3960  0020D6  6EF6               	movwf	tblptrl,c
  3961  0020D8  0E10               	movlw	high _dpowers
  3962  0020DA  216A               	addwfc	(??_sprintf+1)& (0+255),w,b
  3963  0020DC  6EF7               	movwf	tblptrh,c
  3964  0020DE                     	if	1	;There are 3 active tblptr bytes
  3965  0020DE  6AF8               	clrf	tblptru,c
  3966  0020E0  0E00               	movlw	low (__mediumconst shr (0+16))
  3967  0020E2  22F8               	addwfc	tblptru,f,c
  3968  0020E4                     	endif
  3969  0020E4  0009               	tblrd		*+
  3970  0020E6  CFF5 F005          	movff	tablat,___lldiv@divisor
  3971  0020EA  0009               	tblrd		*+
  3972  0020EC  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3973  0020F0  0009               	tblrd		*+
  3974  0020F2  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3975  0020F6  000A               	tblrd		*-
  3976  0020F8  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3977  0020FC  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  3978  002100  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3979  002104  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3980  002108  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3981  00210C  ECB4  F019         	call	___lldiv	;wreg free
  3982  002110  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3983  002114  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3984  002118  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3985  00211C  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3986  002120  0E0A               	movlw	10
  3987  002122  6E12               	movwf	___llmod@divisor,c
  3988  002124  0E00               	movlw	0
  3989  002126  6E13               	movwf	___llmod@divisor+1,c
  3990  002128  0E00               	movlw	0
  3991  00212A  6E14               	movwf	___llmod@divisor+2,c
  3992  00212C  0E00               	movlw	0
  3993  00212E  6E15               	movwf	___llmod@divisor+3,c
  3994  002130  EC2D  F01A         	call	___llmod	;wreg free
  3995  002134  500E               	movf	?___llmod,w,c
  3996  002136  0F30               	addlw	48
  3997  002138  0100               	movlb	0	; () banked
  3998  00213A  6F88               	movwf	sprintf@c& (0+255),b
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;doprnt.c: 1523: }
  4002                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4003  00213C  C060  FFD9         	movff	sprintf@sp,fsr2l
  4004  002140  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4005  002144  C088  FFDF         	movff	sprintf@c,indf2
  4006  002148                     l3222:
  4007                           
  4008                           ; BSR set to: 0
  4009  002148  0100               	movlb	0	; () banked
  4010  00214A  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4011  00214C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4012  00214E                     l3224:
  4013                           
  4014                           ; BSR set to: 0
  4015  00214E  0100               	movlb	0	; () banked
  4016  002150  0783               	decf	sprintf@prec& (0+255),f,b
  4017  002152  A0D8               	btfss	status,0,c
  4018  002154  0784               	decf	(sprintf@prec+1)& (0+255),f,b
  4019  002156  0100               	movlb	0	; () banked
  4020  002158  2983               	incf	sprintf@prec& (0+255),w,b
  4021  00215A  E1AE               	bnz	l3218
  4022  00215C  0100               	movlb	0	; () banked
  4023  00215E  2984               	incf	(sprintf@prec+1)& (0+255),w,b
  4024  002160  A4D8               	btfss	status,2,c
  4025  002162  D7AA               	goto	l3218
  4026  002164                     l3226:
  4027                           
  4028                           ; BSR set to: 0
  4029  002164  C062  FFF6         	movff	sprintf@f,tblptrl
  4030  002168  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4031  00216C  0100               	movlb	0	; () banked
  4032  00216E  4B62               	infsnz	sprintf@f& (0+255),f,b
  4033  002170  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4034  002172                     	if	0	;tblptru may be non-zero
  4035  002172                     	endif
  4036  002172                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4037  002172  0E00               	movlw	low (__mediumconst shr (0+16))
  4038  002174  6EF8               	movwf	tblptru,c
  4039  002176                     	endif
  4040  002176  0008               	tblrd		*
  4041  002178  CFF5 F088          	movff	tablat,sprintf@c
  4042  00217C  0100               	movlb	0	; () banked
  4043  00217E  5188               	movf	sprintf@c& (0+255),w,b
  4044  002180  A4D8               	btfss	status,2,c
  4045  002182  EF65  F008         	goto	l2856
  4046  002186                     l3228:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;doprnt.c: 1538: *sp = 0;
  4050  002186  C060  FFD9         	movff	sprintf@sp,fsr2l
  4051  00218A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4052  00218E  0E00               	movlw	0
  4053  002190  6EDF               	movwf	indf2,c
  4054  002192  0012               	return	
  4055  002194                     __end_of_sprintf:
  4056                           	opt stack 0
  4057                           tblptru	equ	0xFF8
  4058                           tblptrh	equ	0xFF7
  4059                           tblptrl	equ	0xFF6
  4060                           tablat	equ	0xFF5
  4061                           prodh	equ	0xFF4
  4062                           prodl	equ	0xFF3
  4063                           postinc0	equ	0xFEE
  4064                           wreg	equ	0xFE8
  4065                           postdec1	equ	0xFE5
  4066                           plusw1	equ	0xFE3
  4067                           fsr1l	equ	0xFE1
  4068                           indf2	equ	0xFDF
  4069                           postinc2	equ	0xFDE
  4070                           postdec2	equ	0xFDD
  4071                           plusw2	equ	0xFDB
  4072                           fsr2h	equ	0xFDA
  4073                           fsr2l	equ	0xFD9
  4074                           status	equ	0xFD8
  4075                           
  4076 ;; *************** function _scale *****************
  4077 ;; Defined at:
  4078 ;;		line 425 in file "D:\Hella\Compiler\sources\common\doprnt.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  scl             1    wreg     char 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  scl             1   68[COMRAM] char 
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  3   62[COMRAM] char 
  4085 ;; Registers used:
  4086 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4092 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;Total ram usage:        7 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    2
  4099 ;; This function calls:
  4100 ;;		___awdiv
  4101 ;;		___awmod
  4102 ;;		___ftmul
  4103 ;;		___wmul
  4104 ;; This function is called by:
  4105 ;;		_sprintf
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text5
  4110  002194                     __ptext5:
  4111                           	opt stack 0
  4112  002194                     _scale:
  4113                           	opt stack 26
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;incstack = 0
  4117                           ;scale@scl stored from wreg
  4118  002194  6E45               	movwf	scale@scl,c
  4119                           
  4120                           ;doprnt.c: 428: if(scl < 0) {
  4121  002196  AE45               	btfss	scale@scl,7,c
  4122  002198  D10D               	goto	l2488
  4123                           
  4124                           ;doprnt.c: 429: scl = -scl;
  4125  00219A  6C45               	negf	scale@scl,c
  4126                           
  4127                           ;doprnt.c: 430: if(scl>=110)
  4128  00219C  5045               	movf	scale@scl,w,c
  4129  00219E  0A80               	xorlw	128
  4130  0021A0  0F12               	addlw	-238
  4131  0021A2  A0D8               	btfss	status,0,c
  4132  0021A4  D09A               	goto	l2478
  4133                           
  4134                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4135  0021A6  0E00               	movlw	0
  4136  0021A8  6E12               	movwf	___wmul@multiplicand+1,c
  4137  0021AA  0E03               	movlw	3
  4138  0021AC  6E11               	movwf	___wmul@multiplicand,c
  4139  0021AE  0E00               	movlw	0
  4140  0021B0  6E0A               	movwf	___awdiv@divisor+1,c
  4141  0021B2  0E0A               	movlw	10
  4142  0021B4  6E09               	movwf	___awdiv@divisor,c
  4143  0021B6  0E00               	movlw	0
  4144  0021B8  6E04               	movwf	___awmod@divisor+1,c
  4145  0021BA  0E64               	movlw	100
  4146  0021BC  6E03               	movwf	___awmod@divisor,c
  4147  0021BE  5045               	movf	scale@scl,w,c
  4148  0021C0  6E01               	movwf	___awmod@dividend,c
  4149  0021C2  6A02               	clrf	___awmod@dividend+1,c
  4150  0021C4  BE01               	btfsc	___awmod@dividend,7,c
  4151  0021C6  0602               	decf	___awmod@dividend+1,f,c
  4152  0021C8  ECF5  F019         	call	___awmod	;wreg free
  4153  0021CC  C001  F007         	movff	?___awmod,___awdiv@dividend
  4154  0021D0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4155  0021D4  EC72  F019         	call	___awdiv	;wreg free
  4156  0021D8  0E09               	movlw	9
  4157  0021DA  2407               	addwf	?___awdiv,w,c
  4158  0021DC  6E0F               	movwf	___wmul@multiplier,c
  4159  0021DE  0E00               	movlw	0
  4160  0021E0  2008               	addwfc	?___awdiv+1,w,c
  4161  0021E2  6E10               	movwf	___wmul@multiplier+1,c
  4162  0021E4  ECA0  F01B         	call	___wmul	;wreg free
  4163  0021E8  0E50               	movlw	low __npowers_
  4164  0021EA  240F               	addwf	?___wmul,w,c
  4165  0021EC  6EF6               	movwf	tblptrl,c
  4166  0021EE  0E10               	movlw	high __npowers_
  4167  0021F0  2010               	addwfc	?___wmul+1,w,c
  4168  0021F2  6EF7               	movwf	tblptrh,c
  4169  0021F4                     	if	1	;There are 3 active tblptr bytes
  4170  0021F4  6AF8               	clrf	tblptru,c
  4171  0021F6  0E00               	movlw	low (__mediumconst shr (0+16))
  4172  0021F8  22F8               	addwfc	tblptru,f,c
  4173  0021FA                     	endif
  4174  0021FA  0009               	tblrd		*+
  4175  0021FC  CFF5 F033          	movff	tablat,___ftmul@f2
  4176  002200  0009               	tblrd		*+
  4177  002202  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4178  002206  000A               	tblrd		*-
  4179  002208  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4180  00220C  0E00               	movlw	0
  4181  00220E  6E0A               	movwf	___awdiv@divisor+1,c
  4182  002210  0E64               	movlw	100
  4183  002212  6E09               	movwf	___awdiv@divisor,c
  4184  002214  5045               	movf	scale@scl,w,c
  4185  002216  6E07               	movwf	___awdiv@dividend,c
  4186  002218  6A08               	clrf	___awdiv@dividend+1,c
  4187  00221A  BE07               	btfsc	___awdiv@dividend,7,c
  4188  00221C  0608               	decf	___awdiv@dividend+1,f,c
  4189  00221E  EC72  F019         	call	___awdiv	;wreg free
  4190  002222  0E12               	movlw	18
  4191  002224  2407               	addwf	?___awdiv,w,c
  4192  002226  6E0F               	movwf	___wmul@multiplier,c
  4193  002228  0E00               	movlw	0
  4194  00222A  2008               	addwfc	?___awdiv+1,w,c
  4195  00222C  6E10               	movwf	___wmul@multiplier+1,c
  4196  00222E  0E00               	movlw	0
  4197  002230  6E12               	movwf	___wmul@multiplicand+1,c
  4198  002232  0E03               	movlw	3
  4199  002234  6E11               	movwf	___wmul@multiplicand,c
  4200  002236  ECA0  F01B         	call	___wmul	;wreg free
  4201  00223A  0E50               	movlw	low __npowers_
  4202  00223C  240F               	addwf	?___wmul,w,c
  4203  00223E  6EF6               	movwf	tblptrl,c
  4204  002240  0E10               	movlw	high __npowers_
  4205  002242  2010               	addwfc	?___wmul+1,w,c
  4206  002244  6EF7               	movwf	tblptrh,c
  4207  002246                     	if	1	;There are 3 active tblptr bytes
  4208  002246  6AF8               	clrf	tblptru,c
  4209  002248  0E00               	movlw	low (__mediumconst shr (0+16))
  4210  00224A  22F8               	addwfc	tblptru,f,c
  4211  00224C                     	endif
  4212  00224C  0009               	tblrd		*+
  4213  00224E  CFF5 F030          	movff	tablat,___ftmul@f1
  4214  002252  0009               	tblrd		*+
  4215  002254  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4216  002258  000A               	tblrd		*-
  4217  00225A  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4218  00225E  ECB4  F016         	call	___ftmul	;wreg free
  4219  002262  C030  F042         	movff	?___ftmul,_scale$1459
  4220  002266  C031  F043         	movff	?___ftmul+1,_scale$1459+1
  4221  00226A  C032  F044         	movff	?___ftmul+2,_scale$1459+2
  4222                           
  4223                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4224  00226E  C042  F030         	movff	_scale$1459,___ftmul@f1
  4225  002272  C043  F031         	movff	_scale$1459+1,___ftmul@f1+1
  4226  002276  C044  F032         	movff	_scale$1459+2,___ftmul@f1+2
  4227  00227A  0E00               	movlw	0
  4228  00227C  6E12               	movwf	___wmul@multiplicand+1,c
  4229  00227E  0E03               	movlw	3
  4230  002280  6E11               	movwf	___wmul@multiplicand,c
  4231  002282  0E00               	movlw	0
  4232  002284  6E04               	movwf	___awmod@divisor+1,c
  4233  002286  0E0A               	movlw	10
  4234  002288  6E03               	movwf	___awmod@divisor,c
  4235  00228A  5045               	movf	scale@scl,w,c
  4236  00228C  6E01               	movwf	___awmod@dividend,c
  4237  00228E  6A02               	clrf	___awmod@dividend+1,c
  4238  002290  BE01               	btfsc	___awmod@dividend,7,c
  4239  002292  0602               	decf	___awmod@dividend+1,f,c
  4240  002294  ECF5  F019         	call	___awmod	;wreg free
  4241  002298  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4242  00229C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4243  0022A0  ECA0  F01B         	call	___wmul	;wreg free
  4244  0022A4  0E50               	movlw	low __npowers_
  4245  0022A6  240F               	addwf	?___wmul,w,c
  4246  0022A8  6EF6               	movwf	tblptrl,c
  4247  0022AA  0E10               	movlw	high __npowers_
  4248  0022AC  2010               	addwfc	?___wmul+1,w,c
  4249  0022AE  6EF7               	movwf	tblptrh,c
  4250  0022B0                     	if	1	;There are 3 active tblptr bytes
  4251  0022B0  6AF8               	clrf	tblptru,c
  4252  0022B2  0E00               	movlw	low (__mediumconst shr (0+16))
  4253  0022B4  22F8               	addwfc	tblptru,f,c
  4254  0022B6                     	endif
  4255  0022B6  0009               	tblrd		*+
  4256  0022B8  CFF5 F033          	movff	tablat,___ftmul@f2
  4257  0022BC  0009               	tblrd		*+
  4258  0022BE  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4259  0022C2  000A               	tblrd		*-
  4260  0022C4  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4261  0022C8  ECB4  F016         	call	___ftmul	;wreg free
  4262  0022CC  C030  F03F         	movff	?___ftmul,?_scale
  4263  0022D0  C031  F040         	movff	?___ftmul+1,?_scale+1
  4264  0022D4  C032  F041         	movff	?___ftmul+2,?_scale+2
  4265  0022D8  0012               	return	
  4266  0022DA                     l2478:
  4267                           
  4268                           ;doprnt.c: 432: else if(scl > 10)
  4269  0022DA  5045               	movf	scale@scl,w,c
  4270  0022DC  0A80               	xorlw	128
  4271  0022DE  0F75               	addlw	-139
  4272  0022E0  A0D8               	btfss	status,0,c
  4273  0022E2  D053               	goto	l2484
  4274                           
  4275                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4276  0022E4  0E00               	movlw	0
  4277  0022E6  6E0A               	movwf	___awdiv@divisor+1,c
  4278  0022E8  0E0A               	movlw	10
  4279  0022EA  6E09               	movwf	___awdiv@divisor,c
  4280  0022EC  5045               	movf	scale@scl,w,c
  4281  0022EE  6E07               	movwf	___awdiv@dividend,c
  4282  0022F0  6A08               	clrf	___awdiv@dividend+1,c
  4283  0022F2  BE07               	btfsc	___awdiv@dividend,7,c
  4284  0022F4  0608               	decf	___awdiv@dividend+1,f,c
  4285  0022F6  EC72  F019         	call	___awdiv	;wreg free
  4286  0022FA  0E09               	movlw	9
  4287  0022FC  2407               	addwf	?___awdiv,w,c
  4288  0022FE  6E0F               	movwf	___wmul@multiplier,c
  4289  002300  0E00               	movlw	0
  4290  002302  2008               	addwfc	?___awdiv+1,w,c
  4291  002304  6E10               	movwf	___wmul@multiplier+1,c
  4292  002306  0E00               	movlw	0
  4293  002308  6E12               	movwf	___wmul@multiplicand+1,c
  4294  00230A  0E03               	movlw	3
  4295  00230C  6E11               	movwf	___wmul@multiplicand,c
  4296  00230E  ECA0  F01B         	call	___wmul	;wreg free
  4297  002312  0E50               	movlw	low __npowers_
  4298  002314  240F               	addwf	?___wmul,w,c
  4299  002316  6EF6               	movwf	tblptrl,c
  4300  002318  0E10               	movlw	high __npowers_
  4301  00231A  2010               	addwfc	?___wmul+1,w,c
  4302  00231C  6EF7               	movwf	tblptrh,c
  4303  00231E                     	if	1	;There are 3 active tblptr bytes
  4304  00231E  6AF8               	clrf	tblptru,c
  4305  002320  0E00               	movlw	low (__mediumconst shr (0+16))
  4306  002322  22F8               	addwfc	tblptru,f,c
  4307  002324                     	endif
  4308  002324  0009               	tblrd		*+
  4309  002326  CFF5 F030          	movff	tablat,___ftmul@f1
  4310  00232A  0009               	tblrd		*+
  4311  00232C  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4312  002330  000A               	tblrd		*-
  4313  002332  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4314  002336  0E00               	movlw	0
  4315  002338  6E12               	movwf	___wmul@multiplicand+1,c
  4316  00233A  0E03               	movlw	3
  4317  00233C  6E11               	movwf	___wmul@multiplicand,c
  4318  00233E  0E00               	movlw	0
  4319  002340  6E04               	movwf	___awmod@divisor+1,c
  4320  002342  0E0A               	movlw	10
  4321  002344  6E03               	movwf	___awmod@divisor,c
  4322  002346  5045               	movf	scale@scl,w,c
  4323  002348  6E01               	movwf	___awmod@dividend,c
  4324  00234A  6A02               	clrf	___awmod@dividend+1,c
  4325  00234C  BE01               	btfsc	___awmod@dividend,7,c
  4326  00234E  0602               	decf	___awmod@dividend+1,f,c
  4327  002350  ECF5  F019         	call	___awmod	;wreg free
  4328  002354  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4329  002358  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4330  00235C  ECA0  F01B         	call	___wmul	;wreg free
  4331  002360  0E50               	movlw	low __npowers_
  4332  002362  240F               	addwf	?___wmul,w,c
  4333  002364  6EF6               	movwf	tblptrl,c
  4334  002366  0E10               	movlw	high __npowers_
  4335  002368  2010               	addwfc	?___wmul+1,w,c
  4336  00236A  6EF7               	movwf	tblptrh,c
  4337  00236C                     	if	1	;There are 3 active tblptr bytes
  4338  00236C  6AF8               	clrf	tblptru,c
  4339  00236E  0E00               	movlw	low (__mediumconst shr (0+16))
  4340  002370  22F8               	addwfc	tblptru,f,c
  4341  002372                     	endif
  4342  002372  0009               	tblrd		*+
  4343  002374  CFF5 F033          	movff	tablat,___ftmul@f2
  4344  002378  0009               	tblrd		*+
  4345  00237A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4346  00237E  000A               	tblrd		*-
  4347  002380  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4348  002384  ECB4  F016         	call	___ftmul	;wreg free
  4349  002388  D7A1               	goto	L4
  4350  00238A                     l2484:
  4351                           
  4352                           ;doprnt.c: 434: return _npowers_[scl];
  4353  00238A  5045               	movf	scale@scl,w,c
  4354  00238C  0D03               	mullw	3
  4355  00238E  0E50               	movlw	low __npowers_
  4356  002390  24F3               	addwf	prodl,w,c
  4357  002392  6EF6               	movwf	tblptrl,c
  4358  002394  0E10               	movlw	high __npowers_
  4359  002396  20F4               	addwfc	prodh,w,c
  4360  002398  6EF7               	movwf	tblptrh,c
  4361  00239A                     	if	1	;There are 3 active tblptr bytes
  4362  00239A  6AF8               	clrf	tblptru,c
  4363  00239C  0E00               	movlw	low (__mediumconst shr (0+16))
  4364  00239E  22F8               	addwfc	tblptru,f,c
  4365  0023A0                     	endif
  4366  0023A0  0009               	tblrd		*+
  4367  0023A2  CFF5 F03F          	movff	tablat,?_scale
  4368  0023A6  0009               	tblrd		*+
  4369  0023A8  CFF5 F040          	movff	tablat,?_scale+1
  4370  0023AC  000A               	tblrd		*-
  4371  0023AE  CFF5 F041          	movff	tablat,?_scale+2
  4372  0023B2  0012               	return	
  4373  0023B4                     l2488:
  4374                           
  4375                           ;doprnt.c: 435: }
  4376                           ;doprnt.c: 436: if(scl>=110)
  4377  0023B4  5045               	movf	scale@scl,w,c
  4378  0023B6  0A80               	xorlw	128
  4379  0023B8  0F12               	addlw	-238
  4380  0023BA  A0D8               	btfss	status,0,c
  4381  0023BC  D09A               	goto	l2496
  4382                           
  4383                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4384  0023BE  0E00               	movlw	0
  4385  0023C0  6E12               	movwf	___wmul@multiplicand+1,c
  4386  0023C2  0E03               	movlw	3
  4387  0023C4  6E11               	movwf	___wmul@multiplicand,c
  4388  0023C6  0E00               	movlw	0
  4389  0023C8  6E0A               	movwf	___awdiv@divisor+1,c
  4390  0023CA  0E0A               	movlw	10
  4391  0023CC  6E09               	movwf	___awdiv@divisor,c
  4392  0023CE  0E00               	movlw	0
  4393  0023D0  6E04               	movwf	___awmod@divisor+1,c
  4394  0023D2  0E64               	movlw	100
  4395  0023D4  6E03               	movwf	___awmod@divisor,c
  4396  0023D6  5045               	movf	scale@scl,w,c
  4397  0023D8  6E01               	movwf	___awmod@dividend,c
  4398  0023DA  6A02               	clrf	___awmod@dividend+1,c
  4399  0023DC  BE01               	btfsc	___awmod@dividend,7,c
  4400  0023DE  0602               	decf	___awmod@dividend+1,f,c
  4401  0023E0  ECF5  F019         	call	___awmod	;wreg free
  4402  0023E4  C001  F007         	movff	?___awmod,___awdiv@dividend
  4403  0023E8  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4404  0023EC  EC72  F019         	call	___awdiv	;wreg free
  4405  0023F0  0E09               	movlw	9
  4406  0023F2  2407               	addwf	?___awdiv,w,c
  4407  0023F4  6E0F               	movwf	___wmul@multiplier,c
  4408  0023F6  0E00               	movlw	0
  4409  0023F8  2008               	addwfc	?___awdiv+1,w,c
  4410  0023FA  6E10               	movwf	___wmul@multiplier+1,c
  4411  0023FC  ECA0  F01B         	call	___wmul	;wreg free
  4412  002400  0E29               	movlw	low __powers_
  4413  002402  240F               	addwf	?___wmul,w,c
  4414  002404  6EF6               	movwf	tblptrl,c
  4415  002406  0E10               	movlw	high __powers_
  4416  002408  2010               	addwfc	?___wmul+1,w,c
  4417  00240A  6EF7               	movwf	tblptrh,c
  4418  00240C                     	if	1	;There are 3 active tblptr bytes
  4419  00240C  6AF8               	clrf	tblptru,c
  4420  00240E  0E00               	movlw	low (__mediumconst shr (0+16))
  4421  002410  22F8               	addwfc	tblptru,f,c
  4422  002412                     	endif
  4423  002412  0009               	tblrd		*+
  4424  002414  CFF5 F033          	movff	tablat,___ftmul@f2
  4425  002418  0009               	tblrd		*+
  4426  00241A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4427  00241E  000A               	tblrd		*-
  4428  002420  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4429  002424  0E00               	movlw	0
  4430  002426  6E0A               	movwf	___awdiv@divisor+1,c
  4431  002428  0E64               	movlw	100
  4432  00242A  6E09               	movwf	___awdiv@divisor,c
  4433  00242C  5045               	movf	scale@scl,w,c
  4434  00242E  6E07               	movwf	___awdiv@dividend,c
  4435  002430  6A08               	clrf	___awdiv@dividend+1,c
  4436  002432  BE07               	btfsc	___awdiv@dividend,7,c
  4437  002434  0608               	decf	___awdiv@dividend+1,f,c
  4438  002436  EC72  F019         	call	___awdiv	;wreg free
  4439  00243A  0E12               	movlw	18
  4440  00243C  2407               	addwf	?___awdiv,w,c
  4441  00243E  6E0F               	movwf	___wmul@multiplier,c
  4442  002440  0E00               	movlw	0
  4443  002442  2008               	addwfc	?___awdiv+1,w,c
  4444  002444  6E10               	movwf	___wmul@multiplier+1,c
  4445  002446  0E00               	movlw	0
  4446  002448  6E12               	movwf	___wmul@multiplicand+1,c
  4447  00244A  0E03               	movlw	3
  4448  00244C  6E11               	movwf	___wmul@multiplicand,c
  4449  00244E  ECA0  F01B         	call	___wmul	;wreg free
  4450  002452  0E29               	movlw	low __powers_
  4451  002454  240F               	addwf	?___wmul,w,c
  4452  002456  6EF6               	movwf	tblptrl,c
  4453  002458  0E10               	movlw	high __powers_
  4454  00245A  2010               	addwfc	?___wmul+1,w,c
  4455  00245C  6EF7               	movwf	tblptrh,c
  4456  00245E                     	if	1	;There are 3 active tblptr bytes
  4457  00245E  6AF8               	clrf	tblptru,c
  4458  002460  0E00               	movlw	low (__mediumconst shr (0+16))
  4459  002462  22F8               	addwfc	tblptru,f,c
  4460  002464                     	endif
  4461  002464  0009               	tblrd		*+
  4462  002466  CFF5 F030          	movff	tablat,___ftmul@f1
  4463  00246A  0009               	tblrd		*+
  4464  00246C  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4465  002470  000A               	tblrd		*-
  4466  002472  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4467  002476  ECB4  F016         	call	___ftmul	;wreg free
  4468  00247A  C030  F042         	movff	?___ftmul,_scale$1459
  4469  00247E  C031  F043         	movff	?___ftmul+1,_scale$1459+1
  4470  002482  C032  F044         	movff	?___ftmul+2,_scale$1459+2
  4471                           
  4472                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4473  002486  C042  F030         	movff	_scale$1459,___ftmul@f1
  4474  00248A  C043  F031         	movff	_scale$1459+1,___ftmul@f1+1
  4475  00248E  C044  F032         	movff	_scale$1459+2,___ftmul@f1+2
  4476  002492  0E00               	movlw	0
  4477  002494  6E12               	movwf	___wmul@multiplicand+1,c
  4478  002496  0E03               	movlw	3
  4479  002498  6E11               	movwf	___wmul@multiplicand,c
  4480  00249A  0E00               	movlw	0
  4481  00249C  6E04               	movwf	___awmod@divisor+1,c
  4482  00249E  0E0A               	movlw	10
  4483  0024A0  6E03               	movwf	___awmod@divisor,c
  4484  0024A2  5045               	movf	scale@scl,w,c
  4485  0024A4  6E01               	movwf	___awmod@dividend,c
  4486  0024A6  6A02               	clrf	___awmod@dividend+1,c
  4487  0024A8  BE01               	btfsc	___awmod@dividend,7,c
  4488  0024AA  0602               	decf	___awmod@dividend+1,f,c
  4489  0024AC  ECF5  F019         	call	___awmod	;wreg free
  4490  0024B0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4491  0024B4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4492  0024B8  ECA0  F01B         	call	___wmul	;wreg free
  4493  0024BC  0E29               	movlw	low __powers_
  4494  0024BE  240F               	addwf	?___wmul,w,c
  4495  0024C0  6EF6               	movwf	tblptrl,c
  4496  0024C2  0E10               	movlw	high __powers_
  4497  0024C4  2010               	addwfc	?___wmul+1,w,c
  4498  0024C6  6EF7               	movwf	tblptrh,c
  4499  0024C8                     	if	1	;There are 3 active tblptr bytes
  4500  0024C8  6AF8               	clrf	tblptru,c
  4501  0024CA  0E00               	movlw	low (__mediumconst shr (0+16))
  4502  0024CC  22F8               	addwfc	tblptru,f,c
  4503  0024CE                     	endif
  4504  0024CE  0009               	tblrd		*+
  4505  0024D0  CFF5 F033          	movff	tablat,___ftmul@f2
  4506  0024D4  0009               	tblrd		*+
  4507  0024D6  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4508  0024DA  000A               	tblrd		*-
  4509  0024DC  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4510  0024E0  ECB4  F016         	call	___ftmul	;wreg free
  4511  0024E4  C030  F03F         	movff	?___ftmul,?_scale
  4512  0024E8  C031  F040         	movff	?___ftmul+1,?_scale+1
  4513  0024EC  C032  F041         	movff	?___ftmul+2,?_scale+2
  4514  0024F0  0012               	return	
  4515  0024F2                     l2496:
  4516                           
  4517                           ;doprnt.c: 438: else if(scl > 10)
  4518  0024F2  5045               	movf	scale@scl,w,c
  4519  0024F4  0A80               	xorlw	128
  4520  0024F6  0F75               	addlw	-139
  4521  0024F8  A0D8               	btfss	status,0,c
  4522  0024FA  D053               	goto	l2502
  4523                           
  4524                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4525  0024FC  0E00               	movlw	0
  4526  0024FE  6E0A               	movwf	___awdiv@divisor+1,c
  4527  002500  0E0A               	movlw	10
  4528  002502  6E09               	movwf	___awdiv@divisor,c
  4529  002504  5045               	movf	scale@scl,w,c
  4530  002506  6E07               	movwf	___awdiv@dividend,c
  4531  002508  6A08               	clrf	___awdiv@dividend+1,c
  4532  00250A  BE07               	btfsc	___awdiv@dividend,7,c
  4533  00250C  0608               	decf	___awdiv@dividend+1,f,c
  4534  00250E  EC72  F019         	call	___awdiv	;wreg free
  4535  002512  0E09               	movlw	9
  4536  002514  2407               	addwf	?___awdiv,w,c
  4537  002516  6E0F               	movwf	___wmul@multiplier,c
  4538  002518  0E00               	movlw	0
  4539  00251A  2008               	addwfc	?___awdiv+1,w,c
  4540  00251C  6E10               	movwf	___wmul@multiplier+1,c
  4541  00251E  0E00               	movlw	0
  4542  002520  6E12               	movwf	___wmul@multiplicand+1,c
  4543  002522  0E03               	movlw	3
  4544  002524  6E11               	movwf	___wmul@multiplicand,c
  4545  002526  ECA0  F01B         	call	___wmul	;wreg free
  4546  00252A  0E29               	movlw	low __powers_
  4547  00252C  240F               	addwf	?___wmul,w,c
  4548  00252E  6EF6               	movwf	tblptrl,c
  4549  002530  0E10               	movlw	high __powers_
  4550  002532  2010               	addwfc	?___wmul+1,w,c
  4551  002534  6EF7               	movwf	tblptrh,c
  4552  002536                     	if	1	;There are 3 active tblptr bytes
  4553  002536  6AF8               	clrf	tblptru,c
  4554  002538  0E00               	movlw	low (__mediumconst shr (0+16))
  4555  00253A  22F8               	addwfc	tblptru,f,c
  4556  00253C                     	endif
  4557  00253C  0009               	tblrd		*+
  4558  00253E  CFF5 F030          	movff	tablat,___ftmul@f1
  4559  002542  0009               	tblrd		*+
  4560  002544  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4561  002548  000A               	tblrd		*-
  4562  00254A  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4563  00254E  0E00               	movlw	0
  4564  002550  6E12               	movwf	___wmul@multiplicand+1,c
  4565  002552  0E03               	movlw	3
  4566  002554  6E11               	movwf	___wmul@multiplicand,c
  4567  002556  0E00               	movlw	0
  4568  002558  6E04               	movwf	___awmod@divisor+1,c
  4569  00255A  0E0A               	movlw	10
  4570  00255C  6E03               	movwf	___awmod@divisor,c
  4571  00255E  5045               	movf	scale@scl,w,c
  4572  002560  6E01               	movwf	___awmod@dividend,c
  4573  002562  6A02               	clrf	___awmod@dividend+1,c
  4574  002564  BE01               	btfsc	___awmod@dividend,7,c
  4575  002566  0602               	decf	___awmod@dividend+1,f,c
  4576  002568  ECF5  F019         	call	___awmod	;wreg free
  4577  00256C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4578  002570  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4579  002574  ECA0  F01B         	call	___wmul	;wreg free
  4580  002578  0E29               	movlw	low __powers_
  4581  00257A  240F               	addwf	?___wmul,w,c
  4582  00257C  6EF6               	movwf	tblptrl,c
  4583  00257E  0E10               	movlw	high __powers_
  4584  002580  2010               	addwfc	?___wmul+1,w,c
  4585  002582  6EF7               	movwf	tblptrh,c
  4586  002584                     	if	1	;There are 3 active tblptr bytes
  4587  002584  6AF8               	clrf	tblptru,c
  4588  002586  0E00               	movlw	low (__mediumconst shr (0+16))
  4589  002588  22F8               	addwfc	tblptru,f,c
  4590  00258A                     	endif
  4591  00258A  0009               	tblrd		*+
  4592  00258C  CFF5 F033          	movff	tablat,___ftmul@f2
  4593  002590  0009               	tblrd		*+
  4594  002592  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4595  002596  000A               	tblrd		*-
  4596  002598  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4597  00259C  ECB4  F016         	call	___ftmul	;wreg free
  4598  0025A0  D7A1               	goto	L5
  4599  0025A2                     l2502:
  4600                           
  4601                           ;doprnt.c: 440: return _powers_[scl];
  4602  0025A2  5045               	movf	scale@scl,w,c
  4603  0025A4  0D03               	mullw	3
  4604  0025A6  0E29               	movlw	low __powers_
  4605  0025A8  24F3               	addwf	prodl,w,c
  4606  0025AA  6EF6               	movwf	tblptrl,c
  4607  0025AC  0E10               	movlw	high __powers_
  4608  0025AE  20F4               	addwfc	prodh,w,c
  4609  0025B0  6EF7               	movwf	tblptrh,c
  4610  0025B2                     	if	1	;There are 3 active tblptr bytes
  4611  0025B2  6AF8               	clrf	tblptru,c
  4612  0025B4  0E00               	movlw	low (__mediumconst shr (0+16))
  4613  0025B6  22F8               	addwfc	tblptru,f,c
  4614  0025B8                     	endif
  4615  0025B8  0009               	tblrd		*+
  4616  0025BA  CFF5 F03F          	movff	tablat,?_scale
  4617  0025BE  0009               	tblrd		*+
  4618  0025C0  CFF5 F040          	movff	tablat,?_scale+1
  4619  0025C4  000A               	tblrd		*-
  4620  0025C6  CFF5 F041          	movff	tablat,?_scale+2
  4621  0025CA  0012               	return	
  4622  0025CC                     __end_of_scale:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           postinc0	equ	0xFEE
  4631                           wreg	equ	0xFE8
  4632                           postdec1	equ	0xFE5
  4633                           plusw1	equ	0xFE3
  4634                           fsr1l	equ	0xFE1
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           plusw2	equ	0xFDB
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _isdigit *****************
  4644 ;; Defined at:
  4645 ;;		line 8 in file "D:\Hella\Compiler\sources\common\isdigit.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  c               1    wreg     unsigned char 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  c               1    2[COMRAM] unsigned char 
  4650 ;; Return value:  Size  Location     Type
  4651 ;;		None               void
  4652 ;; Registers used:
  4653 ;;		wreg, status,2, status,0
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;Total ram usage:        3 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; This function calls:
  4666 ;;		Nothing
  4667 ;; This function is called by:
  4668 ;;		_sprintf
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           	psect	text6
  4673  0037AE                     __ptext6:
  4674                           	opt stack 0
  4675  0037AE                     _isdigit:
  4676                           	opt stack 28
  4677                           
  4678                           ;incstack = 0
  4679                           ;isdigit@c stored from wreg
  4680  0037AE  6E03               	movwf	isdigit@c,c
  4681  0037B0  0E00               	movlw	0
  4682  0037B2  6E02               	movwf	_isdigit$1107,c
  4683  0037B4  0E3A               	movlw	58
  4684  0037B6  6003               	cpfslt	isdigit@c,c
  4685  0037B8  D005               	goto	l2514
  4686  0037BA  0E2F               	movlw	47
  4687  0037BC  6403               	cpfsgt	isdigit@c,c
  4688  0037BE  D002               	goto	l2514
  4689  0037C0  0E01               	movlw	1
  4690  0037C2  6E02               	movwf	_isdigit$1107,c
  4691  0037C4                     l2514:
  4692  0037C4  C002  F001         	movff	_isdigit$1107,??_isdigit
  4693  0037C8  3001               	rrcf	??_isdigit,w,c
  4694  0037CA  0012               	return	
  4695  0037CC                     __end_of_isdigit:
  4696                           	opt stack 0
  4697                           tblptru	equ	0xFF8
  4698                           tblptrh	equ	0xFF7
  4699                           tblptrl	equ	0xFF6
  4700                           tablat	equ	0xFF5
  4701                           prodh	equ	0xFF4
  4702                           prodl	equ	0xFF3
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           postdec1	equ	0xFE5
  4706                           plusw1	equ	0xFE3
  4707                           fsr1l	equ	0xFE1
  4708                           indf2	equ	0xFDF
  4709                           postinc2	equ	0xFDE
  4710                           postdec2	equ	0xFDD
  4711                           plusw2	equ	0xFDB
  4712                           fsr2h	equ	0xFDA
  4713                           fsr2l	equ	0xFD9
  4714                           status	equ	0xFD8
  4715                           
  4716 ;; *************** function _fround *****************
  4717 ;; Defined at:
  4718 ;;		line 409 in file "D:\Hella\Compiler\sources\common\doprnt.c"
  4719 ;; Parameters:    Size  Location     Type
  4720 ;;  prec            1    wreg     unsigned char 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  prec            1   71[COMRAM] unsigned char 
  4723 ;; Return value:  Size  Location     Type
  4724 ;;                  3   62[COMRAM] unsigned char 
  4725 ;; Registers used:
  4726 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4732 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;Total ram usage:       10 bytes
  4737 ;; Hardware stack levels used:    1
  4738 ;; Hardware stack levels required when called:    2
  4739 ;; This function calls:
  4740 ;;		___awdiv
  4741 ;;		___awmod
  4742 ;;		___ftmul
  4743 ;;		___wmul
  4744 ;; This function is called by:
  4745 ;;		_sprintf
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text7
  4750  0025CC                     __ptext7:
  4751                           	opt stack 0
  4752  0025CC                     _fround:
  4753                           	opt stack 26
  4754                           
  4755                           ;incstack = 0
  4756                           ;fround@prec stored from wreg
  4757  0025CC  6E48               	movwf	fround@prec,c
  4758                           
  4759                           ;doprnt.c: 413: if(prec>=110)
  4760  0025CE  0E6D               	movlw	109
  4761  0025D0  6448               	cpfsgt	fround@prec,c
  4762  0025D2  D0A8               	goto	l2456
  4763                           
  4764                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4765  0025D4  0E00               	movlw	0
  4766  0025D6  6E12               	movwf	___wmul@multiplicand+1,c
  4767  0025D8  0E03               	movlw	3
  4768  0025DA  6E11               	movwf	___wmul@multiplicand,c
  4769  0025DC  0E00               	movlw	0
  4770  0025DE  6E0A               	movwf	___awdiv@divisor+1,c
  4771  0025E0  0E0A               	movlw	10
  4772  0025E2  6E09               	movwf	___awdiv@divisor,c
  4773  0025E4  0E00               	movlw	0
  4774  0025E6  6E04               	movwf	___awmod@divisor+1,c
  4775  0025E8  0E64               	movlw	100
  4776  0025EA  6E03               	movwf	___awmod@divisor,c
  4777  0025EC  C048  F001         	movff	fround@prec,___awmod@dividend
  4778  0025F0  6A02               	clrf	___awmod@dividend+1,c
  4779  0025F2  ECF5  F019         	call	___awmod	;wreg free
  4780  0025F6  C001  F007         	movff	?___awmod,___awdiv@dividend
  4781  0025FA  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4782  0025FE  EC72  F019         	call	___awdiv	;wreg free
  4783  002602  0E09               	movlw	9
  4784  002604  2407               	addwf	?___awdiv,w,c
  4785  002606  6E0F               	movwf	___wmul@multiplier,c
  4786  002608  0E00               	movlw	0
  4787  00260A  2008               	addwfc	?___awdiv+1,w,c
  4788  00260C  6E10               	movwf	___wmul@multiplier+1,c
  4789  00260E  ECA0  F01B         	call	___wmul	;wreg free
  4790  002612  0E50               	movlw	low __npowers_
  4791  002614  240F               	addwf	?___wmul,w,c
  4792  002616  6EF6               	movwf	tblptrl,c
  4793  002618  0E10               	movlw	high __npowers_
  4794  00261A  2010               	addwfc	?___wmul+1,w,c
  4795  00261C  6EF7               	movwf	tblptrh,c
  4796  00261E                     	if	1	;There are 3 active tblptr bytes
  4797  00261E  6AF8               	clrf	tblptru,c
  4798  002620  0E00               	movlw	low (__mediumconst shr (0+16))
  4799  002622  22F8               	addwfc	tblptru,f,c
  4800  002624                     	endif
  4801  002624  0009               	tblrd		*+
  4802  002626  CFF5 F033          	movff	tablat,___ftmul@f2
  4803  00262A  0009               	tblrd		*+
  4804  00262C  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4805  002630  000A               	tblrd		*-
  4806  002632  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4807  002636  0E00               	movlw	0
  4808  002638  6E0A               	movwf	___awdiv@divisor+1,c
  4809  00263A  0E64               	movlw	100
  4810  00263C  6E09               	movwf	___awdiv@divisor,c
  4811  00263E  C048  F007         	movff	fround@prec,___awdiv@dividend
  4812  002642  6A08               	clrf	___awdiv@dividend+1,c
  4813  002644  EC72  F019         	call	___awdiv	;wreg free
  4814  002648  0E12               	movlw	18
  4815  00264A  2407               	addwf	?___awdiv,w,c
  4816  00264C  6E0F               	movwf	___wmul@multiplier,c
  4817  00264E  0E00               	movlw	0
  4818  002650  2008               	addwfc	?___awdiv+1,w,c
  4819  002652  6E10               	movwf	___wmul@multiplier+1,c
  4820  002654  0E00               	movlw	0
  4821  002656  6E12               	movwf	___wmul@multiplicand+1,c
  4822  002658  0E03               	movlw	3
  4823  00265A  6E11               	movwf	___wmul@multiplicand,c
  4824  00265C  ECA0  F01B         	call	___wmul	;wreg free
  4825  002660  0E50               	movlw	low __npowers_
  4826  002662  240F               	addwf	?___wmul,w,c
  4827  002664  6EF6               	movwf	tblptrl,c
  4828  002666  0E10               	movlw	high __npowers_
  4829  002668  2010               	addwfc	?___wmul+1,w,c
  4830  00266A  6EF7               	movwf	tblptrh,c
  4831  00266C                     	if	1	;There are 3 active tblptr bytes
  4832  00266C  6AF8               	clrf	tblptru,c
  4833  00266E  0E00               	movlw	low (__mediumconst shr (0+16))
  4834  002670  22F8               	addwfc	tblptru,f,c
  4835  002672                     	endif
  4836  002672  0009               	tblrd		*+
  4837  002674  CFF5 F030          	movff	tablat,___ftmul@f1
  4838  002678  0009               	tblrd		*+
  4839  00267A  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4840  00267E  000A               	tblrd		*-
  4841  002680  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4842  002684  ECB4  F016         	call	___ftmul	;wreg free
  4843  002688  C030  F045         	movff	?___ftmul,_fround$1457
  4844  00268C  C031  F046         	movff	?___ftmul+1,_fround$1457+1
  4845  002690  C032  F047         	movff	?___ftmul+2,_fround$1457+2
  4846                           
  4847                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4848  002694  0E00               	movlw	0
  4849  002696  6E12               	movwf	___wmul@multiplicand+1,c
  4850  002698  0E03               	movlw	3
  4851  00269A  6E11               	movwf	___wmul@multiplicand,c
  4852  00269C  0E00               	movlw	0
  4853  00269E  6E04               	movwf	___awmod@divisor+1,c
  4854  0026A0  0E0A               	movlw	10
  4855  0026A2  6E03               	movwf	___awmod@divisor,c
  4856  0026A4  C048  F001         	movff	fround@prec,___awmod@dividend
  4857  0026A8  6A02               	clrf	___awmod@dividend+1,c
  4858  0026AA  ECF5  F019         	call	___awmod	;wreg free
  4859  0026AE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4860  0026B2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4861  0026B6  ECA0  F01B         	call	___wmul	;wreg free
  4862  0026BA  0E50               	movlw	low __npowers_
  4863  0026BC  240F               	addwf	?___wmul,w,c
  4864  0026BE  6EF6               	movwf	tblptrl,c
  4865  0026C0  0E10               	movlw	high __npowers_
  4866  0026C2  2010               	addwfc	?___wmul+1,w,c
  4867  0026C4  6EF7               	movwf	tblptrh,c
  4868  0026C6                     	if	1	;There are 3 active tblptr bytes
  4869  0026C6  6AF8               	clrf	tblptru,c
  4870  0026C8  0E00               	movlw	low (__mediumconst shr (0+16))
  4871  0026CA  22F8               	addwfc	tblptru,f,c
  4872  0026CC                     	endif
  4873  0026CC  0009               	tblrd		*+
  4874  0026CE  CFF5 F033          	movff	tablat,___ftmul@f2
  4875  0026D2  0009               	tblrd		*+
  4876  0026D4  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4877  0026D8  000A               	tblrd		*-
  4878  0026DA  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4879  0026DE  C045  F030         	movff	_fround$1457,___ftmul@f1
  4880  0026E2  C046  F031         	movff	_fround$1457+1,___ftmul@f1+1
  4881  0026E6  C047  F032         	movff	_fround$1457+2,___ftmul@f1+2
  4882  0026EA  ECB4  F016         	call	___ftmul	;wreg free
  4883  0026EE  C030  F042         	movff	?___ftmul,_fround$1458
  4884  0026F2  C031  F043         	movff	?___ftmul+1,_fround$1458+1
  4885  0026F6  C032  F044         	movff	?___ftmul+2,_fround$1458+2
  4886                           
  4887                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4888  0026FA  C042  F030         	movff	_fround$1458,___ftmul@f1
  4889  0026FE  C043  F031         	movff	_fround$1458+1,___ftmul@f1+1
  4890  002702  C044  F032         	movff	_fround$1458+2,___ftmul@f1+2
  4891  002706  0E00               	movlw	0
  4892  002708  6E33               	movwf	___ftmul@f2,c
  4893  00270A  0E00               	movlw	0
  4894  00270C  6E34               	movwf	___ftmul@f2+1,c
  4895  00270E  0E3F               	movlw	63
  4896  002710  6E35               	movwf	___ftmul@f2+2,c
  4897  002712  ECB4  F016         	call	___ftmul	;wreg free
  4898  002716  C030  F03F         	movff	?___ftmul,?_fround
  4899  00271A  C031  F040         	movff	?___ftmul+1,?_fround+1
  4900  00271E  C032  F041         	movff	?___ftmul+2,?_fround+2
  4901  002722  0012               	return	
  4902  002724                     l2456:
  4903                           
  4904                           ;doprnt.c: 415: else if(prec > 10)
  4905  002724  0E0A               	movlw	10
  4906  002726  6448               	cpfsgt	fround@prec,c
  4907  002728  D063               	goto	l2464
  4908                           
  4909                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4910  00272A  0E00               	movlw	0
  4911  00272C  6E12               	movwf	___wmul@multiplicand+1,c
  4912  00272E  0E03               	movlw	3
  4913  002730  6E11               	movwf	___wmul@multiplicand,c
  4914  002732  0E00               	movlw	0
  4915  002734  6E04               	movwf	___awmod@divisor+1,c
  4916  002736  0E0A               	movlw	10
  4917  002738  6E03               	movwf	___awmod@divisor,c
  4918  00273A  C048  F001         	movff	fround@prec,___awmod@dividend
  4919  00273E  6A02               	clrf	___awmod@dividend+1,c
  4920  002740  ECF5  F019         	call	___awmod	;wreg free
  4921  002744  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4922  002748  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4923  00274C  ECA0  F01B         	call	___wmul	;wreg free
  4924  002750  0E50               	movlw	low __npowers_
  4925  002752  240F               	addwf	?___wmul,w,c
  4926  002754  6EF6               	movwf	tblptrl,c
  4927  002756  0E10               	movlw	high __npowers_
  4928  002758  2010               	addwfc	?___wmul+1,w,c
  4929  00275A  6EF7               	movwf	tblptrh,c
  4930  00275C                     	if	1	;There are 3 active tblptr bytes
  4931  00275C  6AF8               	clrf	tblptru,c
  4932  00275E  0E00               	movlw	low (__mediumconst shr (0+16))
  4933  002760  22F8               	addwfc	tblptru,f,c
  4934  002762                     	endif
  4935  002762  0009               	tblrd		*+
  4936  002764  CFF5 F033          	movff	tablat,___ftmul@f2
  4937  002768  0009               	tblrd		*+
  4938  00276A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4939  00276E  000A               	tblrd		*-
  4940  002770  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4941  002774  0E00               	movlw	0
  4942  002776  6E0A               	movwf	___awdiv@divisor+1,c
  4943  002778  0E0A               	movlw	10
  4944  00277A  6E09               	movwf	___awdiv@divisor,c
  4945  00277C  C048  F007         	movff	fround@prec,___awdiv@dividend
  4946  002780  6A08               	clrf	___awdiv@dividend+1,c
  4947  002782  EC72  F019         	call	___awdiv	;wreg free
  4948  002786  0E09               	movlw	9
  4949  002788  2407               	addwf	?___awdiv,w,c
  4950  00278A  6E0F               	movwf	___wmul@multiplier,c
  4951  00278C  0E00               	movlw	0
  4952  00278E  2008               	addwfc	?___awdiv+1,w,c
  4953  002790  6E10               	movwf	___wmul@multiplier+1,c
  4954  002792  0E00               	movlw	0
  4955  002794  6E12               	movwf	___wmul@multiplicand+1,c
  4956  002796  0E03               	movlw	3
  4957  002798  6E11               	movwf	___wmul@multiplicand,c
  4958  00279A  ECA0  F01B         	call	___wmul	;wreg free
  4959  00279E  0E50               	movlw	low __npowers_
  4960  0027A0  240F               	addwf	?___wmul,w,c
  4961  0027A2  6EF6               	movwf	tblptrl,c
  4962  0027A4  0E10               	movlw	high __npowers_
  4963  0027A6  2010               	addwfc	?___wmul+1,w,c
  4964  0027A8  6EF7               	movwf	tblptrh,c
  4965  0027AA                     	if	1	;There are 3 active tblptr bytes
  4966  0027AA  6AF8               	clrf	tblptru,c
  4967  0027AC  0E00               	movlw	low (__mediumconst shr (0+16))
  4968  0027AE  22F8               	addwfc	tblptru,f,c
  4969  0027B0                     	endif
  4970  0027B0  0009               	tblrd		*+
  4971  0027B2  CFF5 F030          	movff	tablat,___ftmul@f1
  4972  0027B6  0009               	tblrd		*+
  4973  0027B8  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4974  0027BC  000A               	tblrd		*-
  4975  0027BE  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4976  0027C2  ECB4  F016         	call	___ftmul	;wreg free
  4977  0027C6  C030  F045         	movff	?___ftmul,_fround$1457
  4978  0027CA  C031  F046         	movff	?___ftmul+1,_fround$1457+1
  4979  0027CE  C032  F047         	movff	?___ftmul+2,_fround$1457+2
  4980                           
  4981                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4982  0027D2  C045  F030         	movff	_fround$1457,___ftmul@f1
  4983  0027D6  C046  F031         	movff	_fround$1457+1,___ftmul@f1+1
  4984  0027DA  C047  F032         	movff	_fround$1457+2,___ftmul@f1+2
  4985  0027DE  0E00               	movlw	0
  4986  0027E0  6E33               	movwf	___ftmul@f2,c
  4987  0027E2  0E00               	movlw	0
  4988  0027E4  6E34               	movwf	___ftmul@f2+1,c
  4989  0027E6  0E3F               	movlw	63
  4990  0027E8  6E35               	movwf	___ftmul@f2+2,c
  4991  0027EA  ECB4  F016         	call	___ftmul	;wreg free
  4992  0027EE  D793               	goto	L6
  4993  0027F0                     l2464:
  4994                           
  4995                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4996  0027F0  5048               	movf	fround@prec,w,c
  4997  0027F2  0D03               	mullw	3
  4998  0027F4  0E50               	movlw	low __npowers_
  4999  0027F6  24F3               	addwf	prodl,w,c
  5000  0027F8  6EF6               	movwf	tblptrl,c
  5001  0027FA  0E10               	movlw	high __npowers_
  5002  0027FC  20F4               	addwfc	prodh,w,c
  5003  0027FE  6EF7               	movwf	tblptrh,c
  5004  002800                     	if	1	;There are 3 active tblptr bytes
  5005  002800  6AF8               	clrf	tblptru,c
  5006  002802  0E00               	movlw	low (__mediumconst shr (0+16))
  5007  002804  22F8               	addwfc	tblptru,f,c
  5008  002806                     	endif
  5009  002806  0009               	tblrd		*+
  5010  002808  CFF5 F030          	movff	tablat,___ftmul@f1
  5011  00280C  0009               	tblrd		*+
  5012  00280E  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5013  002812  000A               	tblrd		*-
  5014  002814  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5015  002818  0E00               	movlw	0
  5016  00281A  6E33               	movwf	___ftmul@f2,c
  5017  00281C  0E00               	movlw	0
  5018  00281E  6E34               	movwf	___ftmul@f2+1,c
  5019  002820  0E3F               	movlw	63
  5020  002822  6E35               	movwf	___ftmul@f2+2,c
  5021  002824  ECB4  F016         	call	___ftmul	;wreg free
  5022  002828  C030  F03F         	movff	?___ftmul,?_fround
  5023  00282C  C031  F040         	movff	?___ftmul+1,?_fround+1
  5024  002830  C032  F041         	movff	?___ftmul+2,?_fround+2
  5025  002834  0012               	return	
  5026  002836                     __end_of_fround:
  5027                           	opt stack 0
  5028                           tblptru	equ	0xFF8
  5029                           tblptrh	equ	0xFF7
  5030                           tblptrl	equ	0xFF6
  5031                           tablat	equ	0xFF5
  5032                           prodh	equ	0xFF4
  5033                           prodl	equ	0xFF3
  5034                           postinc0	equ	0xFEE
  5035                           wreg	equ	0xFE8
  5036                           postdec1	equ	0xFE5
  5037                           plusw1	equ	0xFE3
  5038                           fsr1l	equ	0xFE1
  5039                           indf2	equ	0xFDF
  5040                           postinc2	equ	0xFDE
  5041                           postdec2	equ	0xFDD
  5042                           plusw2	equ	0xFDB
  5043                           fsr2h	equ	0xFDA
  5044                           fsr2l	equ	0xFD9
  5045                           status	equ	0xFD8
  5046                           
  5047 ;; *************** function ___wmul *****************
  5048 ;; Defined at:
  5049 ;;		line 15 in file "D:\Hella\Compiler\sources\common\Umul16.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  multiplier      2   14[COMRAM] unsigned int 
  5052 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;  product         2   18[COMRAM] unsigned int 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  2   14[COMRAM] unsigned int 
  5057 ;; Registers used:
  5058 ;;		wreg, status,2, status,0, prodl, prodh
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;Total ram usage:        6 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; This function calls:
  5071 ;;		Nothing
  5072 ;; This function is called by:
  5073 ;;		_fround
  5074 ;;		_scale
  5075 ;;		_sprintf
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           	psect	text8
  5080  003740                     __ptext8:
  5081                           	opt stack 0
  5082  003740                     ___wmul:
  5083                           	opt stack 27
  5084                           
  5085                           ;incstack = 0
  5086  003740  500F               	movf	___wmul@multiplier,w,c
  5087  003742  0211               	mulwf	___wmul@multiplicand,c
  5088  003744  CFF3 F013          	movff	prodl,___wmul@product
  5089  003748  CFF4 F014          	movff	prodh,___wmul@product+1
  5090  00374C  500F               	movf	___wmul@multiplier,w,c
  5091  00374E  0212               	mulwf	___wmul@multiplicand+1,c
  5092  003750  50F3               	movf	prodl,w,c
  5093  003752  2614               	addwf	___wmul@product+1,f,c
  5094  003754  5010               	movf	___wmul@multiplier+1,w,c
  5095  003756  0211               	mulwf	___wmul@multiplicand,c
  5096  003758  50F3               	movf	prodl,w,c
  5097  00375A  2614               	addwf	___wmul@product+1,f,c
  5098  00375C  C013  F00F         	movff	___wmul@product,?___wmul
  5099  003760  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5100  003764  0012               	return	
  5101  003766                     __end_of___wmul:
  5102                           	opt stack 0
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           postinc0	equ	0xFEE
  5110                           wreg	equ	0xFE8
  5111                           postdec1	equ	0xFE5
  5112                           plusw1	equ	0xFE3
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           plusw2	equ	0xFDB
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function ___ftmul *****************
  5123 ;; Defined at:
  5124 ;;		line 62 in file "D:\Hella\Compiler\sources\common\ftmul.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  f1              3   47[COMRAM] float 
  5127 ;;  f2              3   50[COMRAM] float 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;  f3_as_produc    3   57[COMRAM] unsigned um
  5130 ;;  sign            1   61[COMRAM] unsigned char 
  5131 ;;  cntr            1   60[COMRAM] unsigned char 
  5132 ;;  exp             1   56[COMRAM] unsigned char 
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  3   47[COMRAM] float 
  5135 ;; Registers used:
  5136 ;;		wreg, status,2, status,0, cstack
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5142 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5145 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5146 ;;Total ram usage:       15 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    1
  5149 ;; This function calls:
  5150 ;;		___ftpack
  5151 ;; This function is called by:
  5152 ;;		_fround
  5153 ;;		_scale
  5154 ;;		_sprintf
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text9
  5159  002D68                     __ptext9:
  5160                           	opt stack 0
  5161  002D68                     ___ftmul:
  5162                           	opt stack 26
  5163                           
  5164                           ;incstack = 0
  5165  002D68  C032  F036         	movff	___ftmul@f1+2,??___ftmul
  5166  002D6C  6A37               	clrf	(??___ftmul+1)& (0+255),c
  5167  002D6E  6A38               	clrf	(??___ftmul+2)& (0+255),c
  5168  002D70  3431               	rlcf	___ftmul@f1+1,w,c
  5169  002D72  3636               	rlcf	??___ftmul& (0+255),f,c
  5170  002D74  E301               	bnc	u2081
  5171  002D76  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  5172  002D78                     u2081:
  5173  002D78  5036               	movf	??___ftmul,w,c
  5174  002D7A  6E39               	movwf	___ftmul@exp,c
  5175  002D7C  5039               	movf	___ftmul@exp,w,c
  5176  002D7E  A4D8               	btfss	status,2,c
  5177  002D80  D007               	goto	l2320
  5178  002D82  0E00               	movlw	0
  5179  002D84  6E30               	movwf	?___ftmul,c
  5180  002D86  0E00               	movlw	0
  5181  002D88  6E31               	movwf	?___ftmul+1,c
  5182  002D8A  0E00               	movlw	0
  5183  002D8C  6E32               	movwf	?___ftmul+2,c
  5184  002D8E  0012               	return	
  5185  002D90                     l2320:
  5186  002D90  C035  F036         	movff	___ftmul@f2+2,??___ftmul
  5187  002D94  6A37               	clrf	(??___ftmul+1)& (0+255),c
  5188  002D96  6A38               	clrf	(??___ftmul+2)& (0+255),c
  5189  002D98  3434               	rlcf	___ftmul@f2+1,w,c
  5190  002D9A  3636               	rlcf	??___ftmul& (0+255),f,c
  5191  002D9C  E301               	bnc	u2101
  5192  002D9E  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  5193  002DA0                     u2101:
  5194  002DA0  5036               	movf	??___ftmul,w,c
  5195  002DA2  6E3E               	movwf	___ftmul@sign,c
  5196  002DA4  503E               	movf	___ftmul@sign,w,c
  5197  002DA6  A4D8               	btfss	status,2,c
  5198  002DA8  D007               	goto	l2326
  5199  002DAA  0E00               	movlw	0
  5200  002DAC  6E30               	movwf	?___ftmul,c
  5201  002DAE  0E00               	movlw	0
  5202  002DB0  6E31               	movwf	?___ftmul+1,c
  5203  002DB2  0E00               	movlw	0
  5204  002DB4  6E32               	movwf	?___ftmul+2,c
  5205  002DB6  0012               	return	
  5206  002DB8                     l2326:
  5207  002DB8  503E               	movf	___ftmul@sign,w,c
  5208  002DBA  0F7B               	addlw	123
  5209  002DBC  2639               	addwf	___ftmul@exp,f,c
  5210  002DBE  C032  F03E         	movff	___ftmul@f1+2,___ftmul@sign
  5211  002DC2  5035               	movf	___ftmul@f2+2,w,c
  5212  002DC4  1A3E               	xorwf	___ftmul@sign,f,c
  5213  002DC6  0E80               	movlw	128
  5214  002DC8  163E               	andwf	___ftmul@sign,f,c
  5215  002DCA  8E31               	bsf	___ftmul@f1+1,7,c
  5216  002DCC  8E34               	bsf	___ftmul@f2+1,7,c
  5217  002DCE  0EFF               	movlw	255
  5218  002DD0  1633               	andwf	___ftmul@f2,f,c
  5219  002DD2  0EFF               	movlw	255
  5220  002DD4  1634               	andwf	___ftmul@f2+1,f,c
  5221  002DD6  0E00               	movlw	0
  5222  002DD8  1635               	andwf	___ftmul@f2+2,f,c
  5223  002DDA  0E00               	movlw	0
  5224  002DDC  6E3A               	movwf	___ftmul@f3_as_product,c
  5225  002DDE  0E00               	movlw	0
  5226  002DE0  6E3B               	movwf	___ftmul@f3_as_product+1,c
  5227  002DE2  0E00               	movlw	0
  5228  002DE4  6E3C               	movwf	___ftmul@f3_as_product+2,c
  5229  002DE6  0E07               	movlw	7
  5230  002DE8  6E3D               	movwf	___ftmul@cntr,c
  5231  002DEA                     l2340:
  5232  002DEA  A030               	btfss	___ftmul@f1,0,c
  5233  002DEC  D006               	goto	l2344
  5234  002DEE  5033               	movf	___ftmul@f2,w,c
  5235  002DF0  263A               	addwf	___ftmul@f3_as_product,f,c
  5236  002DF2  5034               	movf	___ftmul@f2+1,w,c
  5237  002DF4  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  5238  002DF6  5035               	movf	___ftmul@f2+2,w,c
  5239  002DF8  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  5240  002DFA                     l2344:
  5241  002DFA  90D8               	bcf	status,0,c
  5242  002DFC  3232               	rrcf	___ftmul@f1+2,f,c
  5243  002DFE  3231               	rrcf	___ftmul@f1+1,f,c
  5244  002E00  3230               	rrcf	___ftmul@f1,f,c
  5245  002E02  90D8               	bcf	status,0,c
  5246  002E04  3633               	rlcf	___ftmul@f2,f,c
  5247  002E06  3634               	rlcf	___ftmul@f2+1,f,c
  5248  002E08  3635               	rlcf	___ftmul@f2+2,f,c
  5249  002E0A  2E3D               	decfsz	___ftmul@cntr,f,c
  5250  002E0C  D7EE               	goto	l2340
  5251  002E0E  0E09               	movlw	9
  5252  002E10  6E3D               	movwf	___ftmul@cntr,c
  5253  002E12                     l2350:
  5254  002E12  A030               	btfss	___ftmul@f1,0,c
  5255  002E14  D006               	goto	l2354
  5256  002E16  5033               	movf	___ftmul@f2,w,c
  5257  002E18  263A               	addwf	___ftmul@f3_as_product,f,c
  5258  002E1A  5034               	movf	___ftmul@f2+1,w,c
  5259  002E1C  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  5260  002E1E  5035               	movf	___ftmul@f2+2,w,c
  5261  002E20  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  5262  002E22                     l2354:
  5263  002E22  90D8               	bcf	status,0,c
  5264  002E24  3232               	rrcf	___ftmul@f1+2,f,c
  5265  002E26  3231               	rrcf	___ftmul@f1+1,f,c
  5266  002E28  3230               	rrcf	___ftmul@f1,f,c
  5267  002E2A  90D8               	bcf	status,0,c
  5268  002E2C  323C               	rrcf	___ftmul@f3_as_product+2,f,c
  5269  002E2E  323B               	rrcf	___ftmul@f3_as_product+1,f,c
  5270  002E30  323A               	rrcf	___ftmul@f3_as_product,f,c
  5271  002E32  2E3D               	decfsz	___ftmul@cntr,f,c
  5272  002E34  D7EE               	goto	l2350
  5273  002E36  C03A  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5274  002E3A  C03B  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5275  002E3E  C03C  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5276  002E42  C039  F004         	movff	___ftmul@exp,___ftpack@exp
  5277  002E46  C03E  F005         	movff	___ftmul@sign,___ftpack@sign
  5278  002E4A  EC81  F018         	call	___ftpack	;wreg free
  5279  002E4E  C001  F030         	movff	?___ftpack,?___ftmul
  5280  002E52  C002  F031         	movff	?___ftpack+1,?___ftmul+1
  5281  002E56  C003  F032         	movff	?___ftpack+2,?___ftmul+2
  5282  002E5A  0012               	return	
  5283  002E5C                     __end_of___ftmul:
  5284                           	opt stack 0
  5285                           tblptru	equ	0xFF8
  5286                           tblptrh	equ	0xFF7
  5287                           tblptrl	equ	0xFF6
  5288                           tablat	equ	0xFF5
  5289                           prodh	equ	0xFF4
  5290                           prodl	equ	0xFF3
  5291                           postinc0	equ	0xFEE
  5292                           wreg	equ	0xFE8
  5293                           postdec1	equ	0xFE5
  5294                           plusw1	equ	0xFE3
  5295                           fsr1l	equ	0xFE1
  5296                           indf2	equ	0xFDF
  5297                           postinc2	equ	0xFDE
  5298                           postdec2	equ	0xFDD
  5299                           plusw2	equ	0xFDB
  5300                           fsr2h	equ	0xFDA
  5301                           fsr2l	equ	0xFD9
  5302                           status	equ	0xFD8
  5303                           
  5304 ;; *************** function ___awmod *****************
  5305 ;; Defined at:
  5306 ;;		line 8 in file "D:\Hella\Compiler\sources\common\awmod.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  dividend        2    0[COMRAM] int 
  5309 ;;  divisor         2    2[COMRAM] int 
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;  sign            1    5[COMRAM] unsigned char 
  5312 ;;  counter         1    4[COMRAM] unsigned char 
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  2    0[COMRAM] int 
  5315 ;; Registers used:
  5316 ;;		wreg, status,2, status,0
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5322 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;Total ram usage:        6 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; This function calls:
  5329 ;;		Nothing
  5330 ;; This function is called by:
  5331 ;;		_fround
  5332 ;;		_scale
  5333 ;;		_sprintf
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           	psect	text10
  5338  0033EA                     __ptext10:
  5339                           	opt stack 0
  5340  0033EA                     ___awmod:
  5341                           	opt stack 27
  5342                           
  5343                           ;incstack = 0
  5344  0033EA  0E00               	movlw	0
  5345  0033EC  6E06               	movwf	___awmod@sign,c
  5346  0033EE  AE02               	btfss	___awmod@dividend+1,7,c
  5347  0033F0  D006               	goto	l2414
  5348  0033F2  6C01               	negf	___awmod@dividend,c
  5349  0033F4  1E02               	comf	___awmod@dividend+1,f,c
  5350  0033F6  B0D8               	btfsc	status,0,c
  5351  0033F8  2A02               	incf	___awmod@dividend+1,f,c
  5352  0033FA  0E01               	movlw	1
  5353  0033FC  6E06               	movwf	___awmod@sign,c
  5354  0033FE                     l2414:
  5355  0033FE  AE04               	btfss	___awmod@divisor+1,7,c
  5356  003400  D004               	goto	l2418
  5357  003402  6C03               	negf	___awmod@divisor,c
  5358  003404  1E04               	comf	___awmod@divisor+1,f,c
  5359  003406  B0D8               	btfsc	status,0,c
  5360  003408  2A04               	incf	___awmod@divisor+1,f,c
  5361  00340A                     l2418:
  5362  00340A  5003               	movf	___awmod@divisor,w,c
  5363  00340C  1004               	iorwf	___awmod@divisor+1,w,c
  5364  00340E  B4D8               	btfsc	status,2,c
  5365  003410  D018               	goto	l2434
  5366  003412  0E01               	movlw	1
  5367  003414  6E05               	movwf	___awmod@counter,c
  5368  003416  D004               	goto	l2424
  5369  003418                     l2422:
  5370  003418  90D8               	bcf	status,0,c
  5371  00341A  3603               	rlcf	___awmod@divisor,f,c
  5372  00341C  3604               	rlcf	___awmod@divisor+1,f,c
  5373  00341E  2A05               	incf	___awmod@counter,f,c
  5374  003420                     l2424:
  5375  003420  AE04               	btfss	___awmod@divisor+1,7,c
  5376  003422  D7FA               	goto	l2422
  5377  003424                     l2426:
  5378  003424  5003               	movf	___awmod@divisor,w,c
  5379  003426  5C01               	subwf	___awmod@dividend,w,c
  5380  003428  5004               	movf	___awmod@divisor+1,w,c
  5381  00342A  5802               	subwfb	___awmod@dividend+1,w,c
  5382  00342C  A0D8               	btfss	status,0,c
  5383  00342E  D004               	goto	l2430
  5384  003430  5003               	movf	___awmod@divisor,w,c
  5385  003432  5E01               	subwf	___awmod@dividend,f,c
  5386  003434  5004               	movf	___awmod@divisor+1,w,c
  5387  003436  5A02               	subwfb	___awmod@dividend+1,f,c
  5388  003438                     l2430:
  5389  003438  90D8               	bcf	status,0,c
  5390  00343A  3204               	rrcf	___awmod@divisor+1,f,c
  5391  00343C  3203               	rrcf	___awmod@divisor,f,c
  5392  00343E  2E05               	decfsz	___awmod@counter,f,c
  5393  003440  D7F1               	goto	l2426
  5394  003442                     l2434:
  5395  003442  5006               	movf	___awmod@sign,w,c
  5396  003444  B4D8               	btfsc	status,2,c
  5397  003446  D004               	goto	l2438
  5398  003448  6C01               	negf	___awmod@dividend,c
  5399  00344A  1E02               	comf	___awmod@dividend+1,f,c
  5400  00344C  B0D8               	btfsc	status,0,c
  5401  00344E  2A02               	incf	___awmod@dividend+1,f,c
  5402  003450                     l2438:
  5403  003450  C001  F001         	movff	___awmod@dividend,?___awmod
  5404  003454  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5405  003458  0012               	return	
  5406  00345A                     __end_of___awmod:
  5407                           	opt stack 0
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           postinc0	equ	0xFEE
  5415                           wreg	equ	0xFE8
  5416                           postdec1	equ	0xFE5
  5417                           plusw1	equ	0xFE3
  5418                           fsr1l	equ	0xFE1
  5419                           indf2	equ	0xFDF
  5420                           postinc2	equ	0xFDE
  5421                           postdec2	equ	0xFDD
  5422                           plusw2	equ	0xFDB
  5423                           fsr2h	equ	0xFDA
  5424                           fsr2l	equ	0xFD9
  5425                           status	equ	0xFD8
  5426                           
  5427 ;; *************** function ___awdiv *****************
  5428 ;; Defined at:
  5429 ;;		line 8 in file "D:\Hella\Compiler\sources\common\awdiv.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;  dividend        2    6[COMRAM] int 
  5432 ;;  divisor         2    8[COMRAM] int 
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;  quotient        2   12[COMRAM] int 
  5435 ;;  sign            1   11[COMRAM] unsigned char 
  5436 ;;  counter         1   10[COMRAM] unsigned char 
  5437 ;; Return value:  Size  Location     Type
  5438 ;;                  2    6[COMRAM] int 
  5439 ;; Registers used:
  5440 ;;		wreg, status,2, status,0
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5447 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5449 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5450 ;;Total ram usage:        8 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; This function calls:
  5453 ;;		Nothing
  5454 ;; This function is called by:
  5455 ;;		_sequence3
  5456 ;;		_sequence4
  5457 ;;		_fround
  5458 ;;		_scale
  5459 ;;		_sprintf
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text11
  5464  0032E4                     __ptext11:
  5465                           	opt stack 0
  5466  0032E4                     ___awdiv:
  5467                           	opt stack 27
  5468                           
  5469                           ;incstack = 0
  5470  0032E4  0E00               	movlw	0
  5471  0032E6  6E0C               	movwf	___awdiv@sign,c
  5472  0032E8  AE0A               	btfss	___awdiv@divisor+1,7,c
  5473  0032EA  D006               	goto	l2370
  5474  0032EC  6C09               	negf	___awdiv@divisor,c
  5475  0032EE  1E0A               	comf	___awdiv@divisor+1,f,c
  5476  0032F0  B0D8               	btfsc	status,0,c
  5477  0032F2  2A0A               	incf	___awdiv@divisor+1,f,c
  5478  0032F4  0E01               	movlw	1
  5479  0032F6  6E0C               	movwf	___awdiv@sign,c
  5480  0032F8                     l2370:
  5481  0032F8  AE08               	btfss	___awdiv@dividend+1,7,c
  5482  0032FA  D006               	goto	l2376
  5483  0032FC  6C07               	negf	___awdiv@dividend,c
  5484  0032FE  1E08               	comf	___awdiv@dividend+1,f,c
  5485  003300  B0D8               	btfsc	status,0,c
  5486  003302  2A08               	incf	___awdiv@dividend+1,f,c
  5487  003304  0E01               	movlw	1
  5488  003306  1A0C               	xorwf	___awdiv@sign,f,c
  5489  003308                     l2376:
  5490  003308  0E00               	movlw	0
  5491  00330A  6E0E               	movwf	___awdiv@quotient+1,c
  5492  00330C  0E00               	movlw	0
  5493  00330E  6E0D               	movwf	___awdiv@quotient,c
  5494  003310  5009               	movf	___awdiv@divisor,w,c
  5495  003312  100A               	iorwf	___awdiv@divisor+1,w,c
  5496  003314  B4D8               	btfsc	status,2,c
  5497  003316  D01C               	goto	l2398
  5498  003318  0E01               	movlw	1
  5499  00331A  6E0B               	movwf	___awdiv@counter,c
  5500  00331C  D004               	goto	l2384
  5501  00331E                     l2382:
  5502  00331E  90D8               	bcf	status,0,c
  5503  003320  3609               	rlcf	___awdiv@divisor,f,c
  5504  003322  360A               	rlcf	___awdiv@divisor+1,f,c
  5505  003324  2A0B               	incf	___awdiv@counter,f,c
  5506  003326                     l2384:
  5507  003326  AE0A               	btfss	___awdiv@divisor+1,7,c
  5508  003328  D7FA               	goto	l2382
  5509  00332A                     l2386:
  5510  00332A  90D8               	bcf	status,0,c
  5511  00332C  360D               	rlcf	___awdiv@quotient,f,c
  5512  00332E  360E               	rlcf	___awdiv@quotient+1,f,c
  5513  003330  5009               	movf	___awdiv@divisor,w,c
  5514  003332  5C07               	subwf	___awdiv@dividend,w,c
  5515  003334  500A               	movf	___awdiv@divisor+1,w,c
  5516  003336  5808               	subwfb	___awdiv@dividend+1,w,c
  5517  003338  A0D8               	btfss	status,0,c
  5518  00333A  D005               	goto	l2394
  5519  00333C  5009               	movf	___awdiv@divisor,w,c
  5520  00333E  5E07               	subwf	___awdiv@dividend,f,c
  5521  003340  500A               	movf	___awdiv@divisor+1,w,c
  5522  003342  5A08               	subwfb	___awdiv@dividend+1,f,c
  5523  003344  800D               	bsf	___awdiv@quotient,0,c
  5524  003346                     l2394:
  5525  003346  90D8               	bcf	status,0,c
  5526  003348  320A               	rrcf	___awdiv@divisor+1,f,c
  5527  00334A  3209               	rrcf	___awdiv@divisor,f,c
  5528  00334C  2E0B               	decfsz	___awdiv@counter,f,c
  5529  00334E  D7ED               	goto	l2386
  5530  003350                     l2398:
  5531  003350  500C               	movf	___awdiv@sign,w,c
  5532  003352  B4D8               	btfsc	status,2,c
  5533  003354  D004               	goto	l2402
  5534  003356  6C0D               	negf	___awdiv@quotient,c
  5535  003358  1E0E               	comf	___awdiv@quotient+1,f,c
  5536  00335A  B0D8               	btfsc	status,0,c
  5537  00335C  2A0E               	incf	___awdiv@quotient+1,f,c
  5538  00335E                     l2402:
  5539  00335E  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5540  003362  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5541  003366  0012               	return	
  5542  003368                     __end_of___awdiv:
  5543                           	opt stack 0
  5544                           tblptru	equ	0xFF8
  5545                           tblptrh	equ	0xFF7
  5546                           tblptrl	equ	0xFF6
  5547                           tablat	equ	0xFF5
  5548                           prodh	equ	0xFF4
  5549                           prodl	equ	0xFF3
  5550                           postinc0	equ	0xFEE
  5551                           wreg	equ	0xFE8
  5552                           postdec1	equ	0xFE5
  5553                           plusw1	equ	0xFE3
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           plusw2	equ	0xFDB
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function __tdiv_to_l_ *****************
  5564 ;; Defined at:
  5565 ;;		line 60 in file "D:\Hella\Compiler\sources\common\ftdivl.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  f1              3    0[COMRAM] float 
  5568 ;;  f2              3    3[COMRAM] float 
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;  quot            4    9[COMRAM] unsigned long 
  5571 ;;  exp1            1   14[COMRAM] unsigned char 
  5572 ;;  cntr            1   13[COMRAM] unsigned char 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  4    0[COMRAM] unsigned long 
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5582 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;Total ram usage:       15 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; This function calls:
  5589 ;;		Nothing
  5590 ;; This function is called by:
  5591 ;;		_sprintf
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text12
  5596  0029E2                     __ptext12:
  5597                           	opt stack 0
  5598  0029E2                     __tdiv_to_l_:
  5599                           	opt stack 28
  5600                           
  5601                           ;incstack = 0
  5602  0029E2  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5603  0029E6  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5604  0029E8  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5605  0029EA  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  5606  0029EC  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5607  0029EE  E301               	bnc	u2351
  5608  0029F0  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5609  0029F2                     u2351:
  5610  0029F2  5007               	movf	??__tdiv_to_l_,w,c
  5611  0029F4  6E0F               	movwf	__tdiv_to_l_@exp1,c
  5612  0029F6  500F               	movf	__tdiv_to_l_@exp1,w,c
  5613  0029F8  A4D8               	btfss	status,2,c
  5614  0029FA  D009               	goto	l2524
  5615  0029FC  0E00               	movlw	0
  5616  0029FE  6E01               	movwf	?__tdiv_to_l_,c
  5617  002A00  0E00               	movlw	0
  5618  002A02  6E02               	movwf	?__tdiv_to_l_+1,c
  5619  002A04  0E00               	movlw	0
  5620  002A06  6E03               	movwf	?__tdiv_to_l_+2,c
  5621  002A08  0E00               	movlw	0
  5622  002A0A  6E04               	movwf	?__tdiv_to_l_+3,c
  5623  002A0C  0012               	return	
  5624  002A0E                     l2524:
  5625  002A0E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5626  002A12  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5627  002A14  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5628  002A16  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  5629  002A18  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5630  002A1A  E301               	bnc	u2371
  5631  002A1C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5632  002A1E                     u2371:
  5633  002A1E  5007               	movf	??__tdiv_to_l_,w,c
  5634  002A20  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5635  002A22  500E               	movf	__tdiv_to_l_@cntr,w,c
  5636  002A24  A4D8               	btfss	status,2,c
  5637  002A26  D009               	goto	l2530
  5638  002A28  0E00               	movlw	0
  5639  002A2A  6E01               	movwf	?__tdiv_to_l_,c
  5640  002A2C  0E00               	movlw	0
  5641  002A2E  6E02               	movwf	?__tdiv_to_l_+1,c
  5642  002A30  0E00               	movlw	0
  5643  002A32  6E03               	movwf	?__tdiv_to_l_+2,c
  5644  002A34  0E00               	movlw	0
  5645  002A36  6E04               	movwf	?__tdiv_to_l_+3,c
  5646  002A38  0012               	return	
  5647  002A3A                     l2530:
  5648  002A3A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  5649  002A3C  0EFF               	movlw	255
  5650  002A3E  1601               	andwf	__tdiv_to_l_@f1,f,c
  5651  002A40  0EFF               	movlw	255
  5652  002A42  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  5653  002A44  0E00               	movlw	0
  5654  002A46  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  5655  002A48  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  5656  002A4A  0EFF               	movlw	255
  5657  002A4C  1604               	andwf	__tdiv_to_l_@f2,f,c
  5658  002A4E  0EFF               	movlw	255
  5659  002A50  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  5660  002A52  0E00               	movlw	0
  5661  002A54  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  5662  002A56  0E00               	movlw	0
  5663  002A58  6E0A               	movwf	__tdiv_to_l_@quot,c
  5664  002A5A  0E00               	movlw	0
  5665  002A5C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  5666  002A5E  0E00               	movlw	0
  5667  002A60  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  5668  002A62  0E00               	movlw	0
  5669  002A64  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  5670  002A66  0E7F               	movlw	127
  5671  002A68  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5672  002A6A  500E               	movf	__tdiv_to_l_@cntr,w,c
  5673  002A6C  0F98               	addlw	152
  5674  002A6E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5675  002A70  0E18               	movlw	24
  5676  002A72  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5677  002A74                     l616:
  5678  002A74  90D8               	bcf	status,0,c
  5679  002A76  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5680  002A78  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5681  002A7A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5682  002A7C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5683  002A7E  5004               	movf	__tdiv_to_l_@f2,w,c
  5684  002A80  5C01               	subwf	__tdiv_to_l_@f1,w,c
  5685  002A82  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5686  002A84  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  5687  002A86  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5688  002A88  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  5689  002A8A  A0D8               	btfss	status,0,c
  5690  002A8C  D007               	goto	l617
  5691  002A8E  5004               	movf	__tdiv_to_l_@f2,w,c
  5692  002A90  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5693  002A92  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5694  002A94  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5695  002A96  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5696  002A98  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5697  002A9A  800A               	bsf	__tdiv_to_l_@quot,0,c
  5698  002A9C                     l617:
  5699  002A9C  90D8               	bcf	status,0,c
  5700  002A9E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5701  002AA0  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5702  002AA2  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5703  002AA4  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5704  002AA6  D7E6               	goto	l616
  5705  002AA8  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5706  002AAA  D016               	goto	l2564
  5707  002AAC  500F               	movf	__tdiv_to_l_@exp1,w,c
  5708  002AAE  0A80               	xorlw	128
  5709  002AB0  0F97               	addlw	151
  5710  002AB2  B0D8               	btfsc	status,0,c
  5711  002AB4  D009               	goto	l2560
  5712  002AB6  0E00               	movlw	0
  5713  002AB8  6E01               	movwf	?__tdiv_to_l_,c
  5714  002ABA  0E00               	movlw	0
  5715  002ABC  6E02               	movwf	?__tdiv_to_l_+1,c
  5716  002ABE  0E00               	movlw	0
  5717  002AC0  6E03               	movwf	?__tdiv_to_l_+2,c
  5718  002AC2  0E00               	movlw	0
  5719  002AC4  6E04               	movwf	?__tdiv_to_l_+3,c
  5720  002AC6  0012               	return	
  5721  002AC8                     l2560:
  5722  002AC8  90D8               	bcf	status,0,c
  5723  002ACA  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5724  002ACC  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5725  002ACE  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5726  002AD0  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5727  002AD2  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5728  002AD4  D7F9               	goto	l2560
  5729  002AD6  D015               	goto	l623
  5730  002AD8                     l2564:
  5731  002AD8  0E17               	movlw	23
  5732  002ADA  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5733  002ADC  D00F               	goto	l2572
  5734  002ADE  0E00               	movlw	0
  5735  002AE0  6E01               	movwf	?__tdiv_to_l_,c
  5736  002AE2  0E00               	movlw	0
  5737  002AE4  6E02               	movwf	?__tdiv_to_l_+1,c
  5738  002AE6  0E00               	movlw	0
  5739  002AE8  6E03               	movwf	?__tdiv_to_l_+2,c
  5740  002AEA  0E00               	movlw	0
  5741  002AEC  6E04               	movwf	?__tdiv_to_l_+3,c
  5742  002AEE  0012               	return	
  5743  002AF0                     l2570:
  5744  002AF0  90D8               	bcf	status,0,c
  5745  002AF2  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5746  002AF4  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5747  002AF6  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5748  002AF8  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5749  002AFA  060F               	decf	__tdiv_to_l_@exp1,f,c
  5750  002AFC                     l2572:
  5751  002AFC  500F               	movf	__tdiv_to_l_@exp1,w,c
  5752  002AFE  A4D8               	btfss	status,2,c
  5753  002B00  D7F7               	goto	l2570
  5754  002B02                     l623:
  5755  002B02  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5756  002B06  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5757  002B0A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5758  002B0E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5759  002B12  0012               	return		;funcret
  5760  002B14                     __end_of__tdiv_to_l_:
  5761                           	opt stack 0
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           prodh	equ	0xFF4
  5767                           prodl	equ	0xFF3
  5768                           postinc0	equ	0xFEE
  5769                           wreg	equ	0xFE8
  5770                           postdec1	equ	0xFE5
  5771                           plusw1	equ	0xFE3
  5772                           fsr1l	equ	0xFE1
  5773                           indf2	equ	0xFDF
  5774                           postinc2	equ	0xFDE
  5775                           postdec2	equ	0xFDD
  5776                           plusw2	equ	0xFDB
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function __div_to_l_ *****************
  5782 ;; Defined at:
  5783 ;;		line 60 in file "D:\Hella\Compiler\sources\common\fldivl.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  f1              3    0[COMRAM] unsigned long 
  5786 ;;  f2              3    3[COMRAM] unsigned long 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;  quot            4    6[COMRAM] unsigned long 
  5789 ;;  exp1            1   11[COMRAM] unsigned char 
  5790 ;;  cntr            1   10[COMRAM] unsigned char 
  5791 ;; Return value:  Size  Location     Type
  5792 ;;                  4    0[COMRAM] unsigned long 
  5793 ;; Registers used:
  5794 ;;		wreg, status,2, status,0
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5800 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5804 ;;Total ram usage:       12 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; This function calls:
  5807 ;;		Nothing
  5808 ;; This function is called by:
  5809 ;;		_sprintf
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text13
  5814  002C40                     __ptext13:
  5815                           	opt stack 0
  5816  002C40                     __div_to_l_:
  5817                           	opt stack 28
  5818                           
  5819                           ;incstack = 0
  5820  002C40  3403               	rlcf	__div_to_l_@f1+2,w,c
  5821  002C42  3404               	rlcf	__div_to_l_@f1+3,w,c
  5822  002C44  6E0C               	movwf	__div_to_l_@exp1,c
  5823  002C46  500C               	movf	__div_to_l_@exp1,w,c
  5824  002C48  A4D8               	btfss	status,2,c
  5825  002C4A  D009               	goto	l2580
  5826  002C4C  0E00               	movlw	0
  5827  002C4E  6E01               	movwf	?__div_to_l_,c
  5828  002C50  0E00               	movlw	0
  5829  002C52  6E02               	movwf	?__div_to_l_+1,c
  5830  002C54  0E00               	movlw	0
  5831  002C56  6E03               	movwf	?__div_to_l_+2,c
  5832  002C58  0E00               	movlw	0
  5833  002C5A  6E04               	movwf	?__div_to_l_+3,c
  5834  002C5C  0012               	return	
  5835  002C5E                     l2580:
  5836  002C5E  3406               	rlcf	__div_to_l_@f2+2,w,c
  5837  002C60  3407               	rlcf	__div_to_l_@f2+3,w,c
  5838  002C62  6E0B               	movwf	__div_to_l_@cntr,c
  5839  002C64  500B               	movf	__div_to_l_@cntr,w,c
  5840  002C66  A4D8               	btfss	status,2,c
  5841  002C68  D009               	goto	l2586
  5842  002C6A  0E00               	movlw	0
  5843  002C6C  6E01               	movwf	?__div_to_l_,c
  5844  002C6E  0E00               	movlw	0
  5845  002C70  6E02               	movwf	?__div_to_l_+1,c
  5846  002C72  0E00               	movlw	0
  5847  002C74  6E03               	movwf	?__div_to_l_+2,c
  5848  002C76  0E00               	movlw	0
  5849  002C78  6E04               	movwf	?__div_to_l_+3,c
  5850  002C7A  0012               	return	
  5851  002C7C                     l2586:
  5852  002C7C  8E03               	bsf	__div_to_l_@f1+2,7,c
  5853  002C7E  0EFF               	movlw	255
  5854  002C80  1601               	andwf	__div_to_l_@f1,f,c
  5855  002C82  0EFF               	movlw	255
  5856  002C84  1602               	andwf	__div_to_l_@f1+1,f,c
  5857  002C86  0EFF               	movlw	255
  5858  002C88  1603               	andwf	__div_to_l_@f1+2,f,c
  5859  002C8A  0E00               	movlw	0
  5860  002C8C  1604               	andwf	__div_to_l_@f1+3,f,c
  5861  002C8E  8E06               	bsf	__div_to_l_@f2+2,7,c
  5862  002C90  0EFF               	movlw	255
  5863  002C92  1604               	andwf	__div_to_l_@f2,f,c
  5864  002C94  0EFF               	movlw	255
  5865  002C96  1605               	andwf	__div_to_l_@f2+1,f,c
  5866  002C98  0EFF               	movlw	255
  5867  002C9A  1606               	andwf	__div_to_l_@f2+2,f,c
  5868  002C9C  0E00               	movlw	0
  5869  002C9E  1607               	andwf	__div_to_l_@f2+3,f,c
  5870  002CA0  0E00               	movlw	0
  5871  002CA2  6E07               	movwf	__div_to_l_@quot,c
  5872  002CA4  0E00               	movlw	0
  5873  002CA6  6E08               	movwf	__div_to_l_@quot+1,c
  5874  002CA8  0E00               	movlw	0
  5875  002CAA  6E09               	movwf	__div_to_l_@quot+2,c
  5876  002CAC  0E00               	movlw	0
  5877  002CAE  6E0A               	movwf	__div_to_l_@quot+3,c
  5878  002CB0  0E7F               	movlw	127
  5879  002CB2  5E0C               	subwf	__div_to_l_@exp1,f,c
  5880  002CB4  500B               	movf	__div_to_l_@cntr,w,c
  5881  002CB6  0FA0               	addlw	160
  5882  002CB8  5E0C               	subwf	__div_to_l_@exp1,f,c
  5883  002CBA  0E20               	movlw	32
  5884  002CBC  6E0B               	movwf	__div_to_l_@cntr,c
  5885  002CBE                     l2600:
  5886  002CBE  90D8               	bcf	status,0,c
  5887  002CC0  3607               	rlcf	__div_to_l_@quot,f,c
  5888  002CC2  3608               	rlcf	__div_to_l_@quot+1,f,c
  5889  002CC4  3609               	rlcf	__div_to_l_@quot+2,f,c
  5890  002CC6  360A               	rlcf	__div_to_l_@quot+3,f,c
  5891  002CC8  5004               	movf	__div_to_l_@f2,w,c
  5892  002CCA  5C01               	subwf	__div_to_l_@f1,w,c
  5893  002CCC  5005               	movf	__div_to_l_@f2+1,w,c
  5894  002CCE  5802               	subwfb	__div_to_l_@f1+1,w,c
  5895  002CD0  5006               	movf	__div_to_l_@f2+2,w,c
  5896  002CD2  5803               	subwfb	__div_to_l_@f1+2,w,c
  5897  002CD4  5007               	movf	__div_to_l_@f2+3,w,c
  5898  002CD6  5804               	subwfb	__div_to_l_@f1+3,w,c
  5899  002CD8  A0D8               	btfss	status,0,c
  5900  002CDA  D009               	goto	l2608
  5901  002CDC  5004               	movf	__div_to_l_@f2,w,c
  5902  002CDE  5E01               	subwf	__div_to_l_@f1,f,c
  5903  002CE0  5005               	movf	__div_to_l_@f2+1,w,c
  5904  002CE2  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5905  002CE4  5006               	movf	__div_to_l_@f2+2,w,c
  5906  002CE6  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5907  002CE8  5007               	movf	__div_to_l_@f2+3,w,c
  5908  002CEA  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5909  002CEC  8007               	bsf	__div_to_l_@quot,0,c
  5910  002CEE                     l2608:
  5911  002CEE  90D8               	bcf	status,0,c
  5912  002CF0  3601               	rlcf	__div_to_l_@f1,f,c
  5913  002CF2  3602               	rlcf	__div_to_l_@f1+1,f,c
  5914  002CF4  3603               	rlcf	__div_to_l_@f1+2,f,c
  5915  002CF6  3604               	rlcf	__div_to_l_@f1+3,f,c
  5916  002CF8  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5917  002CFA  D7E1               	goto	l2600
  5918  002CFC  AE0C               	btfss	__div_to_l_@exp1,7,c
  5919  002CFE  D016               	goto	l2624
  5920  002D00  500C               	movf	__div_to_l_@exp1,w,c
  5921  002D02  0A80               	xorlw	128
  5922  002D04  0F9F               	addlw	159
  5923  002D06  B0D8               	btfsc	status,0,c
  5924  002D08  D009               	goto	l2620
  5925  002D0A  0E00               	movlw	0
  5926  002D0C  6E01               	movwf	?__div_to_l_,c
  5927  002D0E  0E00               	movlw	0
  5928  002D10  6E02               	movwf	?__div_to_l_+1,c
  5929  002D12  0E00               	movlw	0
  5930  002D14  6E03               	movwf	?__div_to_l_+2,c
  5931  002D16  0E00               	movlw	0
  5932  002D18  6E04               	movwf	?__div_to_l_+3,c
  5933  002D1A  0012               	return	
  5934  002D1C                     l2620:
  5935  002D1C  90D8               	bcf	status,0,c
  5936  002D1E  320A               	rrcf	__div_to_l_@quot+3,f,c
  5937  002D20  3209               	rrcf	__div_to_l_@quot+2,f,c
  5938  002D22  3208               	rrcf	__div_to_l_@quot+1,f,c
  5939  002D24  3207               	rrcf	__div_to_l_@quot,f,c
  5940  002D26  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5941  002D28  D7F9               	goto	l2620
  5942  002D2A  D015               	goto	l519
  5943  002D2C                     l2624:
  5944  002D2C  0E1F               	movlw	31
  5945  002D2E  640C               	cpfsgt	__div_to_l_@exp1,c
  5946  002D30  D00F               	goto	l2632
  5947  002D32  0E00               	movlw	0
  5948  002D34  6E01               	movwf	?__div_to_l_,c
  5949  002D36  0E00               	movlw	0
  5950  002D38  6E02               	movwf	?__div_to_l_+1,c
  5951  002D3A  0E00               	movlw	0
  5952  002D3C  6E03               	movwf	?__div_to_l_+2,c
  5953  002D3E  0E00               	movlw	0
  5954  002D40  6E04               	movwf	?__div_to_l_+3,c
  5955  002D42  0012               	return	
  5956  002D44                     l2630:
  5957  002D44  90D8               	bcf	status,0,c
  5958  002D46  3607               	rlcf	__div_to_l_@quot,f,c
  5959  002D48  3608               	rlcf	__div_to_l_@quot+1,f,c
  5960  002D4A  3609               	rlcf	__div_to_l_@quot+2,f,c
  5961  002D4C  360A               	rlcf	__div_to_l_@quot+3,f,c
  5962  002D4E  060C               	decf	__div_to_l_@exp1,f,c
  5963  002D50                     l2632:
  5964  002D50  500C               	movf	__div_to_l_@exp1,w,c
  5965  002D52  A4D8               	btfss	status,2,c
  5966  002D54  D7F7               	goto	l2630
  5967  002D56                     l519:
  5968  002D56  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5969  002D5A  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5970  002D5E  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5971  002D62  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5972  002D66  0012               	return		;funcret
  5973  002D68                     __end_of__div_to_l_:
  5974                           	opt stack 0
  5975                           tblptru	equ	0xFF8
  5976                           tblptrh	equ	0xFF7
  5977                           tblptrl	equ	0xFF6
  5978                           tablat	equ	0xFF5
  5979                           prodh	equ	0xFF4
  5980                           prodl	equ	0xFF3
  5981                           postinc0	equ	0xFEE
  5982                           wreg	equ	0xFE8
  5983                           postdec1	equ	0xFE5
  5984                           plusw1	equ	0xFE3
  5985                           fsr1l	equ	0xFE1
  5986                           indf2	equ	0xFDF
  5987                           postinc2	equ	0xFDE
  5988                           postdec2	equ	0xFDD
  5989                           plusw2	equ	0xFDB
  5990                           fsr2h	equ	0xFDA
  5991                           fsr2l	equ	0xFD9
  5992                           status	equ	0xFD8
  5993                           
  5994 ;; *************** function ___lltoft *****************
  5995 ;; Defined at:
  5996 ;;		line 35 in file "D:\Hella\Compiler\sources\common\lltoft.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  c               4   35[COMRAM] unsigned long 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  exp             1   43[COMRAM] unsigned char 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  3   35[COMRAM] float 
  6003 ;; Registers used:
  6004 ;;		wreg, status,2, status,0, cstack
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6010 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6012 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6013 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6014 ;;Total ram usage:        9 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    1
  6017 ;; This function calls:
  6018 ;;		___ftpack
  6019 ;; This function is called by:
  6020 ;;		_sprintf
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text14
  6025  0034C0                     __ptext14:
  6026                           	opt stack 0
  6027  0034C0                     ___lltoft:
  6028                           	opt stack 27
  6029                           
  6030                           ;incstack = 0
  6031  0034C0  0E8E               	movlw	142
  6032  0034C2  6E2C               	movwf	___lltoft@exp,c
  6033  0034C4  D006               	goto	l2798
  6034  0034C6                     l2796:
  6035  0034C6  90D8               	bcf	status,0,c
  6036  0034C8  3227               	rrcf	___lltoft@c+3,f,c
  6037  0034CA  3226               	rrcf	___lltoft@c+2,f,c
  6038  0034CC  3225               	rrcf	___lltoft@c+1,f,c
  6039  0034CE  3224               	rrcf	___lltoft@c,f,c
  6040  0034D0  2A2C               	incf	___lltoft@exp,f,c
  6041  0034D2                     l2798:
  6042  0034D2  0E00               	movlw	0
  6043  0034D4  1424               	andwf	___lltoft@c,w,c
  6044  0034D6  6E28               	movwf	??___lltoft& (0+255),c
  6045  0034D8  0E00               	movlw	0
  6046  0034DA  1425               	andwf	___lltoft@c+1,w,c
  6047  0034DC  6E29               	movwf	(??___lltoft+1)& (0+255),c
  6048  0034DE  0E00               	movlw	0
  6049  0034E0  1426               	andwf	___lltoft@c+2,w,c
  6050  0034E2  6E2A               	movwf	(??___lltoft+2)& (0+255),c
  6051  0034E4  0EFF               	movlw	255
  6052  0034E6  1427               	andwf	___lltoft@c+3,w,c
  6053  0034E8  6E2B               	movwf	(??___lltoft+3)& (0+255),c
  6054  0034EA  5028               	movf	??___lltoft,w,c
  6055  0034EC  1029               	iorwf	??___lltoft+1,w,c
  6056  0034EE  102A               	iorwf	??___lltoft+2,w,c
  6057  0034F0  102B               	iorwf	??___lltoft+3,w,c
  6058  0034F2  A4D8               	btfss	status,2,c
  6059  0034F4  D7E8               	goto	l2796
  6060  0034F6  C024  F001         	movff	___lltoft@c,___ftpack@arg
  6061  0034FA  C025  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6062  0034FE  C026  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6063  003502  C02C  F004         	movff	___lltoft@exp,___ftpack@exp
  6064  003506  0E00               	movlw	0
  6065  003508  6E05               	movwf	___ftpack@sign,c
  6066  00350A  EC81  F018         	call	___ftpack	;wreg free
  6067  00350E  C001  F024         	movff	?___ftpack,?___lltoft
  6068  003512  C002  F025         	movff	?___ftpack+1,?___lltoft+1
  6069  003516  C003  F026         	movff	?___ftpack+2,?___lltoft+2
  6070  00351A  0012               	return	
  6071  00351C                     __end_of___lltoft:
  6072                           	opt stack 0
  6073                           tblptru	equ	0xFF8
  6074                           tblptrh	equ	0xFF7
  6075                           tblptrl	equ	0xFF6
  6076                           tablat	equ	0xFF5
  6077                           prodh	equ	0xFF4
  6078                           prodl	equ	0xFF3
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           postdec1	equ	0xFE5
  6082                           plusw1	equ	0xFE3
  6083                           fsr1l	equ	0xFE1
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           plusw2	equ	0xFDB
  6088                           fsr2h	equ	0xFDA
  6089                           fsr2l	equ	0xFD9
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function ___llmod *****************
  6093 ;; Defined at:
  6094 ;;		line 8 in file "D:\Hella\Compiler\sources\common\llmod.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  dividend        4   13[COMRAM] unsigned long 
  6097 ;;  divisor         4   17[COMRAM] unsigned long 
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;  counter         1   21[COMRAM] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  4   13[COMRAM] unsigned long 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6109 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;Total ram usage:        9 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; This function calls:
  6116 ;;		Nothing
  6117 ;; This function is called by:
  6118 ;;		_sprintf
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text15
  6123  00345A                     __ptext15:
  6124                           	opt stack 0
  6125  00345A                     ___llmod:
  6126                           	opt stack 28
  6127                           
  6128                           ;incstack = 0
  6129  00345A  5012               	movf	___llmod@divisor,w,c
  6130  00345C  1013               	iorwf	___llmod@divisor+1,w,c
  6131  00345E  1014               	iorwf	___llmod@divisor+2,w,c
  6132  003460  1015               	iorwf	___llmod@divisor+3,w,c
  6133  003462  B4D8               	btfsc	status,2,c
  6134  003464  D024               	goto	l708
  6135  003466  0E01               	movlw	1
  6136  003468  6E16               	movwf	___llmod@counter,c
  6137  00346A  D006               	goto	l2784
  6138  00346C                     l2782:
  6139  00346C  90D8               	bcf	status,0,c
  6140  00346E  3612               	rlcf	___llmod@divisor,f,c
  6141  003470  3613               	rlcf	___llmod@divisor+1,f,c
  6142  003472  3614               	rlcf	___llmod@divisor+2,f,c
  6143  003474  3615               	rlcf	___llmod@divisor+3,f,c
  6144  003476  2A16               	incf	___llmod@counter,f,c
  6145  003478                     l2784:
  6146  003478  AE15               	btfss	___llmod@divisor+3,7,c
  6147  00347A  D7F8               	goto	l2782
  6148  00347C                     l2786:
  6149  00347C  5012               	movf	___llmod@divisor,w,c
  6150  00347E  5C0E               	subwf	___llmod@dividend,w,c
  6151  003480  5013               	movf	___llmod@divisor+1,w,c
  6152  003482  580F               	subwfb	___llmod@dividend+1,w,c
  6153  003484  5014               	movf	___llmod@divisor+2,w,c
  6154  003486  5810               	subwfb	___llmod@dividend+2,w,c
  6155  003488  5015               	movf	___llmod@divisor+3,w,c
  6156  00348A  5811               	subwfb	___llmod@dividend+3,w,c
  6157  00348C  A0D8               	btfss	status,0,c
  6158  00348E  D008               	goto	l2790
  6159  003490  5012               	movf	___llmod@divisor,w,c
  6160  003492  5E0E               	subwf	___llmod@dividend,f,c
  6161  003494  5013               	movf	___llmod@divisor+1,w,c
  6162  003496  5A0F               	subwfb	___llmod@dividend+1,f,c
  6163  003498  5014               	movf	___llmod@divisor+2,w,c
  6164  00349A  5A10               	subwfb	___llmod@dividend+2,f,c
  6165  00349C  5015               	movf	___llmod@divisor+3,w,c
  6166  00349E  5A11               	subwfb	___llmod@dividend+3,f,c
  6167  0034A0                     l2790:
  6168  0034A0  90D8               	bcf	status,0,c
  6169  0034A2  3215               	rrcf	___llmod@divisor+3,f,c
  6170  0034A4  3214               	rrcf	___llmod@divisor+2,f,c
  6171  0034A6  3213               	rrcf	___llmod@divisor+1,f,c
  6172  0034A8  3212               	rrcf	___llmod@divisor,f,c
  6173  0034AA  2E16               	decfsz	___llmod@counter,f,c
  6174  0034AC  D7E7               	goto	l2786
  6175  0034AE                     l708:
  6176  0034AE  C00E  F00E         	movff	___llmod@dividend,?___llmod
  6177  0034B2  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  6178  0034B6  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  6179  0034BA  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  6180  0034BE  0012               	return		;funcret
  6181  0034C0                     __end_of___llmod:
  6182                           	opt stack 0
  6183                           tblptru	equ	0xFF8
  6184                           tblptrh	equ	0xFF7
  6185                           tblptrl	equ	0xFF6
  6186                           tablat	equ	0xFF5
  6187                           prodh	equ	0xFF4
  6188                           prodl	equ	0xFF3
  6189                           postinc0	equ	0xFEE
  6190                           wreg	equ	0xFE8
  6191                           postdec1	equ	0xFE5
  6192                           plusw1	equ	0xFE3
  6193                           fsr1l	equ	0xFE1
  6194                           indf2	equ	0xFDF
  6195                           postinc2	equ	0xFDE
  6196                           postdec2	equ	0xFDD
  6197                           plusw2	equ	0xFDB
  6198                           fsr2h	equ	0xFDA
  6199                           fsr2l	equ	0xFD9
  6200                           status	equ	0xFD8
  6201                           
  6202 ;; *************** function ___lldiv *****************
  6203 ;; Defined at:
  6204 ;;		line 8 in file "D:\Hella\Compiler\sources\common\lldiv.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  dividend        4    0[COMRAM] unsigned long 
  6207 ;;  divisor         4    4[COMRAM] unsigned long 
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  quotient        4    8[COMRAM] unsigned long 
  6210 ;;  counter         1   12[COMRAM] unsigned char 
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  4    0[COMRAM] unsigned long 
  6213 ;; Registers used:
  6214 ;;		wreg, status,2, status,0
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6220 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;Total ram usage:       13 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; This function calls:
  6227 ;;		Nothing
  6228 ;; This function is called by:
  6229 ;;		_sprintf
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text16
  6234  003368                     __ptext16:
  6235                           	opt stack 0
  6236  003368                     ___lldiv:
  6237                           	opt stack 28
  6238                           
  6239                           ;incstack = 0
  6240  003368  0E00               	movlw	0
  6241  00336A  6E09               	movwf	___lldiv@quotient,c
  6242  00336C  0E00               	movlw	0
  6243  00336E  6E0A               	movwf	___lldiv@quotient+1,c
  6244  003370  0E00               	movlw	0
  6245  003372  6E0B               	movwf	___lldiv@quotient+2,c
  6246  003374  0E00               	movlw	0
  6247  003376  6E0C               	movwf	___lldiv@quotient+3,c
  6248  003378  5005               	movf	___lldiv@divisor,w,c
  6249  00337A  1006               	iorwf	___lldiv@divisor+1,w,c
  6250  00337C  1007               	iorwf	___lldiv@divisor+2,w,c
  6251  00337E  1008               	iorwf	___lldiv@divisor+3,w,c
  6252  003380  B4D8               	btfsc	status,2,c
  6253  003382  D02A               	goto	l698
  6254  003384  0E01               	movlw	1
  6255  003386  6E0D               	movwf	___lldiv@counter,c
  6256  003388  D006               	goto	l2764
  6257  00338A                     l2762:
  6258  00338A  90D8               	bcf	status,0,c
  6259  00338C  3605               	rlcf	___lldiv@divisor,f,c
  6260  00338E  3606               	rlcf	___lldiv@divisor+1,f,c
  6261  003390  3607               	rlcf	___lldiv@divisor+2,f,c
  6262  003392  3608               	rlcf	___lldiv@divisor+3,f,c
  6263  003394  2A0D               	incf	___lldiv@counter,f,c
  6264  003396                     l2764:
  6265  003396  AE08               	btfss	___lldiv@divisor+3,7,c
  6266  003398  D7F8               	goto	l2762
  6267  00339A                     l2766:
  6268  00339A  90D8               	bcf	status,0,c
  6269  00339C  3609               	rlcf	___lldiv@quotient,f,c
  6270  00339E  360A               	rlcf	___lldiv@quotient+1,f,c
  6271  0033A0  360B               	rlcf	___lldiv@quotient+2,f,c
  6272  0033A2  360C               	rlcf	___lldiv@quotient+3,f,c
  6273  0033A4  5005               	movf	___lldiv@divisor,w,c
  6274  0033A6  5C01               	subwf	___lldiv@dividend,w,c
  6275  0033A8  5006               	movf	___lldiv@divisor+1,w,c
  6276  0033AA  5802               	subwfb	___lldiv@dividend+1,w,c
  6277  0033AC  5007               	movf	___lldiv@divisor+2,w,c
  6278  0033AE  5803               	subwfb	___lldiv@dividend+2,w,c
  6279  0033B0  5008               	movf	___lldiv@divisor+3,w,c
  6280  0033B2  5804               	subwfb	___lldiv@dividend+3,w,c
  6281  0033B4  A0D8               	btfss	status,0,c
  6282  0033B6  D009               	goto	l2774
  6283  0033B8  5005               	movf	___lldiv@divisor,w,c
  6284  0033BA  5E01               	subwf	___lldiv@dividend,f,c
  6285  0033BC  5006               	movf	___lldiv@divisor+1,w,c
  6286  0033BE  5A02               	subwfb	___lldiv@dividend+1,f,c
  6287  0033C0  5007               	movf	___lldiv@divisor+2,w,c
  6288  0033C2  5A03               	subwfb	___lldiv@dividend+2,f,c
  6289  0033C4  5008               	movf	___lldiv@divisor+3,w,c
  6290  0033C6  5A04               	subwfb	___lldiv@dividend+3,f,c
  6291  0033C8  8009               	bsf	___lldiv@quotient,0,c
  6292  0033CA                     l2774:
  6293  0033CA  90D8               	bcf	status,0,c
  6294  0033CC  3208               	rrcf	___lldiv@divisor+3,f,c
  6295  0033CE  3207               	rrcf	___lldiv@divisor+2,f,c
  6296  0033D0  3206               	rrcf	___lldiv@divisor+1,f,c
  6297  0033D2  3205               	rrcf	___lldiv@divisor,f,c
  6298  0033D4  2E0D               	decfsz	___lldiv@counter,f,c
  6299  0033D6  D7E1               	goto	l2766
  6300  0033D8                     l698:
  6301  0033D8  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6302  0033DC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6303  0033E0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6304  0033E4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6305  0033E8  0012               	return		;funcret
  6306  0033EA                     __end_of___lldiv:
  6307                           	opt stack 0
  6308                           tblptru	equ	0xFF8
  6309                           tblptrh	equ	0xFF7
  6310                           tblptrl	equ	0xFF6
  6311                           tablat	equ	0xFF5
  6312                           prodh	equ	0xFF4
  6313                           prodl	equ	0xFF3
  6314                           postinc0	equ	0xFEE
  6315                           wreg	equ	0xFE8
  6316                           postdec1	equ	0xFE5
  6317                           plusw1	equ	0xFE3
  6318                           fsr1l	equ	0xFE1
  6319                           indf2	equ	0xFDF
  6320                           postinc2	equ	0xFDE
  6321                           postdec2	equ	0xFDD
  6322                           plusw2	equ	0xFDB
  6323                           fsr2h	equ	0xFDA
  6324                           fsr2l	equ	0xFD9
  6325                           status	equ	0xFD8
  6326                           
  6327 ;; *************** function ___fttol *****************
  6328 ;; Defined at:
  6329 ;;		line 44 in file "D:\Hella\Compiler\sources\common\fttol.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  f1              3   20[COMRAM] float 
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  lval            4   30[COMRAM] unsigned long 
  6334 ;;  exp1            1   34[COMRAM] unsigned char 
  6335 ;;  sign1           1   29[COMRAM] unsigned char 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  4   20[COMRAM] long 
  6338 ;; Registers used:
  6339 ;;		wreg, status,2, status,0
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;Total ram usage:       15 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; This function calls:
  6352 ;;		Nothing
  6353 ;; This function is called by:
  6354 ;;		_sprintf
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           	psect	text17
  6359  002E5C                     __ptext17:
  6360                           	opt stack 0
  6361  002E5C                     ___fttol:
  6362                           	opt stack 28
  6363                           
  6364                           ;incstack = 0
  6365  002E5C  C017  F019         	movff	___fttol@f1+2,??___fttol
  6366  002E60  6A1A               	clrf	(??___fttol+1)& (0+255),c
  6367  002E62  6A1B               	clrf	(??___fttol+2)& (0+255),c
  6368  002E64  3416               	rlcf	___fttol@f1+1,w,c
  6369  002E66  3619               	rlcf	??___fttol& (0+255),f,c
  6370  002E68  E301               	bnc	u2611
  6371  002E6A  801A               	bsf	(??___fttol+1)& (0+255),0,c
  6372  002E6C                     u2611:
  6373  002E6C  5019               	movf	??___fttol,w,c
  6374  002E6E  6E23               	movwf	___fttol@exp1,c
  6375  002E70  5023               	movf	___fttol@exp1,w,c
  6376  002E72  A4D8               	btfss	status,2,c
  6377  002E74  D009               	goto	l2716
  6378  002E76  0E00               	movlw	0
  6379  002E78  6E15               	movwf	?___fttol,c
  6380  002E7A  0E00               	movlw	0
  6381  002E7C  6E16               	movwf	?___fttol+1,c
  6382  002E7E  0E00               	movlw	0
  6383  002E80  6E17               	movwf	?___fttol+2,c
  6384  002E82  0E00               	movlw	0
  6385  002E84  6E18               	movwf	?___fttol+3,c
  6386  002E86  0012               	return	
  6387  002E88                     l2716:
  6388  002E88  0E17               	movlw	23
  6389  002E8A  6E19               	movwf	??___fttol& (0+255),c
  6390  002E8C  C015  F01A         	movff	___fttol@f1,??___fttol+1
  6391  002E90  C016  F01B         	movff	___fttol@f1+1,??___fttol+2
  6392  002E94  C017  F01C         	movff	___fttol@f1+2,??___fttol+3
  6393  002E98  2819               	incf	??___fttol,w,c
  6394  002E9A  6E1D               	movwf	(??___fttol+4)& (0+255),c
  6395  002E9C  D004               	goto	u2630
  6396  002E9E                     u2635:
  6397  002E9E  90D8               	bcf	status,0,c
  6398  002EA0  321C               	rrcf	??___fttol+3,f,c
  6399  002EA2  321B               	rrcf	??___fttol+2,f,c
  6400  002EA4  321A               	rrcf	??___fttol+1,f,c
  6401  002EA6                     u2630:
  6402  002EA6  2E1D               	decfsz	(??___fttol+4)& (0+255),f,c
  6403  002EA8  D7FA               	goto	u2635
  6404  002EAA  501A               	movf	??___fttol+1,w,c
  6405  002EAC  6E1E               	movwf	___fttol@sign1,c
  6406  002EAE  8E16               	bsf	___fttol@f1+1,7,c
  6407  002EB0  0EFF               	movlw	255
  6408  002EB2  1615               	andwf	___fttol@f1,f,c
  6409  002EB4  0EFF               	movlw	255
  6410  002EB6  1616               	andwf	___fttol@f1+1,f,c
  6411  002EB8  0E00               	movlw	0
  6412  002EBA  1617               	andwf	___fttol@f1+2,f,c
  6413  002EBC  5015               	movf	___fttol@f1,w,c
  6414  002EBE  6E1F               	movwf	___fttol@lval,c
  6415  002EC0  5016               	movf	___fttol@f1+1,w,c
  6416  002EC2  6E20               	movwf	___fttol@lval+1,c
  6417  002EC4  5017               	movf	___fttol@f1+2,w,c
  6418  002EC6  6E21               	movwf	___fttol@lval+2,c
  6419  002EC8  6A22               	clrf	___fttol@lval+3,c
  6420  002ECA  0E8E               	movlw	142
  6421  002ECC  5E23               	subwf	___fttol@exp1,f,c
  6422  002ECE  AE23               	btfss	___fttol@exp1,7,c
  6423  002ED0  D016               	goto	l2738
  6424  002ED2  5023               	movf	___fttol@exp1,w,c
  6425  002ED4  0A80               	xorlw	128
  6426  002ED6  0F8F               	addlw	143
  6427  002ED8  B0D8               	btfsc	status,0,c
  6428  002EDA  D009               	goto	l2734
  6429  002EDC  0E00               	movlw	0
  6430  002EDE  6E15               	movwf	?___fttol,c
  6431  002EE0  0E00               	movlw	0
  6432  002EE2  6E16               	movwf	?___fttol+1,c
  6433  002EE4  0E00               	movlw	0
  6434  002EE6  6E17               	movwf	?___fttol+2,c
  6435  002EE8  0E00               	movlw	0
  6436  002EEA  6E18               	movwf	?___fttol+3,c
  6437  002EEC  0012               	return	
  6438  002EEE                     l2734:
  6439  002EEE  90D8               	bcf	status,0,c
  6440  002EF0  3222               	rrcf	___fttol@lval+3,f,c
  6441  002EF2  3221               	rrcf	___fttol@lval+2,f,c
  6442  002EF4  3220               	rrcf	___fttol@lval+1,f,c
  6443  002EF6  321F               	rrcf	___fttol@lval,f,c
  6444  002EF8  3E23               	incfsz	___fttol@exp1,f,c
  6445  002EFA  D7F9               	goto	l2734
  6446  002EFC  D015               	goto	l2748
  6447  002EFE                     l2738:
  6448  002EFE  0E17               	movlw	23
  6449  002F00  6423               	cpfsgt	___fttol@exp1,c
  6450  002F02  D00F               	goto	l2746
  6451  002F04  0E00               	movlw	0
  6452  002F06  6E15               	movwf	?___fttol,c
  6453  002F08  0E00               	movlw	0
  6454  002F0A  6E16               	movwf	?___fttol+1,c
  6455  002F0C  0E00               	movlw	0
  6456  002F0E  6E17               	movwf	?___fttol+2,c
  6457  002F10  0E00               	movlw	0
  6458  002F12  6E18               	movwf	?___fttol+3,c
  6459  002F14  0012               	return	
  6460  002F16                     l2744:
  6461  002F16  90D8               	bcf	status,0,c
  6462  002F18  361F               	rlcf	___fttol@lval,f,c
  6463  002F1A  3620               	rlcf	___fttol@lval+1,f,c
  6464  002F1C  3621               	rlcf	___fttol@lval+2,f,c
  6465  002F1E  3622               	rlcf	___fttol@lval+3,f,c
  6466  002F20  0623               	decf	___fttol@exp1,f,c
  6467  002F22                     l2746:
  6468  002F22  5023               	movf	___fttol@exp1,w,c
  6469  002F24  A4D8               	btfss	status,2,c
  6470  002F26  D7F7               	goto	l2744
  6471  002F28                     l2748:
  6472  002F28  501E               	movf	___fttol@sign1,w,c
  6473  002F2A  B4D8               	btfsc	status,2,c
  6474  002F2C  D008               	goto	l2752
  6475  002F2E  1E22               	comf	___fttol@lval+3,f,c
  6476  002F30  1E21               	comf	___fttol@lval+2,f,c
  6477  002F32  1E20               	comf	___fttol@lval+1,f,c
  6478  002F34  6C1F               	negf	___fttol@lval,c
  6479  002F36  0E00               	movlw	0
  6480  002F38  2220               	addwfc	___fttol@lval+1,f,c
  6481  002F3A  2221               	addwfc	___fttol@lval+2,f,c
  6482  002F3C  2222               	addwfc	___fttol@lval+3,f,c
  6483  002F3E                     l2752:
  6484  002F3E  C01F  F015         	movff	___fttol@lval,?___fttol
  6485  002F42  C020  F016         	movff	___fttol@lval+1,?___fttol+1
  6486  002F46  C021  F017         	movff	___fttol@lval+2,?___fttol+2
  6487  002F4A  C022  F018         	movff	___fttol@lval+3,?___fttol+3
  6488  002F4E  0012               	return	
  6489  002F50                     __end_of___fttol:
  6490                           	opt stack 0
  6491                           tblptru	equ	0xFF8
  6492                           tblptrh	equ	0xFF7
  6493                           tblptrl	equ	0xFF6
  6494                           tablat	equ	0xFF5
  6495                           prodh	equ	0xFF4
  6496                           prodl	equ	0xFF3
  6497                           postinc0	equ	0xFEE
  6498                           wreg	equ	0xFE8
  6499                           postdec1	equ	0xFE5
  6500                           plusw1	equ	0xFE3
  6501                           fsr1l	equ	0xFE1
  6502                           indf2	equ	0xFDF
  6503                           postinc2	equ	0xFDE
  6504                           postdec2	equ	0xFDD
  6505                           plusw2	equ	0xFDB
  6506                           fsr2h	equ	0xFDA
  6507                           fsr2l	equ	0xFD9
  6508                           status	equ	0xFD8
  6509                           
  6510 ;; *************** function ___ftsub *****************
  6511 ;; Defined at:
  6512 ;;		line 20 in file "D:\Hella\Compiler\sources\common\ftsub.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;  f1              3   84[COMRAM] float 
  6515 ;;  f2              3   87[COMRAM] float 
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;		None
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  3   84[COMRAM] float 
  6520 ;; Registers used:
  6521 ;;		wreg, status,2, status,0, cstack
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6527 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;Total ram usage:        6 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    2
  6534 ;; This function calls:
  6535 ;;		___ftadd
  6536 ;; This function is called by:
  6537 ;;		_sprintf
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           	psect	text18
  6542  003618                     __ptext18:
  6543                           	opt stack 0
  6544  003618                     ___ftsub:
  6545                           	opt stack 26
  6546                           
  6547                           ;incstack = 0
  6548  003618  5058               	movf	___ftsub@f2,w,c
  6549  00361A  1059               	iorwf	___ftsub@f2+1,w,c
  6550  00361C  105A               	iorwf	___ftsub@f2+2,w,c
  6551  00361E  B4D8               	btfsc	status,2,c
  6552  003620  D006               	goto	l2684
  6553  003622  0E00               	movlw	0
  6554  003624  1A58               	xorwf	___ftsub@f2,f,c
  6555  003626  0E00               	movlw	0
  6556  003628  1A59               	xorwf	___ftsub@f2+1,f,c
  6557  00362A  0E80               	movlw	128
  6558  00362C  1A5A               	xorwf	___ftsub@f2+2,f,c
  6559  00362E                     l2684:
  6560  00362E  C055  F049         	movff	___ftsub@f1,___ftadd@f1
  6561  003632  C056  F04A         	movff	___ftsub@f1+1,___ftadd@f1+1
  6562  003636  C057  F04B         	movff	___ftsub@f1+2,___ftadd@f1+2
  6563  00363A  C058  F04C         	movff	___ftsub@f2,___ftadd@f2
  6564  00363E  C059  F04D         	movff	___ftsub@f2+1,___ftadd@f2+1
  6565  003642  C05A  F04E         	movff	___ftsub@f2+2,___ftadd@f2+2
  6566  003646  EC1B  F014         	call	___ftadd	;wreg free
  6567  00364A  C049  F055         	movff	?___ftadd,?___ftsub
  6568  00364E  C04A  F056         	movff	?___ftadd+1,?___ftsub+1
  6569  003652  C04B  F057         	movff	?___ftadd+2,?___ftsub+2
  6570  003656  0012               	return	
  6571  003658                     __end_of___ftsub:
  6572                           	opt stack 0
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           postinc0	equ	0xFEE
  6580                           wreg	equ	0xFE8
  6581                           postdec1	equ	0xFE5
  6582                           plusw1	equ	0xFE3
  6583                           fsr1l	equ	0xFE1
  6584                           indf2	equ	0xFDF
  6585                           postinc2	equ	0xFDE
  6586                           postdec2	equ	0xFDD
  6587                           plusw2	equ	0xFDB
  6588                           fsr2h	equ	0xFDA
  6589                           fsr2l	equ	0xFD9
  6590                           status	equ	0xFD8
  6591                           
  6592 ;; *************** function ___ftadd *****************
  6593 ;; Defined at:
  6594 ;;		line 86 in file "D:\Hella\Compiler\sources\common\ftadd.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  f1              3   72[COMRAM] float 
  6597 ;;  f2              3   75[COMRAM] float 
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;  exp1            1   83[COMRAM] unsigned char 
  6600 ;;  exp2            1   82[COMRAM] unsigned char 
  6601 ;;  sign            1   81[COMRAM] unsigned char 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  3   72[COMRAM] float 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6611 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;Total ram usage:       12 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    1
  6618 ;; This function calls:
  6619 ;;		___ftpack
  6620 ;; This function is called by:
  6621 ;;		_sprintf
  6622 ;;		___ftsub
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           	psect	text19
  6627  002836                     __ptext19:
  6628                           	opt stack 0
  6629  002836                     ___ftadd:
  6630                           	opt stack 26
  6631                           
  6632                           ;incstack = 0
  6633  002836  C04B  F04F         	movff	___ftadd@f1+2,??___ftadd
  6634  00283A  6A50               	clrf	(??___ftadd+1)& (0+255),c
  6635  00283C  6A51               	clrf	(??___ftadd+2)& (0+255),c
  6636  00283E  344A               	rlcf	___ftadd@f1+1,w,c
  6637  002840  364F               	rlcf	??___ftadd& (0+255),f,c
  6638  002842  E301               	bnc	u1871
  6639  002844  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  6640  002846                     u1871:
  6641  002846  504F               	movf	??___ftadd,w,c
  6642  002848  6E54               	movwf	___ftadd@exp1,c
  6643  00284A  C04E  F04F         	movff	___ftadd@f2+2,??___ftadd
  6644  00284E  6A50               	clrf	(??___ftadd+1)& (0+255),c
  6645  002850  6A51               	clrf	(??___ftadd+2)& (0+255),c
  6646  002852  344D               	rlcf	___ftadd@f2+1,w,c
  6647  002854  364F               	rlcf	??___ftadd& (0+255),f,c
  6648  002856  E301               	bnc	u1881
  6649  002858  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  6650  00285A                     u1881:
  6651  00285A  504F               	movf	??___ftadd,w,c
  6652  00285C  6E53               	movwf	___ftadd@exp2,c
  6653  00285E  5054               	movf	___ftadd@exp1,w,c
  6654  002860  B4D8               	btfsc	status,2,c
  6655  002862  D00B               	goto	l574
  6656  002864  5053               	movf	___ftadd@exp2,w,c
  6657  002866  5C54               	subwf	___ftadd@exp1,w,c
  6658  002868  B0D8               	btfsc	status,0,c
  6659  00286A  D00E               	goto	l2252
  6660  00286C  5054               	movf	___ftadd@exp1,w,c
  6661  00286E  0800               	sublw	0
  6662  002870  2453               	addwf	___ftadd@exp2,w,c
  6663  002872  6E4F               	movwf	??___ftadd& (0+255),c
  6664  002874  0E18               	movlw	24
  6665  002876  644F               	cpfsgt	??___ftadd,c
  6666  002878  D007               	goto	l2252
  6667  00287A                     l574:
  6668  00287A  C04C  F049         	movff	___ftadd@f2,?___ftadd
  6669  00287E  C04D  F04A         	movff	___ftadd@f2+1,?___ftadd+1
  6670  002882  C04E  F04B         	movff	___ftadd@f2+2,?___ftadd+2
  6671  002886  0012               	return	
  6672  002888                     l2252:
  6673  002888  5053               	movf	___ftadd@exp2,w,c
  6674  00288A  B4D8               	btfsc	status,2,c
  6675  00288C  D00B               	goto	l578
  6676  00288E  5054               	movf	___ftadd@exp1,w,c
  6677  002890  5C53               	subwf	___ftadd@exp2,w,c
  6678  002892  B0D8               	btfsc	status,0,c
  6679  002894  D00E               	goto	l2258
  6680  002896  5053               	movf	___ftadd@exp2,w,c
  6681  002898  0800               	sublw	0
  6682  00289A  2454               	addwf	___ftadd@exp1,w,c
  6683  00289C  6E4F               	movwf	??___ftadd& (0+255),c
  6684  00289E  0E18               	movlw	24
  6685  0028A0  644F               	cpfsgt	??___ftadd,c
  6686  0028A2  D007               	goto	l2258
  6687  0028A4                     l578:
  6688  0028A4  C049  F049         	movff	___ftadd@f1,?___ftadd
  6689  0028A8  C04A  F04A         	movff	___ftadd@f1+1,?___ftadd+1
  6690  0028AC  C04B  F04B         	movff	___ftadd@f1+2,?___ftadd+2
  6691  0028B0  0012               	return	
  6692  0028B2                     l2258:
  6693  0028B2  0E06               	movlw	6
  6694  0028B4  6E52               	movwf	___ftadd@sign,c
  6695  0028B6  BE4B               	btfsc	___ftadd@f1+2,7,c
  6696  0028B8  8E52               	bsf	___ftadd@sign,7,c
  6697  0028BA  BE4E               	btfsc	___ftadd@f2+2,7,c
  6698  0028BC  8C52               	bsf	___ftadd@sign,6,c
  6699  0028BE  8E4A               	bsf	___ftadd@f1+1,7,c
  6700  0028C0  0EFF               	movlw	255
  6701  0028C2  1649               	andwf	___ftadd@f1,f,c
  6702  0028C4  0EFF               	movlw	255
  6703  0028C6  164A               	andwf	___ftadd@f1+1,f,c
  6704  0028C8  0E00               	movlw	0
  6705  0028CA  164B               	andwf	___ftadd@f1+2,f,c
  6706  0028CC  8E4D               	bsf	___ftadd@f2+1,7,c
  6707  0028CE  0EFF               	movlw	255
  6708  0028D0  164C               	andwf	___ftadd@f2,f,c
  6709  0028D2  0EFF               	movlw	255
  6710  0028D4  164D               	andwf	___ftadd@f2+1,f,c
  6711  0028D6  0E00               	movlw	0
  6712  0028D8  164E               	andwf	___ftadd@f2+2,f,c
  6713  0028DA  5053               	movf	___ftadd@exp2,w,c
  6714  0028DC  5C54               	subwf	___ftadd@exp1,w,c
  6715  0028DE  B0D8               	btfsc	status,0,c
  6716  0028E0  D01B               	goto	l2284
  6717  0028E2                     l2274:
  6718  0028E2  90D8               	bcf	status,0,c
  6719  0028E4  364C               	rlcf	___ftadd@f2,f,c
  6720  0028E6  364D               	rlcf	___ftadd@f2+1,f,c
  6721  0028E8  364E               	rlcf	___ftadd@f2+2,f,c
  6722  0028EA  0653               	decf	___ftadd@exp2,f,c
  6723  0028EC  5054               	movf	___ftadd@exp1,w,c
  6724  0028EE  1853               	xorwf	___ftadd@exp2,w,c
  6725  0028F0  B4D8               	btfsc	status,2,c
  6726  0028F2  D00D               	goto	l2282
  6727  0028F4  0652               	decf	___ftadd@sign,f,c
  6728  0028F6  C052  F04F         	movff	___ftadd@sign,??___ftadd
  6729  0028FA  0E07               	movlw	7
  6730  0028FC  164F               	andwf	??___ftadd,f,c
  6731  0028FE  B4D8               	btfsc	status,2,c
  6732  002900  D006               	goto	l2282
  6733  002902  D7EF               	goto	l2274
  6734  002904                     l2280:
  6735  002904  90D8               	bcf	status,0,c
  6736  002906  324B               	rrcf	___ftadd@f1+2,f,c
  6737  002908  324A               	rrcf	___ftadd@f1+1,f,c
  6738  00290A  3249               	rrcf	___ftadd@f1,f,c
  6739  00290C  2A54               	incf	___ftadd@exp1,f,c
  6740  00290E                     l2282:
  6741  00290E  5053               	movf	___ftadd@exp2,w,c
  6742  002910  1854               	xorwf	___ftadd@exp1,w,c
  6743  002912  B4D8               	btfsc	status,2,c
  6744  002914  D01F               	goto	l589
  6745  002916  D7F6               	goto	l2280
  6746  002918                     l2284:
  6747  002918  5054               	movf	___ftadd@exp1,w,c
  6748  00291A  5C53               	subwf	___ftadd@exp2,w,c
  6749  00291C  B0D8               	btfsc	status,0,c
  6750  00291E  D01A               	goto	l589
  6751  002920                     l2286:
  6752  002920  90D8               	bcf	status,0,c
  6753  002922  3649               	rlcf	___ftadd@f1,f,c
  6754  002924  364A               	rlcf	___ftadd@f1+1,f,c
  6755  002926  364B               	rlcf	___ftadd@f1+2,f,c
  6756  002928  0654               	decf	___ftadd@exp1,f,c
  6757  00292A  5054               	movf	___ftadd@exp1,w,c
  6758  00292C  1853               	xorwf	___ftadd@exp2,w,c
  6759  00292E  B4D8               	btfsc	status,2,c
  6760  002930  D00D               	goto	l2294
  6761  002932  0652               	decf	___ftadd@sign,f,c
  6762  002934  C052  F04F         	movff	___ftadd@sign,??___ftadd
  6763  002938  0E07               	movlw	7
  6764  00293A  164F               	andwf	??___ftadd,f,c
  6765  00293C  B4D8               	btfsc	status,2,c
  6766  00293E  D006               	goto	l2294
  6767  002940  D7EF               	goto	l2286
  6768  002942                     l2292:
  6769  002942  90D8               	bcf	status,0,c
  6770  002944  324E               	rrcf	___ftadd@f2+2,f,c
  6771  002946  324D               	rrcf	___ftadd@f2+1,f,c
  6772  002948  324C               	rrcf	___ftadd@f2,f,c
  6773  00294A  2A53               	incf	___ftadd@exp2,f,c
  6774  00294C                     l2294:
  6775  00294C  5053               	movf	___ftadd@exp2,w,c
  6776  00294E  1854               	xorwf	___ftadd@exp1,w,c
  6777  002950  A4D8               	btfss	status,2,c
  6778  002952  D7F7               	goto	l2292
  6779  002954                     l589:
  6780  002954  AE52               	btfss	___ftadd@sign,7,c
  6781  002956  D00C               	goto	l598
  6782  002958  0EFF               	movlw	255
  6783  00295A  1A49               	xorwf	___ftadd@f1,f,c
  6784  00295C  0EFF               	movlw	255
  6785  00295E  1A4A               	xorwf	___ftadd@f1+1,f,c
  6786  002960  0EFF               	movlw	255
  6787  002962  1A4B               	xorwf	___ftadd@f1+2,f,c
  6788  002964  0E01               	movlw	1
  6789  002966  2649               	addwf	___ftadd@f1,f,c
  6790  002968  0E00               	movlw	0
  6791  00296A  224A               	addwfc	___ftadd@f1+1,f,c
  6792  00296C  0E00               	movlw	0
  6793  00296E  224B               	addwfc	___ftadd@f1+2,f,c
  6794  002970                     l598:
  6795  002970  AC52               	btfss	___ftadd@sign,6,c
  6796  002972  D00C               	goto	l2300
  6797  002974  0EFF               	movlw	255
  6798  002976  1A4C               	xorwf	___ftadd@f2,f,c
  6799  002978  0EFF               	movlw	255
  6800  00297A  1A4D               	xorwf	___ftadd@f2+1,f,c
  6801  00297C  0EFF               	movlw	255
  6802  00297E  1A4E               	xorwf	___ftadd@f2+2,f,c
  6803  002980  0E01               	movlw	1
  6804  002982  264C               	addwf	___ftadd@f2,f,c
  6805  002984  0E00               	movlw	0
  6806  002986  224D               	addwfc	___ftadd@f2+1,f,c
  6807  002988  0E00               	movlw	0
  6808  00298A  224E               	addwfc	___ftadd@f2+2,f,c
  6809  00298C                     l2300:
  6810  00298C  0E00               	movlw	0
  6811  00298E  6E52               	movwf	___ftadd@sign,c
  6812  002990  5049               	movf	___ftadd@f1,w,c
  6813  002992  264C               	addwf	___ftadd@f2,f,c
  6814  002994  504A               	movf	___ftadd@f1+1,w,c
  6815  002996  224D               	addwfc	___ftadd@f2+1,f,c
  6816  002998  504B               	movf	___ftadd@f1+2,w,c
  6817  00299A  224E               	addwfc	___ftadd@f2+2,f,c
  6818  00299C  AE4E               	btfss	___ftadd@f2+2,7,c
  6819  00299E  D00E               	goto	l2310
  6820  0029A0  0EFF               	movlw	255
  6821  0029A2  1A4C               	xorwf	___ftadd@f2,f,c
  6822  0029A4  0EFF               	movlw	255
  6823  0029A6  1A4D               	xorwf	___ftadd@f2+1,f,c
  6824  0029A8  0EFF               	movlw	255
  6825  0029AA  1A4E               	xorwf	___ftadd@f2+2,f,c
  6826  0029AC  0E01               	movlw	1
  6827  0029AE  264C               	addwf	___ftadd@f2,f,c
  6828  0029B0  0E00               	movlw	0
  6829  0029B2  224D               	addwfc	___ftadd@f2+1,f,c
  6830  0029B4  0E00               	movlw	0
  6831  0029B6  224E               	addwfc	___ftadd@f2+2,f,c
  6832  0029B8  0E01               	movlw	1
  6833  0029BA  6E52               	movwf	___ftadd@sign,c
  6834  0029BC                     l2310:
  6835  0029BC  C04C  F001         	movff	___ftadd@f2,___ftpack@arg
  6836  0029C0  C04D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6837  0029C4  C04E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6838  0029C8  C054  F004         	movff	___ftadd@exp1,___ftpack@exp
  6839  0029CC  C052  F005         	movff	___ftadd@sign,___ftpack@sign
  6840  0029D0  EC81  F018         	call	___ftpack	;wreg free
  6841  0029D4  C001  F049         	movff	?___ftpack,?___ftadd
  6842  0029D8  C002  F04A         	movff	?___ftpack+1,?___ftadd+1
  6843  0029DC  C003  F04B         	movff	?___ftpack+2,?___ftadd+2
  6844  0029E0  0012               	return	
  6845  0029E2                     __end_of___ftadd:
  6846                           	opt stack 0
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           prodh	equ	0xFF4
  6852                           prodl	equ	0xFF3
  6853                           postinc0	equ	0xFEE
  6854                           wreg	equ	0xFE8
  6855                           postdec1	equ	0xFE5
  6856                           plusw1	equ	0xFE3
  6857                           fsr1l	equ	0xFE1
  6858                           indf2	equ	0xFDF
  6859                           postinc2	equ	0xFDE
  6860                           postdec2	equ	0xFDD
  6861                           plusw2	equ	0xFDB
  6862                           fsr2h	equ	0xFDA
  6863                           fsr2l	equ	0xFD9
  6864                           status	equ	0xFD8
  6865                           
  6866 ;; *************** function ___ftneg *****************
  6867 ;; Defined at:
  6868 ;;		line 15 in file "D:\Hella\Compiler\sources\common\ftneg.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;  f1              3   44[COMRAM] float 
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;		None
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  3   44[COMRAM] float 
  6875 ;; Registers used:
  6876 ;;		wreg, status,2, status,0
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6882 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;Total ram usage:        3 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_sprintf
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           	psect	text20
  6896  003766                     __ptext20:
  6897                           	opt stack 0
  6898  003766                     ___ftneg:
  6899                           	opt stack 28
  6900                           
  6901                           ;incstack = 0
  6902  003766  502D               	movf	___ftneg@f1,w,c
  6903  003768  102E               	iorwf	___ftneg@f1+1,w,c
  6904  00376A  102F               	iorwf	___ftneg@f1+2,w,c
  6905  00376C  B4D8               	btfsc	status,2,c
  6906  00376E  D006               	goto	l648
  6907  003770  0E00               	movlw	0
  6908  003772  1A2D               	xorwf	___ftneg@f1,f,c
  6909  003774  0E00               	movlw	0
  6910  003776  1A2E               	xorwf	___ftneg@f1+1,f,c
  6911  003778  0E80               	movlw	128
  6912  00377A  1A2F               	xorwf	___ftneg@f1+2,f,c
  6913  00377C                     l648:
  6914  00377C  C02D  F02D         	movff	___ftneg@f1,?___ftneg
  6915  003780  C02E  F02E         	movff	___ftneg@f1+1,?___ftneg+1
  6916  003784  C02F  F02F         	movff	___ftneg@f1+2,?___ftneg+2
  6917  003788  0012               	return		;funcret
  6918  00378A                     __end_of___ftneg:
  6919                           	opt stack 0
  6920                           tblptru	equ	0xFF8
  6921                           tblptrh	equ	0xFF7
  6922                           tblptrl	equ	0xFF6
  6923                           tablat	equ	0xFF5
  6924                           prodh	equ	0xFF4
  6925                           prodl	equ	0xFF3
  6926                           postinc0	equ	0xFEE
  6927                           wreg	equ	0xFE8
  6928                           postdec1	equ	0xFE5
  6929                           plusw1	equ	0xFE3
  6930                           fsr1l	equ	0xFE1
  6931                           indf2	equ	0xFDF
  6932                           postinc2	equ	0xFDE
  6933                           postdec2	equ	0xFDD
  6934                           plusw2	equ	0xFDB
  6935                           fsr2h	equ	0xFDA
  6936                           fsr2l	equ	0xFD9
  6937                           status	equ	0xFD8
  6938                           
  6939 ;; *************** function ___ftge *****************
  6940 ;; Defined at:
  6941 ;;		line 4 in file "D:\Hella\Compiler\sources\common\ftge.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;  ff1             3   84[COMRAM] float 
  6944 ;;  ff2             3   87[COMRAM] float 
  6945 ;; Auto vars:     Size  Location     Type
  6946 ;;		None
  6947 ;; Return value:  Size  Location     Type
  6948 ;;		None               void
  6949 ;; Registers used:
  6950 ;;		wreg, status,2, status,0
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6956 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6959 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;Total ram usage:        9 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; This function calls:
  6963 ;;		Nothing
  6964 ;; This function is called by:
  6965 ;;		_sprintf
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           	psect	text21
  6970  003254                     __ptext21:
  6971                           	opt stack 0
  6972  003254                     ___ftge:
  6973                           	opt stack 28
  6974                           
  6975                           ;incstack = 0
  6976  003254  AE57               	btfss	___ftge@ff1+2,7,c
  6977  003256  D016               	goto	l2692
  6978  003258  C055  F05B         	movff	___ftge@ff1,??___ftge
  6979  00325C  C056  F05C         	movff	___ftge@ff1+1,??___ftge+1
  6980  003260  C057  F05D         	movff	___ftge@ff1+2,??___ftge+2
  6981  003264  1E5B               	comf	??___ftge,f,c
  6982  003266  1E5C               	comf	??___ftge+1,f,c
  6983  003268  1E5D               	comf	??___ftge+2,f,c
  6984  00326A  2A5B               	incf	??___ftge,f,c
  6985  00326C  0E00               	movlw	0
  6986  00326E  225C               	addwfc	??___ftge+1,f,c
  6987  003270  225D               	addwfc	??___ftge+2,f,c
  6988  003272  0E00               	movlw	0
  6989  003274  245B               	addwf	??___ftge,w,c
  6990  003276  6E55               	movwf	___ftge@ff1,c
  6991  003278  0E00               	movlw	0
  6992  00327A  205C               	addwfc	??___ftge+1,w,c
  6993  00327C  6E56               	movwf	___ftge@ff1+1,c
  6994  00327E  0E80               	movlw	128
  6995  003280  205D               	addwfc	??___ftge+2,w,c
  6996  003282  6E57               	movwf	___ftge@ff1+2,c
  6997  003284                     l2692:
  6998  003284  AE5A               	btfss	___ftge@ff2+2,7,c
  6999  003286  D016               	goto	l2696
  7000  003288  C058  F05B         	movff	___ftge@ff2,??___ftge
  7001  00328C  C059  F05C         	movff	___ftge@ff2+1,??___ftge+1
  7002  003290  C05A  F05D         	movff	___ftge@ff2+2,??___ftge+2
  7003  003294  1E5B               	comf	??___ftge,f,c
  7004  003296  1E5C               	comf	??___ftge+1,f,c
  7005  003298  1E5D               	comf	??___ftge+2,f,c
  7006  00329A  2A5B               	incf	??___ftge,f,c
  7007  00329C  0E00               	movlw	0
  7008  00329E  225C               	addwfc	??___ftge+1,f,c
  7009  0032A0  225D               	addwfc	??___ftge+2,f,c
  7010  0032A2  0E00               	movlw	0
  7011  0032A4  245B               	addwf	??___ftge,w,c
  7012  0032A6  6E58               	movwf	___ftge@ff2,c
  7013  0032A8  0E00               	movlw	0
  7014  0032AA  205C               	addwfc	??___ftge+1,w,c
  7015  0032AC  6E59               	movwf	___ftge@ff2+1,c
  7016  0032AE  0E80               	movlw	128
  7017  0032B0  205D               	addwfc	??___ftge+2,w,c
  7018  0032B2  6E5A               	movwf	___ftge@ff2+2,c
  7019  0032B4                     l2696:
  7020  0032B4  0E00               	movlw	0
  7021  0032B6  1A55               	xorwf	___ftge@ff1,f,c
  7022  0032B8  0E00               	movlw	0
  7023  0032BA  1A56               	xorwf	___ftge@ff1+1,f,c
  7024  0032BC  0E80               	movlw	128
  7025  0032BE  1A57               	xorwf	___ftge@ff1+2,f,c
  7026  0032C0  0E00               	movlw	0
  7027  0032C2  1A58               	xorwf	___ftge@ff2,f,c
  7028  0032C4  0E00               	movlw	0
  7029  0032C6  1A59               	xorwf	___ftge@ff2+1,f,c
  7030  0032C8  0E80               	movlw	128
  7031  0032CA  1A5A               	xorwf	___ftge@ff2+2,f,c
  7032  0032CC  5058               	movf	___ftge@ff2,w,c
  7033  0032CE  5C55               	subwf	___ftge@ff1,w,c
  7034  0032D0  5059               	movf	___ftge@ff2+1,w,c
  7035  0032D2  5856               	subwfb	___ftge@ff1+1,w,c
  7036  0032D4  505A               	movf	___ftge@ff2+2,w,c
  7037  0032D6  5857               	subwfb	___ftge@ff1+2,w,c
  7038  0032D8  B0D8               	btfsc	status,0,c
  7039  0032DA  D002               	goto	l2702
  7040  0032DC  90D8               	bcf	status,0,c
  7041  0032DE  0012               	return	
  7042  0032E0                     l2702:
  7043  0032E0  80D8               	bsf	status,0,c
  7044  0032E2  0012               	return	
  7045  0032E4                     __end_of___ftge:
  7046                           	opt stack 0
  7047                           tblptru	equ	0xFF8
  7048                           tblptrh	equ	0xFF7
  7049                           tblptrl	equ	0xFF6
  7050                           tablat	equ	0xFF5
  7051                           prodh	equ	0xFF4
  7052                           prodl	equ	0xFF3
  7053                           postinc0	equ	0xFEE
  7054                           wreg	equ	0xFE8
  7055                           postdec1	equ	0xFE5
  7056                           plusw1	equ	0xFE3
  7057                           fsr1l	equ	0xFE1
  7058                           indf2	equ	0xFDF
  7059                           postinc2	equ	0xFDE
  7060                           postdec2	equ	0xFDD
  7061                           plusw2	equ	0xFDB
  7062                           fsr2h	equ	0xFDA
  7063                           fsr2l	equ	0xFD9
  7064                           status	equ	0xFD8
  7065                           
  7066 ;; *************** function ___ftdiv *****************
  7067 ;; Defined at:
  7068 ;;		line 54 in file "D:\Hella\Compiler\sources\common\ftdiv.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;  f1              3   69[COMRAM] float 
  7071 ;;  f2              3   72[COMRAM] float 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;  f3              3   79[COMRAM] float 
  7074 ;;  sign            1   83[COMRAM] unsigned char 
  7075 ;;  exp             1   82[COMRAM] unsigned char 
  7076 ;;  cntr            1   78[COMRAM] unsigned char 
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  3   69[COMRAM] float 
  7079 ;; Registers used:
  7080 ;;		wreg, status,2, status,0, cstack
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7086 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7090 ;;Total ram usage:       15 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:    1
  7093 ;; This function calls:
  7094 ;;		___ftpack
  7095 ;; This function is called by:
  7096 ;;		_sequence2
  7097 ;;		_sequence3
  7098 ;;		_sequence4
  7099 ;;		_sprintf
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           	psect	text22
  7104  002F50                     __ptext22:
  7105                           	opt stack 0
  7106  002F50                     ___ftdiv:
  7107                           	opt stack 27
  7108                           
  7109                           ;incstack = 0
  7110  002F50  C048  F04C         	movff	___ftdiv@f1+2,??___ftdiv
  7111  002F54  6A4D               	clrf	(??___ftdiv+1)& (0+255),c
  7112  002F56  6A4E               	clrf	(??___ftdiv+2)& (0+255),c
  7113  002F58  3447               	rlcf	___ftdiv@f1+1,w,c
  7114  002F5A  364C               	rlcf	??___ftdiv& (0+255),f,c
  7115  002F5C  E301               	bnc	u2511
  7116  002F5E  804D               	bsf	(??___ftdiv+1)& (0+255),0,c
  7117  002F60                     u2511:
  7118  002F60  504C               	movf	??___ftdiv,w,c
  7119  002F62  6E53               	movwf	___ftdiv@exp,c
  7120  002F64  5053               	movf	___ftdiv@exp,w,c
  7121  002F66  A4D8               	btfss	status,2,c
  7122  002F68  D007               	goto	l2640
  7123  002F6A  0E00               	movlw	0
  7124  002F6C  6E46               	movwf	?___ftdiv,c
  7125  002F6E  0E00               	movlw	0
  7126  002F70  6E47               	movwf	?___ftdiv+1,c
  7127  002F72  0E00               	movlw	0
  7128  002F74  6E48               	movwf	?___ftdiv+2,c
  7129  002F76  0012               	return	
  7130  002F78                     l2640:
  7131  002F78  C04B  F04C         	movff	___ftdiv@f2+2,??___ftdiv
  7132  002F7C  6A4D               	clrf	(??___ftdiv+1)& (0+255),c
  7133  002F7E  6A4E               	clrf	(??___ftdiv+2)& (0+255),c
  7134  002F80  344A               	rlcf	___ftdiv@f2+1,w,c
  7135  002F82  364C               	rlcf	??___ftdiv& (0+255),f,c
  7136  002F84  E301               	bnc	u2531
  7137  002F86  804D               	bsf	(??___ftdiv+1)& (0+255),0,c
  7138  002F88                     u2531:
  7139  002F88  504C               	movf	??___ftdiv,w,c
  7140  002F8A  6E54               	movwf	___ftdiv@sign,c
  7141  002F8C  5054               	movf	___ftdiv@sign,w,c
  7142  002F8E  A4D8               	btfss	status,2,c
  7143  002F90  D007               	goto	l2646
  7144  002F92  0E00               	movlw	0
  7145  002F94  6E46               	movwf	?___ftdiv,c
  7146  002F96  0E00               	movlw	0
  7147  002F98  6E47               	movwf	?___ftdiv+1,c
  7148  002F9A  0E00               	movlw	0
  7149  002F9C  6E48               	movwf	?___ftdiv+2,c
  7150  002F9E  0012               	return	
  7151  002FA0                     l2646:
  7152  002FA0  0E00               	movlw	0
  7153  002FA2  6E50               	movwf	___ftdiv@f3,c
  7154  002FA4  0E00               	movlw	0
  7155  002FA6  6E51               	movwf	___ftdiv@f3+1,c
  7156  002FA8  0E00               	movlw	0
  7157  002FAA  6E52               	movwf	___ftdiv@f3+2,c
  7158  002FAC  5054               	movf	___ftdiv@sign,w,c
  7159  002FAE  0F89               	addlw	137
  7160  002FB0  5E53               	subwf	___ftdiv@exp,f,c
  7161  002FB2  C048  F054         	movff	___ftdiv@f1+2,___ftdiv@sign
  7162  002FB6  504B               	movf	___ftdiv@f2+2,w,c
  7163  002FB8  1A54               	xorwf	___ftdiv@sign,f,c
  7164  002FBA  0E80               	movlw	128
  7165  002FBC  1654               	andwf	___ftdiv@sign,f,c
  7166  002FBE  8E47               	bsf	___ftdiv@f1+1,7,c
  7167  002FC0  0EFF               	movlw	255
  7168  002FC2  1646               	andwf	___ftdiv@f1,f,c
  7169  002FC4  0EFF               	movlw	255
  7170  002FC6  1647               	andwf	___ftdiv@f1+1,f,c
  7171  002FC8  0E00               	movlw	0
  7172  002FCA  1648               	andwf	___ftdiv@f1+2,f,c
  7173  002FCC  8E4A               	bsf	___ftdiv@f2+1,7,c
  7174  002FCE  0EFF               	movlw	255
  7175  002FD0  1649               	andwf	___ftdiv@f2,f,c
  7176  002FD2  0EFF               	movlw	255
  7177  002FD4  164A               	andwf	___ftdiv@f2+1,f,c
  7178  002FD6  0E00               	movlw	0
  7179  002FD8  164B               	andwf	___ftdiv@f2+2,f,c
  7180  002FDA  0E18               	movlw	24
  7181  002FDC  6E4F               	movwf	___ftdiv@cntr,c
  7182  002FDE                     l2666:
  7183  002FDE  90D8               	bcf	status,0,c
  7184  002FE0  3650               	rlcf	___ftdiv@f3,f,c
  7185  002FE2  3651               	rlcf	___ftdiv@f3+1,f,c
  7186  002FE4  3652               	rlcf	___ftdiv@f3+2,f,c
  7187  002FE6  5049               	movf	___ftdiv@f2,w,c
  7188  002FE8  5C46               	subwf	___ftdiv@f1,w,c
  7189  002FEA  504A               	movf	___ftdiv@f2+1,w,c
  7190  002FEC  5847               	subwfb	___ftdiv@f1+1,w,c
  7191  002FEE  504B               	movf	___ftdiv@f2+2,w,c
  7192  002FF0  5848               	subwfb	___ftdiv@f1+2,w,c
  7193  002FF2  A0D8               	btfss	status,0,c
  7194  002FF4  D007               	goto	l609
  7195  002FF6  5049               	movf	___ftdiv@f2,w,c
  7196  002FF8  5E46               	subwf	___ftdiv@f1,f,c
  7197  002FFA  504A               	movf	___ftdiv@f2+1,w,c
  7198  002FFC  5A47               	subwfb	___ftdiv@f1+1,f,c
  7199  002FFE  504B               	movf	___ftdiv@f2+2,w,c
  7200  003000  5A48               	subwfb	___ftdiv@f1+2,f,c
  7201  003002  8050               	bsf	___ftdiv@f3,0,c
  7202  003004                     l609:
  7203  003004  90D8               	bcf	status,0,c
  7204  003006  3646               	rlcf	___ftdiv@f1,f,c
  7205  003008  3647               	rlcf	___ftdiv@f1+1,f,c
  7206  00300A  3648               	rlcf	___ftdiv@f1+2,f,c
  7207  00300C  2E4F               	decfsz	___ftdiv@cntr,f,c
  7208  00300E  D7E7               	goto	l2666
  7209  003010  C050  F001         	movff	___ftdiv@f3,___ftpack@arg
  7210  003014  C051  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7211  003018  C052  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7212  00301C  C053  F004         	movff	___ftdiv@exp,___ftpack@exp
  7213  003020  C054  F005         	movff	___ftdiv@sign,___ftpack@sign
  7214  003024  EC81  F018         	call	___ftpack	;wreg free
  7215  003028  C001  F046         	movff	?___ftpack,?___ftdiv
  7216  00302C  C002  F047         	movff	?___ftpack+1,?___ftdiv+1
  7217  003030  C003  F048         	movff	?___ftpack+2,?___ftdiv+2
  7218  003034  0012               	return	
  7219  003036                     __end_of___ftdiv:
  7220                           	opt stack 0
  7221                           tblptru	equ	0xFF8
  7222                           tblptrh	equ	0xFF7
  7223                           tblptrl	equ	0xFF6
  7224                           tablat	equ	0xFF5
  7225                           prodh	equ	0xFF4
  7226                           prodl	equ	0xFF3
  7227                           postinc0	equ	0xFEE
  7228                           wreg	equ	0xFE8
  7229                           postdec1	equ	0xFE5
  7230                           plusw1	equ	0xFE3
  7231                           fsr1l	equ	0xFE1
  7232                           indf2	equ	0xFDF
  7233                           postinc2	equ	0xFDE
  7234                           postdec2	equ	0xFDD
  7235                           plusw2	equ	0xFDB
  7236                           fsr2h	equ	0xFDA
  7237                           fsr2l	equ	0xFD9
  7238                           status	equ	0xFD8
  7239                           
  7240 ;; *************** function ___awtoft *****************
  7241 ;; Defined at:
  7242 ;;		line 32 in file "D:\Hella\Compiler\sources\common\awtoft.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  c               2    8[COMRAM] int 
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;  sign            1   11[COMRAM] unsigned char 
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  3    8[COMRAM] float 
  7249 ;; Registers used:
  7250 ;;		wreg, status,2, status,0, cstack
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7256 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7260 ;;Total ram usage:        4 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    1
  7263 ;; This function calls:
  7264 ;;		___ftpack
  7265 ;; This function is called by:
  7266 ;;		_sequence2
  7267 ;;		_sequence3
  7268 ;;		_sequence4
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           	psect	text23
  7273  003658                     __ptext23:
  7274                           	opt stack 0
  7275  003658                     ___awtoft:
  7276                           	opt stack 28
  7277                           
  7278                           ;incstack = 0
  7279  003658  0E00               	movlw	0
  7280  00365A  6E0C               	movwf	___awtoft@sign,c
  7281  00365C  AE0A               	btfss	___awtoft@c+1,7,c
  7282  00365E  D006               	goto	l3240
  7283  003660  6C09               	negf	___awtoft@c,c
  7284  003662  1E0A               	comf	___awtoft@c+1,f,c
  7285  003664  B0D8               	btfsc	status,0,c
  7286  003666  2A0A               	incf	___awtoft@c+1,f,c
  7287  003668  0E01               	movlw	1
  7288  00366A  6E0C               	movwf	___awtoft@sign,c
  7289  00366C                     l3240:
  7290  00366C  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7291  003670  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7292  003674  6A03               	clrf	___ftpack@arg+2,c
  7293  003676  0E8E               	movlw	142
  7294  003678  6E04               	movwf	___ftpack@exp,c
  7295  00367A  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7296  00367E  EC81  F018         	call	___ftpack	;wreg free
  7297  003682  C001  F009         	movff	?___ftpack,?___awtoft
  7298  003686  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  7299  00368A  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  7300  00368E  0012               	return	
  7301  003690                     __end_of___awtoft:
  7302                           	opt stack 0
  7303                           tblptru	equ	0xFF8
  7304                           tblptrh	equ	0xFF7
  7305                           tblptrl	equ	0xFF6
  7306                           tablat	equ	0xFF5
  7307                           prodh	equ	0xFF4
  7308                           prodl	equ	0xFF3
  7309                           postinc0	equ	0xFEE
  7310                           wreg	equ	0xFE8
  7311                           postdec1	equ	0xFE5
  7312                           plusw1	equ	0xFE3
  7313                           fsr1l	equ	0xFE1
  7314                           indf2	equ	0xFDF
  7315                           postinc2	equ	0xFDE
  7316                           postdec2	equ	0xFDD
  7317                           plusw2	equ	0xFDB
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322 ;; *************** function ___ftpack *****************
  7323 ;; Defined at:
  7324 ;;		line 62 in file "D:\Hella\Compiler\sources\common\float.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  arg             3    0[COMRAM] unsigned um
  7327 ;;  exp             1    3[COMRAM] unsigned char 
  7328 ;;  sign            1    4[COMRAM] unsigned char 
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;		None
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  3    0[COMRAM] float 
  7333 ;; Registers used:
  7334 ;;		wreg, status,2, status,0
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7340 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;Total ram usage:        8 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; This function calls:
  7347 ;;		Nothing
  7348 ;; This function is called by:
  7349 ;;		___awtoft
  7350 ;;		___ftadd
  7351 ;;		___ftdiv
  7352 ;;		___ftmul
  7353 ;;		___lltoft
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           	psect	text24
  7358  003102                     __ptext24:
  7359                           	opt stack 0
  7360  003102                     ___ftpack:
  7361                           	opt stack 26
  7362                           
  7363                           ;incstack = 0
  7364  003102  5004               	movf	___ftpack@exp,w,c
  7365  003104  B4D8               	btfsc	status,2,c
  7366  003106  D005               	goto	l2196
  7367  003108  5001               	movf	___ftpack@arg,w,c
  7368  00310A  1002               	iorwf	___ftpack@arg+1,w,c
  7369  00310C  1003               	iorwf	___ftpack@arg+2,w,c
  7370  00310E  A4D8               	btfss	status,2,c
  7371  003110  D00C               	goto	l2202
  7372  003112                     l2196:
  7373  003112  0E00               	movlw	0
  7374  003114  6E01               	movwf	?___ftpack,c
  7375  003116  0E00               	movlw	0
  7376  003118  6E02               	movwf	?___ftpack+1,c
  7377  00311A  0E00               	movlw	0
  7378  00311C  6E03               	movwf	?___ftpack+2,c
  7379  00311E  0012               	return	
  7380  003120                     l2200:
  7381  003120  2A04               	incf	___ftpack@exp,f,c
  7382  003122  90D8               	bcf	status,0,c
  7383  003124  3203               	rrcf	___ftpack@arg+2,f,c
  7384  003126  3202               	rrcf	___ftpack@arg+1,f,c
  7385  003128  3201               	rrcf	___ftpack@arg,f,c
  7386  00312A                     l2202:
  7387  00312A  0E00               	movlw	0
  7388  00312C  1401               	andwf	___ftpack@arg,w,c
  7389  00312E  6E06               	movwf	??___ftpack& (0+255),c
  7390  003130  0E00               	movlw	0
  7391  003132  1402               	andwf	___ftpack@arg+1,w,c
  7392  003134  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7393  003136  0EFE               	movlw	254
  7394  003138  1403               	andwf	___ftpack@arg+2,w,c
  7395  00313A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7396  00313C  5006               	movf	??___ftpack,w,c
  7397  00313E  1007               	iorwf	??___ftpack+1,w,c
  7398  003140  1008               	iorwf	??___ftpack+2,w,c
  7399  003142  B4D8               	btfsc	status,2,c
  7400  003144  D00C               	goto	l2208
  7401  003146  D7EC               	goto	l2200
  7402  003148                     l2204:
  7403  003148  2A04               	incf	___ftpack@exp,f,c
  7404  00314A  0E01               	movlw	1
  7405  00314C  2601               	addwf	___ftpack@arg,f,c
  7406  00314E  0E00               	movlw	0
  7407  003150  2202               	addwfc	___ftpack@arg+1,f,c
  7408  003152  0E00               	movlw	0
  7409  003154  2203               	addwfc	___ftpack@arg+2,f,c
  7410  003156  90D8               	bcf	status,0,c
  7411  003158  3203               	rrcf	___ftpack@arg+2,f,c
  7412  00315A  3202               	rrcf	___ftpack@arg+1,f,c
  7413  00315C  3201               	rrcf	___ftpack@arg,f,c
  7414  00315E                     l2208:
  7415  00315E  0E00               	movlw	0
  7416  003160  1401               	andwf	___ftpack@arg,w,c
  7417  003162  6E06               	movwf	??___ftpack& (0+255),c
  7418  003164  0E00               	movlw	0
  7419  003166  1402               	andwf	___ftpack@arg+1,w,c
  7420  003168  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7421  00316A  0EFF               	movlw	255
  7422  00316C  1403               	andwf	___ftpack@arg+2,w,c
  7423  00316E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7424  003170  5006               	movf	??___ftpack,w,c
  7425  003172  1007               	iorwf	??___ftpack+1,w,c
  7426  003174  1008               	iorwf	??___ftpack+2,w,c
  7427  003176  B4D8               	btfsc	status,2,c
  7428  003178  D006               	goto	l2212
  7429  00317A  D7E6               	goto	l2204
  7430  00317C                     l2210:
  7431  00317C  0604               	decf	___ftpack@exp,f,c
  7432  00317E  90D8               	bcf	status,0,c
  7433  003180  3601               	rlcf	___ftpack@arg,f,c
  7434  003182  3602               	rlcf	___ftpack@arg+1,f,c
  7435  003184  3603               	rlcf	___ftpack@arg+2,f,c
  7436  003186                     l2212:
  7437  003186  BE02               	btfsc	___ftpack@arg+1,7,c
  7438  003188  D003               	goto	l551
  7439  00318A  0E02               	movlw	2
  7440  00318C  6004               	cpfslt	___ftpack@exp,c
  7441  00318E  D7F6               	goto	l2210
  7442  003190                     l551:
  7443  003190  A004               	btfss	___ftpack@exp,0,c
  7444  003192  9E02               	bcf	___ftpack@arg+1,7,c
  7445  003194  90D8               	bcf	status,0,c
  7446  003196  3204               	rrcf	___ftpack@exp,f,c
  7447  003198  5004               	movf	___ftpack@exp,w,c
  7448  00319A  1203               	iorwf	___ftpack@arg+2,f,c
  7449  00319C  5005               	movf	___ftpack@sign,w,c
  7450  00319E  A4D8               	btfss	status,2,c
  7451  0031A0  8E03               	bsf	___ftpack@arg+2,7,c
  7452  0031A2  C001  F001         	movff	___ftpack@arg,?___ftpack
  7453  0031A6  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7454  0031AA  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7455  0031AE  0012               	return	
  7456  0031B0                     __end_of___ftpack:
  7457                           	opt stack 0
  7458                           tblptru	equ	0xFF8
  7459                           tblptrh	equ	0xFF7
  7460                           tblptrl	equ	0xFF6
  7461                           tablat	equ	0xFF5
  7462                           prodh	equ	0xFF4
  7463                           prodl	equ	0xFF3
  7464                           postinc0	equ	0xFEE
  7465                           wreg	equ	0xFE8
  7466                           postdec1	equ	0xFE5
  7467                           plusw1	equ	0xFE3
  7468                           fsr1l	equ	0xFE1
  7469                           indf2	equ	0xFDF
  7470                           postinc2	equ	0xFDE
  7471                           postdec2	equ	0xFDD
  7472                           plusw2	equ	0xFDB
  7473                           fsr2h	equ	0xFDA
  7474                           fsr2l	equ	0xFD9
  7475                           status	equ	0xFD8
  7476                           
  7477 ;; *************** function _LcdWriteString *****************
  7478 ;; Defined at:
  7479 ;;		line 202 in file "lcd.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;  s               2    5[COMRAM] PTR const unsigned char 
  7482 ;;		 -> sequence4@message(16), sequence3@message(16), sequence2@message(16), 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;		None
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  1    wreg      void 
  7487 ;; Registers used:
  7488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7498 ;;Total ram usage:        2 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    3
  7501 ;; This function calls:
  7502 ;;		_LcdChar
  7503 ;; This function is called by:
  7504 ;;		_sequence2
  7505 ;;		_sequence3
  7506 ;;		_sequence4
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text25
  7511  00378A                     __ptext25:
  7512                           	opt stack 0
  7513  00378A                     _LcdWriteString:
  7514                           	opt stack 26
  7515                           
  7516                           ;lcd.c: 204: while(*s)
  7517                           
  7518                           ;incstack = 0
  7519  00378A  D009               	goto	l2842
  7520  00378C                     l2838:
  7521                           
  7522                           ;lcd.c: 205: {
  7523                           ;lcd.c: 206: LcdChar(*s++);
  7524  00378C  C006  FFD9         	movff	LcdWriteString@s,fsr2l
  7525  003790  C007  FFDA         	movff	LcdWriteString@s+1,fsr2h
  7526  003794  50DF               	movf	indf2,w,c
  7527  003796  EC5E  F01B         	call	_LcdChar
  7528  00379A  4A06               	infsnz	LcdWriteString@s,f,c
  7529  00379C  2A07               	incf	LcdWriteString@s+1,f,c
  7530  00379E                     l2842:
  7531  00379E  C006  FFD9         	movff	LcdWriteString@s,fsr2l
  7532  0037A2  C007  FFDA         	movff	LcdWriteString@s+1,fsr2h
  7533  0037A6  50DF               	movf	indf2,w,c
  7534  0037A8  B4D8               	btfsc	status,2,c
  7535  0037AA  0012               	return	
  7536  0037AC  D7EF               	goto	l2838
  7537  0037AE                     __end_of_LcdWriteString:
  7538                           	opt stack 0
  7539                           tblptru	equ	0xFF8
  7540                           tblptrh	equ	0xFF7
  7541                           tblptrl	equ	0xFF6
  7542                           tablat	equ	0xFF5
  7543                           prodh	equ	0xFF4
  7544                           prodl	equ	0xFF3
  7545                           postinc0	equ	0xFEE
  7546                           wreg	equ	0xFE8
  7547                           postdec1	equ	0xFE5
  7548                           plusw1	equ	0xFE3
  7549                           fsr1l	equ	0xFE1
  7550                           indf2	equ	0xFDF
  7551                           postinc2	equ	0xFDE
  7552                           postdec2	equ	0xFDD
  7553                           plusw2	equ	0xFDB
  7554                           fsr2h	equ	0xFDA
  7555                           fsr2l	equ	0xFD9
  7556                           status	equ	0xFD8
  7557                           
  7558 ;; *************** function _LcdChar *****************
  7559 ;; Defined at:
  7560 ;;		line 186 in file "lcd.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;  letter          1    wreg     unsigned char 
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;  letter          1    4[COMRAM] unsigned char 
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  1    wreg      void 
  7567 ;; Registers used:
  7568 ;;		wreg, status,2, cstack
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;Total ram usage:        1 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; Hardware stack levels required when called:    2
  7581 ;; This function calls:
  7582 ;;		_setGPIO
  7583 ;; This function is called by:
  7584 ;;		_LcdWriteString
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           	psect	text26
  7589  0036BC                     __ptext26:
  7590                           	opt stack 0
  7591  0036BC                     _LcdChar:
  7592                           	opt stack 26
  7593                           
  7594                           ;incstack = 0
  7595                           ;LcdChar@letter stored from wreg
  7596  0036BC  6E05               	movwf	LcdChar@letter,c
  7597                           
  7598                           ;lcd.c: 188: setGPIO(0x12,0x80);
  7599  0036BE  0E80               	movlw	128
  7600  0036C0  6E03               	movwf	setGPIO@value,c
  7601  0036C2  0E12               	movlw	18
  7602  0036C4  ECF3  F01B         	call	_setGPIO
  7603                           
  7604                           ;lcd.c: 190: setGPIO(0x13,letter);
  7605  0036C8  C005  F003         	movff	LcdChar@letter,setGPIO@value
  7606  0036CC  0E13               	movlw	19
  7607  0036CE  ECF3  F01B         	call	_setGPIO
  7608                           
  7609                           ;lcd.c: 192: setGPIO(0x12, 0xc0);
  7610  0036D2  0EC0               	movlw	192
  7611  0036D4  6E03               	movwf	setGPIO@value,c
  7612  0036D6  0E12               	movlw	18
  7613  0036D8  ECF3  F01B         	call	_setGPIO
  7614                           
  7615                           ;lcd.c: 194: setGPIO(0x12,0x00);
  7616  0036DC  0E00               	movlw	0
  7617  0036DE  6E03               	movwf	setGPIO@value,c
  7618  0036E0  0E12               	movlw	18
  7619  0036E2  ECF3  F01B         	call	_setGPIO
  7620  0036E6  0012               	return		;funcret
  7621  0036E8                     __end_of_LcdChar:
  7622                           	opt stack 0
  7623                           tblptru	equ	0xFF8
  7624                           tblptrh	equ	0xFF7
  7625                           tblptrl	equ	0xFF6
  7626                           tablat	equ	0xFF5
  7627                           prodh	equ	0xFF4
  7628                           prodl	equ	0xFF3
  7629                           postinc0	equ	0xFEE
  7630                           wreg	equ	0xFE8
  7631                           postdec1	equ	0xFE5
  7632                           plusw1	equ	0xFE3
  7633                           fsr1l	equ	0xFE1
  7634                           indf2	equ	0xFDF
  7635                           postinc2	equ	0xFDE
  7636                           postdec2	equ	0xFDD
  7637                           plusw2	equ	0xFDB
  7638                           fsr2h	equ	0xFDA
  7639                           fsr2l	equ	0xFD9
  7640                           status	equ	0xFD8
  7641                           
  7642 ;; *************** function _LcdGoTo *****************
  7643 ;; Defined at:
  7644 ;;		line 176 in file "lcd.c"
  7645 ;; Parameters:    Size  Location     Type
  7646 ;;  pos             1    wreg     unsigned char 
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;  pos             1    5[COMRAM] unsigned char 
  7649 ;; Return value:  Size  Location     Type
  7650 ;;                  1    wreg      void 
  7651 ;; Registers used:
  7652 ;;		wreg, status,2, status,0, cstack
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;Total ram usage:        1 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; Hardware stack levels required when called:    3
  7665 ;; This function calls:
  7666 ;;		_lcdCommand
  7667 ;; This function is called by:
  7668 ;;		_sequence2
  7669 ;;		_sequence3
  7670 ;;		_sequence4
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           	psect	text27
  7675  003856                     __ptext27:
  7676                           	opt stack 0
  7677  003856                     _LcdGoTo:
  7678                           	opt stack 26
  7679                           
  7680                           ;incstack = 0
  7681                           ;LcdGoTo@pos stored from wreg
  7682  003856  6E06               	movwf	LcdGoTo@pos,c
  7683                           
  7684                           ;lcd.c: 179: lcdCommand(0x80+pos);
  7685  003858  5006               	movf	LcdGoTo@pos,w,c
  7686  00385A  0F80               	addlw	128
  7687  00385C  EC8A  F01B         	call	_lcdCommand
  7688  003860  0012               	return		;funcret
  7689  003862                     __end_of_LcdGoTo:
  7690                           	opt stack 0
  7691                           tblptru	equ	0xFF8
  7692                           tblptrh	equ	0xFF7
  7693                           tblptrl	equ	0xFF6
  7694                           tablat	equ	0xFF5
  7695                           prodh	equ	0xFF4
  7696                           prodl	equ	0xFF3
  7697                           postinc0	equ	0xFEE
  7698                           wreg	equ	0xFE8
  7699                           postdec1	equ	0xFE5
  7700                           plusw1	equ	0xFE3
  7701                           fsr1l	equ	0xFE1
  7702                           indf2	equ	0xFDF
  7703                           postinc2	equ	0xFDE
  7704                           postdec2	equ	0xFDD
  7705                           plusw2	equ	0xFDB
  7706                           fsr2h	equ	0xFDA
  7707                           fsr2l	equ	0xFD9
  7708                           status	equ	0xFD8
  7709                           
  7710 ;; *************** function _sequence1 *****************
  7711 ;; Defined at:
  7712 ;;		line 81 in file "AnalogInputs.c"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;		None
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;  potiValue       1    3[COMRAM] unsigned char 
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      void 
  7719 ;; Registers used:
  7720 ;;		wreg, status,2, status,0, cstack
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7727 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7729 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7730 ;;Total ram usage:        1 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:    1
  7733 ;; This function calls:
  7734 ;;		_delay50
  7735 ;; This function is called by:
  7736 ;;		_main
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           	psect	text28
  7741  003800                     __ptext28:
  7742                           	opt stack 0
  7743  003800                     _sequence1:
  7744                           	opt stack 29
  7745                           
  7746                           ;AnalogInputs.c: 83: byte potiValue = 0;
  7747                           
  7748                           ;incstack = 0
  7749  003800  0E00               	movlw	0
  7750  003802  6E04               	movwf	sequence1@potiValue,c
  7751                           
  7752                           ;AnalogInputs.c: 86: ADCON0bits.GO_DONE = 0x01;
  7753  003804  82C2               	bsf	4034,1,c	;volatile
  7754  003806                     l86:
  7755  003806  B2C2               	btfsc	4034,1,c	;volatile
  7756  003808  D7FE               	goto	l86
  7757                           
  7758                           ;AnalogInputs.c: 90: potiValue = ADRESH;
  7759  00380A  CFC4 F004          	movff	4036,sequence1@potiValue	;volatile
  7760                           
  7761                           ;AnalogInputs.c: 92: LATD = potiValue;
  7762  00380E  C004  FF8C         	movff	sequence1@potiValue,3980	;volatile
  7763                           
  7764                           ;AnalogInputs.c: 93: delay50();
  7765  003812  EC74  F01B         	call	_delay50	;wreg free
  7766  003816  0012               	return		;funcret
  7767  003818                     __end_of_sequence1:
  7768                           	opt stack 0
  7769                           tblptru	equ	0xFF8
  7770                           tblptrh	equ	0xFF7
  7771                           tblptrl	equ	0xFF6
  7772                           tablat	equ	0xFF5
  7773                           prodh	equ	0xFF4
  7774                           prodl	equ	0xFF3
  7775                           postinc0	equ	0xFEE
  7776                           wreg	equ	0xFE8
  7777                           postdec1	equ	0xFE5
  7778                           plusw1	equ	0xFE3
  7779                           fsr1l	equ	0xFE1
  7780                           indf2	equ	0xFDF
  7781                           postinc2	equ	0xFDE
  7782                           postdec2	equ	0xFDD
  7783                           plusw2	equ	0xFDB
  7784                           fsr2h	equ	0xFDA
  7785                           fsr2l	equ	0xFD9
  7786                           status	equ	0xFD8
  7787                           
  7788 ;; *************** function _delay50 *****************
  7789 ;; Defined at:
  7790 ;;		line 69 in file "AnalogInputs.c"
  7791 ;; Parameters:    Size  Location     Type
  7792 ;;		None
  7793 ;; Auto vars:     Size  Location     Type
  7794 ;;  i               2    1[COMRAM] unsigned int 
  7795 ;; Return value:  Size  Location     Type
  7796 ;;                  1    wreg      void 
  7797 ;; Registers used:
  7798 ;;		wreg, status,2, status,0
  7799 ;; Tracked objects:
  7800 ;;		On entry : 0/0
  7801 ;;		On exit  : 0/0
  7802 ;;		Unchanged: 0/0
  7803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7807 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7808 ;;Total ram usage:        3 bytes
  7809 ;; Hardware stack levels used:    1
  7810 ;; This function calls:
  7811 ;;		Nothing
  7812 ;; This function is called by:
  7813 ;;		_sequence1
  7814 ;; This function uses a non-reentrant model
  7815 ;;
  7816                           
  7817                           	psect	text29
  7818  0036E8                     __ptext29:
  7819                           	opt stack 0
  7820  0036E8                     _delay50:
  7821                           	opt stack 29
  7822                           
  7823                           ;AnalogInputs.c: 70: uint8 i;
  7824                           ;AnalogInputs.c: 71: for (i=0; i<50; i++) {
  7825                           
  7826                           ;incstack = 0
  7827  0036E8  0E00               	movlw	0
  7828  0036EA  6E03               	movwf	delay50@i+1,c
  7829  0036EC  0E00               	movlw	0
  7830  0036EE  6E02               	movwf	delay50@i,c
  7831  0036F0                     l2846:
  7832  0036F0  5003               	movf	delay50@i+1,w,c
  7833  0036F2  E10F               	bnz	l83
  7834  0036F4  0E32               	movlw	50
  7835  0036F6  5C02               	subwf	delay50@i,w,c
  7836  0036F8  B0D8               	btfsc	status,0,c
  7837  0036FA  0012               	return	
  7838                           
  7839                           ;AnalogInputs.c: 72: _delay(50000);
  7840  0036FC  0E41               	movlw	65
  7841  0036FE  6E01               	movwf	??_delay50& (0+255),c
  7842  003700  0EEE               	movlw	238
  7843  003702                     u3537:
  7844  003702  2EE8               	decfsz	wreg,f,c
  7845  003704  D7FE               	bra	u3537
  7846  003706  2E01               	decfsz	??_delay50& (0+255),f,c
  7847  003708  D7FC               	bra	u3537
  7848  00370A  D000               	nop2	
  7849  00370C  4A02               	infsnz	delay50@i,f,c
  7850  00370E  2A03               	incf	delay50@i+1,f,c
  7851  003710  D7EF               	goto	l2846
  7852  003712                     l83:
  7853  003712  0012               	return		;funcret
  7854  003714                     __end_of_delay50:
  7855                           	opt stack 0
  7856                           tblptru	equ	0xFF8
  7857                           tblptrh	equ	0xFF7
  7858                           tblptrl	equ	0xFF6
  7859                           tablat	equ	0xFF5
  7860                           prodh	equ	0xFF4
  7861                           prodl	equ	0xFF3
  7862                           postinc0	equ	0xFEE
  7863                           wreg	equ	0xFE8
  7864                           postdec1	equ	0xFE5
  7865                           plusw1	equ	0xFE3
  7866                           fsr1l	equ	0xFE1
  7867                           indf2	equ	0xFDF
  7868                           postinc2	equ	0xFDE
  7869                           postdec2	equ	0xFDD
  7870                           plusw2	equ	0xFDB
  7871                           fsr2h	equ	0xFDA
  7872                           fsr2l	equ	0xFD9
  7873                           status	equ	0xFD8
  7874                           
  7875 ;; *************** function _initLEDs *****************
  7876 ;; Defined at:
  7877 ;;		line 47 in file "AnalogInputs.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;		None
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;		None
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  1    wreg      void 
  7884 ;; Registers used:
  7885 ;;		wreg, status,2
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;Total ram usage:        0 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		_main
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           	psect	text30
  7905  003862                     __ptext30:
  7906                           	opt stack 0
  7907  003862                     _initLEDs:
  7908                           	opt stack 30
  7909                           
  7910                           ;AnalogInputs.c: 50: TRISD = 0x0;
  7911                           
  7912                           ;incstack = 0
  7913  003862  0E00               	movlw	0
  7914  003864  6E95               	movwf	3989,c	;volatile
  7915                           
  7916                           ;AnalogInputs.c: 52: LATD = 0x0;
  7917  003866  0E00               	movlw	0
  7918  003868  6E8C               	movwf	3980,c	;volatile
  7919  00386A  0012               	return		;funcret
  7920  00386C                     __end_of_initLEDs:
  7921                           	opt stack 0
  7922                           tblptru	equ	0xFF8
  7923                           tblptrh	equ	0xFF7
  7924                           tblptrl	equ	0xFF6
  7925                           tablat	equ	0xFF5
  7926                           prodh	equ	0xFF4
  7927                           prodl	equ	0xFF3
  7928                           postinc0	equ	0xFEE
  7929                           wreg	equ	0xFE8
  7930                           postdec1	equ	0xFE5
  7931                           plusw1	equ	0xFE3
  7932                           fsr1l	equ	0xFE1
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           plusw2	equ	0xFDB
  7937                           fsr2h	equ	0xFDA
  7938                           fsr2l	equ	0xFD9
  7939                           status	equ	0xFD8
  7940                           
  7941 ;; *************** function _initButtons *****************
  7942 ;; Defined at:
  7943 ;;		line 34 in file "AnalogInputs.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;		None
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;		None
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  1    wreg      void 
  7950 ;; Registers used:
  7951 ;;		None
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;Total ram usage:        0 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; This function calls:
  7964 ;;		Nothing
  7965 ;; This function is called by:
  7966 ;;		_main
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           	psect	text31
  7971  003874                     __ptext31:
  7972                           	opt stack 0
  7973  003874                     _initButtons:
  7974                           	opt stack 30
  7975                           
  7976                           ;AnalogInputs.c: 37: TRISB0 = 1;
  7977                           
  7978                           ;incstack = 0
  7979  003874  8093               	bsf	3987,0,c	;volatile
  7980                           
  7981                           ;AnalogInputs.c: 40: TRISA5 = 1;
  7982  003876  8A92               	bsf	3986,5,c	;volatile
  7983  003878  0012               	return		;funcret
  7984  00387A                     __end_of_initButtons:
  7985                           	opt stack 0
  7986                           tblptru	equ	0xFF8
  7987                           tblptrh	equ	0xFF7
  7988                           tblptrl	equ	0xFF6
  7989                           tablat	equ	0xFF5
  7990                           prodh	equ	0xFF4
  7991                           prodl	equ	0xFF3
  7992                           postinc0	equ	0xFEE
  7993                           wreg	equ	0xFE8
  7994                           postdec1	equ	0xFE5
  7995                           plusw1	equ	0xFE3
  7996                           fsr1l	equ	0xFE1
  7997                           indf2	equ	0xFDF
  7998                           postinc2	equ	0xFDE
  7999                           postdec2	equ	0xFDD
  8000                           plusw2	equ	0xFDB
  8001                           fsr2h	equ	0xFDA
  8002                           fsr2l	equ	0xFD9
  8003                           status	equ	0xFD8
  8004                           
  8005 ;; *************** function _initAdc *****************
  8006 ;; Defined at:
  8007 ;;		line 58 in file "AnalogInputs.c"
  8008 ;; Parameters:    Size  Location     Type
  8009 ;;		None
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;		None
  8012 ;; Return value:  Size  Location     Type
  8013 ;;                  1    wreg      void 
  8014 ;; Registers used:
  8015 ;;		wreg, status,2, status,0
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;Total ram usage:        0 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; This function calls:
  8028 ;;		Nothing
  8029 ;; This function is called by:
  8030 ;;		_main
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           	psect	text32
  8035  003830                     __ptext32:
  8036                           	opt stack 0
  8037  003830                     _initAdc:
  8038                           	opt stack 30
  8039                           
  8040                           ;AnalogInputs.c: 61: TRISA = TRISA | (1<<0);
  8041                           
  8042                           ;incstack = 0
  8043  003830  5092               	movf	3986,w,c	;volatile
  8044  003832  0901               	iorlw	1
  8045  003834  6E92               	movwf	3986,c	;volatile
  8046                           
  8047                           ;AnalogInputs.c: 63: ADCON0 = 0b00000001;
  8048  003836  0E01               	movlw	1
  8049  003838  6EC2               	movwf	4034,c	;volatile
  8050                           
  8051                           ;AnalogInputs.c: 64: ADCON1 = 0b00000000;
  8052  00383A  0E00               	movlw	0
  8053  00383C  6EC1               	movwf	4033,c	;volatile
  8054                           
  8055                           ;AnalogInputs.c: 65: ADCON2 = 0b00000010;
  8056  00383E  0E02               	movlw	2
  8057  003840  6EC0               	movwf	4032,c	;volatile
  8058  003842  0012               	return		;funcret
  8059  003844                     __end_of_initAdc:
  8060                           	opt stack 0
  8061                           tblptru	equ	0xFF8
  8062                           tblptrh	equ	0xFF7
  8063                           tblptrl	equ	0xFF6
  8064                           tablat	equ	0xFF5
  8065                           prodh	equ	0xFF4
  8066                           prodl	equ	0xFF3
  8067                           postinc0	equ	0xFEE
  8068                           wreg	equ	0xFE8
  8069                           postdec1	equ	0xFE5
  8070                           plusw1	equ	0xFE3
  8071                           fsr1l	equ	0xFE1
  8072                           indf2	equ	0xFDF
  8073                           postinc2	equ	0xFDE
  8074                           postdec2	equ	0xFDD
  8075                           plusw2	equ	0xFDB
  8076                           fsr2h	equ	0xFDA
  8077                           fsr2l	equ	0xFD9
  8078                           status	equ	0xFD8
  8079                           
  8080 ;; *************** function _LcdInit *****************
  8081 ;; Defined at:
  8082 ;;		line 123 in file "lcd.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;		None
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  1    wreg      void 
  8089 ;; Registers used:
  8090 ;;		wreg, status,2, status,0, cstack
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;Total ram usage:        0 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    4
  8103 ;; This function calls:
  8104 ;;		_LcdClear
  8105 ;;		_OpenSPI1
  8106 ;;		_lcdCommand
  8107 ;;		_setGPIO
  8108 ;;		_setIODIR
  8109 ;; This function is called by:
  8110 ;;		_main
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           	psect	text33
  8115  0035CA                     __ptext33:
  8116                           	opt stack 0
  8117  0035CA                     _LcdInit:
  8118                           	opt stack 26
  8119                           
  8120                           ;lcd.c: 128: TRISAbits.RA2=0;
  8121                           
  8122                           ;incstack = 0
  8123  0035CA  9492               	bcf	3986,2,c	;volatile
  8124                           
  8125                           ;lcd.c: 129: PORTAbits.RA2=1;
  8126  0035CC  8480               	bsf	3968,2,c	;volatile
  8127                           
  8128                           ;lcd.c: 131: OpenSPI1(0b00000010, 0b00000010, 0b10000000);
  8129  0035CE  0E02               	movlw	2
  8130  0035D0  6E01               	movwf	OpenSPI1@bus_mode,c
  8131  0035D2  0E80               	movlw	128
  8132  0035D4  6E02               	movwf	OpenSPI1@smp_phase,c
  8133  0035D6  0E02               	movlw	2
  8134  0035D8  ECBA  F01A         	call	_OpenSPI1
  8135                           
  8136                           ;lcd.c: 135: setIODIR(0x01,0x00);
  8137  0035DC  0E00               	movlw	0
  8138  0035DE  6E03               	movwf	setIODIR@dir,c
  8139  0035E0  0E01               	movlw	1
  8140  0035E2  ECE6  F01B         	call	_setIODIR
  8141                           
  8142                           ;lcd.c: 137: setIODIR(0x00,0x00);
  8143  0035E6  0E00               	movlw	0
  8144  0035E8  6E03               	movwf	setIODIR@dir,c
  8145  0035EA  0E00               	movlw	0
  8146  0035EC  ECE6  F01B         	call	_setIODIR
  8147                           
  8148                           ;lcd.c: 139: setGPIO(0x00,0x00);
  8149  0035F0  0E00               	movlw	0
  8150  0035F2  6E03               	movwf	setGPIO@value,c
  8151  0035F4  0E00               	movlw	0
  8152  0035F6  ECF3  F01B         	call	_setGPIO
  8153                           
  8154                           ;lcd.c: 142: lcdCommand(0b00111111);
  8155  0035FA  0E3F               	movlw	63
  8156  0035FC  EC8A  F01B         	call	_lcdCommand
  8157                           
  8158                           ;lcd.c: 145: lcdCommand(0b00001100);
  8159  003600  0E0C               	movlw	12
  8160  003602  EC8A  F01B         	call	_lcdCommand
  8161                           
  8162                           ;lcd.c: 148: lcdCommand(0b00000001);
  8163  003606  0E01               	movlw	1
  8164  003608  EC8A  F01B         	call	_lcdCommand
  8165                           
  8166                           ;lcd.c: 151: lcdCommand(0b00000110);
  8167  00360C  0E06               	movlw	6
  8168  00360E  EC8A  F01B         	call	_lcdCommand
  8169                           
  8170                           ;lcd.c: 158: LcdClear();
  8171  003612  EC36  F01C         	call	_LcdClear	;wreg free
  8172  003616  0012               	return		;funcret
  8173  003618                     __end_of_LcdInit:
  8174                           	opt stack 0
  8175                           tblptru	equ	0xFF8
  8176                           tblptrh	equ	0xFF7
  8177                           tblptrl	equ	0xFF6
  8178                           tablat	equ	0xFF5
  8179                           prodh	equ	0xFF4
  8180                           prodl	equ	0xFF3
  8181                           postinc0	equ	0xFEE
  8182                           wreg	equ	0xFE8
  8183                           postdec1	equ	0xFE5
  8184                           plusw1	equ	0xFE3
  8185                           fsr1l	equ	0xFE1
  8186                           indf2	equ	0xFDF
  8187                           postinc2	equ	0xFDE
  8188                           postdec2	equ	0xFDD
  8189                           plusw2	equ	0xFDB
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function _setIODIR *****************
  8195 ;; Defined at:
  8196 ;;		line 81 in file "lcd.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;  address         1    wreg     unsigned char 
  8199 ;;  dir             1    2[COMRAM] unsigned char 
  8200 ;; Auto vars:     Size  Location     Type
  8201 ;;  address         1    3[COMRAM] unsigned char 
  8202 ;; Return value:  Size  Location     Type
  8203 ;;                  1    wreg      void 
  8204 ;; Registers used:
  8205 ;;		wreg, status,2, cstack
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8211 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8214 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8215 ;;Total ram usage:        2 bytes
  8216 ;; Hardware stack levels used:    1
  8217 ;; Hardware stack levels required when called:    1
  8218 ;; This function calls:
  8219 ;;		_WriteSPI1
  8220 ;; This function is called by:
  8221 ;;		_LcdInit
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           	psect	text34
  8226  0037CC                     __ptext34:
  8227                           	opt stack 0
  8228  0037CC                     _setIODIR:
  8229                           	opt stack 28
  8230                           
  8231                           ;incstack = 0
  8232                           ;setIODIR@address stored from wreg
  8233  0037CC  6E04               	movwf	setIODIR@address,c
  8234                           
  8235                           ;lcd.c: 90: PORTAbits.RA2=0;
  8236  0037CE  9480               	bcf	3968,2,c	;volatile
  8237                           
  8238                           ;lcd.c: 91: WriteSPI1(0x40);
  8239  0037D0  0E40               	movlw	64
  8240  0037D2  EC0C  F01C         	call	_WriteSPI1
  8241                           
  8242                           ;lcd.c: 92: WriteSPI1(address);
  8243  0037D6  5004               	movf	setIODIR@address,w,c
  8244  0037D8  EC0C  F01C         	call	_WriteSPI1
  8245                           
  8246                           ;lcd.c: 93: WriteSPI1(dir);
  8247  0037DC  5003               	movf	setIODIR@dir,w,c
  8248  0037DE  EC0C  F01C         	call	_WriteSPI1
  8249                           
  8250                           ;lcd.c: 94: PORTAbits.RA2=1;
  8251  0037E2  8480               	bsf	3968,2,c	;volatile
  8252  0037E4  0012               	return		;funcret
  8253  0037E6                     __end_of_setIODIR:
  8254                           	opt stack 0
  8255                           tblptru	equ	0xFF8
  8256                           tblptrh	equ	0xFF7
  8257                           tblptrl	equ	0xFF6
  8258                           tablat	equ	0xFF5
  8259                           prodh	equ	0xFF4
  8260                           prodl	equ	0xFF3
  8261                           postinc0	equ	0xFEE
  8262                           wreg	equ	0xFE8
  8263                           postdec1	equ	0xFE5
  8264                           plusw1	equ	0xFE3
  8265                           fsr1l	equ	0xFE1
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           plusw2	equ	0xFDB
  8270                           fsr2h	equ	0xFDA
  8271                           fsr2l	equ	0xFD9
  8272                           status	equ	0xFD8
  8273                           
  8274 ;; *************** function _OpenSPI1 *****************
  8275 ;; Defined at:
  8276 ;;		line 13 in file "D:\Hella\Compiler\sources\pic18\plib\SPI\spi1open.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;  sync_mode       1    wreg     unsigned char 
  8279 ;;  bus_mode        1    0[COMRAM] unsigned char 
  8280 ;;  smp_phase       1    1[COMRAM] unsigned char 
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  sync_mode       1    2[COMRAM] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  1    wreg      void 
  8285 ;; Registers used:
  8286 ;;		wreg, status,2, status,0
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8292 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;Total ram usage:        3 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; This function calls:
  8299 ;;		Nothing
  8300 ;; This function is called by:
  8301 ;;		_LcdInit
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           	psect	text35
  8306  003574                     __ptext35:
  8307                           	opt stack 0
  8308  003574                     _OpenSPI1:
  8309                           	opt stack 29
  8310                           
  8311                           ;incstack = 0
  8312                           ;OpenSPI1@sync_mode stored from wreg
  8313  003574  6E03               	movwf	OpenSPI1@sync_mode,c
  8314  003576  0E3F               	movlw	63
  8315  003578  16C7               	andwf	4039,f,c	;volatile
  8316  00357A  0E00               	movlw	0
  8317  00357C  6EC6               	movwf	4038,c	;volatile
  8318  00357E  5003               	movf	OpenSPI1@sync_mode,w,c
  8319  003580  12C6               	iorwf	4038,f,c	;volatile
  8320  003582  5002               	movf	OpenSPI1@smp_phase,w,c
  8321  003584  12C7               	iorwf	4039,f,c	;volatile
  8322  003586  D005               	goto	l2824
  8323  003588                     l283:
  8324  003588  8CC7               	bsf	4039,6,c	;volatile
  8325  00358A  D013               	goto	l2828
  8326  00358C                     l285:
  8327  00358C  8CC7               	bsf	4039,6,c	;volatile
  8328  00358E                     l286:
  8329  00358E  88C6               	bsf	4038,4,c	;volatile
  8330  003590  D010               	goto	l2828
  8331  003592                     l2824:
  8332  003592  5001               	movf	OpenSPI1@bus_mode,w,c
  8333                           
  8334                           ; Switch size 1, requested type "space"
  8335                           ; Number of cases is 3, Range of values is 0 to 3
  8336                           ; switch strategies available:
  8337                           ; Name         Instructions Cycles
  8338                           ; simple_byte           10     6 (average)
  8339                           ;	Chosen strategy is simple_byte
  8340  003594  0A00               	xorlw	0	; case 0
  8341  003596  B4D8               	btfsc	status,2,c
  8342  003598  D7F7               	goto	l283
  8343  00359A  0A02               	xorlw	2	; case 2
  8344  00359C  B4D8               	btfsc	status,2,c
  8345  00359E  D7F6               	goto	l285
  8346  0035A0  0A01               	xorlw	1	; case 3
  8347  0035A2  B4D8               	btfsc	status,2,c
  8348  0035A4  D7F4               	goto	l286
  8349  0035A6  D005               	goto	l2828
  8350  0035A8                     l289:
  8351  0035A8  8E97               	bsf	3991,7,c	;volatile
  8352  0035AA                     l291:
  8353  0035AA  8694               	bsf	3988,3,c	;volatile
  8354  0035AC  D00A               	goto	l290
  8355  0035AE                     l292:
  8356  0035AE  9694               	bcf	3988,3,c	;volatile
  8357  0035B0  D008               	goto	l290
  8358  0035B2                     l2828:
  8359  0035B2  5003               	movf	OpenSPI1@sync_mode,w,c
  8360                           
  8361                           ; Switch size 1, requested type "space"
  8362                           ; Number of cases is 2, Range of values is 4 to 5
  8363                           ; switch strategies available:
  8364                           ; Name         Instructions Cycles
  8365                           ; simple_byte            7     4 (average)
  8366                           ;	Chosen strategy is simple_byte
  8367  0035B4  0A04               	xorlw	4	; case 4
  8368  0035B6  B4D8               	btfsc	status,2,c
  8369  0035B8  D7F7               	goto	l289
  8370  0035BA  0A01               	xorlw	1	; case 5
  8371  0035BC  B4D8               	btfsc	status,2,c
  8372  0035BE  D7F5               	goto	l291
  8373  0035C0  D7F6               	goto	l292
  8374  0035C2                     l290:
  8375  0035C2  8894               	bsf	3988,4,c	;volatile
  8376  0035C4  9A94               	bcf	3988,5,c	;volatile
  8377  0035C6  8AC6               	bsf	4038,5,c	;volatile
  8378  0035C8  0012               	return		;funcret
  8379  0035CA                     __end_of_OpenSPI1:
  8380                           	opt stack 0
  8381                           tblptru	equ	0xFF8
  8382                           tblptrh	equ	0xFF7
  8383                           tblptrl	equ	0xFF6
  8384                           tablat	equ	0xFF5
  8385                           prodh	equ	0xFF4
  8386                           prodl	equ	0xFF3
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           postdec1	equ	0xFE5
  8390                           plusw1	equ	0xFE3
  8391                           fsr1l	equ	0xFE1
  8392                           indf2	equ	0xFDF
  8393                           postinc2	equ	0xFDE
  8394                           postdec2	equ	0xFDD
  8395                           plusw2	equ	0xFDB
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function _LcdClear *****************
  8401 ;; Defined at:
  8402 ;;		line 166 in file "lcd.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;		None
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  1    wreg      void 
  8409 ;; Registers used:
  8410 ;;		wreg, status,2, cstack
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;Total ram usage:        0 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    3
  8423 ;; This function calls:
  8424 ;;		_lcdCommand
  8425 ;; This function is called by:
  8426 ;;		_LcdInit
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text36
  8431  00386C                     __ptext36:
  8432                           	opt stack 0
  8433  00386C                     _LcdClear:
  8434                           	opt stack 26
  8435                           
  8436                           ;lcd.c: 169: lcdCommand(0x01);
  8437                           
  8438                           ;incstack = 0
  8439  00386C  0E01               	movlw	1
  8440  00386E  EC8A  F01B         	call	_lcdCommand
  8441  003872  0012               	return		;funcret
  8442  003874                     __end_of_LcdClear:
  8443                           	opt stack 0
  8444                           tblptru	equ	0xFF8
  8445                           tblptrh	equ	0xFF7
  8446                           tblptrl	equ	0xFF6
  8447                           tablat	equ	0xFF5
  8448                           prodh	equ	0xFF4
  8449                           prodl	equ	0xFF3
  8450                           postinc0	equ	0xFEE
  8451                           wreg	equ	0xFE8
  8452                           postdec1	equ	0xFE5
  8453                           plusw1	equ	0xFE3
  8454                           fsr1l	equ	0xFE1
  8455                           indf2	equ	0xFDF
  8456                           postinc2	equ	0xFDE
  8457                           postdec2	equ	0xFDD
  8458                           plusw2	equ	0xFDB
  8459                           fsr2h	equ	0xFDA
  8460                           fsr2l	equ	0xFD9
  8461                           status	equ	0xFD8
  8462                           
  8463 ;; *************** function _lcdCommand *****************
  8464 ;; Defined at:
  8465 ;;		line 102 in file "lcd.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;  command         1    wreg     unsigned char 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  command         1    4[COMRAM] unsigned char 
  8470 ;; Return value:  Size  Location     Type
  8471 ;;                  1    wreg      void 
  8472 ;; Registers used:
  8473 ;;		wreg, status,2, cstack
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;Total ram usage:        1 bytes
  8484 ;; Hardware stack levels used:    1
  8485 ;; Hardware stack levels required when called:    2
  8486 ;; This function calls:
  8487 ;;		_setGPIO
  8488 ;; This function is called by:
  8489 ;;		_LcdInit
  8490 ;;		_LcdClear
  8491 ;;		_LcdGoTo
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text37
  8496  003714                     __ptext37:
  8497                           	opt stack 0
  8498  003714                     _lcdCommand:
  8499                           	opt stack 26
  8500                           
  8501                           ;incstack = 0
  8502                           ;lcdCommand@command stored from wreg
  8503  003714  6E05               	movwf	lcdCommand@command,c
  8504                           
  8505                           ;lcd.c: 104: setGPIO(0x12,0x00);
  8506  003716  0E00               	movlw	0
  8507  003718  6E03               	movwf	setGPIO@value,c
  8508  00371A  0E12               	movlw	18
  8509  00371C  ECF3  F01B         	call	_setGPIO
  8510                           
  8511                           ;lcd.c: 106: setGPIO(0x13, command);
  8512  003720  C005  F003         	movff	lcdCommand@command,setGPIO@value
  8513  003724  0E13               	movlw	19
  8514  003726  ECF3  F01B         	call	_setGPIO
  8515                           
  8516                           ;lcd.c: 108: setGPIO(0x12,0x40);
  8517  00372A  0E40               	movlw	64
  8518  00372C  6E03               	movwf	setGPIO@value,c
  8519  00372E  0E12               	movlw	18
  8520  003730  ECF3  F01B         	call	_setGPIO
  8521                           
  8522                           ;lcd.c: 110: setGPIO(0x12,0x00);
  8523  003734  0E00               	movlw	0
  8524  003736  6E03               	movwf	setGPIO@value,c
  8525  003738  0E12               	movlw	18
  8526  00373A  ECF3  F01B         	call	_setGPIO
  8527  00373E  0012               	return		;funcret
  8528  003740                     __end_of_lcdCommand:
  8529                           	opt stack 0
  8530                           tblptru	equ	0xFF8
  8531                           tblptrh	equ	0xFF7
  8532                           tblptrl	equ	0xFF6
  8533                           tablat	equ	0xFF5
  8534                           prodh	equ	0xFF4
  8535                           prodl	equ	0xFF3
  8536                           postinc0	equ	0xFEE
  8537                           wreg	equ	0xFE8
  8538                           postdec1	equ	0xFE5
  8539                           plusw1	equ	0xFE3
  8540                           fsr1l	equ	0xFE1
  8541                           indf2	equ	0xFDF
  8542                           postinc2	equ	0xFDE
  8543                           postdec2	equ	0xFDD
  8544                           plusw2	equ	0xFDB
  8545                           fsr2h	equ	0xFDA
  8546                           fsr2l	equ	0xFD9
  8547                           status	equ	0xFD8
  8548                           
  8549 ;; *************** function _setGPIO *****************
  8550 ;; Defined at:
  8551 ;;		line 55 in file "lcd.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  address         1    wreg     unsigned char 
  8554 ;;  value           1    2[COMRAM] unsigned char 
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;  address         1    3[COMRAM] unsigned char 
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  1    wreg      void 
  8559 ;; Registers used:
  8560 ;;		wreg, status,2, cstack
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8566 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;Total ram usage:        2 bytes
  8571 ;; Hardware stack levels used:    1
  8572 ;; Hardware stack levels required when called:    1
  8573 ;; This function calls:
  8574 ;;		_WriteSPI1
  8575 ;; This function is called by:
  8576 ;;		_lcdCommand
  8577 ;;		_LcdInit
  8578 ;;		_LcdChar
  8579 ;; This function uses a non-reentrant model
  8580 ;;
  8581                           
  8582                           	psect	text38
  8583  0037E6                     __ptext38:
  8584                           	opt stack 0
  8585  0037E6                     _setGPIO:
  8586                           	opt stack 26
  8587                           
  8588                           ;incstack = 0
  8589                           ;setGPIO@address stored from wreg
  8590  0037E6  6E04               	movwf	setGPIO@address,c
  8591                           
  8592                           ;lcd.c: 66: PORTAbits.RA2=0;
  8593  0037E8  9480               	bcf	3968,2,c	;volatile
  8594                           
  8595                           ;lcd.c: 69: WriteSPI1(0x40);
  8596  0037EA  0E40               	movlw	64
  8597  0037EC  EC0C  F01C         	call	_WriteSPI1
  8598                           
  8599                           ;lcd.c: 70: WriteSPI1(address);
  8600  0037F0  5004               	movf	setGPIO@address,w,c
  8601  0037F2  EC0C  F01C         	call	_WriteSPI1
  8602                           
  8603                           ;lcd.c: 71: WriteSPI1(value);
  8604  0037F6  5003               	movf	setGPIO@value,w,c
  8605  0037F8  EC0C  F01C         	call	_WriteSPI1
  8606                           
  8607                           ;lcd.c: 72: PORTAbits.RA2=1;
  8608  0037FC  8480               	bsf	3968,2,c	;volatile
  8609  0037FE  0012               	return		;funcret
  8610  003800                     __end_of_setGPIO:
  8611                           	opt stack 0
  8612                           tblptru	equ	0xFF8
  8613                           tblptrh	equ	0xFF7
  8614                           tblptrl	equ	0xFF6
  8615                           tablat	equ	0xFF5
  8616                           prodh	equ	0xFF4
  8617                           prodl	equ	0xFF3
  8618                           postinc0	equ	0xFEE
  8619                           wreg	equ	0xFE8
  8620                           postdec1	equ	0xFE5
  8621                           plusw1	equ	0xFE3
  8622                           fsr1l	equ	0xFE1
  8623                           indf2	equ	0xFDF
  8624                           postinc2	equ	0xFDE
  8625                           postdec2	equ	0xFDD
  8626                           plusw2	equ	0xFDB
  8627                           fsr2h	equ	0xFDA
  8628                           fsr2l	equ	0xFD9
  8629                           status	equ	0xFD8
  8630                           
  8631 ;; *************** function _WriteSPI1 *****************
  8632 ;; Defined at:
  8633 ;;		line 13 in file "D:\Hella\Compiler\sources\pic18\plib\SPI\spi1writ.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;  data_out        1    wreg     unsigned char 
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;  data_out        1    1[COMRAM] unsigned char 
  8638 ;;  TempVar         1    0[COMRAM] unsigned char 
  8639 ;; Return value:  Size  Location     Type
  8640 ;;                  1    wreg      char 
  8641 ;; Registers used:
  8642 ;;		wreg
  8643 ;; Tracked objects:
  8644 ;;		On entry : 0/0
  8645 ;;		On exit  : 0/0
  8646 ;;		Unchanged: 0/0
  8647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8652 ;;Total ram usage:        2 bytes
  8653 ;; Hardware stack levels used:    1
  8654 ;; This function calls:
  8655 ;;		Nothing
  8656 ;; This function is called by:
  8657 ;;		_setGPIO
  8658 ;;		_setIODIR
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           	psect	text39
  8663  003818                     __ptext39:
  8664                           	opt stack 0
  8665  003818                     _WriteSPI1:
  8666                           	opt stack 26
  8667                           
  8668                           ;incstack = 0
  8669                           ;WriteSPI1@data_out stored from wreg
  8670  003818  6E02               	movwf	WriteSPI1@data_out,c
  8671  00381A  CFC9 F001          	movff	4041,WriteSPI1@TempVar	;volatile
  8672  00381E  969E               	bcf	3998,3,c	;volatile
  8673  003820  9EC6               	bcf	4038,7,c	;volatile
  8674  003822  C002  FFC9         	movff	WriteSPI1@data_out,4041	;volatile
  8675  003826  BEC6               	btfsc	4038,7,c	;volatile
  8676  003828  0012               	return	
  8677  00382A                     l307:
  8678  00382A  B69E               	btfsc	3998,3,c	;volatile
  8679  00382C  0012               	return	
  8680  00382E  D7FD               	goto	l307
  8681  003830                     __end_of_WriteSPI1:
  8682                           	opt stack 0
  8683                           tblptru	equ	0xFF8
  8684                           tblptrh	equ	0xFF7
  8685                           tblptrl	equ	0xFF6
  8686                           tablat	equ	0xFF5
  8687                           prodh	equ	0xFF4
  8688                           prodl	equ	0xFF3
  8689                           postinc0	equ	0xFEE
  8690                           wreg	equ	0xFE8
  8691                           postdec1	equ	0xFE5
  8692                           plusw1	equ	0xFE3
  8693                           fsr1l	equ	0xFE1
  8694                           indf2	equ	0xFDF
  8695                           postinc2	equ	0xFDE
  8696                           postdec2	equ	0xFDD
  8697                           plusw2	equ	0xFDB
  8698                           fsr2h	equ	0xFDA
  8699                           fsr2l	equ	0xFD9
  8700                           status	equ	0xFD8
  8701                           tblptru	equ	0xFF8
  8702                           tblptrh	equ	0xFF7
  8703                           tblptrl	equ	0xFF6
  8704                           tablat	equ	0xFF5
  8705                           prodh	equ	0xFF4
  8706                           prodl	equ	0xFF3
  8707                           postinc0	equ	0xFEE
  8708                           wreg	equ	0xFE8
  8709                           postdec1	equ	0xFE5
  8710                           plusw1	equ	0xFE3
  8711                           fsr1l	equ	0xFE1
  8712                           indf2	equ	0xFDF
  8713                           postinc2	equ	0xFDE
  8714                           postdec2	equ	0xFDD
  8715                           plusw2	equ	0xFDB
  8716                           fsr2h	equ	0xFDA
  8717                           fsr2l	equ	0xFD9
  8718                           status	equ	0xFD8
  8719                           
  8720                           	psect	rparam
  8721  0000                     tblptru	equ	0xFF8
  8722                           tblptrh	equ	0xFF7
  8723                           tblptrl	equ	0xFF6
  8724                           tablat	equ	0xFF5
  8725                           prodh	equ	0xFF4
  8726                           prodl	equ	0xFF3
  8727                           postinc0	equ	0xFEE
  8728                           wreg	equ	0xFE8
  8729                           postdec1	equ	0xFE5
  8730                           plusw1	equ	0xFE3
  8731                           fsr1l	equ	0xFE1
  8732                           indf2	equ	0xFDF
  8733                           postinc2	equ	0xFDE
  8734                           postdec2	equ	0xFDD
  8735                           plusw2	equ	0xFDB
  8736                           fsr2h	equ	0xFDA
  8737                           fsr2l	equ	0xFD9
  8738                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    118
    Data        18
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     69      89
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_3(CODE[20]), STR_2(CODE[23]), STR_1(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> sequence4@message(BANK0[16]), sequence3@message(BANK0[16]), sequence2@message(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LcdWriteString@s	PTR const unsigned char  size(2) Largest target is 16
		 -> sequence4@message(BANK0[16]), sequence3@message(BANK0[16]), sequence2@message(BANK0[16]), 


Critical Paths under _main in COMRAM

    _main->_sequence3
    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftneg
    ___awdiv->___awmod
    ___lltoft->___fttol
    ___llmod->___lldiv
    ___fttol->___wmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftdiv->_scale
    ___awtoft->___ftpack
    _LcdWriteString->_LcdChar
    _LcdChar->_setGPIO
    _LcdGoTo->_lcdCommand
    _sequence1->_delay50
    _LcdInit->_lcdCommand
    _setIODIR->_WriteSPI1
    _LcdClear->_lcdCommand
    _lcdCommand->_setGPIO
    _setGPIO->_WriteSPI1

Critical Paths under _main in BANK0

    _main->_sequence4
    _sequence4->_sprintf
    _sequence3->_sprintf
    _sequence2->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  192402
                                             67 BANK0      2     2      0
                            _LcdInit
                            _initAdc
                        _initButtons
                           _initLEDs
                          _sequence1
                          _sequence2
                          _sequence3
                          _sequence4
 ---------------------------------------------------------------------------------
 (1) _sequence4                                           26    26      0   64009
                                             41 BANK0     26    26      0
                            _LcdGoTo
                     _LcdWriteString
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sequence3                                           23    23      0   63963
                                             93 COMRAM     2     2      0
                                             41 BANK0     21    21      0
                            _LcdGoTo
                     _LcdWriteString
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sequence2                                           20    20      0   61976
                                             41 BANK0     20    20      0
                            _LcdGoTo
                     _LcdWriteString
                           ___awtoft
                            ___ftdiv
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             49    40      9   54814
                                              0 BANK0     41    32      9
                            ___awdiv
                            ___awmod
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11077
                                             62 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10879
                                             62 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2335
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4713
                                             47 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1576
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1964
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2370
                                             35 COMRAM     9     5      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8    1055
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     930
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     828
                                             20 COMRAM    15    11      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4116
                                             84 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3819
                                             72 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     237
                                             44 COMRAM     3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     648
                                             84 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3003
                                             69 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2392
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _LcdWriteString                                       2     0      2     902
                                              5 COMRAM     2     0      2
                            _LcdChar
 ---------------------------------------------------------------------------------
 (3) _LcdChar                                              1     1      0     665
                                              4 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (2) _LcdGoTo                                              1     1      0     687
                                              5 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (1) _sequence1                                            1     1      0      70
                                              3 COMRAM     1     1      0
                            _delay50
 ---------------------------------------------------------------------------------
 (2) _delay50                                              3     3      0      46
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initLEDs                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initAdc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcdInit                                              0     0      0    2384
                           _LcdClear
                           _OpenSPI1
                         _lcdCommand
                            _setGPIO
                           _setIODIR
 ---------------------------------------------------------------------------------
 (2) _setIODIR                                             2     1      1     195
                                              2 COMRAM     2     1      1
                          _WriteSPI1
 ---------------------------------------------------------------------------------
 (2) _OpenSPI1                                             3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _LcdClear                                             0     0      0     665
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     665
                                              4 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (4) _setGPIO                                              2     1      1     643
                                              2 COMRAM     2     1      1
                          _WriteSPI1
 ---------------------------------------------------------------------------------
 (5) _WriteSPI1                                            2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdInit
     _LcdClear
       _lcdCommand
         _setGPIO
           _WriteSPI1
     _OpenSPI1
     _lcdCommand
       _setGPIO
         _WriteSPI1
     _setGPIO
       _WriteSPI1
     _setIODIR
       _WriteSPI1
   _initAdc
   _initButtons
   _initLEDs
   _sequence1
     _delay50
   _sequence2
     _LcdGoTo
       _lcdCommand
         _setGPIO
           _WriteSPI1
     _LcdWriteString
       _LcdChar
         _setGPIO
           _WriteSPI1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _sequence3
     _LcdGoTo
       _lcdCommand
         _setGPIO
           _WriteSPI1
     _LcdWriteString
       _LcdChar
         _setGPIO
           _WriteSPI1
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _sequence4
     _LcdGoTo
       _lcdCommand
         _setGPIO
           _WriteSPI1
     _LcdWriteString
       _LcdChar
         _setGPIO
           _WriteSPI1
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     45      59       5       55.6%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B8      32        0.0%
DATA                 0      0      B8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Apr 03 18:49:46 2019

                     l83 3712                       l86 3806                       l94 31CA  
           ___awdiv@sign 000C      ___wmul@multiplicand 0011              __CFG_OSC$HS 000000  
           ___ftadd@exp1 0054             ___ftadd@exp2 0053             ___ftadd@sign 0052  
                    l100 3044                      l204 170A                      l108 2B22  
                    l217 19AE                      l307 382A                      l245 1DC8  
                    l190 18B2                      l290 35C2                      l194 13EC  
                    l291 35AA                      l283 3588                      l292 35AE  
                    l188 137A                      l285 358C                      l189 137E  
                    l286 358E                      l551 3190                      l519 2D56  
                    l623 2B02                      l616 2A74                      l289 35A8  
                    l609 3004                      l617 2A9C                      l708 34AE  
                    l574 287A                      l648 377C                      l578 28A4  
                    l589 2954                      l598 2970                      l698 33D8  
           ___awmod@sign 0006        lcdCommand@command 0005                      wreg 000FE8  
           ___ftdiv@cntr 004F             ___ftdiv@sign 0054             __CFG_WDT$OFF 000000  
                   l2200 3120                     l3000 17E6                     l2210 317C  
                   l2202 312A                     l3002 17F4                     l3010 181A  
                   l2212 3186                     l2204 3148                     l2300 298C  
                   l3100 1C4E                     l3020 1848                     l2310 29BC  
                   l3102 1C54                     l3022 1850                     l2208 315E  
                   l2320 2D90                     l3120 1CD4                     l3032 18A8  
                   l3008 180E                     l2402 335E                     l3130 1D7C  
                   l3114 1CA0                     l3042 1908                     l3026 185E  
                   l2252 2888                     l2340 2DEA                     l3212 208A  
                   l3204 2032                     l2430 3438                     l2422 3418  
                   l2414 33FE                     l2350 2E12                     l2326 2DB8  
                   l2502 25A2                     l3222 2148                     l3150 1DFC  
                   l3142 1DCC                     l3118 1CCC                     l3062 1A4C  
                   l3054 1954                     l3038 18E2                     l3070 1AC6  
                   l3240 366C                     l2280 2904                     l2600 2CBE  
                   l2424 3420                     l2344 2DFA                     l3224 214E  
                   l3208 205A                     l3136 1D96                     l3128 1D6E  
                   l3072 1ADC                     l3056 197E                     l2282 290E  
                   l2274 28E2                     l2258 28B2                     l2530 2A3A  
                   l2370 32F8                     l2426 3424                     l2434 3442  
                   l2418 340A                     l2354 2E22                     l2514 37C4  
                   l3218 20B8                     l3154 1E4E                     l3138 1DAA  
                   l3082 1B64                     l3074 1B0C                     l3066 1A88  
                   l3226 2164                     l3330 2BC2                     l3322 2B64  
                   l2196 3112                     l2292 2942                     l2284 2918  
                   l2620 2D1C                     l2524 2A0E                     l3172 1F68  
                   l3164 1F40                     l3076 1B22                     l3228 2186  
                   l2702 32E0                     l2294 294C                     l2286 2920  
                   l2630 2D44                     l2382 331E                     l2438 3450  
                   l3190 1FE0                     l3166 1F4E                     l3086 1B8A  
                   l3174 1F76                     l3326 2B8C                     l3350 353A  
                   l2640 2F78                     l2632 2D50                     l2624 2D2C  
                   l2608 2CEE                     l2560 2AC8                     l2384 3326  
                   l2376 3308                     l2464 27F0                     l2456 2724  
                   l3192 1FE6                     l3184 1FBA                     l3096 1BE8  
                   l3328 2BB8                     l3352 3540                     l2570 2AF0  
                   l2394 3346                     l2386 332A                     l3346 352E  
                   l2716 2E88                     l2580 2C5E                     l2572 2AFC  
                   l2564 2AD8                     l2484 238A                     l3348 3534  
                   l3356 3544                     l2646 2FA0                     l2734 2EEE  
                   l2398 3350                     l2478 22DA                     l2902 1222  
                   l2824 3592                     l2752 2F3E                     l2744 2F16  
                   l2496 24F2                     l2488 23B4                     l2842 379E  
                   l2666 2FDE                     l2746 2F22                     l2738 2EFE  
                   l2762 338A                     l2586 2C7C                     l2930 135E  
                   l2828 35B2                     l2692 3284                     l2684 362E  
                   l2748 2F28                     l2764 3396                     l2932 1372  
                   l2846 36F0                     l2838 378C                     l2774 33CA  
                   l2766 339A                     l2790 34A0                     l2782 346C  
                   l2926 1338                     l2918 12D0                     l2870 1118  
                   l2862 10E2                     l2696 32B4                     l2784 3478  
                   l2944 13D4                     l2936 139A                     l2880 1182  
                   l2856 10CA                     l2786 347C                     l2962 1564  
                   l2938 13BA                     l2874 1158                     l2796 34C6  
                   l2956 14CE                     l2948 13F0                     l2892 11DC  
                   l2884 1188                     l2876 1172                     l2798 34D2  
                   l2974 160A                     l2886 11C0                     l2968 15D8  
                   l2994 173A                     STR_1 108E                     STR_2 1077  
                   STR_3 10A5                     u2101 2DA0                     _LATD 000F8C  
                   u2081 2D78                     u2511 2F60                     u2351 29F2  
                   u2531 2F88                     u2611 2E6C                     u2371 2A1E  
                   u2630 2EA6                     u3280 1DC0                     u3514 2B7A  
                   u2635 2E9E                     u3451 31C0                     u3515 2B74  
                   u1871 2846                     u3537 3702                     u1881 285A  
                   u2860 1268                     u3484 307C                     u3485 3078  
                   u2960 13E4                     u2865 125C                     _main 351C  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
        __end_of_LcdChar 36E8          __end_of_LcdGoTo 3862             _sprintf$1460 006F  
        __end_of_LcdInit 3618             ___ftmul@cntr 003D             ___param_bank 000000  
           ___ftmul@sign 003E             ?_initButtons 0001             ___fttol@exp1 0023  
           ___fttol@lval 001F                    ?_main 0001          __end_of___awdiv 3368  
        __end_of___ftadd 29E2          __end_of___awmod 345A          __end_of___ftdiv 3036  
        __end_of___ftneg 378A          __end_of___lldiv 33EA          __end_of___ftmul 2E5C  
        ___awdiv@divisor 0009          __end_of___llmod 34C0          __end_of___ftsub 3658  
        __end_of___fttol 2F50          ___awdiv@counter 000B                    _TRISA 000F92  
                  _TRISD 000F95          __end_of_delay50 3714             ___lltoft@exp 002C  
         __CFG_FCMEN$OFF 000000            ___awtoft@sign 000C          __end_of_initAdc 3844  
        __end_of_dpowers 1029          __end_of_setGPIO 3800                    _scale 2194  
        __end_of_isdigit 37CC            ___ftpack@sign 0005                    _state 00B5  
                  tablat 000FF5                    plusw1 000FE3                    plusw2 000FDB  
                  status 000FD8          __end_of_sprintf 2194         __end_of_LcdClear 3874  
        __initialization 3690             __end_of_main 3574         __end_of_OpenSPI1 35CA  
                 ??_main 00A3            ___fttol@sign1 001E            __activetblptr 000003  
   __size_of__tdiv_to_l_ 0132                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0         ___llmod@dividend 000E                   ?_scale 003F  
                 _ADRESH 000FC4         ___awdiv@dividend 0007         __end_of___awtoft 3690  
       __end_of___ftpack 31B0         __end_of___lltoft 351C                ??_LcdChar 0005  
              ??_LcdGoTo 0006                ??_LcdInit 0006                   _TRISB0 007C98  
                 _TRISA5 007C95         __end_of__powers_ 1050         OpenSPI1@bus_mode 0001  
                 ___ftge 3254                   ___wmul 3740                ??___awdiv 000B  
              ??___ftadd 004F                ??___awmod 0005         __end_of_initLEDs 386C  
              ??___ftdiv 004C                ??___ftneg 0030                ??___lldiv 0009  
              ??___ftmul 0036                ??___llmod 0016                ??___ftsub 005B  
              ??___fttol 0019         __end_of_setIODIR 37E6                ??_delay50 0001  
                 _fround 25CC              setIODIR@dir 0003         ___awdiv@quotient 000D  
        ___awmod@divisor 0003          ___awmod@counter 0005    ___ftmul@f3_as_product 003A  
              ??_initAdc 0001                ??_setGPIO 0004                ??_isdigit 0001  
          LcdChar@letter 0005             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_sprintf 0069  
             __accesstop 0060  __end_of__initialization 36B6  __size_of_LcdWriteString 0024  
     __size_of_WriteSPI1 0018               ___ftadd@f1 0049               ___ftadd@f2 004C  
             ___ftge@ff1 0055               ___ftge@ff2 0058            ___rparam_used 000001  
             ___ftdiv@f1 0046               ___ftdiv@f2 0049               ___ftdiv@f3 0050  
             ___ftneg@f1 002D               ___awtoft@c 0009               ___ftmul@f1 0030  
             ___ftmul@f2 0033               ___ftsub@f1 0055               ___ftsub@f2 0058  
             ___fttol@f1 0015           __pcstackCOMRAM 0001             __pidataBANK0 3844  
             ___lltoft@c 0024            __end_of_scale 25CC     __size_of_initButtons 0006  
             __div_to_l_ 2C40                ?_LcdClear 0001          __div_to_l_@exp1 000C  
        __div_to_l_@cntr 000B                  ??_scale 0042          __div_to_l_@quot 0007  
             __pbssBANK0 00B7         WriteSPI1@TempVar 0001                ?_OpenSPI1 0001  
          __div_to_l_@f1 0001            __div_to_l_@f2 0004                  ?___ftge 0055  
             _lcdCommand 3714                  ?___wmul 000F                  ?_fround 003F  
              ?___awtoft 0009                ?___ftpack 0001                ?___lltoft 0024  
      __end_of_WriteSPI1 3830       __size_of_sequence1 0018       __size_of_sequence2 00A4  
     __size_of_sequence3 00CC       __size_of_sequence4 012C               ??_LcdClear 0006  
                _SSP1BUF 000FC9                ?_initLEDs 0001                  _LcdChar 36BC  
                _LcdGoTo 3856                  _LcdInit 35CA                ?_setIODIR 0003  
             ??_OpenSPI1 0003        __end_of__npowers_ 1077                  __Hparam 0000  
             _scale$1459 0042                  __Lparam 0000          __size_of___ftge 0090  
                ___awdiv 32E4                  ___ftadd 2836                  ___awmod 33EA  
                ___ftdiv 2F50                  ___ftneg 3766                  ___lldiv 3368  
        __size_of___wmul 0026                  ___ftmul 2D68                  ___llmod 345A  
                ___ftsub 3618                  ___fttol 2E5C             __psmallconst 1000  
                _delay50 36E8         sequence2@message 0089                  __pcinit 3690  
             ??___awtoft 000C               ??___ftpack 0006          __size_of_fround 026A  
                __ramtop 1000         sequence3@message 0089               ??___lltoft 0028  
                __ptext0 351C                  __ptext1 2B14                  __ptext2 3036  
                __ptext3 31B0                  __ptext4 10BA                  __ptext5 2194  
                __ptext6 37AE                  __ptext7 25CC                  __ptext8 3740  
                __ptext9 2D68         sequence4@message 008C              ?__div_to_l_ 0001  
                _initAdc 3830                  _dpowers 1001                  _setGPIO 37E6  
                _isdigit 37AE         ___awmod@dividend 0001          setIODIR@address 0004  
           setGPIO@value 0003                  _sprintf 10BA     end_of_initialization 36B6  
             ??_initLEDs 0001           _LcdWriteString 378A               ??_setIODIR 0004  
      OpenSPI1@smp_phase 0002        __end_of_sequence1 3818        __end_of_sequence2 3254  
      __end_of_sequence3 3102        __end_of_sequence4 2C40          ___lldiv@divisor 0005  
        ___lldiv@counter 000D                  postdec1 000FE5                  postdec2 000FDD  
            ?_lcdCommand 0001                  postinc0 000FEE                  postinc2 000FDE  
      OpenSPI1@sync_mode 0003           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
          ??__tdiv_to_l_ 0007                _PORTAbits 000F80                _TRISAbits 000F92  
              _TRISCbits 000F94                _TRISFbits 000F97   __end_of_LcdWriteString 37AE  
            ___ftdiv@exp 0053      __size_of__div_to_l_ 0128              ___ftmul@exp 0039  
         __end_of___ftge 32E4           __end_of___wmul 3766           __end_of_fround 2836  
    start_initialization 3690      __end_of__tdiv_to_l_ 2B14          ?_LcdWriteString 0006  
      __size_of_LcdClear 0008      __size_of_lcdCommand 002C          ___llmod@divisor 0012  
        ___llmod@counter 0016        __size_of_OpenSPI1 0056                 ??___ftge 005B  
          ??_initButtons 0001                 ??___wmul 0013              __pdataBANK0 00A5  
               ??_fround 0042            sprintf@tmpval 0079               fround@prec 0048  
      __size_of___awtoft 0038        __size_of___ftpack 00AE        __size_of___lltoft 005C  
          __pcstackBANK0 0060                _WriteSPI1 3818           _sequence2$1454 0099  
         _sequence3$1455 0099           _sequence4$1456 009C             _isdigit$1107 0002  
               ?_LcdChar 0001                 ?_LcdGoTo 0001                 ?_LcdInit 0001  
            sprintf@flag 0077              sprintf@fval 0085              sprintf@prec 0083  
            sprintf@temp 0072        __size_of_initLEDs 000A        WriteSPI1@data_out 0002  
      __size_of_setIODIR 001A       sequence1@potiValue 0004                 ?___awdiv 0007  
               ?___ftadd 0049                 ?___awmod 0001                 ?___ftdiv 0046  
               ?___ftneg 002D                 ?___lldiv 0001                 ?___ftmul 0030  
               ?___llmod 000E                 ?___ftsub 0055                __npowers_ 1050  
               ?___fttol 0015                 ?_delay50 0001       sequence2@potiValue 009C  
            __tdiv_to_l_ 29E2      __end_of_initButtons 387A             ??__div_to_l_ 0007  
               ?_initAdc 0001              __smallconst 1000                 ?_setGPIO 0003  
               ?_isdigit 0001               ?_WriteSPI1 0001       sequence3@potiValue 009C  
               ?_sprintf 0060           __size_of_scale 0438       sequence4@potiValue 00A1  
         ___wmul@product 0013                 _PIR1bits 000F9E       __end_of__div_to_l_ 2D68  
         setGPIO@address 0004             ??_lcdCommand 0005                _sequence1 3800  
              _sequence2 31B0                _sequence3 3036                _sequence4 2B14  
               _SSP1CON1 000FC6               sequence3@i 009D               sequence4@i 00A2  
             sequence4@j 009F                 _SSP1STAT 000FC7               _ADCON0bits 000FC2  
      ___wmul@multiplier 000F                 _LcdClear 386C                copy_data0 36A4  
     __end_of_lcdCommand 3740         __size_of_LcdChar 002C         __size_of_LcdGoTo 000C  
       __size_of_LcdInit 004E                 _OpenSPI1 3574                 __Hrparam 0000  
               __Lrparam 0000               ?_sequence1 0001               ?_sequence2 0001  
             ?_sequence3 0001               ?_sequence4 0001              _initButtons 3874  
       __size_of___awdiv 0084         __size_of___ftadd 01AC         __size_of___awmod 0070  
       __size_of___ftdiv 00E6         __size_of___ftneg 0024         __size_of___lldiv 0082  
       __size_of___ftmul 00F4         __size_of___llmod 0066         __size_of___ftsub 0040  
       __size_of___fttol 00F4                 ___awtoft 3658                 ___ftpack 3102  
            _fround$1457 0045              _fround$1458 0042         __size_of_delay50 002C  
               ___lltoft 34C0         ??_LcdWriteString 0008               sprintf@exp 0081  
             sprintf@val 007D         __size_of_initAdc 0014           sequence2@F6598 00A5  
       __size_of_setGPIO 001A         __size_of_isdigit 001E              ??_WriteSPI1 0001  
               __ptext10 33EA                 __ptext11 32E4                 __ptext20 3766  
               __ptext12 29E2                 __ptext21 3254                 __ptext13 2C40  
               __ptext30 3862                 __ptext22 2F50                 __ptext14 34C0  
               __ptext31 3874                 __ptext23 3658                 __ptext15 345A  
               __ptext32 3830                 __ptext24 3102                 __ptext16 3368  
               __ptext33 35CA                 __ptext25 378A                 __ptext17 2E5C  
               __ptext34 37CC                 __ptext26 36BC                 __ptext18 3618  
               __ptext35 3574                 __ptext27 3856                 __ptext19 2836  
               __ptext36 386C                 __ptext28 3800                 __ptext37 3714  
               __ptext29 36E8                 __ptext38 37E6                 __ptext39 3818  
           _SSP1CON1bits 000FC6                 __powers_ 1029         __size_of_sprintf 10DA  
               _initLEDs 3862                 delay50@i 0002                 _setIODIR 37CC  
          __size_of_main 0058          LcdWriteString@s 0006             _SSP1STATbits 000FC7  
               isdigit@c 0003                 scale@scl 0045               LcdGoTo@pos 0006  
              sprintf@ap 0075         __tdiv_to_l_@exp1 000F         __tdiv_to_l_@cntr 000E  
              sprintf@sp 0060         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
          sequence4@VARR 00B7              ??_sequence1 0004              ??_sequence2 005E  
            ??_sequence3 005E              ??_sequence4 0089             ?__tdiv_to_l_ 0001  
               sprintf@c 0088                 sprintf@f 0062         ___lldiv@quotient 0009  
