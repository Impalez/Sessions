

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Apr 17 18:12:38 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           ; Version 1.41 (B)
    43                           ; Generated 21/02/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F8722 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	smallconst
    78  001000                     __psmallconst:
    79                           	opt stack 0
    80  001000  00                 	db	0
    81  001001                     _dpowers:
    82                           	opt stack 0
    83  001001  0001               	dw	1
    84  001003  000A               	dw	10
    85  001005  0064               	dw	100
    86  001007  03E8               	dw	1000
    87  001009  2710               	dw	10000
    88  00100B                     __end_of_dpowers:
    89                           	opt stack 0
    90  0000                     _TMR0	set	4054
    91  0000                     _TRISDbits	set	3989
    92  0000                     _MEMCONbits	set	3996
    93  0000                     _TMR0L	set	4054
    94  0000                     _TMR0H	set	4055
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T0CON	set	4053
    97  0000                     _TRISJbits	set	3994
    98  0000                     _PORTJbits	set	3976
    99  0000                     _PORTBbits	set	3969
   100  0000                     _PIR1bits	set	3998
   101  0000                     _RCREG	set	4014
   102  0000                     _TXREG	set	4013
   103  0000                     _RCSTA1bits	set	4011
   104  0000                     _PIE1bits	set	3997
   105  0000                     _RCSTAbits	set	4011
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _SPBRG	set	4015
   108  0000                     _TXSTA1bits	set	4012
   109  0000                     _TRISCbits	set	3988
   110  0000                     _TRISAbits	set	3986
   111  0000                     _PORTCbits	set	3970
   112  0000                     _PORTAbits	set	3968
   113  0000                     _T0IF	set	32658
   114  0000                     _GIE	set	32663
   115  0000                     _T0IE	set	32661
   116  0000                     _TRISA5	set	31893
   117  0000                     _TRISB0	set	31896
   118  0000                     _RCIF	set	31989
   119  0000                     _TRMT1	set	32097
   120  00100B                     STR_1:
   121  00100B  0A                 	db	10
   122  00100C  0D                 	db	13
   123  00100D  49                 	db	73	;'I'
   124  00100E  6E                 	db	110	;'n'
   125  00100F  69                 	db	105	;'i'
   126  001010  74                 	db	116	;'t'
   127  001011  69                 	db	105	;'i'
   128  001012  61                 	db	97	;'a'
   129  001013  6C                 	db	108	;'l'
   130  001014  69                 	db	105	;'i'
   131  001015  7A                 	db	122	;'z'
   132  001016  69                 	db	105	;'i'
   133  001017  6E                 	db	110	;'n'
   134  001018  67                 	db	103	;'g'
   135  001019  2E                 	db	46
   136  00101A  2E                 	db	46
   137  00101B  2E                 	db	46
   138  00101C  0A                 	db	10
   139  00101D  0D                 	db	13
   140  00101E  00                 	db	0
   141  00101F                     STR_2:
   142  00101F  45                 	db	69	;'E'
   143  001020  6D                 	db	109	;'m'
   144  001021  62                 	db	98	;'b'
   145  001022  65                 	db	101	;'e'
   146  001023  64                 	db	100	;'d'
   147  001024  64                 	db	100	;'d'
   148  001025  65                 	db	101	;'e'
   149  001026  64                 	db	100	;'d'
   150  001027  20                 	db	32
   151  001028  20                 	db	32
   152  001029  73                 	db	115	;'s'
   153  00102A  79                 	db	121	;'y'
   154  00102B  73                 	db	115	;'s'
   155  00102C  74                 	db	116	;'t'
   156  00102D  65                 	db	101	;'e'
   157  00102E  6D                 	db	109	;'m'
   158  00102F  00                 	db	0
   159  001030                     STR_3:
   160  001030  25                 	db	37
   161  001031  30                 	db	48	;'0'
   162  001032  32                 	db	50	;'2'
   163  001033  64                 	db	100	;'d'
   164  001034  3A                 	db	58	;':'
   165  001035  25                 	db	37
   166  001036  30                 	db	48	;'0'
   167  001037  32                 	db	50	;'2'
   168  001038  64                 	db	100	;'d'
   169  001039  3A                 	db	58	;':'
   170  00103A  25                 	db	37
   171  00103B  30                 	db	48	;'0'
   172  00103C  32                 	db	50	;'2'
   173  00103D  64                 	db	100	;'d'
   174  00103E  00                 	db	0
   175                           
   176                           ; #config settings
   177  00103F  00                 	db	0	; dummy byte at the end
   178  0000                     
   179                           	psect	cinit
   180  001858                     __pcinit:
   181                           	opt stack 0
   182  001858                     start_initialization:
   183                           	opt stack 0
   184  001858                     __initialization:
   185                           	opt stack 0
   186                           
   187                           ; Clear objects allocated to COMRAM (31 bytes)
   188  001858  EE00  F02D         	lfsr	0,__pbssCOMRAM
   189  00185C  0E1F               	movlw	31
   190  00185E                     clear_0:
   191  00185E  6AEE               	clrf	postinc0,c
   192  001860  06E8               	decf	wreg,f,c
   193  001862  E1FD               	bnz	clear_0
   194  001864                     end_of_initialization:
   195                           	opt stack 0
   196  001864                     __end_of__initialization:
   197                           	opt stack 0
   198  001864  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   199  001866  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   200  001868  0100               	movlb	0
   201  00186A  EFA7  F009         	goto	_main	;jump to C main() function
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           
   205                           	psect	bssCOMRAM
   206  00002D                     __pbssCOMRAM:
   207                           	opt stack 0
   208  00002D                     checkInputs@rightButton_old:
   209                           	opt stack 0
   210  00002D                     	ds	1
   211  00002E                     checkInputs@leftButton_old:
   212                           	opt stack 0
   213  00002E                     	ds	1
   214  00002F                     _ore:
   215                           	opt stack 0
   216  00002F                     	ds	1
   217  000030                     _minute:
   218                           	opt stack 0
   219  000030                     	ds	1
   220  000031                     _secunde:
   221                           	opt stack 0
   222  000031                     	ds	1
   223  000032                     _tick100ms:
   224                           	opt stack 0
   225  000032                     	ds	1
   226  000033                     _ev:
   227                           	opt stack 0
   228  000033                     	ds	1
   229  000034                     _tick:
   230                           	opt stack 0
   231  000034                     	ds	1
   232  000035                     _rightButtonEv:
   233                           	opt stack 0
   234  000035                     	ds	1
   235  000036                     _leftButtonEv:
   236                           	opt stack 0
   237  000036                     	ds	1
   238  000037                     SWSPIWrite@input:
   239                           	opt stack 0
   240  000037                     	ds	1
   241  000038                     _mesaj:
   242                           	opt stack 0
   243  000038                     	ds	20
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           
   247                           	psect	cstackBANK0
   248  000060                     __pcstackBANK0:
   249                           	opt stack 0
   250  000060                     sprintf@ap:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x0
   254  000060                     	ds	2
   255  000062                     sprintf@prec:
   256                           	opt stack 0
   257                           
   258                           ; 1 bytes @ 0x2
   259  000062                     	ds	1
   260  000063                     sprintf@val:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x3
   264  000063                     	ds	2
   265  000065                     sprintf@flag:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x5
   269  000065                     	ds	1
   270  000066                     sprintf@width:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x6
   274  000066                     	ds	2
   275  000068                     sprintf@c:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x8
   279  000068                     	ds	1
   280                           postinc0	equ	0xFEE
   281                           wreg	equ	0xFE8
   282                           
   283                           	psect	cstackCOMRAM
   284  000001                     __pcstackCOMRAM:
   285                           	opt stack 0
   286  000001                     ??_ISR:
   287  000001                     
   288                           ; 1 bytes @ 0x0
   289  000001                     	ds	15
   290  000010                     ??_isdigit:
   291  000010                     ?___wmul:
   292                           	opt stack 0
   293  000010                     ?___lwdiv:
   294                           	opt stack 0
   295  000010                     SWSPIWrite@output:
   296                           	opt stack 0
   297  000010                     UART_putc@data:
   298                           	opt stack 0
   299  000010                     checkInputs@leftButton:
   300                           	opt stack 0
   301  000010                     Delay10TCYx@unit:
   302                           	opt stack 0
   303  000010                     UART_Init@x:
   304                           	opt stack 0
   305  000010                     ___wmul@multiplier:
   306                           	opt stack 0
   307  000010                     ___lwdiv@dividend:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0xF
   311  000010                     	ds	1
   312  000011                     SWSPIWrite@BitCount:
   313                           	opt stack 0
   314  000011                     checkInputs@rightButton:
   315                           	opt stack 0
   316  000011                     _isdigit$1483:
   317                           	opt stack 0
   318  000011                     UART_puts@s:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x10
   322  000011                     	ds	1
   323  000012                     setGPIO@value:
   324                           	opt stack 0
   325  000012                     setIODIR@dir:
   326                           	opt stack 0
   327  000012                     isdigit@c:
   328                           	opt stack 0
   329  000012                     ___wmul@multiplicand:
   330                           	opt stack 0
   331  000012                     ___lwdiv@divisor:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x11
   335  000012                     	ds	1
   336  000013                     setGPIO@address:
   337                           	opt stack 0
   338  000013                     setIODIR@address:
   339                           	opt stack 0
   340                           
   341                           ; 1 bytes @ 0x12
   342  000013                     	ds	1
   343  000014                     lcdCommand@command:
   344                           	opt stack 0
   345  000014                     LcdChar@letter:
   346                           	opt stack 0
   347  000014                     ___lwdiv@counter:
   348                           	opt stack 0
   349  000014                     ___wmul@product:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x13
   353  000014                     	ds	1
   354  000015                     LcdGoTo@pos:
   355                           	opt stack 0
   356  000015                     LcdWriteString@s:
   357                           	opt stack 0
   358  000015                     ___lwdiv@quotient:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x14
   362  000015                     	ds	2
   363  000017                     ?___lwmod:
   364                           	opt stack 0
   365  000017                     ___lwmod@dividend:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x16
   369  000017                     	ds	2
   370  000019                     ___lwmod@divisor:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x18
   374  000019                     	ds	2
   375  00001B                     ___lwmod@counter:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x1A
   379  00001B                     	ds	1
   380  00001C                     ?_sprintf:
   381                           	opt stack 0
   382  00001C                     sprintf@sp:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x1B
   386  00001C                     	ds	2
   387  00001E                     sprintf@f:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x1D
   391  00001E                     	ds	8
   392  000026                     ??_sprintf:
   393                           
   394                           ; 1 bytes @ 0x25
   395  000026                     	ds	4
   396  00002A                     main@rightButton:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x29
   400  00002A                     	ds	1
   401  00002B                     main@leftButton:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x2A
   405  00002B                     	ds	1
   406  00002C                     main@desc:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x2B
   410  00002C                     	ds	1
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           
   414 ;;
   415 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   416 ;;
   417 ;; *************** function _main *****************
   418 ;; Defined at:
   419 ;;		line 228 in file "TimersLCD.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;		None
   422 ;; Auto vars:     Size  Location     Type
   423 ;;  leftButton      1   42[COMRAM] unsigned char 
   424 ;;  rightButton     1   41[COMRAM] unsigned char 
   425 ;;  desc            1   43[COMRAM] unsigned char 
   426 ;; Return value:  Size  Location     Type
   427 ;;                  1    wreg      void 
   428 ;; Registers used:
   429 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   436 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;Total ram usage:        3 bytes
   440 ;; Hardware stack levels required when called:    7
   441 ;; This function calls:
   442 ;;		_LcdGoTo
   443 ;;		_LcdWriteString
   444 ;;		_checkInputs
   445 ;;		_init
   446 ;;		_sprintf
   447 ;; This function is called by:
   448 ;;		Startup code after reset
   449 ;; This function uses a non-reentrant model
   450 ;;
   451                           
   452                           	psect	text0
   453  00134E                     __ptext0:
   454                           	opt stack 0
   455  00134E                     _main:
   456                           	opt stack 24
   457                           
   458                           ;TimersLCD.c: 230: byte desc = 1;
   459                           
   460                           ;incstack = 0
   461  00134E  0E01               	movlw	1
   462  001350  6E2C               	movwf	main@desc,c
   463                           
   464                           ;TimersLCD.c: 232: if (desc) {
   465  001352  502C               	movf	main@desc,w,c
   466  001354  B4D8               	btfsc	status,2,c
   467  001356  D007               	goto	l1918
   468                           
   469                           ;TimersLCD.c: 233: ore = 12, minute = 59, secunde = 59;
   470  001358  0E0C               	movlw	12
   471  00135A  6E2F               	movwf	_ore,c
   472  00135C  0E3B               	movlw	59
   473  00135E  6E30               	movwf	_minute,c
   474  001360  0E3B               	movlw	59
   475  001362  6E31               	movwf	_secunde,c
   476                           
   477                           ;TimersLCD.c: 234: }
   478  001364  D006               	goto	l1920
   479  001366                     l1918:
   480                           
   481                           ;TimersLCD.c: 235: else ore = minute = secunde = 0;
   482  001366  0E00               	movlw	0
   483  001368  6E31               	movwf	_secunde,c
   484  00136A  C031  F030         	movff	_secunde,_minute
   485  00136E  C030  F02F         	movff	_minute,_ore
   486  001372                     l1920:
   487                           
   488                           ;TimersLCD.c: 237: init();
   489  001372  ECE1  F00B         	call	_init	;wreg free
   490                           
   491                           ;TimersLCD.c: 239: TRISDbits.RD0 = 0;
   492  001376  9095               	bcf	3989,0,c	;volatile
   493                           
   494                           ;TimersLCD.c: 241: PORTJbits.RJ0 = 0;
   495  001378  9088               	bcf	3976,0,c	;volatile
   496                           
   497                           ;TimersLCD.c: 242: TRISJbits.TRISJ0 = 0;
   498  00137A  909A               	bcf	3994,0,c	;volatile
   499                           
   500                           ;TimersLCD.c: 243: PORTJbits.RJ1 = 0;
   501  00137C  9288               	bcf	3976,1,c	;volatile
   502                           
   503                           ;TimersLCD.c: 244: TRISJbits.TRISJ1 = 0;
   504  00137E  929A               	bcf	3994,1,c	;volatile
   505                           
   506                           ;TimersLCD.c: 245: PORTJbits.RJ2 = 0;
   507  001380  9488               	bcf	3976,2,c	;volatile
   508                           
   509                           ;TimersLCD.c: 246: TRISJbits.TRISJ2 = 0;
   510  001382  949A               	bcf	3994,2,c	;volatile
   511                           
   512                           ;TimersLCD.c: 248: LcdGoTo(0x00+0);
   513  001384  0E00               	movlw	0
   514  001386  EC4F  F00C         	call	_LcdGoTo
   515                           
   516                           ;TimersLCD.c: 250: LcdWriteString("Embedded  system");
   517  00138A  0E1F               	movlw	low STR_2
   518  00138C  6E15               	movwf	LcdWriteString@s,c
   519  00138E  0E10               	movlw	high STR_2
   520  001390  6E16               	movwf	LcdWriteString@s+1,c
   521  001392  EC8D  F00A         	call	_LcdWriteString	;wreg free
   522  001396                     l1940:
   523  001396  5033               	movf	_ev,w,c
   524  001398  B4D8               	btfsc	status,2,c
   525  00139A  D7FD               	goto	l1940
   526                           
   527                           ;TimersLCD.c: 256: ev = 0;
   528  00139C  0E00               	movlw	0
   529  00139E  6E33               	movwf	_ev,c
   530                           
   531                           ;TimersLCD.c: 258: checkInputs();
   532  0013A0  EC08  F00B         	call	_checkInputs	;wreg free
   533                           
   534                           ;TimersLCD.c: 300: byte leftButton = PORTBbits.RB0;
   535  0013A4  0E00               	movlw	0
   536  0013A6  B081               	btfsc	3969,0,c	;volatile
   537  0013A8  0E01               	movlw	1
   538  0013AA  6E2B               	movwf	main@leftButton,c
   539                           
   540                           ;TimersLCD.c: 301: byte rightButton = PORTAbits.RA5;
   541  0013AC  0E00               	movlw	0
   542  0013AE  BA80               	btfsc	3968,5,c	;volatile
   543  0013B0  0E01               	movlw	1
   544  0013B2  6E2A               	movwf	main@rightButton,c
   545                           
   546                           ;TimersLCD.c: 304: tick100ms++;
   547  0013B4  2A32               	incf	_tick100ms,f,c
   548                           
   549                           ;TimersLCD.c: 306: if (!desc) {
   550  0013B6  502C               	movf	main@desc,w,c
   551  0013B8  A4D8               	btfss	status,2,c
   552  0013BA  D020               	goto	l1976
   553                           
   554                           ;TimersLCD.c: 307: if (tick100ms == 10)
   555  0013BC  0E0A               	movlw	10
   556  0013BE  1832               	xorwf	_tick100ms,w,c
   557  0013C0  A4D8               	btfss	status,2,c
   558  0013C2  D003               	goto	l1960
   559                           
   560                           ;TimersLCD.c: 308: {
   561                           ;TimersLCD.c: 310: tick100ms = 0;
   562  0013C4  0E00               	movlw	0
   563  0013C6  6E32               	movwf	_tick100ms,c
   564                           
   565                           ;TimersLCD.c: 313: secunde++;
   566  0013C8  2A31               	incf	_secunde,f,c
   567  0013CA                     l1960:
   568                           
   569                           ;TimersLCD.c: 314: }
   570                           ;TimersLCD.c: 316: if (secunde == 60) minute++, secunde = 0;
   571  0013CA  0E3C               	movlw	60
   572  0013CC  1831               	xorwf	_secunde,w,c
   573  0013CE  A4D8               	btfss	status,2,c
   574  0013D0  D003               	goto	l1966
   575  0013D2  2A30               	incf	_minute,f,c
   576  0013D4  0E00               	movlw	0
   577  0013D6  6E31               	movwf	_secunde,c
   578  0013D8                     l1966:
   579                           
   580                           ;TimersLCD.c: 317: if (minute == 60) ore++, minute = 0;
   581  0013D8  0E3C               	movlw	60
   582  0013DA  1830               	xorwf	_minute,w,c
   583  0013DC  A4D8               	btfss	status,2,c
   584  0013DE  D003               	goto	l1972
   585  0013E0  2A2F               	incf	_ore,f,c
   586  0013E2  0E00               	movlw	0
   587  0013E4  6E30               	movwf	_minute,c
   588  0013E6                     l1972:
   589                           
   590                           ;TimersLCD.c: 320: if (!leftButton) ore = 12, minute = secunde = 59, desc = 1;
   591  0013E6  502B               	movf	main@leftButton,w,c
   592  0013E8  A4D8               	btfss	status,2,c
   593  0013EA  D026               	goto	l1998
   594  0013EC  0E0C               	movlw	12
   595  0013EE  6E2F               	movwf	_ore,c
   596  0013F0  0E3B               	movlw	59
   597  0013F2  6E31               	movwf	_secunde,c
   598  0013F4  C031  F030         	movff	_secunde,_minute
   599  0013F8  0E01               	movlw	1
   600  0013FA  D01D               	goto	L1
   601  0013FC                     l1976:
   602                           
   603                           ;TimersLCD.c: 323: else {
   604                           ;TimersLCD.c: 325: if (tick100ms == 10) {
   605  0013FC  0E0A               	movlw	10
   606  0013FE  1832               	xorwf	_tick100ms,w,c
   607  001400  A4D8               	btfss	status,2,c
   608  001402  D003               	goto	l1982
   609                           
   610                           ;TimersLCD.c: 326: tick100ms = 0;
   611  001404  0E00               	movlw	0
   612  001406  6E32               	movwf	_tick100ms,c
   613                           
   614                           ;TimersLCD.c: 328: secunde--;
   615  001408  0631               	decf	_secunde,f,c
   616  00140A                     l1982:
   617                           
   618                           ;TimersLCD.c: 329: }
   619                           ;TimersLCD.c: 332: if (!secunde) secunde = 59, minute--;
   620  00140A  5031               	movf	_secunde,w,c
   621  00140C  A4D8               	btfss	status,2,c
   622  00140E  D003               	goto	l1988
   623  001410  0E3B               	movlw	59
   624  001412  6E31               	movwf	_secunde,c
   625  001414  0630               	decf	_minute,f,c
   626  001416                     l1988:
   627                           
   628                           ;TimersLCD.c: 333: if (!minute) minute = 59, ore--;
   629  001416  5030               	movf	_minute,w,c
   630  001418  A4D8               	btfss	status,2,c
   631  00141A  D003               	goto	l1994
   632  00141C  0E3B               	movlw	59
   633  00141E  6E30               	movwf	_minute,c
   634  001420  062F               	decf	_ore,f,c
   635  001422                     l1994:
   636                           
   637                           ;TimersLCD.c: 336: if (!leftButton) ore = minute = secunde = 0, desc = 0;
   638  001422  502B               	movf	main@leftButton,w,c
   639  001424  A4D8               	btfss	status,2,c
   640  001426  D008               	goto	l1998
   641  001428  0E00               	movlw	0
   642  00142A  6E31               	movwf	_secunde,c
   643  00142C  C031  F030         	movff	_secunde,_minute
   644  001430  C030  F02F         	movff	_minute,_ore
   645  001434  0E00               	movlw	0
   646  001436                     L1:
   647  001436  6E2C               	movwf	main@desc,c
   648  001438                     l1998:
   649                           
   650                           ;TimersLCD.c: 338: }
   651                           ;TimersLCD.c: 360: LcdGoTo(0x40+4);
   652  001438  0E44               	movlw	68
   653  00143A  EC4F  F00C         	call	_LcdGoTo
   654                           
   655                           ;TimersLCD.c: 361: sprintf(mesaj, "%02d:%02d:%02d", ore, minute, secunde);
   656  00143E  0E38               	movlw	low _mesaj
   657  001440  6E1C               	movwf	sprintf@sp,c
   658  001442  0E00               	movlw	high _mesaj
   659  001444  6E1D               	movwf	sprintf@sp+1,c
   660  001446  0E30               	movlw	low STR_3
   661  001448  6E1E               	movwf	sprintf@f,c
   662  00144A  0E10               	movlw	high STR_3
   663  00144C  6E1F               	movwf	sprintf@f+1,c
   664  00144E  C02F  F020         	movff	_ore,?_sprintf+4
   665  001452  6A21               	clrf	?_sprintf+5,c
   666  001454  C030  F022         	movff	_minute,?_sprintf+6
   667  001458  6A23               	clrf	?_sprintf+7,c
   668  00145A  C031  F024         	movff	_secunde,?_sprintf+8
   669  00145E  6A25               	clrf	?_sprintf+9,c
   670  001460  EC20  F008         	call	_sprintf	;wreg free
   671                           
   672                           ;TimersLCD.c: 362: LcdWriteString(mesaj);
   673  001464  0E38               	movlw	low _mesaj
   674  001466  6E15               	movwf	LcdWriteString@s,c
   675  001468  0E00               	movlw	high _mesaj
   676  00146A  6E16               	movwf	LcdWriteString@s+1,c
   677  00146C  EC8D  F00A         	call	_LcdWriteString	;wreg free
   678                           
   679                           ;TimersLCD.c: 371: leftButtonEv = 0;
   680  001470  0E00               	movlw	0
   681  001472  6E36               	movwf	_leftButtonEv,c
   682                           
   683                           ;TimersLCD.c: 372: rightButtonEv = 0;
   684  001474  0E00               	movlw	0
   685  001476  6E35               	movwf	_rightButtonEv,c
   686  001478  D78E               	goto	l1940
   687  00147A                     __end_of_main:
   688                           	opt stack 0
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           status	equ	0xFD8
   692                           
   693 ;; *************** function _sprintf *****************
   694 ;; Defined at:
   695 ;;		line 492 in file "D:\Hella\Compiler\sources\common\doprnt.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  sp              2   27[COMRAM] PTR unsigned char 
   698 ;;		 -> mesaj(20), 
   699 ;;  f               2   29[COMRAM] PTR const unsigned char 
   700 ;;		 -> STR_3(15), 
   701 ;; Auto vars:     Size  Location     Type
   702 ;;  tmpval          4    0        struct .
   703 ;;  cp              3    0        PTR const unsigned char 
   704 ;;  width           2    6[BANK0 ] int 
   705 ;;  val             2    3[BANK0 ] unsigned int 
   706 ;;  ap              2    0[BANK0 ] PTR void [1]
   707 ;;		 -> ?_sprintf(2), 
   708 ;;  len             2    0        unsigned int 
   709 ;;  c               1    8[BANK0 ] char 
   710 ;;  flag            1    5[BANK0 ] unsigned char 
   711 ;;  prec            1    2[BANK0 ] char 
   712 ;; Return value:  Size  Location     Type
   713 ;;                  2   27[COMRAM] int 
   714 ;; Registers used:
   715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   721 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   722 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   723 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   724 ;;      Totals:        14       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   725 ;;Total ram usage:       23 bytes
   726 ;; Hardware stack levels used:    1
   727 ;; Hardware stack levels required when called:    2
   728 ;; This function calls:
   729 ;;		___lwdiv
   730 ;;		___lwmod
   731 ;;		___wmul
   732 ;;		_isdigit
   733 ;; This function is called by:
   734 ;;		_main
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text1
   739  001040                     __ptext1:
   740                           	opt stack 0
   741  001040                     _sprintf:
   742                           	opt stack 28
   743                           
   744                           ;doprnt.c: 494: va_list ap;
   745                           ;doprnt.c: 499: signed char c;
   746                           ;doprnt.c: 501: int width;
   747                           ;doprnt.c: 506: signed char prec;
   748                           ;doprnt.c: 508: unsigned char flag;
   749                           ;doprnt.c: 523: union {
   750                           ;doprnt.c: 524: unsigned long vd;
   751                           ;doprnt.c: 525: double integ;
   752                           ;doprnt.c: 526: } tmpval;
   753                           ;doprnt.c: 528: unsigned int val;
   754                           ;doprnt.c: 529: unsigned len;
   755                           ;doprnt.c: 530: const char * cp;
   756                           ;doprnt.c: 533: *ap = __va_start();
   757                           
   758                           ;incstack = 0
   759  001040  0E20               	movlw	low (?_sprintf+4)
   760  001042  0100               	movlb	0	; () banked
   761  001044  6F60               	movwf	sprintf@ap& (0+255),b
   762  001046  0E00               	movlw	high (?_sprintf+4)
   763  001048  0100               	movlb	0	; () banked
   764  00104A  6F61               	movwf	(sprintf@ap+1)& (0+255),b
   765                           
   766                           ;doprnt.c: 536: while(c = *f++) {
   767  00104C  D16A               	goto	l1908
   768  00104E                     l1802:
   769                           
   770                           ; BSR set to: 0
   771                           ;doprnt.c: 538: if(c != '%')
   772  00104E  0E25               	movlw	37
   773  001050  0100               	movlb	0	; () banked
   774  001052  1968               	xorwf	sprintf@c& (0+255),w,b
   775  001054  B4D8               	btfsc	status,2,c
   776  001056  D009               	goto	l1808
   777                           
   778                           ; BSR set to: 0
   779                           ;doprnt.c: 540: {
   780                           ;doprnt.c: 541: ((*sp++ = (c)));
   781  001058  C01C  FFD9         	movff	sprintf@sp,fsr2l
   782  00105C  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
   783  001060  C068  FFDF         	movff	sprintf@c,indf2
   784                           
   785                           ; BSR set to: 0
   786  001064  4A1C               	infsnz	sprintf@sp,f,c
   787  001066  2A1D               	incf	sprintf@sp+1,f,c
   788                           
   789                           ;doprnt.c: 542: continue;
   790  001068  D15C               	goto	l1908
   791  00106A                     l1808:
   792                           
   793                           ; BSR set to: 0
   794                           ;doprnt.c: 543: }
   795                           ;doprnt.c: 546: width = 0;
   796  00106A  0E00               	movlw	0
   797  00106C  0100               	movlb	0	; () banked
   798  00106E  6F67               	movwf	(sprintf@width+1)& (0+255),b
   799  001070  0E00               	movlw	0
   800  001072  6F66               	movwf	sprintf@width& (0+255),b
   801                           
   802                           ;doprnt.c: 548: flag = 0;
   803  001074  0E00               	movlw	0
   804  001076  0100               	movlb	0	; () banked
   805  001078  6F65               	movwf	sprintf@flag& (0+255),b
   806                           
   807                           ; BSR set to: 0
   808                           ;doprnt.c: 551: switch(*f) {
   809                           
   810                           ;doprnt.c: 550: for(;;) {
   811  00107A  D004               	goto	l1814
   812  00107C                     l1810:
   813                           
   814                           ;doprnt.c: 580: flag |= 0x04;
   815  00107C  0100               	movlb	0	; () banked
   816  00107E  8565               	bsf	sprintf@flag& (0+255),2,b
   817                           
   818                           ;doprnt.c: 581: f++;
   819  001080  4A1E               	infsnz	sprintf@f,f,c
   820  001082  2A1F               	incf	sprintf@f+1,f,c
   821  001084                     l1814:
   822  001084  C01E  FFF6         	movff	sprintf@f,tblptrl
   823  001088  C01F  FFF7         	movff	sprintf@f+1,tblptrh
   824  00108C                     	if	0	;tblptru may be non-zero
   825  00108C                     	endif
   826  00108C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   827  00108C  0E00               	movlw	low (__mediumconst shr (0+16))
   828  00108E  6EF8               	movwf	tblptru,c
   829  001090                     	endif
   830  001090  0008               	tblrd		*
   831  001092  50F5               	movf	tablat,w,c
   832                           
   833                           ; Switch size 1, requested type "space"
   834                           ; Number of cases is 1, Range of values is 48 to 48
   835                           ; switch strategies available:
   836                           ; Name         Instructions Cycles
   837                           ; simple_byte            4     3 (average)
   838                           ;	Chosen strategy is simple_byte
   839  001094  0A30               	xorlw	48	; case 48
   840  001096  B4D8               	btfsc	status,2,c
   841  001098  D7F1               	goto	l1810
   842                           
   843                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   844                           
   845                           ;doprnt.c: 586: }
   846                           
   847                           ;doprnt.c: 585: break;
   848  00109A  C01E  FFF6         	movff	sprintf@f,tblptrl
   849  00109E  C01F  FFF7         	movff	sprintf@f+1,tblptrh
   850  0010A2                     	if	0	;tblptru may be non-zero
   851  0010A2                     	endif
   852  0010A2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   853  0010A2  0E00               	movlw	low (__mediumconst shr (0+16))
   854  0010A4  6EF8               	movwf	tblptru,c
   855  0010A6                     	endif
   856  0010A6  0008               	tblrd		*
   857  0010A8  50F5               	movf	tablat,w,c
   858  0010AA  ECF1  F00B         	call	_isdigit
   859  0010AE  A0D8               	btfss	status,0,c
   860  0010B0  D039               	goto	l1830
   861                           
   862                           ;doprnt.c: 598: width = 0;
   863  0010B2  0E00               	movlw	0
   864  0010B4  0100               	movlb	0	; () banked
   865  0010B6  6F67               	movwf	(sprintf@width+1)& (0+255),b
   866  0010B8  0E00               	movlw	0
   867  0010BA  6F66               	movwf	sprintf@width& (0+255),b
   868  0010BC                     l1820:
   869                           
   870                           ;doprnt.c: 600: width *= 10;
   871  0010BC  C066  F010         	movff	sprintf@width,___wmul@multiplier
   872  0010C0  C067  F011         	movff	sprintf@width+1,___wmul@multiplier+1
   873  0010C4  0E00               	movlw	0
   874  0010C6  6E13               	movwf	___wmul@multiplicand+1,c
   875  0010C8  0E0A               	movlw	10
   876  0010CA  6E12               	movwf	___wmul@multiplicand,c
   877  0010CC  ECCE  F00B         	call	___wmul	;wreg free
   878  0010D0  C010  F066         	movff	?___wmul,sprintf@width
   879  0010D4  C011  F067         	movff	?___wmul+1,sprintf@width+1
   880                           
   881                           ;doprnt.c: 601: width += *f++ - '0';
   882  0010D8  0ED0               	movlw	208
   883  0010DA  6E26               	movwf	??_sprintf& (0+255),c
   884  0010DC  0EFF               	movlw	255
   885  0010DE  6E27               	movwf	(??_sprintf+1)& (0+255),c
   886  0010E0  C01E  FFF6         	movff	sprintf@f,tblptrl
   887  0010E4  C01F  FFF7         	movff	sprintf@f+1,tblptrh
   888  0010E8                     	if	0	;tblptru may be non-zero
   889  0010E8                     	endif
   890  0010E8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   891  0010E8  0E00               	movlw	low (__mediumconst shr (0+16))
   892  0010EA  6EF8               	movwf	tblptru,c
   893  0010EC                     	endif
   894  0010EC  0008               	tblrd		*
   895  0010EE  50F5               	movf	tablat,w,c
   896  0010F0  6E28               	movwf	(??_sprintf+2)& (0+255),c
   897  0010F2  6A29               	clrf	(??_sprintf+3)& (0+255),c
   898  0010F4  5026               	movf	??_sprintf,w,c
   899  0010F6  2628               	addwf	??_sprintf+2,f,c
   900  0010F8  5027               	movf	??_sprintf+1,w,c
   901  0010FA  2229               	addwfc	??_sprintf+3,f,c
   902  0010FC  5028               	movf	??_sprintf+2,w,c
   903  0010FE  0100               	movlb	0	; () banked
   904  001100  2766               	addwf	sprintf@width& (0+255),f,b
   905  001102  5029               	movf	??_sprintf+3,w,c
   906  001104  0100               	movlb	0	; () banked
   907  001106  2367               	addwfc	(sprintf@width+1)& (0+255),f,b
   908                           
   909                           ; BSR set to: 0
   910  001108  4A1E               	infsnz	sprintf@f,f,c
   911  00110A  2A1F               	incf	sprintf@f+1,f,c
   912                           
   913                           ; BSR set to: 0
   914                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   915  00110C  C01E  FFF6         	movff	sprintf@f,tblptrl
   916  001110  C01F  FFF7         	movff	sprintf@f+1,tblptrh
   917  001114                     	if	0	;tblptru may be non-zero
   918  001114                     	endif
   919  001114                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   920  001114  0E00               	movlw	low (__mediumconst shr (0+16))
   921  001116  6EF8               	movwf	tblptru,c
   922  001118                     	endif
   923  001118  0008               	tblrd		*
   924  00111A  50F5               	movf	tablat,w,c
   925  00111C  ECF1  F00B         	call	_isdigit
   926  001120  B0D8               	btfsc	status,0,c
   927  001122  D7CC               	goto	l1820
   928  001124                     l1830:
   929  001124  C01E  FFF6         	movff	sprintf@f,tblptrl
   930  001128  C01F  FFF7         	movff	sprintf@f+1,tblptrh
   931  00112C  4A1E               	infsnz	sprintf@f,f,c
   932  00112E  2A1F               	incf	sprintf@f+1,f,c
   933  001130                     	if	0	;tblptru may be non-zero
   934  001130                     	endif
   935  001130                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   936  001130  0E00               	movlw	low (__mediumconst shr (0+16))
   937  001132  6EF8               	movwf	tblptru,c
   938  001134                     	endif
   939  001134  0008               	tblrd		*
   940  001136  CFF5 F068          	movff	tablat,sprintf@c
   941  00113A  0100               	movlb	0	; () banked
   942  00113C  5168               	movf	sprintf@c& (0+255),w,b
   943                           
   944                           ; Switch size 1, requested type "space"
   945                           ; Number of cases is 3, Range of values is 0 to 105
   946                           ; switch strategies available:
   947                           ; Name         Instructions Cycles
   948                           ; simple_byte           10     6 (average)
   949                           ;	Chosen strategy is simple_byte
   950  00113E  0A00               	xorlw	0	; case 0
   951  001140  B4D8               	btfsc	status,2,c
   952  001142  D0FE               	goto	l1910
   953  001144  0A64               	xorlw	100	; case 100
   954  001146  B4D8               	btfsc	status,2,c
   955  001148  D003               	goto	l1832
   956  00114A  0A0D               	xorlw	13	; case 105
   957  00114C  A4D8               	btfss	status,2,c
   958  00114E  D0E9               	goto	l1908
   959  001150                     l1832:
   960                           
   961                           ;doprnt.c: 1253: {
   962                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   963  001150  C060  FFD9         	movff	sprintf@ap,fsr2l
   964  001154  C061  FFDA         	movff	sprintf@ap+1,fsr2h
   965  001158  CFDE F063          	movff	postinc2,sprintf@val
   966  00115C  CFDD F064          	movff	postdec2,sprintf@val+1
   967  001160  0E02               	movlw	2
   968  001162  0100               	movlb	0	; () banked
   969  001164  2760               	addwf	sprintf@ap& (0+255),f,b
   970  001166  0E00               	movlw	0
   971  001168  2361               	addwfc	(sprintf@ap+1)& (0+255),f,b
   972                           
   973                           ; BSR set to: 0
   974                           ;doprnt.c: 1261: if((int)val < 0) {
   975  00116A  0100               	movlb	0	; () banked
   976  00116C  AF64               	btfss	(sprintf@val+1)& (0+255),7,b
   977  00116E  D008               	goto	l1842
   978                           
   979                           ; BSR set to: 0
   980                           ;doprnt.c: 1262: flag |= 0x03;
   981  001170  0E03               	movlw	3
   982  001172  0100               	movlb	0	; () banked
   983  001174  1365               	iorwf	sprintf@flag& (0+255),f,b
   984                           
   985                           ; BSR set to: 0
   986                           ;doprnt.c: 1263: val = -val;
   987  001176  0100               	movlb	0	; () banked
   988  001178  6D63               	negf	sprintf@val& (0+255),b
   989  00117A  1F64               	comf	(sprintf@val+1)& (0+255),f,b
   990  00117C  B0D8               	btfsc	status,0,c
   991  00117E  2B64               	incf	(sprintf@val+1)& (0+255),f,b
   992  001180                     l1842:
   993                           
   994                           ; BSR set to: 0
   995                           ;doprnt.c: 1264: }
   996                           ;doprnt.c: 1266: }
   997                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   998  001180  0E01               	movlw	1
   999  001182  0100               	movlb	0	; () banked
  1000  001184  6F68               	movwf	sprintf@c& (0+255),b
  1001  001186                     l1844:
  1002                           
  1003                           ; BSR set to: 0
  1004  001186  0E05               	movlw	5
  1005  001188  0100               	movlb	0	; () banked
  1006  00118A  1968               	xorwf	sprintf@c& (0+255),w,b
  1007  00118C  B4D8               	btfsc	status,2,c
  1008  00118E  D019               	goto	l1856
  1009                           
  1010                           ; BSR set to: 0
  1011                           ;doprnt.c: 1306: if(val < dpowers[c])
  1012                           
  1013                           ; BSR set to: 0
  1014                           
  1015                           ; BSR set to: 0
  1016  001190  0100               	movlb	0	; () banked
  1017  001192  5168               	movf	sprintf@c& (0+255),w,b
  1018  001194  0D02               	mullw	2
  1019  001196  0E01               	movlw	low _dpowers
  1020  001198  24F3               	addwf	prodl,w,c
  1021  00119A  6EF6               	movwf	tblptrl,c
  1022  00119C  0E10               	movlw	high _dpowers
  1023  00119E  20F4               	addwfc	prodh,w,c
  1024  0011A0  6EF7               	movwf	tblptrh,c
  1025  0011A2                     	if	1	;There are 3 active tblptr bytes
  1026  0011A2  6AF8               	clrf	tblptru,c
  1027  0011A4  0E00               	movlw	low (__mediumconst shr (0+16))
  1028  0011A6  22F8               	addwfc	tblptru,f,c
  1029  0011A8                     	endif
  1030  0011A8  0009               	tblrd		*+
  1031  0011AA  50F5               	movf	tablat,w,c
  1032  0011AC  0100               	movlb	0	; () banked
  1033  0011AE  5D63               	subwf	sprintf@val& (0+255),w,b
  1034  0011B0  0009               	tblrd		*+
  1035  0011B2  50F5               	movf	tablat,w,c
  1036  0011B4  0100               	movlb	0	; () banked
  1037  0011B6  5964               	subwfb	(sprintf@val+1)& (0+255),w,b
  1038  0011B8  A0D8               	btfss	status,0,c
  1039  0011BA  D003               	goto	l1856
  1040                           
  1041                           ; BSR set to: 0
  1042                           
  1043                           ; BSR set to: 0
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;doprnt.c: 1307: break;
  1047  0011BC  0100               	movlb	0	; () banked
  1048  0011BE  2B68               	incf	sprintf@c& (0+255),f,b
  1049  0011C0  D7E2               	goto	l1844
  1050  0011C2                     l1856:
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1054  0011C2  0100               	movlb	0	; () banked
  1055  0011C4  5166               	movf	sprintf@width& (0+255),w,b
  1056  0011C6  0100               	movlb	0	; () banked
  1057  0011C8  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1058  0011CA  B4D8               	btfsc	status,2,c
  1059  0011CC  D00A               	goto	l1862
  1060                           
  1061                           ; BSR set to: 0
  1062  0011CE  C065  F026         	movff	sprintf@flag,??_sprintf
  1063  0011D2  0E03               	movlw	3
  1064  0011D4  1626               	andwf	??_sprintf,f,c
  1065  0011D6  B4D8               	btfsc	status,2,c
  1066  0011D8  D004               	goto	l1862
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;doprnt.c: 1346: width--;
  1070  0011DA  0100               	movlb	0	; () banked
  1071  0011DC  0766               	decf	sprintf@width& (0+255),f,b
  1072  0011DE  A0D8               	btfss	status,0,c
  1073  0011E0  0767               	decf	(sprintf@width+1)& (0+255),f,b
  1074  0011E2                     l1862:
  1075                           
  1076                           ; BSR set to: 0
  1077                           ;doprnt.c: 1381: if(width > c)
  1078  0011E2  0E80               	movlw	128
  1079  0011E4  0100               	movlb	0	; () banked
  1080  0011E6  BF68               	btfsc	sprintf@c& (0+255),7,b
  1081  0011E8  0E7F               	movlw	127
  1082  0011EA  6E26               	movwf	??_sprintf& (0+255),c
  1083  0011EC  0100               	movlb	0	; () banked
  1084  0011EE  5166               	movf	sprintf@width& (0+255),w,b
  1085  0011F0  0100               	movlb	0	; () banked
  1086  0011F2  5D68               	subwf	sprintf@c& (0+255),w,b
  1087  0011F4  0100               	movlb	0	; () banked
  1088  0011F6  5167               	movf	(sprintf@width+1)& (0+255),w,b
  1089  0011F8  0A80               	xorlw	128
  1090  0011FA  5826               	subwfb	??_sprintf& (0+255),w,c
  1091  0011FC  B0D8               	btfsc	status,0,c
  1092  0011FE  D00B               	goto	l1866
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;doprnt.c: 1382: width -= c;
  1096  001200  0100               	movlb	0	; () banked
  1097  001202  5168               	movf	sprintf@c& (0+255),w,b
  1098  001204  0100               	movlb	0	; () banked
  1099  001206  5F66               	subwf	sprintf@width& (0+255),f,b
  1100  001208  0E00               	movlw	0
  1101  00120A  0100               	movlb	0	; () banked
  1102  00120C  BF68               	btfsc	sprintf@c& (0+255),7,b
  1103  00120E  0EFF               	movlw	255
  1104  001210  0100               	movlb	0	; () banked
  1105  001212  5B67               	subwfb	(sprintf@width+1)& (0+255),f,b
  1106  001214  D005               	goto	l1868
  1107  001216                     l1866:
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;doprnt.c: 1383: else
  1111                           ;doprnt.c: 1384: width = 0;
  1112  001216  0E00               	movlw	0
  1113  001218  0100               	movlb	0	; () banked
  1114  00121A  6F67               	movwf	(sprintf@width+1)& (0+255),b
  1115  00121C  0E00               	movlw	0
  1116  00121E  6F66               	movwf	sprintf@width& (0+255),b
  1117  001220                     l1868:
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;doprnt.c: 1387: if(flag & 0x04) {
  1121  001220  0100               	movlb	0	; () banked
  1122  001222  A565               	btfss	sprintf@flag& (0+255),2,b
  1123  001224  D021               	goto	l1884
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;doprnt.c: 1392: if(flag & 0x03)
  1127  001226  C065  F026         	movff	sprintf@flag,??_sprintf
  1128  00122A  0E03               	movlw	3
  1129  00122C  1626               	andwf	??_sprintf,f,c
  1130  00122E  B4D8               	btfsc	status,2,c
  1131  001230  D008               	goto	l1876
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1135  001232  C01C  FFD9         	movff	sprintf@sp,fsr2l
  1136  001236  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  1137  00123A  0E2D               	movlw	45
  1138  00123C  6EDF               	movwf	indf2,c
  1139                           
  1140                           ; BSR set to: 0
  1141  00123E  4A1C               	infsnz	sprintf@sp,f,c
  1142  001240  2A1D               	incf	sprintf@sp+1,f,c
  1143  001242                     l1876:
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;doprnt.c: 1415: if(width)
  1147  001242  0100               	movlb	0	; () banked
  1148  001244  5166               	movf	sprintf@width& (0+255),w,b
  1149  001246  0100               	movlb	0	; () banked
  1150  001248  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1151  00124A  B4D8               	btfsc	status,2,c
  1152  00124C  D033               	goto	l1898
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1156                           
  1157                           ; BSR set to: 0
  1158                           
  1159                           ;doprnt.c: 1416: do
  1160  00124E  C01C  FFD9         	movff	sprintf@sp,fsr2l
  1161  001252  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  1162  001256  0E30               	movlw	48
  1163  001258  6EDF               	movwf	indf2,c
  1164                           
  1165                           ; BSR set to: 0
  1166  00125A  4A1C               	infsnz	sprintf@sp,f,c
  1167  00125C  2A1D               	incf	sprintf@sp+1,f,c
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;doprnt.c: 1418: while(--width);
  1171  00125E  0100               	movlb	0	; () banked
  1172  001260  0766               	decf	sprintf@width& (0+255),f,b
  1173  001262  A0D8               	btfss	status,0,c
  1174  001264  0767               	decf	(sprintf@width+1)& (0+255),f,b
  1175  001266  D7ED               	goto	l1876
  1176  001268                     l1884:
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;doprnt.c: 1422: {
  1180                           ;doprnt.c: 1424: if(width
  1181                           ;doprnt.c: 1428: )
  1182  001268  0100               	movlb	0	; () banked
  1183  00126A  5166               	movf	sprintf@width& (0+255),w,b
  1184  00126C  0100               	movlb	0	; () banked
  1185  00126E  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1186  001270  B4D8               	btfsc	status,2,c
  1187  001272  D012               	goto	l1892
  1188  001274                     l1886:
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1192  001274  C01C  FFD9         	movff	sprintf@sp,fsr2l
  1193  001278  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  1194  00127C  0E20               	movlw	32
  1195  00127E  6EDF               	movwf	indf2,c
  1196                           
  1197                           ; BSR set to: 0
  1198  001280  4A1C               	infsnz	sprintf@sp,f,c
  1199  001282  2A1D               	incf	sprintf@sp+1,f,c
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;doprnt.c: 1431: while(--width);
  1203  001284  0100               	movlb	0	; () banked
  1204  001286  0766               	decf	sprintf@width& (0+255),f,b
  1205  001288  A0D8               	btfss	status,0,c
  1206  00128A  0767               	decf	(sprintf@width+1)& (0+255),f,b
  1207  00128C  0100               	movlb	0	; () banked
  1208  00128E  5166               	movf	sprintf@width& (0+255),w,b
  1209  001290  0100               	movlb	0	; () banked
  1210  001292  1167               	iorwf	(sprintf@width+1)& (0+255),w,b
  1211  001294  A4D8               	btfss	status,2,c
  1212  001296  D7EE               	goto	l1886
  1213  001298                     l1892:
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;doprnt.c: 1438: if(flag & 0x03)
  1217  001298  C065  F026         	movff	sprintf@flag,??_sprintf
  1218  00129C  0E03               	movlw	3
  1219  00129E  1626               	andwf	??_sprintf,f,c
  1220  0012A0  B4D8               	btfsc	status,2,c
  1221  0012A2  D008               	goto	l1898
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1225  0012A4  C01C  FFD9         	movff	sprintf@sp,fsr2l
  1226  0012A8  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  1227  0012AC  0E2D               	movlw	45
  1228  0012AE  6EDF               	movwf	indf2,c
  1229                           
  1230                           ; BSR set to: 0
  1231  0012B0  4A1C               	infsnz	sprintf@sp,f,c
  1232  0012B2  2A1D               	incf	sprintf@sp+1,f,c
  1233  0012B4                     l1898:
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;doprnt.c: 1469: }
  1237                           ;doprnt.c: 1472: prec = c;
  1238  0012B4  C068  F062         	movff	sprintf@c,sprintf@prec
  1239                           
  1240                           ;doprnt.c: 1474: while(prec--) {
  1241  0012B8  D02E               	goto	l1906
  1242  0012BA                     l1900:
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;doprnt.c: 1478: {
  1246                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1247  0012BA  0100               	movlb	0	; () banked
  1248  0012BC  5162               	movf	sprintf@prec& (0+255),w,b
  1249  0012BE  0D02               	mullw	2
  1250  0012C0  0E01               	movlw	low _dpowers
  1251  0012C2  24F3               	addwf	prodl,w,c
  1252  0012C4  6EF6               	movwf	tblptrl,c
  1253  0012C6  0E10               	movlw	high _dpowers
  1254  0012C8  20F4               	addwfc	prodh,w,c
  1255  0012CA  6EF7               	movwf	tblptrh,c
  1256  0012CC                     	if	1	;There are 3 active tblptr bytes
  1257  0012CC  6AF8               	clrf	tblptru,c
  1258  0012CE  0E00               	movlw	low (__mediumconst shr (0+16))
  1259  0012D0  22F8               	addwfc	tblptru,f,c
  1260  0012D2                     	endif
  1261  0012D2  0009               	tblrd		*+
  1262  0012D4  CFF5 F012          	movff	tablat,___lwdiv@divisor
  1263  0012D8  000A               	tblrd		*-
  1264  0012DA  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  1265  0012DE  C063  F010         	movff	sprintf@val,___lwdiv@dividend
  1266  0012E2  C064  F011         	movff	sprintf@val+1,___lwdiv@dividend+1
  1267  0012E6  ECB8  F00A         	call	___lwdiv	;wreg free
  1268  0012EA  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  1269  0012EE  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  1270  0012F2  0E00               	movlw	0
  1271  0012F4  6E1A               	movwf	___lwmod@divisor+1,c
  1272  0012F6  0E0A               	movlw	10
  1273  0012F8  6E19               	movwf	___lwmod@divisor,c
  1274  0012FA  EC2B  F00B         	call	___lwmod	;wreg free
  1275  0012FE  5017               	movf	?___lwmod,w,c
  1276  001300  0F30               	addlw	48
  1277  001302  0100               	movlb	0	; () banked
  1278  001304  6F68               	movwf	sprintf@c& (0+255),b
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;doprnt.c: 1523: }
  1282                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1283  001306  C01C  FFD9         	movff	sprintf@sp,fsr2l
  1284  00130A  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  1285  00130E  C068  FFDF         	movff	sprintf@c,indf2
  1286                           
  1287                           ; BSR set to: 0
  1288  001312  4A1C               	infsnz	sprintf@sp,f,c
  1289  001314  2A1D               	incf	sprintf@sp+1,f,c
  1290  001316                     l1906:
  1291                           
  1292                           ; BSR set to: 0
  1293  001316  0100               	movlb	0	; () banked
  1294  001318  0762               	decf	sprintf@prec& (0+255),f,b
  1295  00131A  0100               	movlb	0	; () banked
  1296  00131C  2962               	incf	sprintf@prec& (0+255),w,b
  1297  00131E  A4D8               	btfss	status,2,c
  1298  001320  D7CC               	goto	l1900
  1299  001322                     l1908:
  1300  001322  C01E  FFF6         	movff	sprintf@f,tblptrl
  1301  001326  C01F  FFF7         	movff	sprintf@f+1,tblptrh
  1302  00132A  4A1E               	infsnz	sprintf@f,f,c
  1303  00132C  2A1F               	incf	sprintf@f+1,f,c
  1304  00132E                     	if	0	;tblptru may be non-zero
  1305  00132E                     	endif
  1306  00132E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1307  00132E  0E00               	movlw	low (__mediumconst shr (0+16))
  1308  001330  6EF8               	movwf	tblptru,c
  1309  001332                     	endif
  1310  001332  0008               	tblrd		*
  1311  001334  CFF5 F068          	movff	tablat,sprintf@c
  1312  001338  0100               	movlb	0	; () banked
  1313  00133A  5168               	movf	sprintf@c& (0+255),w,b
  1314  00133C  A4D8               	btfss	status,2,c
  1315  00133E  D687               	goto	l1802
  1316  001340                     l1910:
  1317                           
  1318                           ;doprnt.c: 1538: *sp = 0;
  1319  001340  C01C  FFD9         	movff	sprintf@sp,fsr2l
  1320  001344  C01D  FFDA         	movff	sprintf@sp+1,fsr2h
  1321  001348  0E00               	movlw	0
  1322  00134A  6EDF               	movwf	indf2,c
  1323  00134C  0012               	return	
  1324  00134E                     __end_of_sprintf:
  1325                           	opt stack 0
  1326                           tblptru	equ	0xFF8
  1327                           tblptrh	equ	0xFF7
  1328                           tblptrl	equ	0xFF6
  1329                           tablat	equ	0xFF5
  1330                           prodh	equ	0xFF4
  1331                           prodl	equ	0xFF3
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           indf2	equ	0xFDF
  1335                           postinc2	equ	0xFDE
  1336                           postdec2	equ	0xFDD
  1337                           fsr2h	equ	0xFDA
  1338                           fsr2l	equ	0xFD9
  1339                           status	equ	0xFD8
  1340                           
  1341 ;; *************** function _isdigit *****************
  1342 ;; Defined at:
  1343 ;;		line 8 in file "D:\Hella\Compiler\sources\common\isdigit.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  c               1    wreg     unsigned char 
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;  c               1   17[COMRAM] unsigned char 
  1348 ;; Return value:  Size  Location     Type
  1349 ;;		None               void
  1350 ;; Registers used:
  1351 ;;		wreg, status,2, status,0
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1358 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1359 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1360 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1361 ;;Total ram usage:        3 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:    1
  1364 ;; This function calls:
  1365 ;;		Nothing
  1366 ;; This function is called by:
  1367 ;;		_sprintf
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text2
  1372  0017E2                     __ptext2:
  1373                           	opt stack 0
  1374  0017E2                     _isdigit:
  1375                           	opt stack 28
  1376                           
  1377                           ;incstack = 0
  1378                           ;isdigit@c stored from wreg
  1379  0017E2  6E12               	movwf	isdigit@c,c
  1380  0017E4  0E00               	movlw	0
  1381  0017E6  6E11               	movwf	_isdigit$1483,c
  1382  0017E8  0E3A               	movlw	58
  1383  0017EA  6012               	cpfslt	isdigit@c,c
  1384  0017EC  D005               	goto	l1752
  1385  0017EE  0E2F               	movlw	47
  1386  0017F0  6412               	cpfsgt	isdigit@c,c
  1387  0017F2  D002               	goto	l1752
  1388  0017F4  0E01               	movlw	1
  1389  0017F6  6E11               	movwf	_isdigit$1483,c
  1390  0017F8                     l1752:
  1391  0017F8  C011  F010         	movff	_isdigit$1483,??_isdigit
  1392  0017FC  3010               	rrcf	??_isdigit,w,c
  1393  0017FE  0012               	return	
  1394  001800                     __end_of_isdigit:
  1395                           	opt stack 0
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           prodh	equ	0xFF4
  1401                           prodl	equ	0xFF3
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           indf2	equ	0xFDF
  1405                           postinc2	equ	0xFDE
  1406                           postdec2	equ	0xFDD
  1407                           fsr2h	equ	0xFDA
  1408                           fsr2l	equ	0xFD9
  1409                           status	equ	0xFD8
  1410                           
  1411 ;; *************** function ___wmul *****************
  1412 ;; Defined at:
  1413 ;;		line 15 in file "D:\Hella\Compiler\sources\common\Umul16.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;  multiplier      2   15[COMRAM] unsigned int 
  1416 ;;  multiplicand    2   17[COMRAM] unsigned int 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  product         2   19[COMRAM] unsigned int 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  2   15[COMRAM] unsigned int 
  1421 ;; Registers used:
  1422 ;;		wreg, status,2, status,0, prodl, prodh
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1428 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1431 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;Total ram usage:        6 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    1
  1435 ;; This function calls:
  1436 ;;		Nothing
  1437 ;; This function is called by:
  1438 ;;		_sprintf
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           	psect	text3
  1443  00179C                     __ptext3:
  1444                           	opt stack 0
  1445  00179C                     ___wmul:
  1446                           	opt stack 28
  1447                           
  1448                           ;incstack = 0
  1449  00179C  5010               	movf	___wmul@multiplier,w,c
  1450  00179E  0212               	mulwf	___wmul@multiplicand,c
  1451  0017A0  CFF3 F014          	movff	prodl,___wmul@product
  1452  0017A4  CFF4 F015          	movff	prodh,___wmul@product+1
  1453  0017A8  5010               	movf	___wmul@multiplier,w,c
  1454  0017AA  0213               	mulwf	___wmul@multiplicand+1,c
  1455  0017AC  50F3               	movf	prodl,w,c
  1456  0017AE  2615               	addwf	___wmul@product+1,f,c
  1457  0017B0  5011               	movf	___wmul@multiplier+1,w,c
  1458  0017B2  0212               	mulwf	___wmul@multiplicand,c
  1459  0017B4  50F3               	movf	prodl,w,c
  1460  0017B6  2615               	addwf	___wmul@product+1,f,c
  1461  0017B8  C014  F010         	movff	___wmul@product,?___wmul
  1462  0017BC  C015  F011         	movff	___wmul@product+1,?___wmul+1
  1463  0017C0  0012               	return	
  1464  0017C2                     __end_of___wmul:
  1465                           	opt stack 0
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           prodh	equ	0xFF4
  1471                           prodl	equ	0xFF3
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           indf2	equ	0xFDF
  1475                           postinc2	equ	0xFDE
  1476                           postdec2	equ	0xFDD
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function ___lwmod *****************
  1482 ;; Defined at:
  1483 ;;		line 8 in file "D:\Hella\Compiler\sources\common\lwmod.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  dividend        2   22[COMRAM] unsigned int 
  1486 ;;  divisor         2   24[COMRAM] unsigned int 
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;  counter         1   26[COMRAM] unsigned char 
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  2   22[COMRAM] unsigned int 
  1491 ;; Registers used:
  1492 ;;		wreg, status,2, status,0
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1498 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1501 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1502 ;;Total ram usage:        5 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; Hardware stack levels required when called:    1
  1505 ;; This function calls:
  1506 ;;		Nothing
  1507 ;; This function is called by:
  1508 ;;		_sprintf
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text4
  1513  001656                     __ptext4:
  1514                           	opt stack 0
  1515  001656                     ___lwmod:
  1516                           	opt stack 28
  1517                           
  1518                           ;incstack = 0
  1519  001656  5019               	movf	___lwmod@divisor,w,c
  1520  001658  101A               	iorwf	___lwmod@divisor+1,w,c
  1521  00165A  B4D8               	btfsc	status,2,c
  1522  00165C  D018               	goto	l709
  1523  00165E  0E01               	movlw	1
  1524  001660  6E1B               	movwf	___lwmod@counter,c
  1525  001662  D004               	goto	l1790
  1526  001664                     l1788:
  1527  001664  90D8               	bcf	status,0,c
  1528  001666  3619               	rlcf	___lwmod@divisor,f,c
  1529  001668  361A               	rlcf	___lwmod@divisor+1,f,c
  1530  00166A  2A1B               	incf	___lwmod@counter,f,c
  1531  00166C                     l1790:
  1532  00166C  AE1A               	btfss	___lwmod@divisor+1,7,c
  1533  00166E  D7FA               	goto	l1788
  1534  001670                     l1792:
  1535  001670  5019               	movf	___lwmod@divisor,w,c
  1536  001672  5C17               	subwf	___lwmod@dividend,w,c
  1537  001674  501A               	movf	___lwmod@divisor+1,w,c
  1538  001676  5818               	subwfb	___lwmod@dividend+1,w,c
  1539  001678  A0D8               	btfss	status,0,c
  1540  00167A  D004               	goto	l1796
  1541  00167C  5019               	movf	___lwmod@divisor,w,c
  1542  00167E  5E17               	subwf	___lwmod@dividend,f,c
  1543  001680  501A               	movf	___lwmod@divisor+1,w,c
  1544  001682  5A18               	subwfb	___lwmod@dividend+1,f,c
  1545  001684                     l1796:
  1546  001684  90D8               	bcf	status,0,c
  1547  001686  321A               	rrcf	___lwmod@divisor+1,f,c
  1548  001688  3219               	rrcf	___lwmod@divisor,f,c
  1549  00168A  2E1B               	decfsz	___lwmod@counter,f,c
  1550  00168C  D7F1               	goto	l1792
  1551  00168E                     l709:
  1552  00168E  C017  F017         	movff	___lwmod@dividend,?___lwmod
  1553  001692  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  1554  001696  0012               	return		;funcret
  1555  001698                     __end_of___lwmod:
  1556                           	opt stack 0
  1557                           tblptru	equ	0xFF8
  1558                           tblptrh	equ	0xFF7
  1559                           tblptrl	equ	0xFF6
  1560                           tablat	equ	0xFF5
  1561                           prodh	equ	0xFF4
  1562                           prodl	equ	0xFF3
  1563                           postinc0	equ	0xFEE
  1564                           wreg	equ	0xFE8
  1565                           indf2	equ	0xFDF
  1566                           postinc2	equ	0xFDE
  1567                           postdec2	equ	0xFDD
  1568                           fsr2h	equ	0xFDA
  1569                           fsr2l	equ	0xFD9
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function ___lwdiv *****************
  1573 ;; Defined at:
  1574 ;;		line 8 in file "D:\Hella\Compiler\sources\common\lwdiv.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  dividend        2   15[COMRAM] unsigned int 
  1577 ;;  divisor         2   17[COMRAM] unsigned int 
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;  quotient        2   20[COMRAM] unsigned int 
  1580 ;;  counter         1   19[COMRAM] unsigned char 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  2   15[COMRAM] unsigned int 
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, status,0
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1590 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;Total ram usage:        7 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    1
  1597 ;; This function calls:
  1598 ;;		Nothing
  1599 ;; This function is called by:
  1600 ;;		_sprintf
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text5
  1605  001570                     __ptext5:
  1606                           	opt stack 0
  1607  001570                     ___lwdiv:
  1608                           	opt stack 28
  1609                           
  1610                           ;incstack = 0
  1611  001570  0E00               	movlw	0
  1612  001572  6E16               	movwf	___lwdiv@quotient+1,c
  1613  001574  0E00               	movlw	0
  1614  001576  6E15               	movwf	___lwdiv@quotient,c
  1615  001578  5012               	movf	___lwdiv@divisor,w,c
  1616  00157A  1013               	iorwf	___lwdiv@divisor+1,w,c
  1617  00157C  B4D8               	btfsc	status,2,c
  1618  00157E  D01C               	goto	l699
  1619  001580  0E01               	movlw	1
  1620  001582  6E14               	movwf	___lwdiv@counter,c
  1621  001584  D004               	goto	l1770
  1622  001586                     l1768:
  1623  001586  90D8               	bcf	status,0,c
  1624  001588  3612               	rlcf	___lwdiv@divisor,f,c
  1625  00158A  3613               	rlcf	___lwdiv@divisor+1,f,c
  1626  00158C  2A14               	incf	___lwdiv@counter,f,c
  1627  00158E                     l1770:
  1628  00158E  AE13               	btfss	___lwdiv@divisor+1,7,c
  1629  001590  D7FA               	goto	l1768
  1630  001592                     l1772:
  1631  001592  90D8               	bcf	status,0,c
  1632  001594  3615               	rlcf	___lwdiv@quotient,f,c
  1633  001596  3616               	rlcf	___lwdiv@quotient+1,f,c
  1634  001598  5012               	movf	___lwdiv@divisor,w,c
  1635  00159A  5C10               	subwf	___lwdiv@dividend,w,c
  1636  00159C  5013               	movf	___lwdiv@divisor+1,w,c
  1637  00159E  5811               	subwfb	___lwdiv@dividend+1,w,c
  1638  0015A0  A0D8               	btfss	status,0,c
  1639  0015A2  D005               	goto	l1780
  1640  0015A4  5012               	movf	___lwdiv@divisor,w,c
  1641  0015A6  5E10               	subwf	___lwdiv@dividend,f,c
  1642  0015A8  5013               	movf	___lwdiv@divisor+1,w,c
  1643  0015AA  5A11               	subwfb	___lwdiv@dividend+1,f,c
  1644  0015AC  8015               	bsf	___lwdiv@quotient,0,c
  1645  0015AE                     l1780:
  1646  0015AE  90D8               	bcf	status,0,c
  1647  0015B0  3213               	rrcf	___lwdiv@divisor+1,f,c
  1648  0015B2  3212               	rrcf	___lwdiv@divisor,f,c
  1649  0015B4  2E14               	decfsz	___lwdiv@counter,f,c
  1650  0015B6  D7ED               	goto	l1772
  1651  0015B8                     l699:
  1652  0015B8  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  1653  0015BC  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1654  0015C0  0012               	return		;funcret
  1655  0015C2                     __end_of___lwdiv:
  1656                           	opt stack 0
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           prodh	equ	0xFF4
  1662                           prodl	equ	0xFF3
  1663                           postinc0	equ	0xFEE
  1664                           wreg	equ	0xFE8
  1665                           indf2	equ	0xFDF
  1666                           postinc2	equ	0xFDE
  1667                           postdec2	equ	0xFDD
  1668                           fsr2h	equ	0xFDA
  1669                           fsr2l	equ	0xFD9
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function _init *****************
  1673 ;; Defined at:
  1674 ;;		line 203 in file "TimersLCD.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;Total ram usage:        0 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    6
  1695 ;; This function calls:
  1696 ;;		_LcdInit
  1697 ;;		_UART_Init
  1698 ;;		_UART_puts
  1699 ;;		_initButtons
  1700 ;;		_initTmr
  1701 ;; This function is called by:
  1702 ;;		_main
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text6
  1707  0017C2                     __ptext6:
  1708                           	opt stack 0
  1709  0017C2                     _init:
  1710                           	opt stack 24
  1711                           
  1712                           ;TimersLCD.c: 205: MEMCONbits.EBDIS=1;
  1713                           
  1714                           ;incstack = 0
  1715  0017C2  8E9C               	bsf	3996,7,c	;volatile
  1716                           
  1717                           ;TimersLCD.c: 208: UART_Init();
  1718  0017C4  EC1E  F00C         	call	_UART_Init	;wreg free
  1719                           
  1720                           ;TimersLCD.c: 209: UART_puts((char *)"\n\rInitializing...\n\r");
  1721  0017C8  0E0B               	movlw	low STR_1
  1722  0017CA  6E11               	movwf	UART_puts@s,c
  1723  0017CC  0E10               	movlw	high STR_1
  1724  0017CE  6E12               	movwf	UART_puts@s+1,c
  1725  0017D0  EC87  F00B         	call	_UART_puts	;wreg free
  1726                           
  1727                           ;TimersLCD.c: 212: initButtons();
  1728  0017D4  EC59  F00C         	call	_initButtons	;wreg free
  1729                           
  1730                           ;TimersLCD.c: 215: initTmr();
  1731  0017D8  EC6C  F00B         	call	_initTmr	;wreg free
  1732                           
  1733                           ;TimersLCD.c: 218: LcdInit();
  1734  0017DC  EC4C  F00B         	call	_LcdInit	;wreg free
  1735  0017E0  0012               	return		;funcret
  1736  0017E2                     __end_of_init:
  1737                           	opt stack 0
  1738                           tblptru	equ	0xFF8
  1739                           tblptrh	equ	0xFF7
  1740                           tblptrl	equ	0xFF6
  1741                           tablat	equ	0xFF5
  1742                           prodh	equ	0xFF4
  1743                           prodl	equ	0xFF3
  1744                           postinc0	equ	0xFEE
  1745                           wreg	equ	0xFE8
  1746                           indf2	equ	0xFDF
  1747                           postinc2	equ	0xFDE
  1748                           postdec2	equ	0xFDD
  1749                           fsr2h	equ	0xFDA
  1750                           fsr2l	equ	0xFD9
  1751                           status	equ	0xFD8
  1752                           
  1753 ;; *************** function _initTmr *****************
  1754 ;; Defined at:
  1755 ;;		line 146 in file "TimersLCD.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;Total ram usage:        0 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    1
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_init
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text7
  1784  0016D8                     __ptext7:
  1785                           	opt stack 0
  1786  0016D8                     _initTmr:
  1787                           	opt stack 28
  1788                           
  1789                           ;TimersLCD.c: 148: PORTJbits.RJ6 = 0;
  1790                           
  1791                           ;incstack = 0
  1792  0016D8  9C88               	bcf	3976,6,c	;volatile
  1793                           
  1794                           ;TimersLCD.c: 149: PORTJbits.RJ7 = 0;
  1795  0016DA  9E88               	bcf	3976,7,c	;volatile
  1796                           
  1797                           ;TimersLCD.c: 150: TRISJbits.TRISJ7 = 0;
  1798  0016DC  9E9A               	bcf	3994,7,c	;volatile
  1799                           
  1800                           ;TimersLCD.c: 151: TRISJbits.TRISJ6 = 0;
  1801  0016DE  9C9A               	bcf	3994,6,c	;volatile
  1802                           
  1803                           ;TimersLCD.c: 154: TMR0 = 0;
  1804  0016E0  0E00               	movlw	0
  1805  0016E2  6ED7               	movwf	4055,c	;volatile
  1806  0016E4  0E00               	movlw	0
  1807  0016E6  6ED6               	movwf	4054,c	;volatile
  1808                           
  1809                           ;TimersLCD.c: 155: T0CON = 0;
  1810  0016E8  0E00               	movlw	0
  1811  0016EA  6ED5               	movwf	4053,c	;volatile
  1812                           
  1813                           ;TimersLCD.c: 156: T0CONbits.TMR0ON = 0;
  1814  0016EC  9ED5               	bcf	4053,7,c	;volatile
  1815                           
  1816                           ;TimersLCD.c: 157: T0CONbits.T08BIT = 0;
  1817  0016EE  9CD5               	bcf	4053,6,c	;volatile
  1818                           
  1819                           ;TimersLCD.c: 158: T0CONbits.T0CS = 0;
  1820  0016F0  9AD5               	bcf	4053,5,c	;volatile
  1821                           
  1822                           ;TimersLCD.c: 159: T0CONbits.T0SE = 0;
  1823  0016F2  98D5               	bcf	4053,4,c	;volatile
  1824                           
  1825                           ;TimersLCD.c: 160: T0CONbits.PSA = 0;
  1826  0016F4  96D5               	bcf	4053,3,c	;volatile
  1827                           
  1828                           ;TimersLCD.c: 161: T0CONbits.T0PS = 1;
  1829  0016F6  50D5               	movf	4053,w,c	;volatile
  1830  0016F8  0BF8               	andlw	-8
  1831  0016FA  0901               	iorlw	1
  1832  0016FC  6ED5               	movwf	4053,c	;volatile
  1833                           
  1834                           ;TimersLCD.c: 167: TMR0H = 0x0B;
  1835  0016FE  0E0B               	movlw	11
  1836  001700  6ED7               	movwf	4055,c	;volatile
  1837                           
  1838                           ;TimersLCD.c: 168: TMR0L = 0xDB;
  1839  001702  0EDB               	movlw	219
  1840  001704  6ED6               	movwf	4054,c	;volatile
  1841                           
  1842                           ;TimersLCD.c: 169: T0IE = 1;
  1843  001706  8AF2               	bsf	intcon,5,c	;volatile
  1844                           
  1845                           ;TimersLCD.c: 170: GIE = 1;
  1846  001708  8EF2               	bsf	intcon,7,c	;volatile
  1847                           
  1848                           ;TimersLCD.c: 171: T0CONbits.TMR0ON = 1;
  1849  00170A  8ED5               	bsf	4053,7,c	;volatile
  1850  00170C  0012               	return		;funcret
  1851  00170E                     __end_of_initTmr:
  1852                           	opt stack 0
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           prodh	equ	0xFF4
  1858                           prodl	equ	0xFF3
  1859                           intcon	equ	0xFF2
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           indf2	equ	0xFDF
  1863                           postinc2	equ	0xFDE
  1864                           postdec2	equ	0xFDD
  1865                           fsr2h	equ	0xFDA
  1866                           fsr2l	equ	0xFD9
  1867                           status	equ	0xFD8
  1868                           
  1869 ;; *************** function _initButtons *****************
  1870 ;; Defined at:
  1871 ;;		line 131 in file "TimersLCD.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;		None
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;		None
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  1    wreg      void 
  1878 ;; Registers used:
  1879 ;;		None
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;Total ram usage:        0 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; Hardware stack levels required when called:    1
  1892 ;; This function calls:
  1893 ;;		Nothing
  1894 ;; This function is called by:
  1895 ;;		_init
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text8
  1900  0018B2                     __ptext8:
  1901                           	opt stack 0
  1902  0018B2                     _initButtons:
  1903                           	opt stack 28
  1904                           
  1905                           ;TimersLCD.c: 134: TRISB0 = 1;
  1906                           
  1907                           ;incstack = 0
  1908  0018B2  8093               	bsf	3987,0,c	;volatile
  1909                           
  1910                           ;TimersLCD.c: 137: TRISA5 = 1;
  1911  0018B4  8A92               	bsf	3986,5,c	;volatile
  1912  0018B6  0012               	return		;funcret
  1913  0018B8                     __end_of_initButtons:
  1914                           	opt stack 0
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           prodh	equ	0xFF4
  1920                           prodl	equ	0xFF3
  1921                           intcon	equ	0xFF2
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           indf2	equ	0xFDF
  1925                           postinc2	equ	0xFDE
  1926                           postdec2	equ	0xFDD
  1927                           fsr2h	equ	0xFDA
  1928                           fsr2l	equ	0xFD9
  1929                           status	equ	0xFD8
  1930                           
  1931 ;; *************** function _UART_puts *****************
  1932 ;; Defined at:
  1933 ;;		line 68 in file "uart.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;  s               2   16[COMRAM] PTR unsigned char 
  1936 ;;		 -> STR_1(20), 
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1948 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;Total ram usage:        2 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    2
  1955 ;; This function calls:
  1956 ;;		_Delay10TCYx
  1957 ;;		_UART_putc
  1958 ;; This function is called by:
  1959 ;;		_init
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text9
  1964  00170E                     __ptext9:
  1965                           	opt stack 0
  1966  00170E                     _UART_puts:
  1967                           	opt stack 27
  1968  00170E                     
  1969                           ;uart.c: 71: {
  1970                           ;uart.c: 72: UART_putc(*s);
  1971  00170E  C011  FFF6         	movff	UART_puts@s,tblptrl
  1972  001712  C012  FFF7         	movff	UART_puts@s+1,tblptrh
  1973  001716                     	if	0	;tblptru may be non-zero
  1974  001716                     	endif
  1975  001716                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1976  001716  0E00               	movlw	low (__mediumconst shr (0+16))
  1977  001718  6EF8               	movwf	tblptru,c
  1978  00171A                     	endif
  1979  00171A  0008               	tblrd		*
  1980  00171C  50F5               	movf	tablat,w,c
  1981  00171E  EC48  F00C         	call	_UART_putc
  1982                           
  1983                           ;uart.c: 73: s++;
  1984  001722  4A11               	infsnz	UART_puts@s,f,c
  1985  001724  2A12               	incf	UART_puts@s+1,f,c
  1986                           
  1987                           ;uart.c: 74: Delay10TCYx(250);
  1988  001726  0EFA               	movlw	250
  1989  001728  EC40  F00C         	call	_Delay10TCYx
  1990                           
  1991                           ;uart.c: 75: } while(*s != 0);
  1992  00172C  C011  FFF6         	movff	UART_puts@s,tblptrl
  1993  001730  C012  FFF7         	movff	UART_puts@s+1,tblptrh
  1994  001734                     	if	0	;tblptru may be non-zero
  1995  001734                     	endif
  1996  001734                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1997  001734  0E00               	movlw	low (__mediumconst shr (0+16))
  1998  001736  6EF8               	movwf	tblptru,c
  1999  001738                     	endif
  2000  001738  0008               	tblrd		*
  2001  00173A  50F5               	movf	tablat,w,c
  2002  00173C  0900               	iorlw	0
  2003  00173E  B4D8               	btfsc	status,2,c
  2004  001740  0012               	return	
  2005  001742  D7E5               	goto	l1450
  2006  001744                     __end_of_UART_puts:
  2007                           	opt stack 0
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           prodh	equ	0xFF4
  2013                           prodl	equ	0xFF3
  2014                           intcon	equ	0xFF2
  2015                           postinc0	equ	0xFEE
  2016                           wreg	equ	0xFE8
  2017                           indf2	equ	0xFDF
  2018                           postinc2	equ	0xFDE
  2019                           postdec2	equ	0xFDD
  2020                           fsr2h	equ	0xFDA
  2021                           fsr2l	equ	0xFD9
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function _UART_putc *****************
  2025 ;; Defined at:
  2026 ;;		line 60 in file "uart.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  data            1    wreg     unsigned char 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  data            1   15[COMRAM] unsigned char 
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;Total ram usage:        1 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    1
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_UART_puts
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text10
  2055  001890                     __ptext10:
  2056                           	opt stack 0
  2057  001890                     _UART_putc:
  2058                           	opt stack 27
  2059                           
  2060                           ;incstack = 0
  2061                           ;UART_putc@data stored from wreg
  2062  001890  6E10               	movwf	UART_putc@data,c
  2063                           
  2064                           ;uart.c: 62: TXREG = data;
  2065  001892  C010  FFAD         	movff	UART_putc@data,4013	;volatile
  2066  001896                     l120:
  2067  001896  A89E               	btfss	3998,4,c	;volatile
  2068  001898  D7FE               	goto	l120
  2069                           
  2070                           ;uart.c: 64: PIR1bits.TXIF = 0;
  2071  00189A  989E               	bcf	3998,4,c	;volatile
  2072  00189C  0012               	return		;funcret
  2073  00189E                     __end_of_UART_putc:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           prodh	equ	0xFF4
  2080                           prodl	equ	0xFF3
  2081                           intcon	equ	0xFF2
  2082                           postinc0	equ	0xFEE
  2083                           wreg	equ	0xFE8
  2084                           indf2	equ	0xFDF
  2085                           postinc2	equ	0xFDE
  2086                           postdec2	equ	0xFDD
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function _Delay10TCYx *****************
  2092 ;; Defined at:
  2093 ;;		line 8 in file "D:\Hella\Compiler\sources\pic18\d10tcyx.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  unit            1    wreg     unsigned char 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  unit            1   15[COMRAM] unsigned char 
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  1    wreg      void 
  2100 ;; Registers used:
  2101 ;;		wreg
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;Total ram usage:        1 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    1
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		_UART_puts
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text11
  2122  001880                     __ptext11:
  2123                           	opt stack 0
  2124  001880                     _Delay10TCYx:
  2125                           	opt stack 27
  2126                           
  2127                           ;incstack = 0
  2128                           ;Delay10TCYx@unit stored from wreg
  2129  001880  6E10               	movwf	Delay10TCYx@unit,c
  2130  001882  0E03               	movlw	3
  2131  001884                     u1377:
  2132  001884  2EE8               	decfsz	wreg,f,c
  2133  001886  D7FE               	bra	u1377
  2134  001888  F000               	nop	
  2135  00188A  2E10               	decfsz	Delay10TCYx@unit,f,c
  2136  00188C  D7FA               	goto	l992
  2137  00188E  0012               	return	
  2138  001890                     __end_of_Delay10TCYx:
  2139                           	opt stack 0
  2140                           tblptru	equ	0xFF8
  2141                           tblptrh	equ	0xFF7
  2142                           tblptrl	equ	0xFF6
  2143                           tablat	equ	0xFF5
  2144                           prodh	equ	0xFF4
  2145                           prodl	equ	0xFF3
  2146                           intcon	equ	0xFF2
  2147                           postinc0	equ	0xFEE
  2148                           wreg	equ	0xFE8
  2149                           indf2	equ	0xFDF
  2150                           postinc2	equ	0xFDE
  2151                           postdec2	equ	0xFDD
  2152                           fsr2h	equ	0xFDA
  2153                           fsr2l	equ	0xFD9
  2154                           status	equ	0xFD8
  2155                           
  2156 ;; *************** function _UART_Init *****************
  2157 ;; Defined at:
  2158 ;;		line 11 in file "uart.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;		None
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  x               2   15[COMRAM] unsigned int 
  2163 ;; Return value:  Size  Location     Type
  2164 ;;                  1    wreg      unsigned char 
  2165 ;; Registers used:
  2166 ;;		wreg, status,2
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2173 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2175 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;Total ram usage:        2 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    1
  2179 ;; This function calls:
  2180 ;;		Nothing
  2181 ;; This function is called by:
  2182 ;;		_init
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text12
  2187  00183C                     __ptext12:
  2188                           	opt stack 0
  2189  00183C                     _UART_Init:
  2190                           	opt stack 28
  2191                           
  2192                           ;uart.c: 13: unsigned int x;
  2193                           ;uart.c: 14: x = (10000000 - 9600*64)/(9600*64);
  2194                           
  2195                           ;incstack = 0
  2196  00183C  0E01               	movlw	1
  2197  00183E  6E11               	movwf	UART_Init@x+1,c
  2198  001840  0E95               	movlw	149
  2199  001842  6E10               	movwf	UART_Init@x,c
  2200                           
  2201                           ;uart.c: 17: TRISCbits.TRISC6 = 0;
  2202  001844  9C94               	bcf	3988,6,c	;volatile
  2203                           
  2204                           ;uart.c: 18: TRISCbits.TRISC7 = 1;
  2205  001846  8E94               	bsf	3988,7,c	;volatile
  2206                           
  2207                           ;uart.c: 21: TXSTA1bits.SYNC = 0;
  2208  001848  98AC               	bcf	4012,4,c	;volatile
  2209                           
  2210                           ;uart.c: 22: SPBRG = x;
  2211  00184A  C010  FFAF         	movff	UART_Init@x,4015	;volatile
  2212                           
  2213                           ;uart.c: 23: TXSTAbits.TXEN =1;
  2214  00184E  8AAC               	bsf	4012,5,c	;volatile
  2215                           
  2216                           ;uart.c: 24: RCSTAbits.CREN =1;
  2217  001850  88AB               	bsf	4011,4,c	;volatile
  2218                           
  2219                           ;uart.c: 25: PIE1bits.RCIE = 1;
  2220  001852  8A9D               	bsf	3997,5,c	;volatile
  2221                           
  2222                           ;uart.c: 26: RCSTA1bits.SPEN = 1;
  2223  001854  8EAB               	bsf	4011,7,c	;volatile
  2224  001856  0012               	return	
  2225  001858                     __end_of_UART_Init:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           intcon	equ	0xFF2
  2234                           postinc0	equ	0xFEE
  2235                           wreg	equ	0xFE8
  2236                           indf2	equ	0xFDF
  2237                           postinc2	equ	0xFDE
  2238                           postdec2	equ	0xFDD
  2239                           fsr2h	equ	0xFDA
  2240                           fsr2l	equ	0xFD9
  2241                           status	equ	0xFD8
  2242                           
  2243 ;; *************** function _LcdInit *****************
  2244 ;; Defined at:
  2245 ;;		line 123 in file "lcd.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;		None
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;		None
  2250 ;; Return value:  Size  Location     Type
  2251 ;;                  1    wreg      void 
  2252 ;; Registers used:
  2253 ;;		wreg, status,2, status,0, cstack
  2254 ;; Tracked objects:
  2255 ;;		On entry : 0/0
  2256 ;;		On exit  : 0/0
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;Total ram usage:        0 bytes
  2264 ;; Hardware stack levels used:    1
  2265 ;; Hardware stack levels required when called:    5
  2266 ;; This function calls:
  2267 ;;		_LcdClear
  2268 ;;		_SWSPIOpen
  2269 ;;		_lcdCommand
  2270 ;;		_setGPIO
  2271 ;;		_setIODIR
  2272 ;; This function is called by:
  2273 ;;		_init
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text13
  2278  001698                     __ptext13:
  2279                           	opt stack 0
  2280  001698                     _LcdInit:
  2281                           	opt stack 24
  2282                           
  2283                           ;lcd.c: 126: SWSPIOpen();
  2284                           
  2285                           ;incstack = 0
  2286  001698  EC37  F00C         	call	_SWSPIOpen	;wreg free
  2287                           
  2288                           ;lcd.c: 135: setIODIR(0x01,0x00);
  2289  00169C  0E00               	movlw	0
  2290  00169E  6E12               	movwf	setIODIR@dir,c
  2291  0016A0  0E01               	movlw	1
  2292  0016A2  EC00  F00C         	call	_setIODIR
  2293                           
  2294                           ;lcd.c: 137: setIODIR(0x00,0x00);
  2295  0016A6  0E00               	movlw	0
  2296  0016A8  6E12               	movwf	setIODIR@dir,c
  2297  0016AA  0E00               	movlw	0
  2298  0016AC  EC00  F00C         	call	_setIODIR
  2299                           
  2300                           ;lcd.c: 139: setGPIO(0x00,0x00);
  2301  0016B0  0E00               	movlw	0
  2302  0016B2  6E12               	movwf	setGPIO@value,c
  2303  0016B4  0E00               	movlw	0
  2304  0016B6  EC0F  F00C         	call	_setGPIO
  2305                           
  2306                           ;lcd.c: 142: lcdCommand(0b00111111);
  2307  0016BA  0E3F               	movlw	63
  2308  0016BC  ECB8  F00B         	call	_lcdCommand
  2309                           
  2310                           ;lcd.c: 145: lcdCommand(0b00001100);
  2311  0016C0  0E0C               	movlw	12
  2312  0016C2  ECB8  F00B         	call	_lcdCommand
  2313                           
  2314                           ;lcd.c: 148: lcdCommand(0b00000001);
  2315  0016C6  0E01               	movlw	1
  2316  0016C8  ECB8  F00B         	call	_lcdCommand
  2317                           
  2318                           ;lcd.c: 151: lcdCommand(0b00000110);
  2319  0016CC  0E06               	movlw	6
  2320  0016CE  ECB8  F00B         	call	_lcdCommand
  2321                           
  2322                           ;lcd.c: 158: LcdClear();
  2323  0016D2  EC55  F00C         	call	_LcdClear	;wreg free
  2324  0016D6  0012               	return		;funcret
  2325  0016D8                     __end_of_LcdInit:
  2326                           	opt stack 0
  2327                           tblptru	equ	0xFF8
  2328                           tblptrh	equ	0xFF7
  2329                           tblptrl	equ	0xFF6
  2330                           tablat	equ	0xFF5
  2331                           prodh	equ	0xFF4
  2332                           prodl	equ	0xFF3
  2333                           intcon	equ	0xFF2
  2334                           postinc0	equ	0xFEE
  2335                           wreg	equ	0xFE8
  2336                           indf2	equ	0xFDF
  2337                           postinc2	equ	0xFDE
  2338                           postdec2	equ	0xFDD
  2339                           fsr2h	equ	0xFDA
  2340                           fsr2l	equ	0xFD9
  2341                           status	equ	0xFD8
  2342                           
  2343 ;; *************** function _setIODIR *****************
  2344 ;; Defined at:
  2345 ;;		line 81 in file "lcd.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  address         1    wreg     unsigned char 
  2348 ;;  dir             1   17[COMRAM] unsigned char 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  address         1   18[COMRAM] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2360 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2363 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;Total ram usage:        2 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    2
  2367 ;; This function calls:
  2368 ;;		_SWSPIClearCS
  2369 ;;		_SWSPISetCS
  2370 ;;		_SWSPIWrite
  2371 ;; This function is called by:
  2372 ;;		_LcdInit
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text14
  2377  001800                     __ptext14:
  2378                           	opt stack 0
  2379  001800                     _setIODIR:
  2380                           	opt stack 26
  2381                           
  2382                           ;incstack = 0
  2383                           ;setIODIR@address stored from wreg
  2384  001800  6E13               	movwf	setIODIR@address,c
  2385                           
  2386                           ;lcd.c: 84: SWSPIClearCS();
  2387  001802  EC5E  F00C         	call	_SWSPIClearCS	;wreg free
  2388                           
  2389                           ;lcd.c: 85: SWSPIWrite(0x40);
  2390  001806  0E40               	movlw	64
  2391  001808  ECE1  F00A         	call	_SWSPIWrite
  2392                           
  2393                           ;lcd.c: 86: SWSPIWrite(address);
  2394  00180C  5013               	movf	setIODIR@address,w,c
  2395  00180E  ECE1  F00A         	call	_SWSPIWrite
  2396                           
  2397                           ;lcd.c: 87: SWSPIWrite(dir);
  2398  001812  5012               	movf	setIODIR@dir,w,c
  2399  001814  ECE1  F00A         	call	_SWSPIWrite
  2400                           
  2401                           ;lcd.c: 88: SWSPISetCS();
  2402  001818  EC5C  F00C         	call	_SWSPISetCS	;wreg free
  2403  00181C  0012               	return		;funcret
  2404  00181E                     __end_of_setIODIR:
  2405                           	opt stack 0
  2406                           tblptru	equ	0xFF8
  2407                           tblptrh	equ	0xFF7
  2408                           tblptrl	equ	0xFF6
  2409                           tablat	equ	0xFF5
  2410                           prodh	equ	0xFF4
  2411                           prodl	equ	0xFF3
  2412                           intcon	equ	0xFF2
  2413                           postinc0	equ	0xFEE
  2414                           wreg	equ	0xFE8
  2415                           indf2	equ	0xFDF
  2416                           postinc2	equ	0xFDE
  2417                           postdec2	equ	0xFDD
  2418                           fsr2h	equ	0xFDA
  2419                           fsr2l	equ	0xFD9
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function _SWSPIOpen *****************
  2423 ;; Defined at:
  2424 ;;		line 15 in file "swspi.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;		None
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;		None
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		None
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;Total ram usage:        0 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    1
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		_LcdInit
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text15
  2453  00186E                     __ptext15:
  2454                           	opt stack 0
  2455  00186E                     _SWSPIOpen:
  2456                           	opt stack 27
  2457                           
  2458                           ;swspi.c: 17: PORTAbits.RA2 = 1;
  2459                           
  2460                           ;incstack = 0
  2461  00186E  8480               	bsf	3968,2,c	;volatile
  2462                           
  2463                           ;swspi.c: 18: PORTCbits.RC4 = 1;
  2464  001870  8882               	bsf	3970,4,c	;volatile
  2465                           
  2466                           ;swspi.c: 21: PORTCbits.RC5 = 0;
  2467  001872  9A82               	bcf	3970,5,c	;volatile
  2468                           
  2469                           ;swspi.c: 22: PORTCbits.RC3 = 0;
  2470  001874  9682               	bcf	3970,3,c	;volatile
  2471                           
  2472                           ;swspi.c: 40: TRISAbits.TRISA2 = 0;
  2473  001876  9492               	bcf	3986,2,c	;volatile
  2474                           
  2475                           ;swspi.c: 41: TRISCbits.TRISC4 = 1;
  2476  001878  8894               	bsf	3988,4,c	;volatile
  2477                           
  2478                           ;swspi.c: 42: TRISCbits.TRISC5 = 0;
  2479  00187A  9A94               	bcf	3988,5,c	;volatile
  2480                           
  2481                           ;swspi.c: 43: TRISCbits.TRISC3 = 0;
  2482  00187C  9694               	bcf	3988,3,c	;volatile
  2483  00187E  0012               	return		;funcret
  2484  001880                     __end_of_SWSPIOpen:
  2485                           	opt stack 0
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           prodh	equ	0xFF4
  2491                           prodl	equ	0xFF3
  2492                           intcon	equ	0xFF2
  2493                           postinc0	equ	0xFEE
  2494                           wreg	equ	0xFE8
  2495                           indf2	equ	0xFDF
  2496                           postinc2	equ	0xFDE
  2497                           postdec2	equ	0xFDD
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _LcdClear *****************
  2503 ;; Defined at:
  2504 ;;		line 166 in file "lcd.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;Total ram usage:        0 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    4
  2525 ;; This function calls:
  2526 ;;		_lcdCommand
  2527 ;; This function is called by:
  2528 ;;		_LcdInit
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text16
  2533  0018AA                     __ptext16:
  2534                           	opt stack 0
  2535  0018AA                     _LcdClear:
  2536                           	opt stack 24
  2537                           
  2538                           ;lcd.c: 169: lcdCommand(0x01);
  2539                           
  2540                           ;incstack = 0
  2541  0018AA  0E01               	movlw	1
  2542  0018AC  ECB8  F00B         	call	_lcdCommand
  2543  0018B0  0012               	return		;funcret
  2544  0018B2                     __end_of_LcdClear:
  2545                           	opt stack 0
  2546                           tblptru	equ	0xFF8
  2547                           tblptrh	equ	0xFF7
  2548                           tblptrl	equ	0xFF6
  2549                           tablat	equ	0xFF5
  2550                           prodh	equ	0xFF4
  2551                           prodl	equ	0xFF3
  2552                           intcon	equ	0xFF2
  2553                           postinc0	equ	0xFEE
  2554                           wreg	equ	0xFE8
  2555                           indf2	equ	0xFDF
  2556                           postinc2	equ	0xFDE
  2557                           postdec2	equ	0xFDD
  2558                           fsr2h	equ	0xFDA
  2559                           fsr2l	equ	0xFD9
  2560                           status	equ	0xFD8
  2561                           
  2562 ;; *************** function _checkInputs *****************
  2563 ;; Defined at:
  2564 ;;		line 97 in file "TimersLCD.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;		None
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  rightButton     1   16[COMRAM] unsigned char 
  2569 ;;  leftButton      1   15[COMRAM] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      void 
  2572 ;; Registers used:
  2573 ;;		wreg, status,2, status,0
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2580 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2582 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;Total ram usage:        2 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    1
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_main
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text17
  2594  001610                     __ptext17:
  2595                           	opt stack 0
  2596  001610                     _checkInputs:
  2597                           	opt stack 29
  2598                           
  2599                           ;TimersLCD.c: 99: byte leftButton = 0;
  2600                           
  2601                           ;incstack = 0
  2602  001610  0E00               	movlw	0
  2603  001612  6E10               	movwf	checkInputs@leftButton,c
  2604                           
  2605                           ;TimersLCD.c: 100: byte rightButton = 0;
  2606  001614  0E00               	movlw	0
  2607  001616  6E11               	movwf	checkInputs@rightButton,c
  2608                           
  2609                           ;TimersLCD.c: 101: static byte leftButton_old = 0;
  2610                           ;TimersLCD.c: 102: static byte rightButton_old = 0;
  2611                           ;TimersLCD.c: 105: leftButton = PORTBbits.RB0;
  2612  001618  0E00               	movlw	0
  2613  00161A  B081               	btfsc	3969,0,c	;volatile
  2614  00161C  0E01               	movlw	1
  2615  00161E  6E10               	movwf	checkInputs@leftButton,c
  2616                           
  2617                           ;TimersLCD.c: 106: if ( (leftButton == 0)
  2618                           ;TimersLCD.c: 107: && (leftButton != leftButton_old)
  2619                           ;TimersLCD.c: 108: )
  2620  001620  5010               	movf	checkInputs@leftButton,w,c
  2621  001622  A4D8               	btfss	status,2,c
  2622  001624  D006               	goto	l1148
  2623  001626  502E               	movf	checkInputs@leftButton_old,w,c
  2624  001628  1810               	xorwf	checkInputs@leftButton,w,c
  2625  00162A  B4D8               	btfsc	status,2,c
  2626  00162C  D002               	goto	l1148
  2627                           
  2628                           ;TimersLCD.c: 109: {
  2629                           ;TimersLCD.c: 110: leftButtonEv = 1;
  2630  00162E  0E01               	movlw	1
  2631  001630  6E36               	movwf	_leftButtonEv,c
  2632  001632                     l1148:
  2633                           
  2634                           ;TimersLCD.c: 111: }
  2635                           ;TimersLCD.c: 112: leftButton_old = leftButton;
  2636  001632  C010  F02E         	movff	checkInputs@leftButton,checkInputs@leftButton_old
  2637                           
  2638                           ;TimersLCD.c: 115: rightButton = PORTAbits.RA5;
  2639  001636  0E00               	movlw	0
  2640  001638  BA80               	btfsc	3968,5,c	;volatile
  2641  00163A  0E01               	movlw	1
  2642  00163C  6E11               	movwf	checkInputs@rightButton,c
  2643                           
  2644                           ;TimersLCD.c: 116: if ( (rightButton == 0)
  2645                           ;TimersLCD.c: 117: && (rightButton != rightButton_old)
  2646                           ;TimersLCD.c: 118: )
  2647  00163E  5011               	movf	checkInputs@rightButton,w,c
  2648  001640  A4D8               	btfss	status,2,c
  2649  001642  D006               	goto	l1158
  2650  001644  502D               	movf	checkInputs@rightButton_old,w,c
  2651  001646  1811               	xorwf	checkInputs@rightButton,w,c
  2652  001648  B4D8               	btfsc	status,2,c
  2653  00164A  D002               	goto	l1158
  2654                           
  2655                           ;TimersLCD.c: 119: {
  2656                           ;TimersLCD.c: 120: rightButtonEv = 1;
  2657  00164C  0E01               	movlw	1
  2658  00164E  6E35               	movwf	_rightButtonEv,c
  2659  001650                     l1158:
  2660                           
  2661                           ;TimersLCD.c: 121: }
  2662                           ;TimersLCD.c: 122: rightButton_old = rightButton;
  2663  001650  C011  F02D         	movff	checkInputs@rightButton,checkInputs@rightButton_old
  2664  001654  0012               	return		;funcret
  2665  001656                     __end_of_checkInputs:
  2666                           	opt stack 0
  2667                           tblptru	equ	0xFF8
  2668                           tblptrh	equ	0xFF7
  2669                           tblptrl	equ	0xFF6
  2670                           tablat	equ	0xFF5
  2671                           prodh	equ	0xFF4
  2672                           prodl	equ	0xFF3
  2673                           intcon	equ	0xFF2
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           indf2	equ	0xFDF
  2677                           postinc2	equ	0xFDE
  2678                           postdec2	equ	0xFDD
  2679                           fsr2h	equ	0xFDA
  2680                           fsr2l	equ	0xFD9
  2681                           status	equ	0xFD8
  2682                           
  2683 ;; *************** function _LcdWriteString *****************
  2684 ;; Defined at:
  2685 ;;		line 202 in file "lcd.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;  s               2   20[COMRAM] PTR const unsigned char 
  2688 ;;		 -> mesaj(20), STR_2(17), 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2700 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;Total ram usage:        2 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    4
  2707 ;; This function calls:
  2708 ;;		_LcdChar
  2709 ;; This function is called by:
  2710 ;;		_main
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text18
  2715  00151A                     __ptext18:
  2716                           	opt stack 0
  2717  00151A                     _LcdWriteString:
  2718                           	opt stack 26
  2719                           
  2720                           ;lcd.c: 204: while(*s)
  2721                           
  2722                           ;incstack = 0
  2723  00151A  D015               	goto	l1522
  2724  00151C                     l1518:
  2725                           
  2726                           ;lcd.c: 205: {
  2727                           ;lcd.c: 206: LcdChar(*s++);
  2728  00151C  C015  FFF6         	movff	LcdWriteString@s,tblptrl
  2729  001520  C016  FFF7         	movff	LcdWriteString@s+1,tblptrh
  2730  001524  0E00               	movlw	low (__smallconst shr (0+16))
  2731  001526  6EF8               	movwf	tblptru,c
  2732  001528  0E0F               	movlw	(high __ramtop+-1)
  2733  00152A  64F7               	cpfsgt	tblptrh,c
  2734  00152C  D003               	bra	u667
  2735  00152E  0008               	tblrd		*
  2736  001530  50F5               	movf	tablat,w,c
  2737  001532  D005               	bra	u660
  2738  001534                     u667:
  2739  001534  CFF6 FFE9          	movff	tblptrl,fsr0l
  2740  001538  CFF7 FFEA          	movff	tblptrh,fsr0h
  2741  00153C  50EF               	movf	indf0,w,c
  2742  00153E                     u660:
  2743  00153E  ECA2  F00B         	call	_LcdChar
  2744  001542  4A15               	infsnz	LcdWriteString@s,f,c
  2745  001544  2A16               	incf	LcdWriteString@s+1,f,c
  2746  001546                     l1522:
  2747  001546  C015  FFF6         	movff	LcdWriteString@s,tblptrl
  2748  00154A  C016  FFF7         	movff	LcdWriteString@s+1,tblptrh
  2749  00154E  0E00               	movlw	low (__smallconst shr (0+16))
  2750  001550  6EF8               	movwf	tblptru,c
  2751  001552  0E0F               	movlw	(high __ramtop+-1)
  2752  001554  64F7               	cpfsgt	tblptrh,c
  2753  001556  D003               	bra	u677
  2754  001558  0008               	tblrd		*
  2755  00155A  50F5               	movf	tablat,w,c
  2756  00155C  D005               	bra	u670
  2757  00155E                     u677:
  2758  00155E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2759  001562  CFF7 FFEA          	movff	tblptrh,fsr0h
  2760  001566  50EF               	movf	indf0,w,c
  2761  001568                     u670:
  2762  001568  0900               	iorlw	0
  2763  00156A  B4D8               	btfsc	status,2,c
  2764  00156C  0012               	return	
  2765  00156E  D7D6               	goto	l1518
  2766  001570                     __end_of_LcdWriteString:
  2767                           	opt stack 0
  2768                           tblptru	equ	0xFF8
  2769                           tblptrh	equ	0xFF7
  2770                           tblptrl	equ	0xFF6
  2771                           tablat	equ	0xFF5
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           intcon	equ	0xFF2
  2775                           indf0	equ	0xFEF
  2776                           postinc0	equ	0xFEE
  2777                           fsr0h	equ	0xFEA
  2778                           fsr0l	equ	0xFE9
  2779                           wreg	equ	0xFE8
  2780                           indf2	equ	0xFDF
  2781                           postinc2	equ	0xFDE
  2782                           postdec2	equ	0xFDD
  2783                           fsr2h	equ	0xFDA
  2784                           fsr2l	equ	0xFD9
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _LcdChar *****************
  2788 ;; Defined at:
  2789 ;;		line 186 in file "lcd.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;  letter          1    wreg     unsigned char 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  letter          1   19[COMRAM] unsigned char 
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      void 
  2796 ;; Registers used:
  2797 ;;		wreg, status,2, status,0, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;Total ram usage:        1 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    3
  2810 ;; This function calls:
  2811 ;;		_setGPIO
  2812 ;; This function is called by:
  2813 ;;		_LcdWriteString
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text19
  2818  001744                     __ptext19:
  2819                           	opt stack 0
  2820  001744                     _LcdChar:
  2821                           	opt stack 26
  2822                           
  2823                           ;incstack = 0
  2824                           ;LcdChar@letter stored from wreg
  2825  001744  6E14               	movwf	LcdChar@letter,c
  2826                           
  2827                           ;lcd.c: 188: setGPIO(0x12,0x80);
  2828  001746  0E80               	movlw	128
  2829  001748  6E12               	movwf	setGPIO@value,c
  2830  00174A  0E12               	movlw	18
  2831  00174C  EC0F  F00C         	call	_setGPIO
  2832                           
  2833                           ;lcd.c: 190: setGPIO(0x13,letter);
  2834  001750  C014  F012         	movff	LcdChar@letter,setGPIO@value
  2835  001754  0E13               	movlw	19
  2836  001756  EC0F  F00C         	call	_setGPIO
  2837                           
  2838                           ;lcd.c: 192: setGPIO(0x12, 0xc0);
  2839  00175A  0EC0               	movlw	192
  2840  00175C  6E12               	movwf	setGPIO@value,c
  2841  00175E  0E12               	movlw	18
  2842  001760  EC0F  F00C         	call	_setGPIO
  2843                           
  2844                           ;lcd.c: 194: setGPIO(0x12,0x00);
  2845  001764  0E00               	movlw	0
  2846  001766  6E12               	movwf	setGPIO@value,c
  2847  001768  0E12               	movlw	18
  2848  00176A  EC0F  F00C         	call	_setGPIO
  2849  00176E  0012               	return		;funcret
  2850  001770                     __end_of_LcdChar:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           prodh	equ	0xFF4
  2857                           prodl	equ	0xFF3
  2858                           intcon	equ	0xFF2
  2859                           indf0	equ	0xFEF
  2860                           postinc0	equ	0xFEE
  2861                           fsr0h	equ	0xFEA
  2862                           fsr0l	equ	0xFE9
  2863                           wreg	equ	0xFE8
  2864                           indf2	equ	0xFDF
  2865                           postinc2	equ	0xFDE
  2866                           postdec2	equ	0xFDD
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function _LcdGoTo *****************
  2872 ;; Defined at:
  2873 ;;		line 176 in file "lcd.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  pos             1    wreg     unsigned char 
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  pos             1   20[COMRAM] unsigned char 
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      void 
  2880 ;; Registers used:
  2881 ;;		wreg, status,2, status,0, cstack
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;Total ram usage:        1 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    4
  2894 ;; This function calls:
  2895 ;;		_lcdCommand
  2896 ;; This function is called by:
  2897 ;;		_main
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text20
  2902  00189E                     __ptext20:
  2903                           	opt stack 0
  2904  00189E                     _LcdGoTo:
  2905                           	opt stack 26
  2906                           
  2907                           ;incstack = 0
  2908                           ;LcdGoTo@pos stored from wreg
  2909  00189E  6E15               	movwf	LcdGoTo@pos,c
  2910                           
  2911                           ;lcd.c: 179: lcdCommand(0x80+pos);
  2912  0018A0  5015               	movf	LcdGoTo@pos,w,c
  2913  0018A2  0F80               	addlw	128
  2914  0018A4  ECB8  F00B         	call	_lcdCommand
  2915  0018A8  0012               	return		;funcret
  2916  0018AA                     __end_of_LcdGoTo:
  2917                           	opt stack 0
  2918                           tblptru	equ	0xFF8
  2919                           tblptrh	equ	0xFF7
  2920                           tblptrl	equ	0xFF6
  2921                           tablat	equ	0xFF5
  2922                           prodh	equ	0xFF4
  2923                           prodl	equ	0xFF3
  2924                           intcon	equ	0xFF2
  2925                           indf0	equ	0xFEF
  2926                           postinc0	equ	0xFEE
  2927                           fsr0h	equ	0xFEA
  2928                           fsr0l	equ	0xFE9
  2929                           wreg	equ	0xFE8
  2930                           indf2	equ	0xFDF
  2931                           postinc2	equ	0xFDE
  2932                           postdec2	equ	0xFDD
  2933                           fsr2h	equ	0xFDA
  2934                           fsr2l	equ	0xFD9
  2935                           status	equ	0xFD8
  2936                           
  2937 ;; *************** function _lcdCommand *****************
  2938 ;; Defined at:
  2939 ;;		line 102 in file "lcd.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  command         1    wreg     unsigned char 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  command         1   19[COMRAM] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, status,0, cstack
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;Total ram usage:        1 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    3
  2960 ;; This function calls:
  2961 ;;		_setGPIO
  2962 ;; This function is called by:
  2963 ;;		_LcdInit
  2964 ;;		_LcdClear
  2965 ;;		_LcdGoTo
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text21
  2970  001770                     __ptext21:
  2971                           	opt stack 0
  2972  001770                     _lcdCommand:
  2973                           	opt stack 25
  2974                           
  2975                           ;incstack = 0
  2976                           ;lcdCommand@command stored from wreg
  2977  001770  6E14               	movwf	lcdCommand@command,c
  2978                           
  2979                           ;lcd.c: 104: setGPIO(0x12,0x00);
  2980  001772  0E00               	movlw	0
  2981  001774  6E12               	movwf	setGPIO@value,c
  2982  001776  0E12               	movlw	18
  2983  001778  EC0F  F00C         	call	_setGPIO
  2984                           
  2985                           ;lcd.c: 106: setGPIO(0x13, command);
  2986  00177C  C014  F012         	movff	lcdCommand@command,setGPIO@value
  2987  001780  0E13               	movlw	19
  2988  001782  EC0F  F00C         	call	_setGPIO
  2989                           
  2990                           ;lcd.c: 108: setGPIO(0x12,0x40);
  2991  001786  0E40               	movlw	64
  2992  001788  6E12               	movwf	setGPIO@value,c
  2993  00178A  0E12               	movlw	18
  2994  00178C  EC0F  F00C         	call	_setGPIO
  2995                           
  2996                           ;lcd.c: 110: setGPIO(0x12,0x00);
  2997  001790  0E00               	movlw	0
  2998  001792  6E12               	movwf	setGPIO@value,c
  2999  001794  0E12               	movlw	18
  3000  001796  EC0F  F00C         	call	_setGPIO
  3001  00179A  0012               	return		;funcret
  3002  00179C                     __end_of_lcdCommand:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           prodh	equ	0xFF4
  3009                           prodl	equ	0xFF3
  3010                           intcon	equ	0xFF2
  3011                           indf0	equ	0xFEF
  3012                           postinc0	equ	0xFEE
  3013                           fsr0h	equ	0xFEA
  3014                           fsr0l	equ	0xFE9
  3015                           wreg	equ	0xFE8
  3016                           indf2	equ	0xFDF
  3017                           postinc2	equ	0xFDE
  3018                           postdec2	equ	0xFDD
  3019                           fsr2h	equ	0xFDA
  3020                           fsr2l	equ	0xFD9
  3021                           status	equ	0xFD8
  3022                           
  3023 ;; *************** function _setGPIO *****************
  3024 ;; Defined at:
  3025 ;;		line 55 in file "lcd.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  address         1    wreg     unsigned char 
  3028 ;;  value           1   17[COMRAM] unsigned char 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  address         1   18[COMRAM] unsigned char 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2, status,0, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3040 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;Total ram usage:        2 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    2
  3047 ;; This function calls:
  3048 ;;		_SWSPIClearCS
  3049 ;;		_SWSPISetCS
  3050 ;;		_SWSPIWrite
  3051 ;; This function is called by:
  3052 ;;		_lcdCommand
  3053 ;;		_LcdInit
  3054 ;;		_LcdChar
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text22
  3059  00181E                     __ptext22:
  3060                           	opt stack 0
  3061  00181E                     _setGPIO:
  3062                           	opt stack 26
  3063                           
  3064                           ;incstack = 0
  3065                           ;setGPIO@address stored from wreg
  3066  00181E  6E13               	movwf	setGPIO@address,c
  3067                           
  3068                           ;lcd.c: 58: SWSPIClearCS();
  3069  001820  EC5E  F00C         	call	_SWSPIClearCS	;wreg free
  3070                           
  3071                           ;lcd.c: 61: SWSPIWrite(0x40);
  3072  001824  0E40               	movlw	64
  3073  001826  ECE1  F00A         	call	_SWSPIWrite
  3074                           
  3075                           ;lcd.c: 62: SWSPIWrite(address);
  3076  00182A  5013               	movf	setGPIO@address,w,c
  3077  00182C  ECE1  F00A         	call	_SWSPIWrite
  3078                           
  3079                           ;lcd.c: 63: SWSPIWrite(value);
  3080  001830  5012               	movf	setGPIO@value,w,c
  3081  001832  ECE1  F00A         	call	_SWSPIWrite
  3082                           
  3083                           ;lcd.c: 64: SWSPISetCS();
  3084  001836  EC5C  F00C         	call	_SWSPISetCS	;wreg free
  3085  00183A  0012               	return		;funcret
  3086  00183C                     __end_of_setGPIO:
  3087                           	opt stack 0
  3088                           tblptru	equ	0xFF8
  3089                           tblptrh	equ	0xFF7
  3090                           tblptrl	equ	0xFF6
  3091                           tablat	equ	0xFF5
  3092                           prodh	equ	0xFF4
  3093                           prodl	equ	0xFF3
  3094                           intcon	equ	0xFF2
  3095                           indf0	equ	0xFEF
  3096                           postinc0	equ	0xFEE
  3097                           fsr0h	equ	0xFEA
  3098                           fsr0l	equ	0xFE9
  3099                           wreg	equ	0xFE8
  3100                           indf2	equ	0xFDF
  3101                           postinc2	equ	0xFDE
  3102                           postdec2	equ	0xFDD
  3103                           fsr2h	equ	0xFDA
  3104                           fsr2l	equ	0xFD9
  3105                           status	equ	0xFD8
  3106                           
  3107 ;; *************** function _SWSPIWrite *****************
  3108 ;; Defined at:
  3109 ;;		line 75 in file "swspi.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  output          1    wreg     unsigned char 
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  output          1   15[COMRAM] unsigned char 
  3114 ;;  BitCount        1   16[COMRAM] unsigned char 
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      unsigned char 
  3117 ;; Registers used:
  3118 ;;		wreg, status,2, status,0
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;Total ram usage:        2 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:    1
  3131 ;; This function calls:
  3132 ;;		Nothing
  3133 ;; This function is called by:
  3134 ;;		_setGPIO
  3135 ;;		_setIODIR
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text23
  3140  0015C2                     __ptext23:
  3141                           	opt stack 0
  3142  0015C2                     _SWSPIWrite:
  3143                           	opt stack 26
  3144                           
  3145                           ;incstack = 0
  3146                           ;SWSPIWrite@output stored from wreg
  3147  0015C2  6E10               	movwf	SWSPIWrite@output,c
  3148                           
  3149                           ;swspi.c: 77: char BitCount;
  3150                           ;swspi.c: 78: static char input;
  3151                           ;swspi.c: 80: BitCount = 8;
  3152  0015C4  0E08               	movlw	8
  3153  0015C6  6E11               	movwf	SWSPIWrite@BitCount,c
  3154                           
  3155                           ;swspi.c: 81: input = output;
  3156  0015C8  C010  F037         	movff	SWSPIWrite@output,SWSPIWrite@input
  3157                           
  3158                           ;swspi.c: 87: PORTCbits.RC5 = 0;
  3159  0015CC  9A82               	bcf	3970,5,c	;volatile
  3160                           
  3161                           ;swspi.c: 88: if(input&0x80)
  3162  0015CE  BE37               	btfsc	SWSPIWrite@input,7,c
  3163                           
  3164                           ;swspi.c: 89: PORTCbits.RC5 = 1;
  3165  0015D0  8A82               	bsf	3970,5,c	;volatile
  3166                           
  3167                           ;swspi.c: 90: __nop();
  3168  0015D2  F000               	nop	
  3169                           
  3170                           ;swspi.c: 91: __nop();
  3171  0015D4  F000               	nop	
  3172  0015D6                     l62:
  3173                           
  3174                           ;swspi.c: 93: {
  3175                           ;swspi.c: 109: if (PORTCbits.RC4)
  3176  0015D6  A882               	btfss	3970,4,c	;volatile
  3177  0015D8  D003               	goto	l924
  3178                           
  3179                           ;swspi.c: 110: input = (input << 1) | 0x1;
  3180  0015DA  80D8               	bsf	status,0,c
  3181  0015DC  3637               	rlcf	SWSPIWrite@input,f,c
  3182  0015DE  D003               	goto	l926
  3183  0015E0                     l924:
  3184                           
  3185                           ;swspi.c: 111: else
  3186                           ;swspi.c: 112: input = input << 1;
  3187  0015E0  5037               	movf	SWSPIWrite@input,w,c
  3188  0015E2  2437               	addwf	SWSPIWrite@input,w,c
  3189  0015E4  6E37               	movwf	SWSPIWrite@input,c
  3190  0015E6                     l926:
  3191                           
  3192                           ;swspi.c: 114: PORTCbits.RC3 = 1;
  3193  0015E6  8682               	bsf	3970,3,c	;volatile
  3194                           
  3195                           ;swspi.c: 118: __nop();
  3196  0015E8  F000               	nop	
  3197                           
  3198                           ;swspi.c: 119: __nop();
  3199  0015EA  F000               	nop	
  3200                           
  3201                           ;swspi.c: 120: __nop();
  3202  0015EC  F000               	nop	
  3203                           
  3204                           ;swspi.c: 121: __nop();
  3205  0015EE  F000               	nop	
  3206                           
  3207                           ;swspi.c: 122: __nop();
  3208  0015F0  F000               	nop	
  3209                           
  3210                           ;swspi.c: 123: __nop();
  3211  0015F2  F000               	nop	
  3212                           
  3213                           ;swspi.c: 124: __nop();
  3214  0015F4  F000               	nop	
  3215                           
  3216                           ;swspi.c: 125: __nop();
  3217  0015F6  F000               	nop	
  3218                           
  3219                           ;swspi.c: 126: __nop();
  3220  0015F8  F000               	nop	
  3221                           
  3222                           ;swspi.c: 127: __nop();
  3223  0015FA  F000               	nop	
  3224                           
  3225                           ;swspi.c: 128: __nop();
  3226  0015FC  F000               	nop	
  3227                           
  3228                           ;swspi.c: 129: PORTCbits.RC3 = 0;
  3229  0015FE  9682               	bcf	3970,3,c	;volatile
  3230                           
  3231                           ;swspi.c: 130: PORTCbits.RC5 = 0;
  3232  001600  9A82               	bcf	3970,5,c	;volatile
  3233                           
  3234                           ;swspi.c: 131: if(input&0x80)
  3235  001602  BE37               	btfsc	SWSPIWrite@input,7,c
  3236                           
  3237                           ;swspi.c: 132: PORTCbits.RC5 = 1;
  3238  001604  8A82               	bsf	3970,5,c	;volatile
  3239                           
  3240                           ;swspi.c: 133: BitCount--;
  3241  001606  0611               	decf	SWSPIWrite@BitCount,f,c
  3242                           
  3243                           ;swspi.c: 134: } while(BitCount);
  3244  001608  5011               	movf	SWSPIWrite@BitCount,w,c
  3245  00160A  B4D8               	btfsc	status,2,c
  3246  00160C  0012               	return	
  3247  00160E  D7E3               	goto	l62
  3248  001610                     __end_of_SWSPIWrite:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           indf0	equ	0xFEF
  3258                           postinc0	equ	0xFEE
  3259                           fsr0h	equ	0xFEA
  3260                           fsr0l	equ	0xFE9
  3261                           wreg	equ	0xFE8
  3262                           indf2	equ	0xFDF
  3263                           postinc2	equ	0xFDE
  3264                           postdec2	equ	0xFDD
  3265                           fsr2h	equ	0xFDA
  3266                           fsr2l	equ	0xFD9
  3267                           status	equ	0xFD8
  3268                           
  3269 ;; *************** function _SWSPISetCS *****************
  3270 ;; Defined at:
  3271 ;;		line 53 in file "swspi.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;		None
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  1    wreg      void 
  3278 ;; Registers used:
  3279 ;;		None
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;Total ram usage:        0 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; Hardware stack levels required when called:    1
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		_setGPIO
  3296 ;;		_setIODIR
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text24
  3301  0018B8                     __ptext24:
  3302                           	opt stack 0
  3303  0018B8                     _SWSPISetCS:
  3304                           	opt stack 26
  3305                           
  3306                           ;swspi.c: 55: PORTAbits.RA2 = 1;
  3307                           
  3308                           ;incstack = 0
  3309  0018B8  8480               	bsf	3968,2,c	;volatile
  3310  0018BA  0012               	return		;funcret
  3311  0018BC                     __end_of_SWSPISetCS:
  3312                           	opt stack 0
  3313                           tblptru	equ	0xFF8
  3314                           tblptrh	equ	0xFF7
  3315                           tblptrl	equ	0xFF6
  3316                           tablat	equ	0xFF5
  3317                           prodh	equ	0xFF4
  3318                           prodl	equ	0xFF3
  3319                           intcon	equ	0xFF2
  3320                           indf0	equ	0xFEF
  3321                           postinc0	equ	0xFEE
  3322                           fsr0h	equ	0xFEA
  3323                           fsr0l	equ	0xFE9
  3324                           wreg	equ	0xFE8
  3325                           indf2	equ	0xFDF
  3326                           postinc2	equ	0xFDE
  3327                           postdec2	equ	0xFDD
  3328                           fsr2h	equ	0xFDA
  3329                           fsr2l	equ	0xFD9
  3330                           status	equ	0xFD8
  3331                           
  3332 ;; *************** function _SWSPIClearCS *****************
  3333 ;; Defined at:
  3334 ;;		line 64 in file "swspi.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;		None
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;		None
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  1    wreg      void 
  3341 ;; Registers used:
  3342 ;;		None
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;Total ram usage:        0 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    1
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_setGPIO
  3359 ;;		_setIODIR
  3360 ;; This function uses a non-reentrant model
  3361 ;;
  3362                           
  3363                           	psect	text25
  3364  0018BC                     __ptext25:
  3365                           	opt stack 0
  3366  0018BC                     _SWSPIClearCS:
  3367                           	opt stack 26
  3368                           
  3369                           ;swspi.c: 66: PORTAbits.RA2 = 0;
  3370                           
  3371                           ;incstack = 0
  3372  0018BC  9480               	bcf	3968,2,c	;volatile
  3373  0018BE  0012               	return		;funcret
  3374  0018C0                     __end_of_SWSPIClearCS:
  3375                           	opt stack 0
  3376                           tblptru	equ	0xFF8
  3377                           tblptrh	equ	0xFF7
  3378                           tblptrl	equ	0xFF6
  3379                           tablat	equ	0xFF5
  3380                           prodh	equ	0xFF4
  3381                           prodl	equ	0xFF3
  3382                           intcon	equ	0xFF2
  3383                           indf0	equ	0xFEF
  3384                           postinc0	equ	0xFEE
  3385                           fsr0h	equ	0xFEA
  3386                           fsr0l	equ	0xFE9
  3387                           wreg	equ	0xFE8
  3388                           indf2	equ	0xFDF
  3389                           postinc2	equ	0xFDE
  3390                           postdec2	equ	0xFDD
  3391                           fsr2h	equ	0xFDA
  3392                           fsr2l	equ	0xFD9
  3393                           status	equ	0xFD8
  3394                           
  3395 ;; *************** function _ISR *****************
  3396 ;; Defined at:
  3397 ;;		line 179 in file "TimersLCD.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;		None
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;Total ram usage:       15 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; This function calls:
  3418 ;;		Nothing
  3419 ;; This function is called by:
  3420 ;;		Interrupt level 2
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	intcode
  3425  000008                     __pintcode:
  3426                           	opt stack 0
  3427  000008                     _ISR:
  3428                           	opt stack 24
  3429                           
  3430                           ;incstack = 0
  3431  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3432  00000A  ED3D  F00A         	call	int_func,f	;refresh shadow registers
  3433                           tblptru	equ	0xFF8
  3434                           tblptrh	equ	0xFF7
  3435                           tblptrl	equ	0xFF6
  3436                           tablat	equ	0xFF5
  3437                           prodh	equ	0xFF4
  3438                           prodl	equ	0xFF3
  3439                           intcon	equ	0xFF2
  3440                           indf0	equ	0xFEF
  3441                           postinc0	equ	0xFEE
  3442                           fsr0h	equ	0xFEA
  3443                           fsr0l	equ	0xFE9
  3444                           wreg	equ	0xFE8
  3445                           indf2	equ	0xFDF
  3446                           postinc2	equ	0xFDE
  3447                           postdec2	equ	0xFDD
  3448                           fsr2h	equ	0xFDA
  3449                           fsr2l	equ	0xFD9
  3450                           status	equ	0xFD8
  3451                           
  3452                           	psect	intcode_body
  3453  00147A                     __pintcode_body:
  3454                           	opt stack 24
  3455  00147A                     int_func:
  3456                           	opt stack 24
  3457  00147A  0006               	pop		; remove dummy address from shadow register refresh
  3458  00147C  CFFA F002          	movff	pclath,??_ISR+1
  3459  001480  CFFB F003          	movff	pclatu,??_ISR+2
  3460  001484  CFE9 F004          	movff	fsr0l,??_ISR+3
  3461  001488  CFEA F005          	movff	fsr0h,??_ISR+4
  3462  00148C  CFE1 F006          	movff	fsr1l,??_ISR+5
  3463  001490  CFE2 F007          	movff	fsr1h,??_ISR+6
  3464  001494  CFD9 F008          	movff	fsr2l,??_ISR+7
  3465  001498  CFDA F009          	movff	fsr2h,??_ISR+8
  3466  00149C  CFF3 F00A          	movff	prodl,??_ISR+9
  3467  0014A0  CFF4 F00B          	movff	prodh,??_ISR+10
  3468  0014A4  CFF6 F00C          	movff	tblptrl,??_ISR+11
  3469  0014A8  CFF7 F00D          	movff	tblptrh,??_ISR+12
  3470  0014AC  CFF8 F00E          	movff	tblptru,??_ISR+13
  3471  0014B0  CFF5 F00F          	movff	tablat,??_ISR+14
  3472                           
  3473                           ;TimersLCD.c: 182: if (T0IE && T0IF)
  3474  0014B4  BAF2               	btfsc	intcon,5,c	;volatile
  3475  0014B6  A4F2               	btfss	intcon,2,c	;volatile
  3476  0014B8  D012               	goto	i2l209
  3477                           
  3478                           ;TimersLCD.c: 183: {
  3479                           ;TimersLCD.c: 184: T0IF = 0;
  3480  0014BA  94F2               	bcf	intcon,2,c	;volatile
  3481                           
  3482                           ;TimersLCD.c: 185: T0CONbits.TMR0ON = 0;
  3483  0014BC  9ED5               	bcf	4053,7,c	;volatile
  3484                           
  3485                           ;TimersLCD.c: 186: TMR0H = 0x0B;
  3486  0014BE  0E0B               	movlw	11
  3487  0014C0  6ED7               	movwf	4055,c	;volatile
  3488                           
  3489                           ;TimersLCD.c: 187: TMR0L = 0xDB;
  3490  0014C2  0EDB               	movlw	219
  3491  0014C4  6ED6               	movwf	4054,c	;volatile
  3492                           
  3493                           ;TimersLCD.c: 190: T0CONbits.TMR0ON = 1;
  3494  0014C6  8ED5               	bsf	4053,7,c	;volatile
  3495                           
  3496                           ;TimersLCD.c: 191: ev = 1;
  3497  0014C8  0E01               	movlw	1
  3498  0014CA  6E33               	movwf	_ev,c
  3499                           
  3500                           ;TimersLCD.c: 193: PORTJbits.RJ0 = tick&1;
  3501  0014CC  C034  F001         	movff	_tick,??_ISR
  3502  0014D0  0E01               	movlw	1
  3503  0014D2  1601               	andwf	??_ISR,f,c
  3504  0014D4  5088               	movf	3976,w,c	;volatile
  3505  0014D6  1801               	xorwf	??_ISR,w,c
  3506  0014D8  0BFE               	andlw	-2
  3507  0014DA  1801               	xorwf	??_ISR,w,c
  3508  0014DC  6E88               	movwf	3976,c	;volatile
  3509  0014DE                     i2l209:
  3510  0014DE  C00F  FFF5         	movff	??_ISR+14,tablat
  3511  0014E2  C00E  FFF8         	movff	??_ISR+13,tblptru
  3512  0014E6  C00D  FFF7         	movff	??_ISR+12,tblptrh
  3513  0014EA  C00C  FFF6         	movff	??_ISR+11,tblptrl
  3514  0014EE  C00B  FFF4         	movff	??_ISR+10,prodh
  3515  0014F2  C00A  FFF3         	movff	??_ISR+9,prodl
  3516  0014F6  C009  FFDA         	movff	??_ISR+8,fsr2h
  3517  0014FA  C008  FFD9         	movff	??_ISR+7,fsr2l
  3518  0014FE  C007  FFE2         	movff	??_ISR+6,fsr1h
  3519  001502  C006  FFE1         	movff	??_ISR+5,fsr1l
  3520  001506  C005  FFEA         	movff	??_ISR+4,fsr0h
  3521  00150A  C004  FFE9         	movff	??_ISR+3,fsr0l
  3522  00150E  C003  FFFB         	movff	??_ISR+2,pclatu
  3523  001512  C002  FFFA         	movff	??_ISR+1,pclath
  3524  001516  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3525  001518  0011               	retfie		f
  3526  00151A                     __end_of_ISR:
  3527                           	opt stack 0
  3528                           pclatu	equ	0xFFB
  3529                           pclath	equ	0xFFA
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           prodh	equ	0xFF4
  3535                           prodl	equ	0xFF3
  3536                           intcon	equ	0xFF2
  3537                           indf0	equ	0xFEF
  3538                           postinc0	equ	0xFEE
  3539                           fsr0h	equ	0xFEA
  3540                           fsr0l	equ	0xFE9
  3541                           wreg	equ	0xFE8
  3542                           fsr1h	equ	0xFE2
  3543                           fsr1l	equ	0xFE1
  3544                           indf2	equ	0xFDF
  3545                           postinc2	equ	0xFDE
  3546                           postdec2	equ	0xFDD
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           pclatu	equ	0xFFB
  3551                           pclath	equ	0xFFA
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           intcon	equ	0xFF2
  3559                           indf0	equ	0xFEF
  3560                           postinc0	equ	0xFEE
  3561                           fsr0h	equ	0xFEA
  3562                           fsr0l	equ	0xFE9
  3563                           wreg	equ	0xFE8
  3564                           fsr1h	equ	0xFE2
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8
  3572                           
  3573                           	psect	rparam
  3574  0000                     pclatu	equ	0xFFB
  3575                           pclath	equ	0xFFA
  3576                           tblptru	equ	0xFF8
  3577                           tblptrh	equ	0xFF7
  3578                           tblptrl	equ	0xFF6
  3579                           tablat	equ	0xFF5
  3580                           prodh	equ	0xFF4
  3581                           prodl	equ	0xFF3
  3582                           intcon	equ	0xFF2
  3583                           indf0	equ	0xFEF
  3584                           postinc0	equ	0xFEE
  3585                           fsr0h	equ	0xFEA
  3586                           fsr0l	equ	0xFE9
  3587                           wreg	equ	0xFE8
  3588                           fsr1h	equ	0xFE2
  3589                           fsr1l	equ	0xFE1
  3590                           indf2	equ	0xFDF
  3591                           postinc2	equ	0xFDE
  3592                           postdec2	equ	0xFDD
  3593                           fsr2h	equ	0xFDA
  3594                           fsr2l	equ	0xFD9
  3595                           status	equ	0xFD8
  3596                           
  3597                           	psect	temp
  3598  00004C                     btemp:
  3599                           	opt stack 0
  3600  00004C                     	ds	1
  3601  0000                     int$flags	set	btemp
  3602                           pclatu	equ	0xFFB
  3603                           pclath	equ	0xFFA
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           prodh	equ	0xFF4
  3609                           prodl	equ	0xFF3
  3610                           intcon	equ	0xFF2
  3611                           indf0	equ	0xFEF
  3612                           postinc0	equ	0xFEE
  3613                           fsr0h	equ	0xFEA
  3614                           fsr0l	equ	0xFE9
  3615                           wreg	equ	0xFE8
  3616                           fsr1h	equ	0xFE2
  3617                           fsr1l	equ	0xFE1
  3618                           indf2	equ	0xFDF
  3619                           postinc2	equ	0xFDE
  3620                           postdec2	equ	0xFDD
  3621                           fsr2h	equ	0xFDA
  3622                           fsr2l	equ	0xFD9
  3623                           status	equ	0xFD8


Data Sizes:
    Strings     52
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      75
    BANK0           160      9       9
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> mesaj(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    UART_puts@s	PTR unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    LcdWriteString@s	PTR const unsigned char  size(2) Largest target is 20
		 -> mesaj(COMRAM[20]), STR_2(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_puts->_Delay10TCYx
    _UART_puts->_UART_putc
    _LcdInit->_lcdCommand
    _setIODIR->_SWSPIWrite
    _LcdClear->_lcdCommand
    _LcdWriteString->_LcdChar
    _LcdChar->_setGPIO
    _LcdGoTo->_lcdCommand
    _lcdCommand->_setGPIO
    _setGPIO->_SWSPIWrite

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6862
                                             41 COMRAM     3     3      0
                            _LcdGoTo
                     _LcdWriteString
                        _checkInputs
                               _init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             32    22     10    2744
                                             27 COMRAM    14     4     10
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     386
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    2350
                            _LcdInit
                          _UART_Init
                          _UART_puts
                        _initButtons
                            _initTmr
 ---------------------------------------------------------------------------------
 (2) _initTmr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_puts                                            2     0      2     139
                                             16 COMRAM     2     0      2
                        _Delay10TCYx
                          _UART_putc
 ---------------------------------------------------------------------------------
 (3) _UART_putc                                            1     1      0      15
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      15
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            2     2      0      15
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LcdInit                                              0     0      0    2196
                           _LcdClear
                          _SWSPIOpen
                         _lcdCommand
                            _setGPIO
                           _setIODIR
 ---------------------------------------------------------------------------------
 (3) _setIODIR                                             2     1      1     202
                                             17 COMRAM     2     1      1
                       _SWSPIClearCS
                         _SWSPISetCS
                         _SWSPIWrite
 ---------------------------------------------------------------------------------
 (3) _SWSPIOpen                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LcdClear                                             0     0      0     672
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (1) _checkInputs                                          2     2      0      90
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LcdWriteString                                       2     0      2     845
                                             20 COMRAM     2     0      2
                            _LcdChar
 ---------------------------------------------------------------------------------
 (2) _LcdChar                                              1     1      0     672
                                             19 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (1) _LcdGoTo                                              1     1      0     694
                                             20 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     672
                                             19 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (3) _setGPIO                                              2     1      1     650
                                             17 COMRAM     2     1      1
                       _SWSPIClearCS
                         _SWSPISetCS
                         _SWSPIWrite
 ---------------------------------------------------------------------------------
 (4) _SWSPIWrite                                           2     2      0      30
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _SWSPISetCS                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SWSPIClearCS                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 15    15      0       0
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdGoTo
     _lcdCommand
       _setGPIO
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
   _LcdWriteString
     _LcdChar
       _setGPIO
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
   _checkInputs
   _init
     _LcdInit
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _SWSPIOpen
       _lcdCommand
         _setGPIO
           _SWSPIClearCS
           _SWSPISetCS
           _SWSPIWrite
       _setGPIO
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
       _setIODIR
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
     _UART_Init
     _UART_puts
       _Delay10TCYx
       _UART_putc
     _initButtons
     _initTmr
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      9       9       5        5.6%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      54      32        0.0%
DATA                 0      0      54       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Apr 17 18:12:38 2019

                        l62 15D6                          _ev 0033         ___wmul@multiplicand 0012  
               __CFG_OSC$HS 000000                         l120 1896                         l709 168E  
                       l924 15E0                         l926 15E6                         l699 15B8  
                       l992 1882                         _GIE 007F97                         _ISR 0008  
                       u660 153E                         u670 1568                         u667 1534  
                       u677 155E                  _SWSPISetCS 18B8                         _ore 002F  
         lcdCommand@command 0014                  _SWSPIWrite 15C2                         wreg 000FE8  
                _TXSTA1bits 000FAC                        ?_ISR 0001       __size_of_SWSPIClearCS 0004  
              __CFG_WDT$OFF 000000                        l1148 1632                        l1158 1650  
                      l1522 1546                        l1450 170E                        l1518 151C  
                      l1810 107C                        l1802 104E                        l1900 12BA  
                      l1820 10BC                        l1910 1340                        l1830 1124  
                      l1814 1084                        l1752 17F8                        l1832 1150  
                      l1808 106A                        l1920 1372                        l1770 158E  
                      l1906 1316                        l1842 1180                        l1780 15AE  
                      l1772 1592                        l1844 1186                        l1908 1322  
                      l1940 1396                        l1790 166C                        l1862 11E2  
                      l1918 1366                        l1768 1586                        l1792 1670  
                      l1856 11C2                        l1960 13CA                        l1866 1216  
                      l1796 1684                        l1788 1664                        l1892 1298  
                      l1876 1242                        l1884 1268                        l1868 1220  
                      l1972 13E6                        l1886 1274                        l1982 140A  
                      l1966 13D8                        l1976 13FC                        l1898 12B4  
                      l1994 1422                        l1988 1416                        l1998 1438  
                      STR_1 100B                        STR_2 101F                        STR_3 1030  
                      _T0IE 007F95                        _T0IF 007F92                        u1377 1884  
                      _RCIF 007CF5                        _TMR0 000FD6                        _main 134E  
                      _init 17C2                        _tick 0034                        fsr0h 000FEA  
                      fsr1h 000FE2                        indf0 000FEF                        fsr2h 000FDA  
                      fsr0l 000FE9                        indf2 000FDF                        fsr1l 000FE1  
                      fsr2l 000FD9                        btemp 004C                        prodh 000FF4  
                      prodl 000FF3                        start 000E             __end_of_LcdChar 1770  
           __end_of_LcdGoTo 18AA             __end_of_LcdInit 16D8                ___param_bank 000000  
              ?_initButtons 0001                       ??_ISR 0001                 _Delay10TCYx 1880  
                     ?_main 0001                       ?_init 0001                       _T0CON 000FD5  
           __end_of___lwdiv 15C2             __end_of___lwmod 1698                       i2l209 14DE  
              _SWSPIClearCS 18BC                       _RCREG 000FAE                       _TMR0H 000FD7  
                     _TMR0L 000FD6                       _SPBRG 000FAF                       _TRMT1 007D61  
                     _TXREG 000FAD        __size_of_checkInputs 0046              __CFG_FCMEN$OFF 000000  
        __size_of_UART_Init 001C             __end_of_dpowers 100B          __size_of_UART_putc 000E  
           __end_of_initTmr 170E          __size_of_UART_puts 0036                       _mesaj 0038  
           __end_of_setGPIO 183C             __end_of_isdigit 1800                       pclath 000FFA  
                     tablat 000FF5      checkInputs@rightButton 0011                       status 000FD8  
           __end_of_sprintf 134E            __end_of_LcdClear 18B2          __size_of_SWSPIOpen 0012  
           __initialization 1858                __end_of_main 147A                __end_of_init 17E2  
                    ??_main 002A                      ??_init 0015               __activetblptr 000003  
               ?_SWSPISetCS 0001                 ?_SWSPIWrite 0001                   ??_LcdChar 0014  
                 ??_LcdGoTo 0015                   ??_LcdInit 0015                      _TRISB0 007C98  
                    _TRISA5 007C95           __end_of_UART_Init 1858                      ___wmul 179C  
         __end_of_UART_putc 189E           __end_of_UART_puts 1744                   ??___lwdiv 0014  
                 ??___lwmod 001B            __end_of_setIODIR 181E                      clear_0 185E  
               setIODIR@dir 0012                      _minute 0030                   ??_initTmr 0010  
                 ??_setGPIO 0013                   ??_isdigit 0010               LcdChar@letter 0014  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8           __end_of_SWSPIOpen 1880                   ??_sprintf 0026  
                __accesstop 0060     __end_of__initialization 1864     __size_of_LcdWriteString 0056  
             ___rparam_used 000001         __size_of_SWSPISetCS 0004         __size_of_SWSPIWrite 004E  
            __pcstackCOMRAM 0001        __size_of_initButtons 0006                   ?_LcdClear 0001  
              sprintf@width 0066                ?_Delay10TCYx 0001                  _lcdCommand 1770  
                   ?___wmul 0010              main@leftButton 002B                  ??_LcdClear 0015  
                   _LcdChar 1744                     _LcdGoTo 189E                     _LcdInit 1698  
                 ?_setIODIR 0012   checkInputs@leftButton_old 002E                     __Hparam 0000  
                   __Lparam 0000             __size_of___wmul 0026                     ___lwdiv 1570  
                   ___lwmod 1656                __psmallconst 1000                     __pcinit 1858  
           Delay10TCYx@unit 0010                     __ramtop 1000               ??_checkInputs 0010  
                   __ptext0 134E                     __ptext1 1040                     __ptext2 17E2  
                   __ptext3 179C                     __ptext4 1656                     __ptext5 1570  
                   __ptext6 17C2                     __ptext7 16D8                     __ptext8 18B2  
                   __ptext9 170E                   _T0CONbits 000FD5                __size_of_ISR 1512  
              ??_SWSPISetCS 0010                     _dpowers 1001                     _initTmr 16D8  
                   _setGPIO 181E                     _isdigit 17E2                ??_SWSPIWrite 0010  
                   _secunde 0031             setIODIR@address 0013                setGPIO@value 0012  
                   _sprintf 1040              __pintcode_body 147A        end_of_initialization 1864  
            _LcdWriteString 151A                  ??_setIODIR 0013                     int_func 147A  
        __end_of_SWSPISetCS 18BC                   _RCSTAbits 000FAB          __end_of_SWSPIWrite 1610  
                   postdec2 000FDD                 ?_lcdCommand 0001                     postinc0 000FEE  
                   postinc2 000FDE                   _UART_Init 183C                   _PORTAbits 000F80  
                 _PORTBbits 000F81                   _PORTCbits 000F82                   _UART_putc 1890  
                 _UART_puts 170E       checkInputs@leftButton 0010                   _PORTJbits 000F88  
                 _TRISAbits 000F92                   _TRISCbits 000F94                   _TRISDbits 000F95  
                 _TRISJbits 000F9A         __end_of_checkInputs 1656      __end_of_LcdWriteString 1570  
                 _SWSPIOpen 186E                   _TXSTAbits 000FAC                _leftButtonEv 0036  
            __end_of___wmul 17C2                  ?_UART_Init 0001        __size_of_Delay10TCYx 0010  
                ?_UART_putc 0001                  ?_UART_puts 0011         start_initialization 1858  
               __end_of_ISR 151A             ?_LcdWriteString 0015           __size_of_LcdClear 0008  
       __size_of_lcdCommand 002C                  ?_SWSPIOpen 0001               ??_initButtons 0010  
                  ??___wmul 0014                 _checkInputs 1610               ?_SWSPIClearCS 0001  
               __pbssCOMRAM 002D               __pcstackBANK0 0060  checkInputs@rightButton_old 002D  
             _rightButtonEv 0035                _isdigit$1483 0011                    ?_LcdChar 0001  
                  ?_LcdGoTo 0001                    ?_LcdInit 0001                 sprintf@flag 0065  
               sprintf@prec 0062           __size_of_setIODIR 001E            ___lwdiv@dividend 0010  
                 __pintcode 0008                    ?___lwdiv 0010                    ?___lwmod 0017  
               ??_UART_Init 0010              ??_SWSPIClearCS 0010                 ??_UART_putc 0010  
               ??_UART_puts 0013         __end_of_initButtons 18B8                 __smallconst 1000  
                  ?_initTmr 0001                    ?_setGPIO 0012                    ?_isdigit 0001  
          ___lwdiv@quotient 0015                    ?_sprintf 001C                   _tick100ms 0032  
                UART_Init@x 0010          SWSPIWrite@BitCount 0011                 ??_SWSPIOpen 0010  
            ___wmul@product 0014                    _PIE1bits 000F9D                    _PIR1bits 000F9E  
                UART_puts@s 0011              setGPIO@address 0013                ??_lcdCommand 0014  
         ___wmul@multiplier 0010                    _LcdClear 18AA          __end_of_lcdCommand 179C  
          __size_of_LcdChar 002C            __size_of_LcdGoTo 000C            __size_of_LcdInit 0040  
                  __Hrparam 0000                    __Lrparam 0000                 _initButtons 18B2  
          __size_of___lwdiv 0052            __size_of___lwmod 0042            ??_LcdWriteString 0017  
                sprintf@val 0063            __size_of_initTmr 0036            __size_of_setGPIO 001E  
          __size_of_isdigit 001E             ___lwdiv@divisor 0012             ___lwdiv@counter 0014  
                  __ptext10 1890                    __ptext11 1880                    __ptext20 189E  
                  __ptext12 183C                    __ptext21 1770                    __ptext13 1698  
                  __ptext22 181E                    __ptext14 1800                    __ptext23 15C2  
                  __ptext15 186E                    __ptext24 18B8                    __ptext16 18AA  
                  __ptext25 18BC                    __ptext17 1610                    __ptext18 151A  
                  __ptext19 1744             main@rightButton 002A            __size_of_sprintf 030E  
                  _setIODIR 1800               __size_of_main 012C               __size_of_init 0020  
             UART_putc@data 0010        __end_of_SWSPIClearCS 18C0               ??_Delay10TCYx 0010  
                  int$flags 004C             LcdWriteString@s 0015                  _MEMCONbits 000F9C  
                  main@desc 002C                ?_checkInputs 0001                    isdigit@c 0012  
                  intlevel2 0000                  LcdGoTo@pos 0015                   sprintf@ap 0060  
                 sprintf@sp 001C            ___lwmod@dividend 0017                  _RCSTA1bits 000FAB  
       __end_of_Delay10TCYx 1890                    sprintf@c 0068                    sprintf@f 001E  
          SWSPIWrite@output 0010             ___lwmod@divisor 0019             ___lwmod@counter 001B  
           SWSPIWrite@input 0037  
