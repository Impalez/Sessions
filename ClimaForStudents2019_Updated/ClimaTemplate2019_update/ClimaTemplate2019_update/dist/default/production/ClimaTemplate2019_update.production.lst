

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed May 22 18:56:06 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.41 (B)
    61                           ; Generated 21/02/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F8722 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	mediumconst
    96  00FEF4                     __pmediumconst:
    97                           	opt stack 0
    98  00FEF4  00                 	db	0
    99  00FEF5                     _dpowers:
   100                           	opt stack 0
   101  00FEF5  0001               	dw	1
   102  00FEF7  000A               	dw	10
   103  00FEF9  0064               	dw	100
   104  00FEFB  03E8               	dw	1000
   105  00FEFD  2710               	dw	10000
   106  00FEFF                     __end_of_dpowers:
   107                           	opt stack 0
   108  00FEFF                     _LcdLines:
   109                           	opt stack 0
   110  00FEFF  20                 	db	32
   111  00FF00  20                 	db	32
   112  00FF01  43                 	db	67
   113  00FF02  6C                 	db	108
   114  00FF03  69                 	db	105
   115  00FF04  6D                 	db	109
   116  00FF05  61                 	db	97
   117  00FF06  20                 	db	32
   118  00FF07  69                 	db	105
   119  00FF08  73                 	db	115
   120  00FF09  20                 	db	32
   121  00FF0A  4F                 	db	79
   122  00FF0B  46                 	db	70
   123  00FF0C  46                 	db	70
   124  00FF0D  20                 	db	32
   125  00FF0E  20                 	db	32
   126  00FF0F  00                 	db	0
   127  00FF10  00                 	db	0
   128  00FF11  2D                 	db	45
   129  00FF12  2D                 	db	45
   130  00FF13  2D                 	db	45
   131  00FF14  2D                 	db	45
   132  00FF15  2D                 	db	45
   133  00FF16  2D                 	db	45
   134  00FF17  2D                 	db	45
   135  00FF18  2D                 	db	45
   136  00FF19  2D                 	db	45
   137  00FF1A  2D                 	db	45
   138  00FF1B  2D                 	db	45
   139  00FF1C  2D                 	db	45
   140  00FF1D  2D                 	db	45
   141  00FF1E  2D                 	db	45
   142  00FF1F  2D                 	db	45
   143  00FF20  2D                 	db	45
   144  00FF21  00                 	db	0
   145  00FF22  00                 	db	0
   146  00FF23  54                 	db	84
   147  00FF24  65                 	db	101
   148  00FF25  3A                 	db	58
   149  00FF26  2B                 	db	43
   150  00FF27  20                 	db	32
   151  00FF28  20                 	db	32
   152  00FF29  43                 	db	67
   153  00FF2A  20                 	db	32
   154  00FF2B  54                 	db	84
   155  00FF2C  69                 	db	105
   156  00FF2D  3A                 	db	58
   157  00FF2E  2B                 	db	43
   158  00FF2F  20                 	db	32
   159  00FF30  20                 	db	32
   160  00FF31  43                 	db	67
   161  00FF32  20                 	db	32
   162  00FF33  00                 	db	0
   163  00FF34  00                 	db	0
   164  00FF35  52                 	db	82
   165  00FF36  65                 	db	101
   166  00FF37  63                 	db	99
   167  00FF38  65                 	db	101
   168  00FF39  20                 	db	32
   169  00FF3A  20                 	db	32
   170  00FF3B  20                 	db	32
   171  00FF3C  20                 	db	32
   172  00FF3D  20                 	db	32
   173  00FF3E  20                 	db	32
   174  00FF3F  20                 	db	32
   175  00FF40  3C                 	db	60
   176  00FF41  20                 	db	32
   177  00FF42  20                 	db	32
   178  00FF43  43                 	db	67
   179  00FF44  3E                 	db	62
   180  00FF45  00                 	db	0
   181  00FF46  00                 	db	0
   182  00FF47  54                 	db	84
   183  00FF48  65                 	db	101
   184  00FF49  3A                 	db	58
   185  00FF4A  2B                 	db	43
   186  00FF4B  20                 	db	32
   187  00FF4C  20                 	db	32
   188  00FF4D  43                 	db	67
   189  00FF4E  20                 	db	32
   190  00FF4F  54                 	db	84
   191  00FF50  69                 	db	105
   192  00FF51  3A                 	db	58
   193  00FF52  2B                 	db	43
   194  00FF53  20                 	db	32
   195  00FF54  20                 	db	32
   196  00FF55  43                 	db	67
   197  00FF56  20                 	db	32
   198  00FF57  00                 	db	0
   199  00FF58  00                 	db	0
   200  00FF59  43                 	db	67
   201  00FF5A  61                 	db	97
   202  00FF5B  6C                 	db	108
   203  00FF5C  64                 	db	100
   204  00FF5D  20                 	db	32
   205  00FF5E  20                 	db	32
   206  00FF5F  20                 	db	32
   207  00FF60  20                 	db	32
   208  00FF61  20                 	db	32
   209  00FF62  20                 	db	32
   210  00FF63  20                 	db	32
   211  00FF64  3C                 	db	60
   212  00FF65  20                 	db	32
   213  00FF66  20                 	db	32
   214  00FF67  43                 	db	67
   215  00FF68  3E                 	db	62
   216  00FF69  00                 	db	0
   217  00FF6A  00                 	db	0
   218  00FF6B  54                 	db	84
   219  00FF6C  65                 	db	101
   220  00FF6D  3A                 	db	58
   221  00FF6E  2B                 	db	43
   222  00FF6F  20                 	db	32
   223  00FF70  20                 	db	32
   224  00FF71  43                 	db	67
   225  00FF72  20                 	db	32
   226  00FF73  54                 	db	84
   227  00FF74  69                 	db	105
   228  00FF75  3A                 	db	58
   229  00FF76  2B                 	db	43
   230  00FF77  20                 	db	32
   231  00FF78  20                 	db	32
   232  00FF79  43                 	db	67
   233  00FF7A  20                 	db	32
   234  00FF7B  00                 	db	0
   235  00FF7C  00                 	db	0
   236  00FF7D  56                 	db	86
   237  00FF7E  65                 	db	101
   238  00FF7F  6E                 	db	110
   239  00FF80  74                 	db	116
   240  00FF81  20                 	db	32
   241  00FF82  20                 	db	32
   242  00FF83  20                 	db	32
   243  00FF84  20                 	db	32
   244  00FF85  20                 	db	32
   245  00FF86  20                 	db	32
   246  00FF87  20                 	db	32
   247  00FF88  20                 	db	32
   248  00FF89  20                 	db	32
   249  00FF8A  20                 	db	32
   250  00FF8B  43                 	db	67
   251  00FF8C  20                 	db	32
   252  00FF8D  00                 	db	0
   253  00FF8E  00                 	db	0
   254  00FF8F                     __end_of_LcdLines:
   255                           	opt stack 0
   256  0000                     _TMR0	set	4054
   257  0000                     _ADRES	set	4035
   258  0000                     _PIR1bits	set	3998
   259  0000                     _RCREG	set	4014
   260  0000                     _TXREG	set	4013
   261  0000                     _RCSTA1bits	set	4011
   262  0000                     _PIE1bits	set	3997
   263  0000                     _RCSTAbits	set	4011
   264  0000                     _TXSTAbits	set	4012
   265  0000                     _SPBRG	set	4015
   266  0000                     _TXSTA1bits	set	4012
   267  0000                     _TRISCbits	set	3988
   268  0000                     _TRISAbits	set	3986
   269  0000                     _PORTCbits	set	3970
   270  0000                     _PORTAbits	set	3968
   271  0000                     _MEMCONbits	set	3996
   272  0000                     _PORTD	set	3971
   273  0000                     _TRISD	set	3989
   274  0000                     _TMR0L	set	4054
   275  0000                     _TMR0H	set	4055
   276  0000                     _TMR1L	set	4046
   277  0000                     _TMR1H	set	4047
   278  0000                     _T0CONbits	set	4053
   279  0000                     _T0CON	set	4053
   280  0000                     _TRISJbits	set	3994
   281  0000                     _PORTJbits	set	3976
   282  0000                     _TRISDbits	set	3989
   283  0000                     _ADCON2bits	set	4032
   284  0000                     _ADCON1bits	set	4033
   285  0000                     _ADCON0bits	set	4034
   286  0000                     _TRISA	set	3986
   287  0000                     _PORTDbits	set	3971
   288  0000                     _PORTBbits	set	3969
   289  0000                     _RCIF	set	31989
   290  0000                     _TRMT1	set	32097
   291  0000                     _T0IF	set	32658
   292  0000                     _GIE	set	32663
   293  0000                     _T0IE	set	32661
   294  0000                     _TRISB0	set	31896
   295  00FF8F                     STR_20:
   296  00FF8F  48                 	db	72	;'H'
   297  00FF90  53                 	db	83	;'S'
   298  00FF91  3A                 	db	58	;':'
   299  00FF92  25                 	db	37
   300  00FF93  64                 	db	100	;'d'
   301  00FF94  2C                 	db	44
   302  00FF95  20                 	db	32
   303  00FF96  48                 	db	72	;'H'
   304  00FF97  4C                 	db	76	;'L'
   305  00FF98  3A                 	db	58	;':'
   306  00FF99  25                 	db	37
   307  00FF9A  64                 	db	100	;'d'
   308  00FF9B  2C                 	db	44
   309  00FF9C  20                 	db	32
   310  00FF9D  43                 	db	67	;'C'
   311  00FF9E  53                 	db	83	;'S'
   312  00FF9F  3A                 	db	58	;':'
   313  00FFA0  25                 	db	37
   314  00FFA1  64                 	db	100	;'d'
   315  00FFA2  2C                 	db	44
   316  00FFA3  20                 	db	32
   317  00FFA4  00                 	db	0
   318  00FFA5                     STR_21:
   319  00FFA5  0A                 	db	10
   320  00FFA6  0D                 	db	13
   321  00FFA7  49                 	db	73	;'I'
   322  00FFA8  6E                 	db	110	;'n'
   323  00FFA9  69                 	db	105	;'i'
   324  00FFAA  74                 	db	116	;'t'
   325  00FFAB  69                 	db	105	;'i'
   326  00FFAC  61                 	db	97	;'a'
   327  00FFAD  6C                 	db	108	;'l'
   328  00FFAE  69                 	db	105	;'i'
   329  00FFAF  7A                 	db	122	;'z'
   330  00FFB0  69                 	db	105	;'i'
   331  00FFB1  6E                 	db	110	;'n'
   332  00FFB2  67                 	db	103	;'g'
   333  00FFB3  2E                 	db	46
   334  00FFB4  2E                 	db	46
   335  00FFB5  2E                 	db	46
   336  00FFB6  0A                 	db	10
   337  00FFB7  0D                 	db	13
   338  00FFB8  00                 	db	0
   339  00FFB9                     STR_22:
   340  00FFB9  4C                 	db	76	;'L'
   341  00FFBA  43                 	db	67	;'C'
   342  00FFBB  44                 	db	68	;'D'
   343  00FFBC  20                 	db	32
   344  00FFBD  69                 	db	105	;'i'
   345  00FFBE  6E                 	db	110	;'n'
   346  00FFBF  69                 	db	105	;'i'
   347  00FFC0  74                 	db	116	;'t'
   348  00FFC1  20                 	db	32
   349  00FFC2  2E                 	db	46
   350  00FFC3  2E                 	db	46
   351  00FFC4  2E                 	db	46
   352  00FFC5  00                 	db	0
   353  00FFC6                     STR_6:
   354  00FFC6  7C                 	db	124
   355  00FFC7  2E                 	db	46
   356  00FFC8  2E                 	db	46
   357  00FFC9  2E                 	db	46
   358  00FFCA  2E                 	db	46
   359  00FFCB  00                 	db	0
   360  00FFCC                     STR_7:
   361  00FFCC  7C                 	db	124
   362  00FFCD  7C                 	db	124
   363  00FFCE  2E                 	db	46
   364  00FFCF  2E                 	db	46
   365  00FFD0  2E                 	db	46
   366  00FFD1  00                 	db	0
   367  00FFD2                     STR_8:
   368  00FFD2  7C                 	db	124
   369  00FFD3  7C                 	db	124
   370  00FFD4  7C                 	db	124
   371  00FFD5  2E                 	db	46
   372  00FFD6  2E                 	db	46
   373  00FFD7  00                 	db	0
   374  00FFD8                     STR_9:
   375  00FFD8  7C                 	db	124
   376  00FFD9  7C                 	db	124
   377  00FFDA  7C                 	db	124
   378  00FFDB  7C                 	db	124
   379  00FFDC  2E                 	db	46
   380  00FFDD  00                 	db	0
   381  00FFDE                     STR_10:
   382  00FFDE  7C                 	db	124
   383  00FFDF  7C                 	db	124
   384  00FFE0  7C                 	db	124
   385  00FFE1  7C                 	db	124
   386  00FFE2  7C                 	db	124
   387  00FFE3  00                 	db	0
   388  00FFE4                     STR_1:
   389  00FFE4  25                 	db	37
   390  00FFE5  30                 	db	48	;'0'
   391  00FFE6  32                 	db	50	;'2'
   392  00FFE7  64                 	db	100	;'d'
   393  00FFE8  00                 	db	0
   394  00FFE9                     STR_4:
   395  00FFE9  43                 	db	67	;'C'
   396  00FFEA  61                 	db	97	;'a'
   397  00FFEB  6C                 	db	108	;'l'
   398  00FFEC  64                 	db	100	;'d'
   399  00FFED  00                 	db	0
   400  00FFEE                     STR_3:
   401  00FFEE  52                 	db	82	;'R'
   402  00FFEF  65                 	db	101	;'e'
   403  00FFF0  63                 	db	99	;'c'
   404  00FFF1  65                 	db	101	;'e'
   405  00FFF2  00                 	db	0
   406  00FFF3                     STR_5:
   407  00FFF3  56                 	db	86	;'V'
   408  00FFF4  65                 	db	101	;'e'
   409  00FFF5  6E                 	db	110	;'n'
   410  00FFF6  74                 	db	116	;'t'
   411  00FFF7  00                 	db	0
   412  00FFF8                     STR_11:
   413  00FFF8  25                 	db	37
   414  00FFF9  64                 	db	100	;'d'
   415  00FFFA  00                 	db	0
   416  00FFFB                     STR_14:
   417  00FFFB  3C                 	db	60	;'<'
   418  00FFFC  00                 	db	0
   419  00FFFD                     STR_13:
   420  00FFFD  3E                 	db	62	;'>'
   421  00FFFE  00                 	db	0
   422  0000                     
   423                           ; #config settings
   424  00FFFF  00                 	db	0	; dummy byte at the end
   425  0000                     
   426                           	psect	cinit
   427  010F16                     __pcinit:
   428                           	opt stack 0
   429  010F16                     start_initialization:
   430                           	opt stack 0
   431  010F16                     __initialization:
   432                           	opt stack 0
   433                           
   434                           ; Clear objects allocated to BANK0 (20 bytes)
   435  010F16  EE00  F060         	lfsr	0,__pbssBANK0
   436  010F1A  0E14               	movlw	20
   437  010F1C                     clear_0:
   438  010F1C  6AEE               	clrf	postinc0,c
   439  010F1E  06E8               	decf	wreg,f,c
   440  010F20  E1FD               	bnz	clear_0
   441                           
   442                           ; Clear objects allocated to COMRAM (26 bytes)
   443  010F22  EE00  F036         	lfsr	0,__pbssCOMRAM
   444  010F26  0E1A               	movlw	26
   445  010F28                     clear_1:
   446  010F28  6AEE               	clrf	postinc0,c
   447  010F2A  06E8               	decf	wreg,f,c
   448  010F2C  E1FD               	bnz	clear_1
   449  010F2E                     end_of_initialization:
   450                           	opt stack 0
   451  010F2E                     __end_of__initialization:
   452                           	opt stack 0
   453  010F2E  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   454  010F30  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   455  010F32  0100               	movlb	0
   456  010F34  EFB1  F086         	goto	_main	;jump to C main() function
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           
   460                           	psect	bssCOMRAM
   461  000036                     __pbssCOMRAM:
   462                           	opt stack 0
   463  000036                     _value:
   464                           	opt stack 0
   465  000036                     	ds	3
   466  000039                     _shouldClearLcd:
   467                           	opt stack 0
   468  000039                     	ds	2
   469  00003B                     _outTemp:
   470                           	opt stack 0
   471  00003B                     	ds	2
   472  00003D                     _inTemp:
   473                           	opt stack 0
   474  00003D                     	ds	2
   475  00003F                     SWSPIWrite@input:
   476                           	opt stack 0
   477  00003F                     	ds	1
   478  000040                     _a:
   479                           	opt stack 0
   480  000040                     	ds	1
   481  000041                     checkInputs@leftButton_old:
   482                           	opt stack 0
   483  000041                     	ds	1
   484  000042                     _inDeb:
   485                           	opt stack 0
   486  000042                     	ds	1
   487  000043                     _cnt:
   488                           	opt stack 0
   489  000043                     	ds	1
   490  000044                     _ev:
   491                           	opt stack 0
   492  000044                     	ds	1
   493  000045                     _tick:
   494                           	opt stack 0
   495  000045                     	ds	1
   496  000046                     _setTemp:
   497                           	opt stack 0
   498  000046                     	ds	1
   499  000047                     _leftButtonEv:
   500                           	opt stack 0
   501  000047                     	ds	1
   502  000048                     _lcdBacklightLed:
   503                           	opt stack 0
   504  000048                     	ds	1
   505  000049                     _standbyLed:
   506                           	opt stack 0
   507  000049                     	ds	1
   508  00004A                     _coolElement:
   509                           	opt stack 0
   510  00004A                     	ds	1
   511  00004B                     _heatElement:
   512                           	opt stack 0
   513  00004B                     	ds	1
   514  00004C                     _levelHeat:
   515                           	opt stack 0
   516  00004C                     	ds	1
   517  00004D                     _fanSpeedHeatVent:
   518                           	opt stack 0
   519  00004D                     	ds	1
   520  00004E                     _fanSpeedCool:
   521                           	opt stack 0
   522  00004E                     	ds	1
   523  00004F                     _climaState:
   524                           	opt stack 0
   525  00004F                     	ds	1
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           
   529                           	psect	bssBANK0
   530  000060                     __pbssBANK0:
   531                           	opt stack 0
   532  000060                     _msg:
   533                           	opt stack 0
   534  000060                     	ds	20
   535                           postinc0	equ	0xFEE
   536                           wreg	equ	0xFE8
   537                           
   538                           	psect	cstackBANK0
   539  000074                     __pcstackBANK0:
   540                           	opt stack 0
   541  000074                     sprintf@ap:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x0
   545  000074                     	ds	2
   546  000076                     sprintf@prec:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x2
   550  000076                     	ds	1
   551  000077                     sprintf@val:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x3
   555  000077                     	ds	2
   556  000079                     sprintf@flag:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x5
   560  000079                     	ds	1
   561  00007A                     sprintf@width:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x6
   565  00007A                     	ds	2
   566  00007C                     sprintf@c:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x8
   570  00007C                     	ds	1
   571  00007D                     main@i:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x9
   575  00007D                     	ds	1
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           
   579                           	psect	cstackCOMRAM
   580  000001                     __pcstackCOMRAM:
   581                           	opt stack 0
   582  000001                     ??_ISR:
   583  000001                     
   584                           ; 1 bytes @ 0x0
   585  000001                     	ds	15
   586  000010                     ??_isdigit:
   587  000010                     ?_ADCRead:
   588                           	opt stack 0
   589  000010                     ?___wmul:
   590                           	opt stack 0
   591  000010                     ?___ftpack:
   592                           	opt stack 0
   593  000010                     ?___fttol:
   594                           	opt stack 0
   595  000010                     setSpeedFanCool@speed:
   596                           	opt stack 0
   597  000010                     setSpeedFanHeatVent@speed:
   598                           	opt stack 0
   599  000010                     SWSPIWrite@output:
   600                           	opt stack 0
   601  000010                     UART_putc@data:
   602                           	opt stack 0
   603  000010                     Delay10TCYx@unit:
   604                           	opt stack 0
   605  000010                     setStandbyLed@state:
   606                           	opt stack 0
   607  000010                     setLcdBacklightLed@state:
   608                           	opt stack 0
   609  000010                     setHeatElement@state:
   610                           	opt stack 0
   611  000010                     setCoolElement@state:
   612                           	opt stack 0
   613  000010                     UART_Init@x:
   614                           	opt stack 0
   615  000010                     ___wmul@multiplier:
   616                           	opt stack 0
   617  000010                     ___ftpack@arg:
   618                           	opt stack 0
   619  000010                     ___fttol@f1:
   620                           	opt stack 0
   621                           
   622                           ; 3 bytes @ 0xF
   623  000010                     	ds	1
   624  000011                     SWSPIWrite@BitCount:
   625                           	opt stack 0
   626  000011                     _isdigit$1784:
   627                           	opt stack 0
   628  000011                     UART_puts@s:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x10
   632  000011                     	ds	1
   633  000012                     ??_ADCRead:
   634  000012                     setGPIO@value:
   635                           	opt stack 0
   636  000012                     setIODIR@dir:
   637                           	opt stack 0
   638  000012                     isdigit@c:
   639                           	opt stack 0
   640  000012                     ___wmul@multiplicand:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x11
   644  000012                     	ds	1
   645  000013                     ADCRead@ch:
   646                           	opt stack 0
   647  000013                     setGPIO@address:
   648                           	opt stack 0
   649  000013                     setIODIR@address:
   650                           	opt stack 0
   651  000013                     ___ftpack@exp:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x12
   655  000013                     	ds	1
   656  000014                     ??___fttol:
   657  000014                     lcdCommand@command:
   658                           	opt stack 0
   659  000014                     LcdChar@letter:
   660                           	opt stack 0
   661  000014                     ___ftpack@sign:
   662                           	opt stack 0
   663  000014                     ___wmul@product:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x13
   667  000014                     	ds	1
   668  000015                     ??___ftpack:
   669  000015                     LcdGoTo@pos:
   670                           	opt stack 0
   671  000015                     LcdWriteString@s:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x14
   675  000015                     	ds	1
   676  000016                     ?___lwdiv:
   677                           	opt stack 0
   678  000016                     ___lwdiv@dividend:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x15
   682  000016                     	ds	1
   683  000017                     
   684                           ; 1 bytes @ 0x16
   685  000017                     	ds	1
   686  000018                     ?___lwtoft:
   687                           	opt stack 0
   688  000018                     ___lwdiv@divisor:
   689                           	opt stack 0
   690  000018                     ___lwtoft@c:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x17
   694  000018                     	ds	1
   695  000019                     ___fttol@sign1:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x18
   699  000019                     	ds	1
   700  00001A                     ___lwdiv@counter:
   701                           	opt stack 0
   702  00001A                     ___fttol@lval:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x19
   706  00001A                     	ds	1
   707  00001B                     ___lwdiv@quotient:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x1A
   711  00001B                     	ds	2
   712  00001D                     ?___lwmod:
   713                           	opt stack 0
   714  00001D                     ___lwmod@dividend:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x1C
   718  00001D                     	ds	1
   719  00001E                     ___fttol@exp1:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x1D
   723  00001E                     	ds	1
   724  00001F                     ___lwmod@divisor:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x1E
   728  00001F                     	ds	2
   729  000021                     ___lwmod@counter:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x20
   733  000021                     	ds	1
   734  000022                     ?_sprintf:
   735                           	opt stack 0
   736  000022                     sprintf@sp:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x21
   740  000022                     	ds	2
   741  000024                     sprintf@f:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x23
   745  000024                     	ds	8
   746  00002C                     ??_sprintf:
   747                           
   748                           ; 1 bytes @ 0x2B
   749  00002C                     	ds	4
   750  000030                     ??_checkInputs:
   751  000030                     updateLcd@fanSpeed:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x2F
   755  000030                     	ds	1
   756  000031                     ??_stateMachine:
   757                           
   758                           ; 1 bytes @ 0x30
   759  000031                     	ds	2
   760  000033                     checkInputs@leftButton:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x32
   764  000033                     	ds	1
   765  000034                     checkInputs@adcVal:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x33
   769  000034                     	ds	2
   770  000036                     postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           
   773                           ; 1 bytes @ 0x35
   774 ;;
   775 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   776 ;;
   777 ;; *************** function _main *****************
   778 ;; Defined at:
   779 ;;		line 761 in file "clima.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;  i               1    9[BANK0 ] unsigned char 
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   796 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;Total ram usage:        1 bytes
   798 ;; Hardware stack levels required when called:    7
   799 ;; This function calls:
   800 ;;		_checkInputs
   801 ;;		_init
   802 ;;		_stateMachine
   803 ;;		_updateOutputs
   804 ;; This function is called by:
   805 ;;		Startup code after reset
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text0
   810  010D62                     __ptext0:
   811                           	opt stack 0
   812  010D62                     _main:
   813                           	opt stack 24
   814                           
   815                           ;clima.c: 763: init();
   816                           
   817                           ;incstack = 0
   818  010D62  EC7A  F085         	call	_init	;wreg free
   819                           
   820                           ;clima.c: 764: char i = 0;
   821  010D66  0E00               	movlw	0
   822  010D68  0100               	movlb	0	; () banked
   823  010D6A  6F7D               	movwf	main@i& (0+255),b
   824                           
   825                           ; BSR set to: 0
   826                           ;clima.c: 766: PORTJbits.RJ0 = 0;
   827  010D6C  9088               	bcf	3976,0,c	;volatile
   828                           
   829                           ; BSR set to: 0
   830                           ;clima.c: 767: TRISJbits.TRISJ0 = 0;
   831  010D6E  909A               	bcf	3994,0,c	;volatile
   832                           
   833                           ; BSR set to: 0
   834                           ;clima.c: 768: PORTJbits.RJ1 = 0;
   835  010D70  9288               	bcf	3976,1,c	;volatile
   836                           
   837                           ; BSR set to: 0
   838                           ;clima.c: 769: TRISJbits.TRISJ1 = 0;
   839  010D72  929A               	bcf	3994,1,c	;volatile
   840                           
   841                           ; BSR set to: 0
   842                           ;clima.c: 770: PORTJbits.RJ2 = 0;
   843  010D74  9488               	bcf	3976,2,c	;volatile
   844                           
   845                           ; BSR set to: 0
   846                           ;clima.c: 771: TRISJbits.TRISJ2 = 0;
   847  010D76  949A               	bcf	3994,2,c	;volatile
   848                           
   849                           ; BSR set to: 0
   850                           ;clima.c: 773: TRISD = 0;
   851  010D78  0E00               	movlw	0
   852  010D7A  6E95               	movwf	3989,c	;volatile
   853  010D7C                     l3301:
   854  010D7C  5044               	movf	_ev,w,c
   855  010D7E  B4D8               	btfsc	status,2,c
   856  010D80  D7FD               	goto	l3301
   857                           
   858                           ;clima.c: 779: ev = 0;
   859  010D82  0E00               	movlw	0
   860  010D84  6E44               	movwf	_ev,c
   861                           
   862                           ;clima.c: 781: i++;
   863  010D86  0100               	movlb	0	; () banked
   864  010D88  2B7D               	incf	main@i& (0+255),f,b
   865                           
   866                           ; BSR set to: 0
   867                           ;clima.c: 782: PORTJbits.RJ2 = 1;
   868  010D8A  8488               	bsf	3976,2,c	;volatile
   869                           
   870                           ; BSR set to: 0
   871                           ;clima.c: 784: checkInputs();
   872  010D8C  EC9B  F083         	call	_checkInputs	;wreg free
   873                           
   874                           ;clima.c: 785: stateMachine();
   875  010D90  EC87  F081         	call	_stateMachine	;wreg free
   876                           
   877                           ;clima.c: 786: updateOutputs();
   878  010D94  EC51  F087         	call	_updateOutputs	;wreg free
   879                           
   880                           ;clima.c: 790: leftButtonEv = 0;
   881  010D98  0E00               	movlw	0
   882  010D9A  6E47               	movwf	_leftButtonEv,c
   883                           
   884                           ;clima.c: 792: PORTJbits.RJ2 = 0;
   885  010D9C  9488               	bcf	3976,2,c	;volatile
   886  010D9E  D7EE               	goto	l3301
   887  010DA0                     __end_of_main:
   888                           	opt stack 0
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           status	equ	0xFD8
   892                           
   893 ;; *************** function _updateOutputs *****************
   894 ;; Defined at:
   895 ;;		line 517 in file "clima.c"
   896 ;; Parameters:    Size  Location     Type
   897 ;;		None
   898 ;; Auto vars:     Size  Location     Type
   899 ;;		None
   900 ;; Return value:  Size  Location     Type
   901 ;;                  1    wreg      void 
   902 ;; Registers used:
   903 ;;		None
   904 ;; Tracked objects:
   905 ;;		On entry : 0/0
   906 ;;		On exit  : 0/0
   907 ;;		Unchanged: 0/0
   908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   913 ;;Total ram usage:        0 bytes
   914 ;; Hardware stack levels used:    1
   915 ;; Hardware stack levels required when called:    1
   916 ;; This function calls:
   917 ;;		Nothing
   918 ;; This function is called by:
   919 ;;		_main
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           	psect	text1
   924  010EA2                     __ptext1:
   925                           	opt stack 0
   926  010EA2                     _updateOutputs:
   927                           	opt stack 29
   928                           
   929                           ;clima.c: 520: PORTDbits.RD7 = standbyLed;
   930                           
   931                           ;incstack = 0
   932  010EA2  B049               	btfsc	_standbyLed,0,c
   933  010EA4  D002               	bra	u2605
   934  010EA6  9E83               	bcf	3971,7,c	;volatile
   935  010EA8  D001               	bra	u2606
   936  010EAA                     u2605:
   937  010EAA  8E83               	bsf	3971,7,c	;volatile
   938  010EAC                     u2606:
   939                           
   940                           ;clima.c: 523: PORTDbits.RD6 = lcdBacklightLed;
   941  010EAC  B048               	btfsc	_lcdBacklightLed,0,c
   942  010EAE  D002               	bra	u2615
   943  010EB0  9C83               	bcf	3971,6,c	;volatile
   944  010EB2  D001               	bra	u2616
   945  010EB4                     u2615:
   946  010EB4  8C83               	bsf	3971,6,c	;volatile
   947  010EB6                     u2616:
   948                           
   949                           ;clima.c: 526: PORTDbits.RD1 = coolElement;
   950  010EB6  B04A               	btfsc	_coolElement,0,c
   951  010EB8  D002               	bra	u2625
   952  010EBA  9283               	bcf	3971,1,c	;volatile
   953  010EBC  D001               	bra	u2626
   954  010EBE                     u2625:
   955  010EBE  8283               	bsf	3971,1,c	;volatile
   956  010EC0                     u2626:
   957                           
   958                           ;clima.c: 529: PORTDbits.RD0 = heatElement;
   959  010EC0  B04B               	btfsc	_heatElement,0,c
   960  010EC2  D002               	bra	u2635
   961  010EC4  9083               	bcf	3971,0,c	;volatile
   962  010EC6  D001               	bra	u2636
   963  010EC8                     u2635:
   964  010EC8  8083               	bsf	3971,0,c	;volatile
   965  010ECA                     u2636:
   966  010ECA  0012               	return		;funcret
   967  010ECC                     __end_of_updateOutputs:
   968                           	opt stack 0
   969                           postinc0	equ	0xFEE
   970                           wreg	equ	0xFE8
   971                           status	equ	0xFD8
   972                           
   973 ;; *************** function _stateMachine *****************
   974 ;; Defined at:
   975 ;;		line 403 in file "clima.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;		None
   978 ;; Auto vars:     Size  Location     Type
   979 ;;  err             1    0        unsigned char 
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      void 
   982 ;; Registers used:
   983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   993 ;;Total ram usage:        2 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; Hardware stack levels required when called:    6
   996 ;; This function calls:
   997 ;;		___fttol
   998 ;;		___lwtoft
   999 ;;		_getOnOffButton
  1000 ;;		_setCoolElement
  1001 ;;		_setHeatElement
  1002 ;;		_setLcdBacklightLed
  1003 ;;		_setSpeedFanCool
  1004 ;;		_setSpeedFanHeatVent
  1005 ;;		_setStandbyLed
  1006 ;;		_sprintf
  1007 ;;		_updateLcd
  1008 ;; This function is called by:
  1009 ;;		_main
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text2
  1014  01030E                     __ptext2:
  1015                           	opt stack 0
  1016  01030E                     _stateMachine:
  1017                           	opt stack 24
  1018                           
  1019                           ;clima.c: 405: byte err;
  1020                           ;clima.c: 407: ;
  1021                           ;clima.c: 408: sprintf(msg, "HS:%d, HL:%d, CS:%d, ", fanSpeedHeatVent, levelHeat, fanSpe
      +                          edCool);
  1022                           
  1023                           ;incstack = 0
  1024  01030E  0E60               	movlw	low _msg
  1025  010310  6E22               	movwf	sprintf@sp,c
  1026  010312  0E00               	movlw	high _msg
  1027  010314  6E23               	movwf	sprintf@sp+1,c
  1028  010316  0E8F               	movlw	low STR_20
  1029  010318  6E24               	movwf	sprintf@f,c
  1030  01031A  0EFF               	movlw	high STR_20
  1031  01031C  6E25               	movwf	sprintf@f+1,c
  1032  01031E  C04D  F026         	movff	_fanSpeedHeatVent,?_sprintf+4
  1033  010322  6A27               	clrf	?_sprintf+5,c
  1034  010324  C04C  F028         	movff	_levelHeat,?_sprintf+6
  1035  010328  6A29               	clrf	?_sprintf+7,c
  1036  01032A  C04E  F02A         	movff	_fanSpeedCool,?_sprintf+8
  1037  01032E  6A2B               	clrf	?_sprintf+9,c
  1038  010330  EC00  F080         	call	_sprintf	;wreg free
  1039                           
  1040                           ;clima.c: 409: ;
  1041                           ;clima.c: 410: ;
  1042                           ;clima.c: 412: switch (climaState)
  1043  010334  D0FF               	goto	l3247
  1044  010336                     l3163:
  1045                           
  1046                           ;clima.c: 415: {
  1047                           ;clima.c: 417: if (!shouldClearLcd) shouldClearLcd = 1, updateLcd();
  1048  010336  5039               	movf	_shouldClearLcd,w,c
  1049  010338  103A               	iorwf	_shouldClearLcd+1,w,c
  1050  01033A  A4D8               	btfss	status,2,c
  1051  01033C  D006               	goto	l3169
  1052  01033E  0E00               	movlw	0
  1053  010340  6E3A               	movwf	_shouldClearLcd+1,c
  1054  010342  0E01               	movlw	1
  1055  010344  6E39               	movwf	_shouldClearLcd,c
  1056  010346  ECA8  F082         	call	_updateLcd	;wreg free
  1057  01034A                     l3169:
  1058                           
  1059                           ;clima.c: 420: setStandbyLed(1);
  1060  01034A  0E00               	movlw	0
  1061  01034C  6E11               	movwf	setStandbyLed@state+1,c
  1062  01034E  0E01               	movlw	1
  1063  010350  6E10               	movwf	setStandbyLed@state,c
  1064  010352  EC15  F088         	call	_setStandbyLed	;wreg free
  1065                           
  1066                           ;clima.c: 421: setLcdBacklightLed(1);
  1067  010356  0E00               	movlw	0
  1068  010358  6E11               	movwf	setLcdBacklightLed@state+1,c
  1069  01035A  0E01               	movlw	1
  1070  01035C  6E10               	movwf	setLcdBacklightLed@state,c
  1071  01035E  EC0F  F088         	call	_setLcdBacklightLed	;wreg free
  1072                           
  1073                           ;clima.c: 422: setHeatElement(0);
  1074  010362  0E00               	movlw	0
  1075  010364  6E11               	movwf	setHeatElement@state+1,c
  1076  010366  0E00               	movlw	0
  1077  010368  6E10               	movwf	setHeatElement@state,c
  1078  01036A  EC18  F088         	call	_setHeatElement	;wreg free
  1079                           
  1080                           ;clima.c: 423: setCoolElement(0);
  1081  01036E  0E00               	movlw	0
  1082  010370  6E11               	movwf	setCoolElement@state+1,c
  1083  010372  0E00               	movlw	0
  1084  010374  6E10               	movwf	setCoolElement@state,c
  1085  010376  EC12  F088         	call	_setCoolElement	;wreg free
  1086                           
  1087                           ;clima.c: 426: setSpeedFanCool(0);
  1088  01037A  0E00               	movlw	0
  1089  01037C  ECE0  F087         	call	_setSpeedFanCool
  1090                           
  1091                           ;clima.c: 427: setSpeedFanHeatVent(0);
  1092  010380  0E00               	movlw	0
  1093  010382  ECD7  F087         	call	_setSpeedFanHeatVent
  1094                           
  1095                           ;clima.c: 430: if ( getOnOffButton())
  1096  010386  EC1B  F088         	call	_getOnOffButton	;wreg free
  1097  01038A  0900               	iorlw	0
  1098  01038C  B4D8               	btfsc	status,2,c
  1099  01038E  0012               	return	
  1100                           
  1101                           ;clima.c: 431: climaState = STATE_ON_VENT, shouldClearLcd = 0;
  1102  010390  0E03               	movlw	3
  1103  010392  6E4F               	movwf	_climaState,c
  1104  010394  0E00               	movlw	0
  1105  010396  6E3A               	movwf	_shouldClearLcd+1,c
  1106  010398  0E00               	movlw	0
  1107  01039A  6E39               	movwf	_shouldClearLcd,c
  1108                           
  1109                           ;clima.c: 433: break;
  1110  01039C  0012               	return	
  1111  01039E                     l3185:
  1112                           
  1113                           ;clima.c: 436: {
  1114                           ;clima.c: 438: updateLcd();
  1115  01039E  ECA8  F082         	call	_updateLcd	;wreg free
  1116                           
  1117                           ;clima.c: 440: setHeatElement(0);
  1118  0103A2  0E00               	movlw	0
  1119  0103A4  6E11               	movwf	setHeatElement@state+1,c
  1120  0103A6  0E00               	movlw	0
  1121  0103A8  6E10               	movwf	setHeatElement@state,c
  1122  0103AA  EC18  F088         	call	_setHeatElement	;wreg free
  1123                           
  1124                           ;clima.c: 441: setCoolElement(1);
  1125  0103AE  0E00               	movlw	0
  1126  0103B0  6E11               	movwf	setCoolElement@state+1,c
  1127  0103B2  0E01               	movlw	1
  1128  0103B4  6E10               	movwf	setCoolElement@state,c
  1129  0103B6  EC12  F088         	call	_setCoolElement	;wreg free
  1130                           
  1131                           ;clima.c: 443: value = (inTemp - setTemp);
  1132  0103BA  5046               	movf	_setTemp,w,c
  1133  0103BC  6E31               	movwf	??_stateMachine& (0+255),c
  1134  0103BE  6A32               	clrf	(??_stateMachine+1)& (0+255),c
  1135  0103C0  1E31               	comf	??_stateMachine,f,c
  1136  0103C2  1E32               	comf	??_stateMachine+1,f,c
  1137  0103C4  4A31               	infsnz	??_stateMachine,f,c
  1138  0103C6  2A32               	incf	??_stateMachine+1,f,c
  1139  0103C8  503D               	movf	_inTemp,w,c
  1140  0103CA  2431               	addwf	??_stateMachine,w,c
  1141  0103CC  6E18               	movwf	___lwtoft@c,c
  1142  0103CE  503E               	movf	_inTemp+1,w,c
  1143  0103D0  2032               	addwfc	??_stateMachine+1,w,c
  1144  0103D2  6E19               	movwf	___lwtoft@c+1,c
  1145  0103D4  EC79  F087         	call	___lwtoft	;wreg free
  1146  0103D8  C018  F036         	movff	?___lwtoft,_value
  1147  0103DC  C019  F037         	movff	?___lwtoft+1,_value+1
  1148  0103E0  C01A  F038         	movff	?___lwtoft+2,_value+2
  1149                           
  1150                           ;clima.c: 448: if (value == 0) climaState = STATE_ON_VENT, shouldClearLcd = 0;
  1151  0103E4  5036               	movf	_value,w,c
  1152  0103E6  1037               	iorwf	_value+1,w,c
  1153  0103E8  1038               	iorwf	_value+2,w,c
  1154  0103EA  A4D8               	btfss	status,2,c
  1155  0103EC  D006               	goto	l3197
  1156  0103EE  0E03               	movlw	3
  1157  0103F0  6E4F               	movwf	_climaState,c
  1158  0103F2  0E00               	movlw	0
  1159  0103F4  6E3A               	movwf	_shouldClearLcd+1,c
  1160  0103F6  0E00               	movlw	0
  1161  0103F8  6E39               	movwf	_shouldClearLcd,c
  1162  0103FA                     l3197:
  1163                           
  1164                           ;clima.c: 451: setSpeedFanCool(value);
  1165  0103FA  C036  F010         	movff	_value,___fttol@f1
  1166  0103FE  C037  F011         	movff	_value+1,___fttol@f1+1
  1167  010402  C038  F012         	movff	_value+2,___fttol@f1+2
  1168  010406  ECA9  F084         	call	___fttol	;wreg free
  1169  01040A  5010               	movf	?___fttol,w,c
  1170  01040C  ECE0  F087         	call	_setSpeedFanCool
  1171                           
  1172                           ;clima.c: 453: if ( getOnOffButton())
  1173  010410  EC1B  F088         	call	_getOnOffButton	;wreg free
  1174  010414  0900               	iorlw	0
  1175  010416  B4D8               	btfsc	status,2,c
  1176  010418  0012               	return	
  1177                           
  1178                           ;clima.c: 454: climaState = STATE_OFF, shouldClearLcd = 0;
  1179  01041A  0E00               	movlw	0
  1180  01041C  6E4F               	movwf	_climaState,c
  1181  01041E  0E00               	movlw	0
  1182  010420  6E3A               	movwf	_shouldClearLcd+1,c
  1183  010422  0E00               	movlw	0
  1184  010424  6E39               	movwf	_shouldClearLcd,c
  1185                           
  1186                           ;clima.c: 457: break;
  1187  010426  0012               	return	
  1188  010428                     l3203:
  1189                           
  1190                           ;clima.c: 460: {
  1191                           ;clima.c: 462: updateLcd();
  1192  010428  ECA8  F082         	call	_updateLcd	;wreg free
  1193                           
  1194                           ;clima.c: 463: setHeatElement(1);
  1195  01042C  0E00               	movlw	0
  1196  01042E  6E11               	movwf	setHeatElement@state+1,c
  1197  010430  0E01               	movlw	1
  1198  010432  6E10               	movwf	setHeatElement@state,c
  1199  010434  EC18  F088         	call	_setHeatElement	;wreg free
  1200                           
  1201                           ;clima.c: 464: setCoolElement(0);
  1202  010438  0E00               	movlw	0
  1203  01043A  6E11               	movwf	setCoolElement@state+1,c
  1204  01043C  0E00               	movlw	0
  1205  01043E  6E10               	movwf	setCoolElement@state,c
  1206  010440  EC12  F088         	call	_setCoolElement	;wreg free
  1207                           
  1208                           ;clima.c: 466: value = setTemp - inTemp;
  1209  010444  C03D  F031         	movff	_inTemp,??_stateMachine
  1210  010448  C03E  F032         	movff	_inTemp+1,??_stateMachine+1
  1211  01044C  1E31               	comf	??_stateMachine,f,c
  1212  01044E  1E32               	comf	??_stateMachine+1,f,c
  1213  010450  4A31               	infsnz	??_stateMachine,f,c
  1214  010452  2A32               	incf	??_stateMachine+1,f,c
  1215  010454  5046               	movf	_setTemp,w,c
  1216  010456  2431               	addwf	??_stateMachine,w,c
  1217  010458  6E18               	movwf	___lwtoft@c,c
  1218  01045A  0E00               	movlw	0
  1219  01045C  2032               	addwfc	??_stateMachine+1,w,c
  1220  01045E  6E19               	movwf	___lwtoft@c+1,c
  1221  010460  EC79  F087         	call	___lwtoft	;wreg free
  1222  010464  C018  F036         	movff	?___lwtoft,_value
  1223  010468  C019  F037         	movff	?___lwtoft+1,_value+1
  1224  01046C  C01A  F038         	movff	?___lwtoft+2,_value+2
  1225                           
  1226                           ;clima.c: 471: if (value == 0) climaState = STATE_ON_VENT, shouldClearLcd = 0;
  1227  010470  5036               	movf	_value,w,c
  1228  010472  1037               	iorwf	_value+1,w,c
  1229  010474  1038               	iorwf	_value+2,w,c
  1230  010476  A4D8               	btfss	status,2,c
  1231  010478  D006               	goto	l3215
  1232  01047A  0E03               	movlw	3
  1233  01047C  6E4F               	movwf	_climaState,c
  1234  01047E  0E00               	movlw	0
  1235  010480  6E3A               	movwf	_shouldClearLcd+1,c
  1236  010482  0E00               	movlw	0
  1237  010484  6E39               	movwf	_shouldClearLcd,c
  1238  010486                     l3215:
  1239                           
  1240                           ;clima.c: 473: setSpeedFanHeatVent(value);
  1241  010486  C036  F010         	movff	_value,___fttol@f1
  1242  01048A  C037  F011         	movff	_value+1,___fttol@f1+1
  1243  01048E  C038  F012         	movff	_value+2,___fttol@f1+2
  1244  010492  ECA9  F084         	call	___fttol	;wreg free
  1245  010496  5010               	movf	?___fttol,w,c
  1246  010498  ECD7  F087         	call	_setSpeedFanHeatVent
  1247                           
  1248                           ;clima.c: 475: if ( getOnOffButton())
  1249  01049C  EC1B  F088         	call	_getOnOffButton	;wreg free
  1250  0104A0  0900               	iorlw	0
  1251  0104A2  B4D8               	btfsc	status,2,c
  1252  0104A4  0012               	return	
  1253                           
  1254                           ;clima.c: 476: climaState = STATE_OFF, shouldClearLcd = 0;
  1255  0104A6  0E00               	movlw	0
  1256  0104A8  6E4F               	movwf	_climaState,c
  1257  0104AA  0E00               	movlw	0
  1258  0104AC  6E3A               	movwf	_shouldClearLcd+1,c
  1259  0104AE  0E00               	movlw	0
  1260  0104B0  6E39               	movwf	_shouldClearLcd,c
  1261                           
  1262                           ;clima.c: 478: break;
  1263  0104B2  0012               	return	
  1264  0104B4                     l3221:
  1265                           
  1266                           ;clima.c: 482: {
  1267                           ;clima.c: 484: updateLcd();
  1268  0104B4  ECA8  F082         	call	_updateLcd	;wreg free
  1269                           
  1270                           ;clima.c: 486: setLcdBacklightLed(0);
  1271  0104B8  0E00               	movlw	0
  1272  0104BA  6E11               	movwf	setLcdBacklightLed@state+1,c
  1273  0104BC  0E00               	movlw	0
  1274  0104BE  6E10               	movwf	setLcdBacklightLed@state,c
  1275  0104C0  EC0F  F088         	call	_setLcdBacklightLed	;wreg free
  1276                           
  1277                           ;clima.c: 487: setStandbyLed(1);
  1278  0104C4  0E00               	movlw	0
  1279  0104C6  6E11               	movwf	setStandbyLed@state+1,c
  1280  0104C8  0E01               	movlw	1
  1281  0104CA  6E10               	movwf	setStandbyLed@state,c
  1282  0104CC  EC15  F088         	call	_setStandbyLed	;wreg free
  1283                           
  1284                           ;clima.c: 489: setHeatElement(0);
  1285  0104D0  0E00               	movlw	0
  1286  0104D2  6E11               	movwf	setHeatElement@state+1,c
  1287  0104D4  0E00               	movlw	0
  1288  0104D6  6E10               	movwf	setHeatElement@state,c
  1289  0104D8  EC18  F088         	call	_setHeatElement	;wreg free
  1290                           
  1291                           ;clima.c: 490: setCoolElement(0);
  1292  0104DC  0E00               	movlw	0
  1293  0104DE  6E11               	movwf	setCoolElement@state+1,c
  1294  0104E0  0E00               	movlw	0
  1295  0104E2  6E10               	movwf	setCoolElement@state,c
  1296  0104E4  EC12  F088         	call	_setCoolElement	;wreg free
  1297                           
  1298                           ;clima.c: 492: setSpeedFanHeatVent(1);
  1299  0104E8  0E01               	movlw	1
  1300  0104EA  ECD7  F087         	call	_setSpeedFanHeatVent
  1301                           
  1302                           ;clima.c: 495: if (inTemp > setTemp) climaState = STATE_ON_COOL, shouldClearLcd = 0;
  1303  0104EE  5046               	movf	_setTemp,w,c
  1304  0104F0  6E31               	movwf	??_stateMachine& (0+255),c
  1305  0104F2  6A32               	clrf	(??_stateMachine+1)& (0+255),c
  1306  0104F4  503D               	movf	_inTemp,w,c
  1307  0104F6  5C31               	subwf	??_stateMachine,w,c
  1308  0104F8  503E               	movf	_inTemp+1,w,c
  1309  0104FA  5832               	subwfb	??_stateMachine+1,w,c
  1310  0104FC  B0D8               	btfsc	status,0,c
  1311  0104FE  D002               	goto	l3237
  1312  010500  0E01               	movlw	1
  1313  010502  D007               	goto	L1
  1314  010504                     l3237:
  1315                           
  1316                           ;clima.c: 496: else if (inTemp < setTemp) climaState = STATE_ON_HEAT, shouldClearLcd = 0
      +                          ;
  1317  010504  5046               	movf	_setTemp,w,c
  1318  010506  5C3D               	subwf	_inTemp,w,c
  1319  010508  0E00               	movlw	0
  1320  01050A  583E               	subwfb	_inTemp+1,w,c
  1321  01050C  B0D8               	btfsc	status,0,c
  1322  01050E  D006               	goto	l3241
  1323  010510  0E02               	movlw	2
  1324  010512                     L1:
  1325  010512  6E4F               	movwf	_climaState,c
  1326  010514  0E00               	movlw	0
  1327  010516  6E3A               	movwf	_shouldClearLcd+1,c
  1328  010518  0E00               	movlw	0
  1329  01051A  6E39               	movwf	_shouldClearLcd,c
  1330  01051C                     l3241:
  1331                           
  1332                           ;clima.c: 499: if ( getOnOffButton())
  1333  01051C  EC1B  F088         	call	_getOnOffButton	;wreg free
  1334  010520  0900               	iorlw	0
  1335  010522  B4D8               	btfsc	status,2,c
  1336  010524  0012               	return	
  1337                           
  1338                           ;clima.c: 500: climaState = STATE_OFF, shouldClearLcd = 0;
  1339  010526  0E00               	movlw	0
  1340  010528  6E4F               	movwf	_climaState,c
  1341  01052A  0E00               	movlw	0
  1342  01052C  6E3A               	movwf	_shouldClearLcd+1,c
  1343  01052E  0E00               	movlw	0
  1344  010530  6E39               	movwf	_shouldClearLcd,c
  1345                           
  1346                           ;clima.c: 508: }
  1347                           ;clima.c: 509: }
  1348                           
  1349                           ;clima.c: 506: {
  1350                           ;clima.c: 507: break;
  1351                           
  1352                           ;clima.c: 504: }
  1353                           ;clima.c: 505: default:
  1354                           
  1355                           ;clima.c: 503: break;
  1356  010532  0012               	return	
  1357  010534                     l3247:
  1358  010534  504F               	movf	_climaState,w,c
  1359                           
  1360                           ; Switch size 1, requested type "space"
  1361                           ; Number of cases is 4, Range of values is 0 to 3
  1362                           ; switch strategies available:
  1363                           ; Name         Instructions Cycles
  1364                           ; simple_byte           13     7 (average)
  1365                           ;	Chosen strategy is simple_byte
  1366  010536  0A00               	xorlw	0	; case 0
  1367  010538  B4D8               	btfsc	status,2,c
  1368  01053A  D6FD               	goto	l3163
  1369  01053C  0A01               	xorlw	1	; case 1
  1370  01053E  B4D8               	btfsc	status,2,c
  1371  010540  D72E               	goto	l3185
  1372  010542  0A03               	xorlw	3	; case 2
  1373  010544  B4D8               	btfsc	status,2,c
  1374  010546  D770               	goto	l3203
  1375  010548  0A01               	xorlw	1	; case 3
  1376  01054A  A4D8               	btfss	status,2,c
  1377  01054C  0012               	return	
  1378  01054E  D7B2               	goto	l3221
  1379  010550                     __end_of_stateMachine:
  1380                           	opt stack 0
  1381                           postinc0	equ	0xFEE
  1382                           wreg	equ	0xFE8
  1383                           status	equ	0xFD8
  1384                           
  1385 ;; *************** function _updateLcd *****************
  1386 ;; Defined at:
  1387 ;;		line 239 in file "clima.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  fanSpeed        1   47[COMRAM] unsigned char 
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1405 ;;Total ram usage:        1 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    5
  1408 ;; This function calls:
  1409 ;;		_LcdClear
  1410 ;;		_LcdGoTo
  1411 ;;		_LcdWriteString
  1412 ;;		_sprintf
  1413 ;; This function is called by:
  1414 ;;		_stateMachine
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           	psect	text3
  1419  010550                     __ptext3:
  1420                           	opt stack 0
  1421  010550                     _updateLcd:
  1422                           	opt stack 24
  1423                           
  1424                           ;clima.c: 242: byte fanSpeed = 0;
  1425                           
  1426                           ;incstack = 0
  1427  010550  0E00               	movlw	0
  1428  010552  6E30               	movwf	updateLcd@fanSpeed,c
  1429                           
  1430                           ;clima.c: 246: if (climaState != STATE_OFF)
  1431  010554  504F               	movf	_climaState,w,c
  1432  010556  B4D8               	btfsc	status,2,c
  1433  010558  0012               	return	
  1434                           
  1435                           ;clima.c: 247: {
  1436                           ;clima.c: 249: if (!shouldClearLcd) shouldClearLcd = 1, LcdClear();
  1437  01055A  5039               	movf	_shouldClearLcd,w,c
  1438  01055C  103A               	iorwf	_shouldClearLcd+1,w,c
  1439  01055E  A4D8               	btfss	status,2,c
  1440  010560  D006               	goto	l2897
  1441  010562  0E00               	movlw	0
  1442  010564  6E3A               	movwf	_shouldClearLcd+1,c
  1443  010566  0E01               	movlw	1
  1444  010568  6E39               	movwf	_shouldClearLcd,c
  1445  01056A  EC0B  F088         	call	_LcdClear	;wreg free
  1446  01056E                     l2897:
  1447                           
  1448                           ;clima.c: 251: sprintf(msg, "%02d", outTemp);
  1449  01056E  0E60               	movlw	low _msg
  1450  010570  6E22               	movwf	sprintf@sp,c
  1451  010572  0E00               	movlw	high _msg
  1452  010574  6E23               	movwf	sprintf@sp+1,c
  1453  010576  0EE4               	movlw	low STR_1
  1454  010578  6E24               	movwf	sprintf@f,c
  1455  01057A  0EFF               	movlw	high STR_1
  1456  01057C  6E25               	movwf	sprintf@f+1,c
  1457  01057E  C03B  F026         	movff	_outTemp,?_sprintf+4
  1458  010582  C03C  F027         	movff	_outTemp+1,?_sprintf+5
  1459  010586  EC00  F080         	call	_sprintf	;wreg free
  1460                           
  1461                           ;clima.c: 253: LcdGoTo(0x00+4);
  1462  01058A  0E04               	movlw	4
  1463  01058C  EC01  F088         	call	_LcdGoTo
  1464                           
  1465                           ;clima.c: 254: LcdWriteString(msg);
  1466  010590  0E60               	movlw	low _msg
  1467  010592  6E15               	movwf	LcdWriteString@s,c
  1468  010594  0E00               	movlw	high _msg
  1469  010596  6E16               	movwf	LcdWriteString@s+1,c
  1470  010598  ECAE  F085         	call	_LcdWriteString	;wreg free
  1471                           
  1472                           ;clima.c: 257: sprintf(msg, "%02d", inTemp);
  1473  01059C  0E60               	movlw	low _msg
  1474  01059E  6E22               	movwf	sprintf@sp,c
  1475  0105A0  0E00               	movlw	high _msg
  1476  0105A2  6E23               	movwf	sprintf@sp+1,c
  1477  0105A4  0EE4               	movlw	low STR_1
  1478  0105A6  6E24               	movwf	sprintf@f,c
  1479  0105A8  0EFF               	movlw	high STR_1
  1480  0105AA  6E25               	movwf	sprintf@f+1,c
  1481  0105AC  C03D  F026         	movff	_inTemp,?_sprintf+4
  1482  0105B0  C03E  F027         	movff	_inTemp+1,?_sprintf+5
  1483  0105B4  EC00  F080         	call	_sprintf	;wreg free
  1484                           
  1485                           ;clima.c: 258: LcdGoTo(0x00+12);
  1486  0105B8  0E0C               	movlw	12
  1487  0105BA  EC01  F088         	call	_LcdGoTo
  1488                           
  1489                           ;clima.c: 259: LcdWriteString(msg);
  1490  0105BE  0E60               	movlw	low _msg
  1491  0105C0  6E15               	movwf	LcdWriteString@s,c
  1492  0105C2  0E00               	movlw	high _msg
  1493  0105C4  6E16               	movwf	LcdWriteString@s+1,c
  1494  0105C6  ECAE  F085         	call	_LcdWriteString	;wreg free
  1495                           
  1496                           ;clima.c: 262: LcdGoTo(0x40);
  1497  0105CA  0E40               	movlw	64
  1498  0105CC  EC01  F088         	call	_LcdGoTo
  1499                           
  1500                           ;clima.c: 263: if (climaState == STATE_ON_COOL)
  1501  0105D0  044F               	decf	_climaState,w,c
  1502  0105D2  A4D8               	btfss	status,2,c
  1503  0105D4  D007               	goto	l2915
  1504                           
  1505                           ;clima.c: 264: LcdWriteString("Rece");
  1506  0105D6  0EEE               	movlw	low STR_3
  1507  0105D8  6E15               	movwf	LcdWriteString@s,c
  1508  0105DA  0EFF               	movlw	high STR_3
  1509  0105DC  6E16               	movwf	LcdWriteString@s+1,c
  1510  0105DE  ECAE  F085         	call	_LcdWriteString	;wreg free
  1511  0105E2  D015               	goto	l2923
  1512  0105E4                     l2915:
  1513                           
  1514                           ;clima.c: 265: else if (climaState == STATE_ON_HEAT)
  1515  0105E4  0E02               	movlw	2
  1516  0105E6  184F               	xorwf	_climaState,w,c
  1517  0105E8  A4D8               	btfss	status,2,c
  1518  0105EA  D007               	goto	l2919
  1519                           
  1520                           ;clima.c: 266: LcdWriteString("Cald");
  1521  0105EC  0EE9               	movlw	low STR_4
  1522  0105EE  6E15               	movwf	LcdWriteString@s,c
  1523  0105F0  0EFF               	movlw	high STR_4
  1524  0105F2  6E16               	movwf	LcdWriteString@s+1,c
  1525  0105F4  ECAE  F085         	call	_LcdWriteString	;wreg free
  1526  0105F8  D00A               	goto	l2923
  1527  0105FA                     l2919:
  1528                           
  1529                           ;clima.c: 267: else if (climaState == STATE_ON_VENT)
  1530  0105FA  0E03               	movlw	3
  1531  0105FC  184F               	xorwf	_climaState,w,c
  1532  0105FE  A4D8               	btfss	status,2,c
  1533  010600  D006               	goto	l2923
  1534                           
  1535                           ;clima.c: 268: LcdWriteString("Vent");
  1536  010602  0EF3               	movlw	low STR_5
  1537  010604  6E15               	movwf	LcdWriteString@s,c
  1538  010606  0EFF               	movlw	high STR_5
  1539  010608  6E16               	movwf	LcdWriteString@s+1,c
  1540  01060A  ECAE  F085         	call	_LcdWriteString	;wreg free
  1541  01060E                     l2923:
  1542                           
  1543                           ;clima.c: 271: LcdGoTo(0x40+5);
  1544  01060E  0E45               	movlw	69
  1545  010610  EC01  F088         	call	_LcdGoTo
  1546                           
  1547                           ;clima.c: 272: if (climaState == STATE_ON_COOL)
  1548  010614  044F               	decf	_climaState,w,c
  1549  010616  A4D8               	btfss	status,2,c
  1550  010618  D003               	goto	l142
  1551                           
  1552                           ;clima.c: 273: fanSpeed = fanSpeedCool;
  1553  01061A  C04E  F030         	movff	_fanSpeedCool,updateLcd@fanSpeed
  1554  01061E  D002               	goto	l2929
  1555  010620                     l142:
  1556                           
  1557                           ;clima.c: 274: else
  1558                           ;clima.c: 275: fanSpeed = fanSpeedHeatVent;
  1559  010620  C04D  F030         	movff	_fanSpeedHeatVent,updateLcd@fanSpeed
  1560  010624                     l2929:
  1561                           
  1562                           ;clima.c: 277: if (fanSpeed == 4)
  1563  010624  0E04               	movlw	4
  1564  010626  1830               	xorwf	updateLcd@fanSpeed,w,c
  1565  010628  A4D8               	btfss	status,2,c
  1566  01062A  D007               	goto	l2933
  1567                           
  1568                           ;clima.c: 278: LcdWriteString("|....");
  1569  01062C  0EC6               	movlw	low STR_6
  1570  01062E  6E15               	movwf	LcdWriteString@s,c
  1571  010630  0EFF               	movlw	high STR_6
  1572  010632  6E16               	movwf	LcdWriteString@s+1,c
  1573  010634  ECAE  F085         	call	_LcdWriteString	;wreg free
  1574  010638  D027               	goto	l2947
  1575  01063A                     l2933:
  1576                           
  1577                           ;clima.c: 279: else if (fanSpeed == 5)
  1578  01063A  0E05               	movlw	5
  1579  01063C  1830               	xorwf	updateLcd@fanSpeed,w,c
  1580  01063E  A4D8               	btfss	status,2,c
  1581  010640  D007               	goto	l2937
  1582                           
  1583                           ;clima.c: 280: LcdWriteString("||...");
  1584  010642  0ECC               	movlw	low STR_7
  1585  010644  6E15               	movwf	LcdWriteString@s,c
  1586  010646  0EFF               	movlw	high STR_7
  1587  010648  6E16               	movwf	LcdWriteString@s+1,c
  1588  01064A  ECAE  F085         	call	_LcdWriteString	;wreg free
  1589  01064E  D01C               	goto	l2947
  1590  010650                     l2937:
  1591                           
  1592                           ;clima.c: 281: else if (fanSpeed == 6)
  1593  010650  0E06               	movlw	6
  1594  010652  1830               	xorwf	updateLcd@fanSpeed,w,c
  1595  010654  A4D8               	btfss	status,2,c
  1596  010656  D007               	goto	l2941
  1597                           
  1598                           ;clima.c: 282: LcdWriteString("|||..");
  1599  010658  0ED2               	movlw	low STR_8
  1600  01065A  6E15               	movwf	LcdWriteString@s,c
  1601  01065C  0EFF               	movlw	high STR_8
  1602  01065E  6E16               	movwf	LcdWriteString@s+1,c
  1603  010660  ECAE  F085         	call	_LcdWriteString	;wreg free
  1604  010664  D011               	goto	l2947
  1605  010666                     l2941:
  1606                           
  1607                           ;clima.c: 283: else if (fanSpeed == 7)
  1608  010666  0E07               	movlw	7
  1609  010668  1830               	xorwf	updateLcd@fanSpeed,w,c
  1610  01066A  A4D8               	btfss	status,2,c
  1611  01066C  D007               	goto	l2945
  1612                           
  1613                           ;clima.c: 284: LcdWriteString("||||.");
  1614  01066E  0ED8               	movlw	low STR_9
  1615  010670  6E15               	movwf	LcdWriteString@s,c
  1616  010672  0EFF               	movlw	high STR_9
  1617  010674  6E16               	movwf	LcdWriteString@s+1,c
  1618  010676  ECAE  F085         	call	_LcdWriteString	;wreg free
  1619  01067A  D006               	goto	l2947
  1620  01067C                     l2945:
  1621                           
  1622                           ;clima.c: 285: else
  1623                           ;clima.c: 286: LcdWriteString("|||||");
  1624  01067C  0EDE               	movlw	low STR_10
  1625  01067E  6E15               	movwf	LcdWriteString@s,c
  1626  010680  0EFF               	movlw	high STR_10
  1627  010682  6E16               	movwf	LcdWriteString@s+1,c
  1628  010684  ECAE  F085         	call	_LcdWriteString	;wreg free
  1629  010688                     l2947:
  1630                           
  1631                           ;clima.c: 289: sprintf(msg, "%d", setTemp);
  1632  010688  0E60               	movlw	low _msg
  1633  01068A  6E22               	movwf	sprintf@sp,c
  1634  01068C  0E00               	movlw	high _msg
  1635  01068E  6E23               	movwf	sprintf@sp+1,c
  1636  010690  0EF8               	movlw	low STR_11
  1637  010692  6E24               	movwf	sprintf@f,c
  1638  010694  0EFF               	movlw	high STR_11
  1639  010696  6E25               	movwf	sprintf@f+1,c
  1640  010698  C046  F026         	movff	_setTemp,?_sprintf+4
  1641  01069C  6A27               	clrf	?_sprintf+5,c
  1642  01069E  EC00  F080         	call	_sprintf	;wreg free
  1643                           
  1644                           ;clima.c: 290: LcdGoTo(0x40+12);
  1645  0106A2  0E4C               	movlw	76
  1646  0106A4  EC01  F088         	call	_LcdGoTo
  1647                           
  1648                           ;clima.c: 291: LcdWriteString(msg);
  1649  0106A8  0E60               	movlw	low _msg
  1650  0106AA  6E15               	movwf	LcdWriteString@s,c
  1651  0106AC  0E00               	movlw	high _msg
  1652  0106AE  6E16               	movwf	LcdWriteString@s+1,c
  1653  0106B0  ECAE  F085         	call	_LcdWriteString	;wreg free
  1654                           
  1655                           ;clima.c: 293: if (setTemp == 21)
  1656  0106B4  0E15               	movlw	21
  1657  0106B6  1846               	xorwf	_setTemp,w,c
  1658  0106B8  A4D8               	btfss	status,2,c
  1659  0106BA  D013               	goto	l2961
  1660                           
  1661                           ;clima.c: 294: {
  1662                           ;clima.c: 295: LcdGoTo(0x40+11);
  1663  0106BC  0E4B               	movlw	75
  1664  0106BE  EC01  F088         	call	_LcdGoTo
  1665                           
  1666                           ;clima.c: 296: LcdWriteString(" ");
  1667  0106C2  0EA3               	movlw	low (STR_20+20)
  1668  0106C4  6E15               	movwf	LcdWriteString@s,c
  1669  0106C6  0EFF               	movlw	high (STR_20+20)
  1670  0106C8  6E16               	movwf	LcdWriteString@s+1,c
  1671  0106CA  ECAE  F085         	call	_LcdWriteString	;wreg free
  1672                           
  1673                           ;clima.c: 297: LcdGoTo(0x40+15);
  1674  0106CE  0E4F               	movlw	79
  1675  0106D0  EC01  F088         	call	_LcdGoTo
  1676                           
  1677                           ;clima.c: 298: LcdWriteString(">");
  1678  0106D4  0EFD               	movlw	low STR_13
  1679  0106D6  6E15               	movwf	LcdWriteString@s,c
  1680  0106D8  0EFF               	movlw	high STR_13
  1681  0106DA  6E16               	movwf	LcdWriteString@s+1,c
  1682  0106DC  ECAE  F085         	call	_LcdWriteString	;wreg free
  1683                           
  1684                           ;clima.c: 299: }
  1685  0106E0  0012               	return	
  1686  0106E2                     l2961:
  1687                           
  1688                           ;clima.c: 300: else if (setTemp == 21+15)
  1689  0106E2  0E24               	movlw	36
  1690  0106E4  1846               	xorwf	_setTemp,w,c
  1691  0106E6  A4D8               	btfss	status,2,c
  1692  0106E8  D013               	goto	l2969
  1693                           
  1694                           ;clima.c: 301: {
  1695                           ;clima.c: 302: LcdGoTo(0x40+11);
  1696  0106EA  0E4B               	movlw	75
  1697  0106EC  EC01  F088         	call	_LcdGoTo
  1698                           
  1699                           ;clima.c: 303: LcdWriteString("<");
  1700  0106F0  0EFB               	movlw	low STR_14
  1701  0106F2  6E15               	movwf	LcdWriteString@s,c
  1702  0106F4  0EFF               	movlw	high STR_14
  1703  0106F6  6E16               	movwf	LcdWriteString@s+1,c
  1704  0106F8  ECAE  F085         	call	_LcdWriteString	;wreg free
  1705                           
  1706                           ;clima.c: 304: LcdGoTo(0x40+15);
  1707  0106FC  0E4F               	movlw	79
  1708  0106FE  EC01  F088         	call	_LcdGoTo
  1709                           
  1710                           ;clima.c: 305: LcdWriteString(" ");
  1711  010702  0EA3               	movlw	low (STR_20+20)
  1712  010704  6E15               	movwf	LcdWriteString@s,c
  1713  010706  0EFF               	movlw	high (STR_20+20)
  1714  010708  6E16               	movwf	LcdWriteString@s+1,c
  1715  01070A  ECAE  F085         	call	_LcdWriteString	;wreg free
  1716                           
  1717                           ;clima.c: 306: }
  1718  01070E  0012               	return	
  1719  010710                     l2969:
  1720                           
  1721                           ;clima.c: 307: else
  1722                           ;clima.c: 308: {
  1723                           ;clima.c: 309: LcdGoTo(0x40+11);
  1724  010710  0E4B               	movlw	75
  1725  010712  EC01  F088         	call	_LcdGoTo
  1726                           
  1727                           ;clima.c: 310: LcdWriteString("<");
  1728  010716  0EFB               	movlw	low STR_14
  1729  010718  6E15               	movwf	LcdWriteString@s,c
  1730  01071A  0EFF               	movlw	high STR_14
  1731  01071C  6E16               	movwf	LcdWriteString@s+1,c
  1732  01071E  ECAE  F085         	call	_LcdWriteString	;wreg free
  1733                           
  1734                           ;clima.c: 311: LcdGoTo(0x40+15);
  1735  010722  0E4F               	movlw	79
  1736  010724  EC01  F088         	call	_LcdGoTo
  1737                           
  1738                           ;clima.c: 312: LcdWriteString(">");
  1739  010728  0EFD               	movlw	low STR_13
  1740  01072A  6E15               	movwf	LcdWriteString@s,c
  1741  01072C  0EFF               	movlw	high STR_13
  1742  01072E  6E16               	movwf	LcdWriteString@s+1,c
  1743  010730  ECAE  F085         	call	_LcdWriteString	;wreg free
  1744  010734  0012               	return	
  1745  010736                     __end_of_updateLcd:
  1746                           	opt stack 0
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           status	equ	0xFD8
  1750                           
  1751 ;; *************** function _setLcdBacklightLed *****************
  1752 ;; Defined at:
  1753 ;;		line 145 in file "clima.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  state           2   15[COMRAM] unsigned int 
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;		None
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  1    wreg      void 
  1760 ;; Registers used:
  1761 ;;		None
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1767 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1770 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;Total ram usage:        2 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    1
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_stateMachine
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           	psect	text4
  1782  01101E                     __ptext4:
  1783                           	opt stack 0
  1784  01101E                     _setLcdBacklightLed:
  1785                           	opt stack 28
  1786                           
  1787                           ;clima.c: 147: lcdBacklightLed = state;
  1788                           
  1789                           ;incstack = 0
  1790  01101E  C010  F048         	movff	setLcdBacklightLed@state,_lcdBacklightLed
  1791  011022  0012               	return		;funcret
  1792  011024                     __end_of_setLcdBacklightLed:
  1793                           	opt stack 0
  1794                           postinc0	equ	0xFEE
  1795                           wreg	equ	0xFE8
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _setCoolElement *****************
  1799 ;; Defined at:
  1800 ;;		line 165 in file "clima.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  state           2   15[COMRAM] unsigned int 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		None
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1814 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;Total ram usage:        2 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    1
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_stateMachine
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text5
  1829  011024                     __ptext5:
  1830                           	opt stack 0
  1831  011024                     _setCoolElement:
  1832                           	opt stack 28
  1833                           
  1834                           ;clima.c: 167: coolElement = state;
  1835                           
  1836                           ;incstack = 0
  1837  011024  C010  F04A         	movff	setCoolElement@state,_coolElement
  1838  011028  0012               	return		;funcret
  1839  01102A                     __end_of_setCoolElement:
  1840                           	opt stack 0
  1841                           postinc0	equ	0xFEE
  1842                           wreg	equ	0xFE8
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _getOnOffButton *****************
  1846 ;; Defined at:
  1847 ;;		line 209 in file "clima.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      unsigned char 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;Total ram usage:        0 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    1
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_stateMachine
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	text6
  1876  011036                     __ptext6:
  1877                           	opt stack 0
  1878  011036                     _getOnOffButton:
  1879                           	opt stack 28
  1880                           
  1881                           ;clima.c: 211: return leftButtonEv;
  1882                           
  1883                           ;incstack = 0
  1884  011036  5047               	movf	_leftButtonEv,w,c
  1885  011038  0012               	return	
  1886  01103A                     __end_of_getOnOffButton:
  1887                           	opt stack 0
  1888                           postinc0	equ	0xFEE
  1889                           wreg	equ	0xFE8
  1890                           status	equ	0xFD8
  1891                           
  1892 ;; *************** function ___lwtoft *****************
  1893 ;; Defined at:
  1894 ;;		line 28 in file "D:\Hella\Compiler\sources\common\lwtoft.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  c               2   23[COMRAM] unsigned int 
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;		None
  1899 ;; Return value:  Size  Location     Type
  1900 ;;                  3   23[COMRAM] float 
  1901 ;; Registers used:
  1902 ;;		wreg, status,2, status,0, cstack
  1903 ;; Tracked objects:
  1904 ;;		On entry : 0/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1908 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;Total ram usage:        3 bytes
  1913 ;; Hardware stack levels used:    1
  1914 ;; Hardware stack levels required when called:    2
  1915 ;; This function calls:
  1916 ;;		___ftpack
  1917 ;; This function is called by:
  1918 ;;		_stateMachine
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text7
  1923  010EF2                     __ptext7:
  1924                           	opt stack 0
  1925  010EF2                     ___lwtoft:
  1926                           	opt stack 27
  1927                           
  1928                           ;incstack = 0
  1929  010EF2  C018  F010         	movff	___lwtoft@c,___ftpack@arg
  1930  010EF6  C019  F011         	movff	___lwtoft@c+1,___ftpack@arg+1
  1931  010EFA  6A12               	clrf	___ftpack@arg+2,c
  1932  010EFC  0E8E               	movlw	142
  1933  010EFE  6E13               	movwf	___ftpack@exp,c
  1934  010F00  0E00               	movlw	0
  1935  010F02  6E14               	movwf	___ftpack@sign,c
  1936  010F04  EC23  F085         	call	___ftpack	;wreg free
  1937  010F08  C010  F018         	movff	?___ftpack,?___lwtoft
  1938  010F0C  C011  F019         	movff	?___ftpack+1,?___lwtoft+1
  1939  010F10  C012  F01A         	movff	?___ftpack+2,?___lwtoft+2
  1940  010F14  0012               	return	
  1941  010F16                     __end_of___lwtoft:
  1942                           	opt stack 0
  1943                           postinc0	equ	0xFEE
  1944                           wreg	equ	0xFE8
  1945                           status	equ	0xFD8
  1946                           
  1947 ;; *************** function ___ftpack *****************
  1948 ;; Defined at:
  1949 ;;		line 62 in file "D:\Hella\Compiler\sources\common\float.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  arg             3   15[COMRAM] unsigned um
  1952 ;;  exp             1   18[COMRAM] unsigned char 
  1953 ;;  sign            1   19[COMRAM] unsigned char 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;		None
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  3   15[COMRAM] float 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1965 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;Total ram usage:        8 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    1
  1972 ;; This function calls:
  1973 ;;		Nothing
  1974 ;; This function is called by:
  1975 ;;		___lwtoft
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	text8
  1980  010A46                     __ptext8:
  1981                           	opt stack 0
  1982  010A46                     ___ftpack:
  1983                           	opt stack 27
  1984                           
  1985                           ;incstack = 0
  1986  010A46  5013               	movf	___ftpack@exp,w,c
  1987  010A48  B4D8               	btfsc	status,2,c
  1988  010A4A  D005               	goto	l2827
  1989  010A4C  5010               	movf	___ftpack@arg,w,c
  1990  010A4E  1011               	iorwf	___ftpack@arg+1,w,c
  1991  010A50  1012               	iorwf	___ftpack@arg+2,w,c
  1992  010A52  A4D8               	btfss	status,2,c
  1993  010A54  D00C               	goto	l2833
  1994  010A56                     l2827:
  1995  010A56  0E00               	movlw	0
  1996  010A58  6E10               	movwf	?___ftpack,c
  1997  010A5A  0E00               	movlw	0
  1998  010A5C  6E11               	movwf	?___ftpack+1,c
  1999  010A5E  0E00               	movlw	0
  2000  010A60  6E12               	movwf	?___ftpack+2,c
  2001  010A62  0012               	return	
  2002  010A64                     l2831:
  2003  010A64  2A13               	incf	___ftpack@exp,f,c
  2004  010A66  90D8               	bcf	status,0,c
  2005  010A68  3212               	rrcf	___ftpack@arg+2,f,c
  2006  010A6A  3211               	rrcf	___ftpack@arg+1,f,c
  2007  010A6C  3210               	rrcf	___ftpack@arg,f,c
  2008  010A6E                     l2833:
  2009  010A6E  0E00               	movlw	0
  2010  010A70  1410               	andwf	___ftpack@arg,w,c
  2011  010A72  6E15               	movwf	??___ftpack& (0+255),c
  2012  010A74  0E00               	movlw	0
  2013  010A76  1411               	andwf	___ftpack@arg+1,w,c
  2014  010A78  6E16               	movwf	(??___ftpack+1)& (0+255),c
  2015  010A7A  0EFE               	movlw	254
  2016  010A7C  1412               	andwf	___ftpack@arg+2,w,c
  2017  010A7E  6E17               	movwf	(??___ftpack+2)& (0+255),c
  2018  010A80  5015               	movf	??___ftpack,w,c
  2019  010A82  1016               	iorwf	??___ftpack+1,w,c
  2020  010A84  1017               	iorwf	??___ftpack+2,w,c
  2021  010A86  B4D8               	btfsc	status,2,c
  2022  010A88  D00C               	goto	l2839
  2023  010A8A  D7EC               	goto	l2831
  2024  010A8C                     l2835:
  2025  010A8C  2A13               	incf	___ftpack@exp,f,c
  2026  010A8E  0E01               	movlw	1
  2027  010A90  2610               	addwf	___ftpack@arg,f,c
  2028  010A92  0E00               	movlw	0
  2029  010A94  2211               	addwfc	___ftpack@arg+1,f,c
  2030  010A96  0E00               	movlw	0
  2031  010A98  2212               	addwfc	___ftpack@arg+2,f,c
  2032  010A9A  90D8               	bcf	status,0,c
  2033  010A9C  3212               	rrcf	___ftpack@arg+2,f,c
  2034  010A9E  3211               	rrcf	___ftpack@arg+1,f,c
  2035  010AA0  3210               	rrcf	___ftpack@arg,f,c
  2036  010AA2                     l2839:
  2037  010AA2  0E00               	movlw	0
  2038  010AA4  1410               	andwf	___ftpack@arg,w,c
  2039  010AA6  6E15               	movwf	??___ftpack& (0+255),c
  2040  010AA8  0E00               	movlw	0
  2041  010AAA  1411               	andwf	___ftpack@arg+1,w,c
  2042  010AAC  6E16               	movwf	(??___ftpack+1)& (0+255),c
  2043  010AAE  0EFF               	movlw	255
  2044  010AB0  1412               	andwf	___ftpack@arg+2,w,c
  2045  010AB2  6E17               	movwf	(??___ftpack+2)& (0+255),c
  2046  010AB4  5015               	movf	??___ftpack,w,c
  2047  010AB6  1016               	iorwf	??___ftpack+1,w,c
  2048  010AB8  1017               	iorwf	??___ftpack+2,w,c
  2049  010ABA  B4D8               	btfsc	status,2,c
  2050  010ABC  D006               	goto	l2843
  2051  010ABE  D7E6               	goto	l2835
  2052  010AC0                     l2841:
  2053  010AC0  0613               	decf	___ftpack@exp,f,c
  2054  010AC2  90D8               	bcf	status,0,c
  2055  010AC4  3610               	rlcf	___ftpack@arg,f,c
  2056  010AC6  3611               	rlcf	___ftpack@arg+1,f,c
  2057  010AC8  3612               	rlcf	___ftpack@arg+2,f,c
  2058  010ACA                     l2843:
  2059  010ACA  BE11               	btfsc	___ftpack@arg+1,7,c
  2060  010ACC  D003               	goto	l647
  2061  010ACE  0E02               	movlw	2
  2062  010AD0  6013               	cpfslt	___ftpack@exp,c
  2063  010AD2  D7F6               	goto	l2841
  2064  010AD4                     l647:
  2065  010AD4  A013               	btfss	___ftpack@exp,0,c
  2066  010AD6  9E11               	bcf	___ftpack@arg+1,7,c
  2067  010AD8  90D8               	bcf	status,0,c
  2068  010ADA  3213               	rrcf	___ftpack@exp,f,c
  2069  010ADC  5013               	movf	___ftpack@exp,w,c
  2070  010ADE  1212               	iorwf	___ftpack@arg+2,f,c
  2071  010AE0  5014               	movf	___ftpack@sign,w,c
  2072  010AE2  A4D8               	btfss	status,2,c
  2073  010AE4  8E12               	bsf	___ftpack@arg+2,7,c
  2074  010AE6  C010  F010         	movff	___ftpack@arg,?___ftpack
  2075  010AEA  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
  2076  010AEE  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
  2077  010AF2  0012               	return	
  2078  010AF4                     __end_of___ftpack:
  2079                           	opt stack 0
  2080                           postinc0	equ	0xFEE
  2081                           wreg	equ	0xFE8
  2082                           status	equ	0xFD8
  2083                           
  2084 ;; *************** function ___fttol *****************
  2085 ;; Defined at:
  2086 ;;		line 44 in file "D:\Hella\Compiler\sources\common\fttol.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  f1              3   15[COMRAM] float 
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  lval            4   25[COMRAM] unsigned long 
  2091 ;;  exp1            1   29[COMRAM] unsigned char 
  2092 ;;  sign1           1   24[COMRAM] unsigned char 
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  4   15[COMRAM] long 
  2095 ;; Registers used:
  2096 ;;		wreg, status,2, status,0
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2103 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;Total ram usage:       15 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    1
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_stateMachine
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text9
  2117  010952                     __ptext9:
  2118                           	opt stack 0
  2119  010952                     ___fttol:
  2120                           	opt stack 28
  2121                           
  2122                           ;incstack = 0
  2123  010952  C012  F014         	movff	___fttol@f1+2,??___fttol
  2124  010956  6A15               	clrf	(??___fttol+1)& (0+255),c
  2125  010958  6A16               	clrf	(??___fttol+2)& (0+255),c
  2126  01095A  3411               	rlcf	___fttol@f1+1,w,c
  2127  01095C  3614               	rlcf	??___fttol& (0+255),f,c
  2128  01095E  E301               	bnc	u2391
  2129  010960  8015               	bsf	(??___fttol+1)& (0+255),0,c
  2130  010962                     u2391:
  2131  010962  5014               	movf	??___fttol,w,c
  2132  010964  6E1E               	movwf	___fttol@exp1,c
  2133  010966  501E               	movf	___fttol@exp1,w,c
  2134  010968  A4D8               	btfss	status,2,c
  2135  01096A  D009               	goto	l3085
  2136  01096C  0E00               	movlw	0
  2137  01096E  6E10               	movwf	?___fttol,c
  2138  010970  0E00               	movlw	0
  2139  010972  6E11               	movwf	?___fttol+1,c
  2140  010974  0E00               	movlw	0
  2141  010976  6E12               	movwf	?___fttol+2,c
  2142  010978  0E00               	movlw	0
  2143  01097A  6E13               	movwf	?___fttol+3,c
  2144  01097C  0012               	return	
  2145  01097E                     l3085:
  2146  01097E  0E17               	movlw	23
  2147  010980  6E14               	movwf	??___fttol& (0+255),c
  2148  010982  C010  F015         	movff	___fttol@f1,??___fttol+1
  2149  010986  C011  F016         	movff	___fttol@f1+1,??___fttol+2
  2150  01098A  C012  F017         	movff	___fttol@f1+2,??___fttol+3
  2151  01098E  2814               	incf	??___fttol,w,c
  2152  010990  6E18               	movwf	(??___fttol+4)& (0+255),c
  2153  010992  D004               	goto	u2410
  2154  010994                     u2415:
  2155  010994  90D8               	bcf	status,0,c
  2156  010996  3217               	rrcf	??___fttol+3,f,c
  2157  010998  3216               	rrcf	??___fttol+2,f,c
  2158  01099A  3215               	rrcf	??___fttol+1,f,c
  2159  01099C                     u2410:
  2160  01099C  2E18               	decfsz	(??___fttol+4)& (0+255),f,c
  2161  01099E  D7FA               	goto	u2415
  2162  0109A0  5015               	movf	??___fttol+1,w,c
  2163  0109A2  6E19               	movwf	___fttol@sign1,c
  2164  0109A4  8E11               	bsf	___fttol@f1+1,7,c
  2165  0109A6  0EFF               	movlw	255
  2166  0109A8  1610               	andwf	___fttol@f1,f,c
  2167  0109AA  0EFF               	movlw	255
  2168  0109AC  1611               	andwf	___fttol@f1+1,f,c
  2169  0109AE  0E00               	movlw	0
  2170  0109B0  1612               	andwf	___fttol@f1+2,f,c
  2171  0109B2  5010               	movf	___fttol@f1,w,c
  2172  0109B4  6E1A               	movwf	___fttol@lval,c
  2173  0109B6  5011               	movf	___fttol@f1+1,w,c
  2174  0109B8  6E1B               	movwf	___fttol@lval+1,c
  2175  0109BA  5012               	movf	___fttol@f1+2,w,c
  2176  0109BC  6E1C               	movwf	___fttol@lval+2,c
  2177  0109BE  6A1D               	clrf	___fttol@lval+3,c
  2178  0109C0  0E8E               	movlw	142
  2179  0109C2  5E1E               	subwf	___fttol@exp1,f,c
  2180  0109C4  AE1E               	btfss	___fttol@exp1,7,c
  2181  0109C6  D016               	goto	l3107
  2182  0109C8  501E               	movf	___fttol@exp1,w,c
  2183  0109CA  0A80               	xorlw	128
  2184  0109CC  0F8F               	addlw	143
  2185  0109CE  B0D8               	btfsc	status,0,c
  2186  0109D0  D009               	goto	l3103
  2187  0109D2  0E00               	movlw	0
  2188  0109D4  6E10               	movwf	?___fttol,c
  2189  0109D6  0E00               	movlw	0
  2190  0109D8  6E11               	movwf	?___fttol+1,c
  2191  0109DA  0E00               	movlw	0
  2192  0109DC  6E12               	movwf	?___fttol+2,c
  2193  0109DE  0E00               	movlw	0
  2194  0109E0  6E13               	movwf	?___fttol+3,c
  2195  0109E2  0012               	return	
  2196  0109E4                     l3103:
  2197  0109E4  90D8               	bcf	status,0,c
  2198  0109E6  321D               	rrcf	___fttol@lval+3,f,c
  2199  0109E8  321C               	rrcf	___fttol@lval+2,f,c
  2200  0109EA  321B               	rrcf	___fttol@lval+1,f,c
  2201  0109EC  321A               	rrcf	___fttol@lval,f,c
  2202  0109EE  3E1E               	incfsz	___fttol@exp1,f,c
  2203  0109F0  D7F9               	goto	l3103
  2204  0109F2  D015               	goto	l3117
  2205  0109F4                     l3107:
  2206  0109F4  0E17               	movlw	23
  2207  0109F6  641E               	cpfsgt	___fttol@exp1,c
  2208  0109F8  D00F               	goto	l3115
  2209  0109FA  0E00               	movlw	0
  2210  0109FC  6E10               	movwf	?___fttol,c
  2211  0109FE  0E00               	movlw	0
  2212  010A00  6E11               	movwf	?___fttol+1,c
  2213  010A02  0E00               	movlw	0
  2214  010A04  6E12               	movwf	?___fttol+2,c
  2215  010A06  0E00               	movlw	0
  2216  010A08  6E13               	movwf	?___fttol+3,c
  2217  010A0A  0012               	return	
  2218  010A0C                     l3113:
  2219  010A0C  90D8               	bcf	status,0,c
  2220  010A0E  361A               	rlcf	___fttol@lval,f,c
  2221  010A10  361B               	rlcf	___fttol@lval+1,f,c
  2222  010A12  361C               	rlcf	___fttol@lval+2,f,c
  2223  010A14  361D               	rlcf	___fttol@lval+3,f,c
  2224  010A16  061E               	decf	___fttol@exp1,f,c
  2225  010A18                     l3115:
  2226  010A18  501E               	movf	___fttol@exp1,w,c
  2227  010A1A  A4D8               	btfss	status,2,c
  2228  010A1C  D7F7               	goto	l3113
  2229  010A1E                     l3117:
  2230  010A1E  5019               	movf	___fttol@sign1,w,c
  2231  010A20  B4D8               	btfsc	status,2,c
  2232  010A22  D008               	goto	l3121
  2233  010A24  1E1D               	comf	___fttol@lval+3,f,c
  2234  010A26  1E1C               	comf	___fttol@lval+2,f,c
  2235  010A28  1E1B               	comf	___fttol@lval+1,f,c
  2236  010A2A  6C1A               	negf	___fttol@lval,c
  2237  010A2C  0E00               	movlw	0
  2238  010A2E  221B               	addwfc	___fttol@lval+1,f,c
  2239  010A30  221C               	addwfc	___fttol@lval+2,f,c
  2240  010A32  221D               	addwfc	___fttol@lval+3,f,c
  2241  010A34                     l3121:
  2242  010A34  C01A  F010         	movff	___fttol@lval,?___fttol
  2243  010A38  C01B  F011         	movff	___fttol@lval+1,?___fttol+1
  2244  010A3C  C01C  F012         	movff	___fttol@lval+2,?___fttol+2
  2245  010A40  C01D  F013         	movff	___fttol@lval+3,?___fttol+3
  2246  010A44  0012               	return	
  2247  010A46                     __end_of___fttol:
  2248                           	opt stack 0
  2249                           postinc0	equ	0xFEE
  2250                           wreg	equ	0xFE8
  2251                           status	equ	0xFD8
  2252                           
  2253 ;; *************** function _init *****************
  2254 ;; Defined at:
  2255 ;;		line 711 in file "clima.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;		None
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;		None
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;Total ram usage:        0 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    6
  2276 ;; This function calls:
  2277 ;;		_LcdInit
  2278 ;;		_UART_Init
  2279 ;;		_UART_puts
  2280 ;;		_initAdc
  2281 ;;		_initButtons
  2282 ;;		_initPwm
  2283 ;;		_initTmr
  2284 ;;		_setHeatElement
  2285 ;;		_setLcd
  2286 ;;		_setSpeedFanCool
  2287 ;;		_setSpeedFanHeatVent
  2288 ;;		_setStandbyLed
  2289 ;; This function is called by:
  2290 ;;		_main
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text10
  2295  010AF4                     __ptext10:
  2296                           	opt stack 0
  2297  010AF4                     _init:
  2298                           	opt stack 24
  2299                           
  2300                           ;clima.c: 713: TRISD=0;
  2301                           
  2302                           ;incstack = 0
  2303  010AF4  0E00               	movlw	0
  2304  010AF6  6E95               	movwf	3989,c	;volatile
  2305                           
  2306                           ;clima.c: 714: PORTD=0;
  2307  010AF8  0E00               	movlw	0
  2308  010AFA  6E83               	movwf	3971,c	;volatile
  2309                           
  2310                           ;clima.c: 715: MEMCONbits.EBDIS=1;
  2311  010AFC  8E9C               	bsf	3996,7,c	;volatile
  2312                           
  2313                           ;clima.c: 718: UART_Init();
  2314  010AFE  ECC9  F087         	call	_UART_Init	;wreg free
  2315                           
  2316                           ;clima.c: 719: UART_puts((char *)"\n\rInitializing...\n\r");
  2317  010B02  0EA5               	movlw	low STR_21
  2318  010B04  6E11               	movwf	UART_puts@s,c
  2319  010B06  0EFF               	movlw	high STR_21
  2320  010B08  6E12               	movwf	UART_puts@s+1,c
  2321  010B0A  EC0A  F087         	call	_UART_puts	;wreg free
  2322                           
  2323                           ;clima.c: 722: initButtons();
  2324  010B0E  EC1D  F088         	call	_initButtons	;wreg free
  2325                           
  2326                           ;clima.c: 725: initAdc();
  2327  010B12  ECD0  F086         	call	_initAdc	;wreg free
  2328                           
  2329                           ;clima.c: 728: initPwm();
  2330  010B16  EC07  F088         	call	_initPwm	;wreg free
  2331                           
  2332                           ;clima.c: 731: initTmr();
  2333  010B1A  EC91  F086         	call	_initTmr	;wreg free
  2334                           
  2335                           ;clima.c: 734: LcdInit();
  2336  010B1E  EC29  F086         	call	_LcdInit	;wreg free
  2337                           
  2338                           ;clima.c: 737: ;
  2339                           ;clima.c: 738: climaState = STATE_OFF;
  2340  010B22  0E00               	movlw	0
  2341  010B24  6E4F               	movwf	_climaState,c
  2342                           
  2343                           ;clima.c: 739: setLcd();
  2344  010B26  EC4F  F086         	call	_setLcd	;wreg free
  2345                           
  2346                           ;clima.c: 742: setStandbyLed(1);
  2347  010B2A  0E00               	movlw	0
  2348  010B2C  6E11               	movwf	setStandbyLed@state+1,c
  2349  010B2E  0E01               	movlw	1
  2350  010B30  6E10               	movwf	setStandbyLed@state,c
  2351  010B32  EC15  F088         	call	_setStandbyLed	;wreg free
  2352                           
  2353                           ;clima.c: 744: setHeatElement(0);
  2354  010B36  0E00               	movlw	0
  2355  010B38  6E11               	movwf	setHeatElement@state+1,c
  2356  010B3A  0E00               	movlw	0
  2357  010B3C  6E10               	movwf	setHeatElement@state,c
  2358  010B3E  EC18  F088         	call	_setHeatElement	;wreg free
  2359                           
  2360                           ;clima.c: 747: setSpeedFanCool(0);
  2361  010B42  0E00               	movlw	0
  2362  010B44  ECE0  F087         	call	_setSpeedFanCool
  2363                           
  2364                           ;clima.c: 749: setSpeedFanHeatVent(0);
  2365  010B48  0E00               	movlw	0
  2366  010B4A  ECD7  F087         	call	_setSpeedFanHeatVent
  2367                           
  2368                           ;clima.c: 751: setHeatElement(0);
  2369  010B4E  0E00               	movlw	0
  2370  010B50  6E11               	movwf	setHeatElement@state+1,c
  2371  010B52  0E00               	movlw	0
  2372  010B54  6E10               	movwf	setHeatElement@state,c
  2373  010B56  EC18  F088         	call	_setHeatElement	;wreg free
  2374  010B5A  0012               	return		;funcret
  2375  010B5C                     __end_of_init:
  2376                           	opt stack 0
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           status	equ	0xFD8
  2380                           
  2381 ;; *************** function _setStandbyLed *****************
  2382 ;; Defined at:
  2383 ;;		line 135 in file "clima.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  state           2   15[COMRAM] unsigned int 
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;		None
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      void 
  2390 ;; Registers used:
  2391 ;;		None
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2397 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;Total ram usage:        2 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; Hardware stack levels required when called:    1
  2404 ;; This function calls:
  2405 ;;		Nothing
  2406 ;; This function is called by:
  2407 ;;		_stateMachine
  2408 ;;		_init
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           	psect	text11
  2413  01102A                     __ptext11:
  2414                           	opt stack 0
  2415  01102A                     _setStandbyLed:
  2416                           	opt stack 28
  2417                           
  2418                           ;clima.c: 137: standbyLed = state;
  2419                           
  2420                           ;incstack = 0
  2421  01102A  C010  F049         	movff	setStandbyLed@state,_standbyLed
  2422  01102E  0012               	return		;funcret
  2423  011030                     __end_of_setStandbyLed:
  2424                           	opt stack 0
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           status	equ	0xFD8
  2428                           
  2429 ;; *************** function _setSpeedFanHeatVent *****************
  2430 ;; Defined at:
  2431 ;;		line 186 in file "clima.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;  speed           1    wreg     unsigned char 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  speed           1   15[COMRAM] unsigned char 
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  1    wreg      void 
  2438 ;; Registers used:
  2439 ;;		wreg, status,2, status,0
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;Total ram usage:        1 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; Hardware stack levels required when called:    1
  2452 ;; This function calls:
  2453 ;;		Nothing
  2454 ;; This function is called by:
  2455 ;;		_stateMachine
  2456 ;;		_init
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text12
  2461  010FAE                     __ptext12:
  2462                           	opt stack 0
  2463  010FAE                     _setSpeedFanHeatVent:
  2464                           	opt stack 28
  2465                           
  2466                           ;incstack = 0
  2467                           ;setSpeedFanHeatVent@speed stored from wreg
  2468  010FAE  6E10               	movwf	setSpeedFanHeatVent@speed,c
  2469                           
  2470                           ;clima.c: 188: if (speed)
  2471  010FB0  5010               	movf	setSpeedFanHeatVent@speed,w,c
  2472  010FB2  B4D8               	btfsc	status,2,c
  2473  010FB4  D002               	goto	l2877
  2474                           
  2475                           ;clima.c: 189: speed += 3;
  2476  010FB6  0E03               	movlw	3
  2477  010FB8  2610               	addwf	setSpeedFanHeatVent@speed,f,c
  2478  010FBA                     l2877:
  2479                           
  2480                           ;clima.c: 190: fanSpeedHeatVent = speed;
  2481  010FBA  C010  F04D         	movff	setSpeedFanHeatVent@speed,_fanSpeedHeatVent
  2482  010FBE  0012               	return		;funcret
  2483  010FC0                     __end_of_setSpeedFanHeatVent:
  2484                           	opt stack 0
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _setSpeedFanCool *****************
  2490 ;; Defined at:
  2491 ;;		line 175 in file "clima.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  speed           1    wreg     unsigned char 
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  speed           1   15[COMRAM] unsigned char 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      void 
  2498 ;; Registers used:
  2499 ;;		wreg, status,2, status,0
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;Total ram usage:        1 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:    1
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		_stateMachine
  2516 ;;		_init
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           	psect	text13
  2521  010FC0                     __ptext13:
  2522                           	opt stack 0
  2523  010FC0                     _setSpeedFanCool:
  2524                           	opt stack 28
  2525                           
  2526                           ;incstack = 0
  2527                           ;setSpeedFanCool@speed stored from wreg
  2528  010FC0  6E10               	movwf	setSpeedFanCool@speed,c
  2529                           
  2530                           ;clima.c: 177: if (speed)
  2531  010FC2  5010               	movf	setSpeedFanCool@speed,w,c
  2532  010FC4  B4D8               	btfsc	status,2,c
  2533  010FC6  D002               	goto	l2871
  2534                           
  2535                           ;clima.c: 178: speed += 3;
  2536  010FC8  0E03               	movlw	3
  2537  010FCA  2610               	addwf	setSpeedFanCool@speed,f,c
  2538  010FCC                     l2871:
  2539                           
  2540                           ;clima.c: 179: fanSpeedCool = speed;
  2541  010FCC  C010  F04E         	movff	setSpeedFanCool@speed,_fanSpeedCool
  2542  010FD0  0012               	return		;funcret
  2543  010FD2                     __end_of_setSpeedFanCool:
  2544                           	opt stack 0
  2545                           postinc0	equ	0xFEE
  2546                           wreg	equ	0xFE8
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function _setLcd *****************
  2550 ;; Defined at:
  2551 ;;		line 225 in file "clima.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;		None
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;Total ram usage:        0 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    5
  2572 ;; This function calls:
  2573 ;;		_LcdClear
  2574 ;;		_LcdGoTo
  2575 ;;		_LcdWriteString
  2576 ;; This function is called by:
  2577 ;;		_init
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text14
  2582  010C9E                     __ptext14:
  2583                           	opt stack 0
  2584  010C9E                     _setLcd:
  2585                           	opt stack 24
  2586                           
  2587                           ;clima.c: 227: LcdClear();
  2588                           
  2589                           ;incstack = 0
  2590  010C9E  EC0B  F088         	call	_LcdClear	;wreg free
  2591                           
  2592                           ;clima.c: 228: LcdGoTo(0);
  2593  010CA2  0E00               	movlw	0
  2594  010CA4  EC01  F088         	call	_LcdGoTo
  2595                           
  2596                           ;clima.c: 229: LcdWriteString(LcdLines[climaState][0]);
  2597  010CA8  504F               	movf	_climaState,w,c
  2598  010CAA  0D24               	mullw	36
  2599  010CAC  0EFF               	movlw	low _LcdLines
  2600  010CAE  24F3               	addwf	prodl,w,c
  2601  010CB0  6E15               	movwf	LcdWriteString@s,c
  2602  010CB2  0EFE               	movlw	high _LcdLines
  2603  010CB4  20F4               	addwfc	prodh,w,c
  2604  010CB6  6E16               	movwf	LcdWriteString@s+1,c
  2605  010CB8  ECAE  F085         	call	_LcdWriteString	;wreg free
  2606                           
  2607                           ;clima.c: 230: LcdGoTo(0x40);
  2608  010CBC  0E40               	movlw	64
  2609  010CBE  EC01  F088         	call	_LcdGoTo
  2610                           
  2611                           ;clima.c: 231: LcdWriteString(LcdLines[climaState][1]);
  2612  010CC2  504F               	movf	_climaState,w,c
  2613  010CC4  0D24               	mullw	36
  2614  010CC6  0E12               	movlw	18
  2615  010CC8  26F3               	addwf	prodl,f,c
  2616  010CCA  0E00               	movlw	0
  2617  010CCC  22F4               	addwfc	prodh,f,c
  2618  010CCE  0EFF               	movlw	low _LcdLines
  2619  010CD0  24F3               	addwf	prodl,w,c
  2620  010CD2  6E15               	movwf	LcdWriteString@s,c
  2621  010CD4  0EFE               	movlw	high _LcdLines
  2622  010CD6  20F4               	addwfc	prodh,w,c
  2623  010CD8  6E16               	movwf	LcdWriteString@s+1,c
  2624  010CDA  ECAE  F085         	call	_LcdWriteString	;wreg free
  2625  010CDE  0012               	return		;funcret
  2626  010CE0                     __end_of_setLcd:
  2627                           	opt stack 0
  2628                           prodh	equ	0xFF4
  2629                           prodl	equ	0xFF3
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           status	equ	0xFD8
  2633                           
  2634 ;; *************** function _LcdGoTo *****************
  2635 ;; Defined at:
  2636 ;;		line 176 in file "lcd.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  pos             1    wreg     unsigned char 
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  pos             1   20[COMRAM] unsigned char 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2, status,0, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;Total ram usage:        1 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    4
  2657 ;; This function calls:
  2658 ;;		_lcdCommand
  2659 ;; This function is called by:
  2660 ;;		_setLcd
  2661 ;;		_updateLcd
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text15
  2666  011002                     __ptext15:
  2667                           	opt stack 0
  2668  011002                     _LcdGoTo:
  2669                           	opt stack 24
  2670                           
  2671                           ;incstack = 0
  2672                           ;LcdGoTo@pos stored from wreg
  2673  011002  6E15               	movwf	LcdGoTo@pos,c
  2674                           
  2675                           ;lcd.c: 179: lcdCommand(0x80+pos);
  2676  011004  5015               	movf	LcdGoTo@pos,w,c
  2677  011006  0F80               	addlw	128
  2678  011008  EC3B  F087         	call	_lcdCommand
  2679  01100C  0012               	return		;funcret
  2680  01100E                     __end_of_LcdGoTo:
  2681                           	opt stack 0
  2682                           prodh	equ	0xFF4
  2683                           prodl	equ	0xFF3
  2684                           postinc0	equ	0xFEE
  2685                           wreg	equ	0xFE8
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _setHeatElement *****************
  2689 ;; Defined at:
  2690 ;;		line 155 in file "clima.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  state           2   15[COMRAM] unsigned int 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		None
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2704 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;Total ram usage:        2 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    1
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_stateMachine
  2715 ;;		_init
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text16
  2720  011030                     __ptext16:
  2721                           	opt stack 0
  2722  011030                     _setHeatElement:
  2723                           	opt stack 28
  2724                           
  2725                           ;clima.c: 157: heatElement = state;
  2726                           
  2727                           ;incstack = 0
  2728  011030  C010  F04B         	movff	setHeatElement@state,_heatElement
  2729  011034  0012               	return		;funcret
  2730  011036                     __end_of_setHeatElement:
  2731                           	opt stack 0
  2732                           prodh	equ	0xFF4
  2733                           prodl	equ	0xFF3
  2734                           postinc0	equ	0xFEE
  2735                           wreg	equ	0xFE8
  2736                           status	equ	0xFD8
  2737                           
  2738 ;; *************** function _initTmr *****************
  2739 ;; Defined at:
  2740 ;;		line 614 in file "clima.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;		None
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		wreg, status,2
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;Total ram usage:        0 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    1
  2761 ;; This function calls:
  2762 ;;		Nothing
  2763 ;; This function is called by:
  2764 ;;		_init
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text17
  2769  010D22                     __ptext17:
  2770                           	opt stack 0
  2771  010D22                     _initTmr:
  2772                           	opt stack 28
  2773                           
  2774                           ;clima.c: 616: PORTJbits.RJ6 = 0;
  2775                           
  2776                           ;incstack = 0
  2777  010D22  9C88               	bcf	3976,6,c	;volatile
  2778                           
  2779                           ;clima.c: 617: PORTJbits.RJ7 = 0;
  2780  010D24  9E88               	bcf	3976,7,c	;volatile
  2781                           
  2782                           ;clima.c: 618: TRISJbits.TRISJ7 = 0;
  2783  010D26  9E9A               	bcf	3994,7,c	;volatile
  2784                           
  2785                           ;clima.c: 619: TRISJbits.TRISJ6 = 0;
  2786  010D28  9C9A               	bcf	3994,6,c	;volatile
  2787                           
  2788                           ;clima.c: 621: PORTDbits.RD3 = 0;
  2789  010D2A  9683               	bcf	3971,3,c	;volatile
  2790                           
  2791                           ;clima.c: 622: PORTDbits.RD4 = 0;
  2792  010D2C  9883               	bcf	3971,4,c	;volatile
  2793                           
  2794                           ;clima.c: 623: PORTDbits.RD5 = 0;
  2795  010D2E  9A83               	bcf	3971,5,c	;volatile
  2796                           
  2797                           ;clima.c: 624: TRISDbits.TRISD3 = 0;
  2798  010D30  9695               	bcf	3989,3,c	;volatile
  2799                           
  2800                           ;clima.c: 625: TRISDbits.TRISD4 = 0;
  2801  010D32  9895               	bcf	3989,4,c	;volatile
  2802                           
  2803                           ;clima.c: 626: TRISDbits.TRISD5 = 0;
  2804  010D34  9A95               	bcf	3989,5,c	;volatile
  2805                           
  2806                           ;clima.c: 630: TMR0 = 0;
  2807  010D36  0E00               	movlw	0
  2808  010D38  6ED7               	movwf	4055,c	;volatile
  2809  010D3A  0E00               	movlw	0
  2810  010D3C  6ED6               	movwf	4054,c	;volatile
  2811                           
  2812                           ;clima.c: 631: T0CON = 0;
  2813  010D3E  0E00               	movlw	0
  2814  010D40  6ED5               	movwf	4053,c	;volatile
  2815                           
  2816                           ;clima.c: 632: T0CONbits.TMR0ON = 0;
  2817  010D42  9ED5               	bcf	4053,7,c	;volatile
  2818                           
  2819                           ;clima.c: 633: T0CONbits.T08BIT = 0;
  2820  010D44  9CD5               	bcf	4053,6,c	;volatile
  2821                           
  2822                           ;clima.c: 634: T0CONbits.T0CS = 0;
  2823  010D46  9AD5               	bcf	4053,5,c	;volatile
  2824                           
  2825                           ;clima.c: 635: T0CONbits.T0SE = 0;
  2826  010D48  98D5               	bcf	4053,4,c	;volatile
  2827                           
  2828                           ;clima.c: 636: T0CONbits.PSA = 0;
  2829  010D4A  96D5               	bcf	4053,3,c	;volatile
  2830                           
  2831                           ;clima.c: 637: T0CONbits.T0PS = 0;
  2832  010D4C  90D5               	bcf	4053,0,c	;volatile
  2833  010D4E  92D5               	bcf	4053,1,c	;volatile
  2834  010D50  94D5               	bcf	4053,2,c	;volatile
  2835                           
  2836                           ;clima.c: 643: TMR1H = 0xFB;
  2837  010D52  0EFB               	movlw	251
  2838  010D54  6ECF               	movwf	4047,c	;volatile
  2839                           
  2840                           ;clima.c: 644: TMR1L = 0x1D;
  2841  010D56  0E1D               	movlw	29
  2842  010D58  6ECE               	movwf	4046,c	;volatile
  2843                           
  2844                           ;clima.c: 645: T0IE = 1;
  2845  010D5A  8AF2               	bsf	intcon,5,c	;volatile
  2846                           
  2847                           ;clima.c: 646: GIE = 1;
  2848  010D5C  8EF2               	bsf	intcon,7,c	;volatile
  2849                           
  2850                           ;clima.c: 647: T0CONbits.TMR0ON = 1;
  2851  010D5E  8ED5               	bsf	4053,7,c	;volatile
  2852  010D60  0012               	return		;funcret
  2853  010D62                     __end_of_initTmr:
  2854                           	opt stack 0
  2855                           prodh	equ	0xFF4
  2856                           prodl	equ	0xFF3
  2857                           intcon	equ	0xFF2
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           status	equ	0xFD8
  2861                           
  2862 ;; *************** function _initPwm *****************
  2863 ;; Defined at:
  2864 ;;		line 597 in file "clima.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;		None
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;		None
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  1    wreg      void 
  2871 ;; Registers used:
  2872 ;;		None
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;Total ram usage:        0 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    1
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		_init
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text18
  2893  01100E                     __ptext18:
  2894                           	opt stack 0
  2895  01100E                     _initPwm:
  2896                           	opt stack 28
  2897                           
  2898                           ;clima.c: 602: (TRISDbits.TRISD3) = 0;
  2899                           
  2900                           ;incstack = 0
  2901  01100E  9695               	bcf	3989,3,c	;volatile
  2902                           
  2903                           ;clima.c: 604: (TRISDbits.TRISD4) = 0;
  2904  011010  9895               	bcf	3989,4,c	;volatile
  2905                           
  2906                           ;clima.c: 606: (TRISDbits.TRISD5) = 0;
  2907  011012  9A95               	bcf	3989,5,c	;volatile
  2908  011014  0012               	return		;funcret
  2909  011016                     __end_of_initPwm:
  2910                           	opt stack 0
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           intcon	equ	0xFF2
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function _initButtons *****************
  2919 ;; Defined at:
  2920 ;;		line 537 in file "clima.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;		None
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		None
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;Total ram usage:        0 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    1
  2941 ;; This function calls:
  2942 ;;		Nothing
  2943 ;; This function is called by:
  2944 ;;		_init
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text19
  2949  01103A                     __ptext19:
  2950                           	opt stack 0
  2951  01103A                     _initButtons:
  2952                           	opt stack 28
  2953                           
  2954                           ;clima.c: 540: TRISB0 = 1;
  2955                           
  2956                           ;incstack = 0
  2957  01103A  8093               	bsf	3987,0,c	;volatile
  2958  01103C  0012               	return		;funcret
  2959  01103E                     __end_of_initButtons:
  2960                           	opt stack 0
  2961                           prodh	equ	0xFF4
  2962                           prodl	equ	0xFF3
  2963                           intcon	equ	0xFF2
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           status	equ	0xFD8
  2967                           
  2968 ;; *************** function _initAdc *****************
  2969 ;; Defined at:
  2970 ;;		line 549 in file "clima.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		wreg, status,2, status,0
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;Total ram usage:        0 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    1
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_init
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text20
  2999  010DA0                     __ptext20:
  3000                           	opt stack 0
  3001  010DA0                     _initAdc:
  3002                           	opt stack 28
  3003                           
  3004                           ;clima.c: 552: TRISA = TRISA | (1<<0);
  3005                           
  3006                           ;incstack = 0
  3007  010DA0  5092               	movf	3986,w,c	;volatile
  3008  010DA2  0901               	iorlw	1
  3009  010DA4  6E92               	movwf	3986,c	;volatile
  3010                           
  3011                           ;clima.c: 555: TRISA = TRISA | (1<<1);
  3012  010DA6  5092               	movf	3986,w,c	;volatile
  3013  010DA8  0902               	iorlw	2
  3014  010DAA  6E92               	movwf	3986,c	;volatile
  3015                           
  3016                           ;clima.c: 558: TRISA = TRISA | (1<<3);
  3017  010DAC  5092               	movf	3986,w,c	;volatile
  3018  010DAE  0908               	iorlw	8
  3019  010DB0  6E92               	movwf	3986,c	;volatile
  3020                           
  3021                           ;clima.c: 561: ADCON0bits.CHS = 1;
  3022  010DB2  50C2               	movf	4034,w,c	;volatile
  3023  010DB4  0BC3               	andlw	-61
  3024  010DB6  0904               	iorlw	4
  3025  010DB8  6EC2               	movwf	4034,c	;volatile
  3026                           
  3027                           ;clima.c: 562: ADCON0bits.GO_nDONE = 0;
  3028  010DBA  92C2               	bcf	4034,1,c	;volatile
  3029                           
  3030                           ;clima.c: 563: ADCON0bits.ADON = 0;
  3031  010DBC  90C2               	bcf	4034,0,c	;volatile
  3032                           
  3033                           ;clima.c: 565: ADCON1bits.VCFG = 0b00;
  3034  010DBE  0ECF               	movlw	-49
  3035  010DC0  16C1               	andwf	4033,f,c	;volatile
  3036                           
  3037                           ;clima.c: 566: ADCON1bits.PCFG = 0b0000;
  3038  010DC2  90C1               	bcf	4033,0,c	;volatile
  3039  010DC4  92C1               	bcf	4033,1,c	;volatile
  3040  010DC6  94C1               	bcf	4033,2,c	;volatile
  3041  010DC8  96C1               	bcf	4033,3,c	;volatile
  3042                           
  3043                           ;clima.c: 568: ADCON2bits.ADFM = 1;
  3044  010DCA  8EC0               	bsf	4032,7,c	;volatile
  3045                           
  3046                           ;clima.c: 569: ADCON2bits.ACQT = 0b111;
  3047  010DCC  86C0               	bsf	4032,3,c	;volatile
  3048  010DCE  88C0               	bsf	4032,4,c	;volatile
  3049  010DD0  8AC0               	bsf	4032,5,c	;volatile
  3050                           
  3051                           ;clima.c: 570: ADCON2bits.ADCS = 0b010;
  3052  010DD2  50C0               	movf	4032,w,c	;volatile
  3053  010DD4  0BF8               	andlw	-8
  3054  010DD6  0902               	iorlw	2
  3055  010DD8  6EC0               	movwf	4032,c	;volatile
  3056  010DDA  0012               	return		;funcret
  3057  010DDC                     __end_of_initAdc:
  3058                           	opt stack 0
  3059                           prodh	equ	0xFF4
  3060                           prodl	equ	0xFF3
  3061                           intcon	equ	0xFF2
  3062                           postinc0	equ	0xFEE
  3063                           wreg	equ	0xFE8
  3064                           status	equ	0xFD8
  3065                           
  3066 ;; *************** function _UART_puts *****************
  3067 ;; Defined at:
  3068 ;;		line 88 in file "uart.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  s               2   16[COMRAM] PTR unsigned char 
  3071 ;;		 -> STR_21(20), 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;		None
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      void 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3083 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;Total ram usage:        2 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    2
  3090 ;; This function calls:
  3091 ;;		_Delay10TCYx
  3092 ;;		_UART_putc
  3093 ;; This function is called by:
  3094 ;;		_init
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text21
  3099  010E14                     __ptext21:
  3100                           	opt stack 0
  3101  010E14                     _UART_puts:
  3102                           	opt stack 27
  3103  010E14                     
  3104                           ;uart.c: 91: {
  3105                           ;uart.c: 92: UART_putc(*s);
  3106  010E14  C011  FFF6         	movff	UART_puts@s,tblptrl
  3107  010E18  C012  FFF7         	movff	UART_puts@s+1,tblptrh
  3108  010E1C                     	if	0	;tblptru may be non-zero
  3109  010E1C                     	endif
  3110  010E1C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3111  010E1C  0E00               	movlw	low (__mediumconst shr (0+16))
  3112  010E1E  6EF8               	movwf	tblptru,c
  3113  010E20                     	endif
  3114  010E20  0008               	tblrd		*
  3115  010E22  50F5               	movf	tablat,w,c
  3116  010E24  ECFA  F087         	call	_UART_putc
  3117                           
  3118                           ;uart.c: 93: s++;
  3119  010E28  4A11               	infsnz	UART_puts@s,f,c
  3120  010E2A  2A12               	incf	UART_puts@s+1,f,c
  3121                           
  3122                           ;uart.c: 94: Delay10TCYx(250);
  3123  010E2C  0EFA               	movlw	250
  3124  010E2E  ECF2  F087         	call	_Delay10TCYx
  3125                           
  3126                           ;uart.c: 95: } while(*s != 0);
  3127  010E32  C011  FFF6         	movff	UART_puts@s,tblptrl
  3128  010E36  C012  FFF7         	movff	UART_puts@s+1,tblptrh
  3129  010E3A                     	if	0	;tblptru may be non-zero
  3130  010E3A                     	endif
  3131  010E3A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3132  010E3A  0E00               	movlw	low (__mediumconst shr (0+16))
  3133  010E3C  6EF8               	movwf	tblptru,c
  3134  010E3E                     	endif
  3135  010E3E  0008               	tblrd		*
  3136  010E40  50F5               	movf	tablat,w,c
  3137  010E42  0900               	iorlw	0
  3138  010E44  B4D8               	btfsc	status,2,c
  3139  010E46  0012               	return	
  3140  010E48  D7E5               	goto	l3051
  3141  010E4A                     __end_of_UART_puts:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           prodh	equ	0xFF4
  3148                           prodl	equ	0xFF3
  3149                           intcon	equ	0xFF2
  3150                           postinc0	equ	0xFEE
  3151                           wreg	equ	0xFE8
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _UART_putc *****************
  3155 ;; Defined at:
  3156 ;;		line 80 in file "uart.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  data            1    wreg     unsigned char 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  data            1   15[COMRAM] unsigned char 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  1    wreg      void 
  3163 ;; Registers used:
  3164 ;;		wreg
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;Total ram usage:        1 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    1
  3177 ;; This function calls:
  3178 ;;		Nothing
  3179 ;; This function is called by:
  3180 ;;		_UART_puts
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text22
  3185  010FF4                     __ptext22:
  3186                           	opt stack 0
  3187  010FF4                     _UART_putc:
  3188                           	opt stack 27
  3189                           
  3190                           ;incstack = 0
  3191                           ;UART_putc@data stored from wreg
  3192  010FF4  6E10               	movwf	UART_putc@data,c
  3193                           
  3194                           ;uart.c: 82: TXREG = data;
  3195  010FF6  C010  FFAD         	movff	UART_putc@data,4013	;volatile
  3196  010FFA                     l356:
  3197  010FFA  A89E               	btfss	3998,4,c	;volatile
  3198  010FFC  D7FE               	goto	l356
  3199                           
  3200                           ;uart.c: 84: PIR1bits.TXIF = 0;
  3201  010FFE  989E               	bcf	3998,4,c	;volatile
  3202  011000  0012               	return		;funcret
  3203  011002                     __end_of_UART_putc:
  3204                           	opt stack 0
  3205                           tblptru	equ	0xFF8
  3206                           tblptrh	equ	0xFF7
  3207                           tblptrl	equ	0xFF6
  3208                           tablat	equ	0xFF5
  3209                           prodh	equ	0xFF4
  3210                           prodl	equ	0xFF3
  3211                           intcon	equ	0xFF2
  3212                           postinc0	equ	0xFEE
  3213                           wreg	equ	0xFE8
  3214                           status	equ	0xFD8
  3215                           
  3216 ;; *************** function _Delay10TCYx *****************
  3217 ;; Defined at:
  3218 ;;		line 8 in file "D:\Hella\Compiler\sources\pic18\d10tcyx.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  unit            1    wreg     unsigned char 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  unit            1   15[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;Total ram usage:        1 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    1
  3239 ;; This function calls:
  3240 ;;		Nothing
  3241 ;; This function is called by:
  3242 ;;		_UART_puts
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text23
  3247  010FE4                     __ptext23:
  3248                           	opt stack 0
  3249  010FE4                     _Delay10TCYx:
  3250                           	opt stack 27
  3251                           
  3252                           ;incstack = 0
  3253                           ;Delay10TCYx@unit stored from wreg
  3254  010FE4  6E10               	movwf	Delay10TCYx@unit,c
  3255  010FE6  0E03               	movlw	3
  3256  010FE8                     u2657:
  3257  010FE8  2EE8               	decfsz	wreg,f,c
  3258  010FEA  D7FE               	bra	u2657
  3259  010FEC  F000               	nop	
  3260  010FEE  2E10               	decfsz	Delay10TCYx@unit,f,c
  3261  010FF0  D7FA               	goto	l2819
  3262  010FF2  0012               	return	
  3263  010FF4                     __end_of_Delay10TCYx:
  3264                           	opt stack 0
  3265                           tblptru	equ	0xFF8
  3266                           tblptrh	equ	0xFF7
  3267                           tblptrl	equ	0xFF6
  3268                           tablat	equ	0xFF5
  3269                           prodh	equ	0xFF4
  3270                           prodl	equ	0xFF3
  3271                           intcon	equ	0xFF2
  3272                           postinc0	equ	0xFEE
  3273                           wreg	equ	0xFE8
  3274                           status	equ	0xFD8
  3275                           
  3276 ;; *************** function _UART_Init *****************
  3277 ;; Defined at:
  3278 ;;		line 11 in file "uart.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;		None
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  x               2   15[COMRAM] unsigned int 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      unsigned char 
  3285 ;; Registers used:
  3286 ;;		wreg, status,2
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;Total ram usage:        2 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    1
  3299 ;; This function calls:
  3300 ;;		Nothing
  3301 ;; This function is called by:
  3302 ;;		_init
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text24
  3307  010F92                     __ptext24:
  3308                           	opt stack 0
  3309  010F92                     _UART_Init:
  3310                           	opt stack 28
  3311                           
  3312                           ;uart.c: 33: unsigned int x;
  3313                           ;uart.c: 34: x = (10000000/19200)/64 - 1 ;
  3314                           
  3315                           ;incstack = 0
  3316  010F92  0E00               	movlw	0
  3317  010F94  6E11               	movwf	UART_Init@x+1,c
  3318  010F96  0E07               	movlw	7
  3319  010F98  6E10               	movwf	UART_Init@x,c
  3320                           
  3321                           ;uart.c: 37: TRISCbits.TRISC6 = 0;
  3322  010F9A  9C94               	bcf	3988,6,c	;volatile
  3323                           
  3324                           ;uart.c: 38: TRISCbits.TRISC7 = 1;
  3325  010F9C  8E94               	bsf	3988,7,c	;volatile
  3326                           
  3327                           ;uart.c: 41: TXSTA1bits.SYNC = 0;
  3328  010F9E  98AC               	bcf	4012,4,c	;volatile
  3329                           
  3330                           ;uart.c: 42: SPBRG = x;
  3331  010FA0  C010  FFAF         	movff	UART_Init@x,4015	;volatile
  3332                           
  3333                           ;uart.c: 43: TXSTAbits.TXEN =1;
  3334  010FA4  8AAC               	bsf	4012,5,c	;volatile
  3335                           
  3336                           ;uart.c: 44: RCSTAbits.CREN =1;
  3337  010FA6  88AB               	bsf	4011,4,c	;volatile
  3338                           
  3339                           ;uart.c: 45: PIE1bits.RCIE = 1;
  3340  010FA8  8A9D               	bsf	3997,5,c	;volatile
  3341                           
  3342                           ;uart.c: 46: RCSTA1bits.SPEN = 1;
  3343  010FAA  8EAB               	bsf	4011,7,c	;volatile
  3344  010FAC  0012               	return	
  3345  010FAE                     __end_of_UART_Init:
  3346                           	opt stack 0
  3347                           tblptru	equ	0xFF8
  3348                           tblptrh	equ	0xFF7
  3349                           tblptrl	equ	0xFF6
  3350                           tablat	equ	0xFF5
  3351                           prodh	equ	0xFF4
  3352                           prodl	equ	0xFF3
  3353                           intcon	equ	0xFF2
  3354                           postinc0	equ	0xFEE
  3355                           wreg	equ	0xFE8
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _LcdInit *****************
  3359 ;; Defined at:
  3360 ;;		line 123 in file "lcd.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;Total ram usage:        0 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    5
  3381 ;; This function calls:
  3382 ;;		_LcdClear
  3383 ;;		_LcdWriteString
  3384 ;;		_SWSPIOpen
  3385 ;;		_lcdCommand
  3386 ;;		_setGPIO
  3387 ;;		_setIODIR
  3388 ;; This function is called by:
  3389 ;;		_init
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text25
  3394  010C52                     __ptext25:
  3395                           	opt stack 0
  3396  010C52                     _LcdInit:
  3397                           	opt stack 24
  3398                           
  3399                           ;lcd.c: 126: SWSPIOpen();
  3400                           
  3401                           ;incstack = 0
  3402  010C52  ECE9  F087         	call	_SWSPIOpen	;wreg free
  3403                           
  3404                           ;lcd.c: 135: setIODIR(0x01,0x00);
  3405  010C56  0E00               	movlw	0
  3406  010C58  6E12               	movwf	setIODIR@dir,c
  3407  010C5A  0E01               	movlw	1
  3408  010C5C  EC9C  F087         	call	_setIODIR
  3409                           
  3410                           ;lcd.c: 137: setIODIR(0x00,0x00);
  3411  010C60  0E00               	movlw	0
  3412  010C62  6E12               	movwf	setIODIR@dir,c
  3413  010C64  0E00               	movlw	0
  3414  010C66  EC9C  F087         	call	_setIODIR
  3415                           
  3416                           ;lcd.c: 139: setGPIO(0x00,0x00);
  3417  010C6A  0E00               	movlw	0
  3418  010C6C  6E12               	movwf	setGPIO@value,c
  3419  010C6E  0E00               	movlw	0
  3420  010C70  ECAB  F087         	call	_setGPIO
  3421                           
  3422                           ;lcd.c: 142: lcdCommand(0b00111111);
  3423  010C74  0E3F               	movlw	63
  3424  010C76  EC3B  F087         	call	_lcdCommand
  3425                           
  3426                           ;lcd.c: 145: lcdCommand(0b00001100);
  3427  010C7A  0E0C               	movlw	12
  3428  010C7C  EC3B  F087         	call	_lcdCommand
  3429                           
  3430                           ;lcd.c: 148: lcdCommand(0b00000001);
  3431  010C80  0E01               	movlw	1
  3432  010C82  EC3B  F087         	call	_lcdCommand
  3433                           
  3434                           ;lcd.c: 151: lcdCommand(0b00000110);
  3435  010C86  0E06               	movlw	6
  3436  010C88  EC3B  F087         	call	_lcdCommand
  3437                           
  3438                           ;lcd.c: 154: LcdWriteString("LCD init ...");
  3439  010C8C  0EB9               	movlw	low STR_22
  3440  010C8E  6E15               	movwf	LcdWriteString@s,c
  3441  010C90  0EFF               	movlw	high STR_22
  3442  010C92  6E16               	movwf	LcdWriteString@s+1,c
  3443  010C94  ECAE  F085         	call	_LcdWriteString	;wreg free
  3444                           
  3445                           ;lcd.c: 158: LcdClear();
  3446  010C98  EC0B  F088         	call	_LcdClear	;wreg free
  3447  010C9C  0012               	return		;funcret
  3448  010C9E                     __end_of_LcdInit:
  3449                           	opt stack 0
  3450                           tblptru	equ	0xFF8
  3451                           tblptrh	equ	0xFF7
  3452                           tblptrl	equ	0xFF6
  3453                           tablat	equ	0xFF5
  3454                           prodh	equ	0xFF4
  3455                           prodl	equ	0xFF3
  3456                           intcon	equ	0xFF2
  3457                           postinc0	equ	0xFEE
  3458                           wreg	equ	0xFE8
  3459                           status	equ	0xFD8
  3460                           
  3461 ;; *************** function _setIODIR *****************
  3462 ;; Defined at:
  3463 ;;		line 81 in file "lcd.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;  address         1    wreg     unsigned char 
  3466 ;;  dir             1   17[COMRAM] unsigned char 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  address         1   18[COMRAM] unsigned char 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      void 
  3471 ;; Registers used:
  3472 ;;		wreg, status,2, status,0, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3478 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;Total ram usage:        2 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    2
  3485 ;; This function calls:
  3486 ;;		_SWSPIClearCS
  3487 ;;		_SWSPISetCS
  3488 ;;		_SWSPIWrite
  3489 ;; This function is called by:
  3490 ;;		_LcdInit
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text26
  3495  010F38                     __ptext26:
  3496                           	opt stack 0
  3497  010F38                     _setIODIR:
  3498                           	opt stack 26
  3499                           
  3500                           ;incstack = 0
  3501                           ;setIODIR@address stored from wreg
  3502  010F38  6E13               	movwf	setIODIR@address,c
  3503                           
  3504                           ;lcd.c: 84: SWSPIClearCS();
  3505  010F3A  EC21  F088         	call	_SWSPIClearCS	;wreg free
  3506                           
  3507                           ;lcd.c: 85: SWSPIWrite(0x40);
  3508  010F3E  0E40               	movlw	64
  3509  010F40  EC02  F086         	call	_SWSPIWrite
  3510                           
  3511                           ;lcd.c: 86: SWSPIWrite(address);
  3512  010F44  5013               	movf	setIODIR@address,w,c
  3513  010F46  EC02  F086         	call	_SWSPIWrite
  3514                           
  3515                           ;lcd.c: 87: SWSPIWrite(dir);
  3516  010F4A  5012               	movf	setIODIR@dir,w,c
  3517  010F4C  EC02  F086         	call	_SWSPIWrite
  3518                           
  3519                           ;lcd.c: 88: SWSPISetCS();
  3520  010F50  EC1F  F088         	call	_SWSPISetCS	;wreg free
  3521  010F54  0012               	return		;funcret
  3522  010F56                     __end_of_setIODIR:
  3523                           	opt stack 0
  3524                           tblptru	equ	0xFF8
  3525                           tblptrh	equ	0xFF7
  3526                           tblptrl	equ	0xFF6
  3527                           tablat	equ	0xFF5
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           intcon	equ	0xFF2
  3531                           postinc0	equ	0xFEE
  3532                           wreg	equ	0xFE8
  3533                           status	equ	0xFD8
  3534                           
  3535 ;; *************** function _SWSPIOpen *****************
  3536 ;; Defined at:
  3537 ;;		line 15 in file "swspi.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;		None
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;		None
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  1    wreg      void 
  3544 ;; Registers used:
  3545 ;;		None
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3555 ;;Total ram usage:        0 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    1
  3558 ;; This function calls:
  3559 ;;		Nothing
  3560 ;; This function is called by:
  3561 ;;		_LcdInit
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text27
  3566  010FD2                     __ptext27:
  3567                           	opt stack 0
  3568  010FD2                     _SWSPIOpen:
  3569                           	opt stack 27
  3570                           
  3571                           ;swspi.c: 17: PORTAbits.RA2 = 1;
  3572                           
  3573                           ;incstack = 0
  3574  010FD2  8480               	bsf	3968,2,c	;volatile
  3575                           
  3576                           ;swspi.c: 18: PORTCbits.RC4 = 1;
  3577  010FD4  8882               	bsf	3970,4,c	;volatile
  3578                           
  3579                           ;swspi.c: 21: PORTCbits.RC5 = 0;
  3580  010FD6  9A82               	bcf	3970,5,c	;volatile
  3581                           
  3582                           ;swspi.c: 22: PORTCbits.RC3 = 0;
  3583  010FD8  9682               	bcf	3970,3,c	;volatile
  3584                           
  3585                           ;swspi.c: 40: TRISAbits.TRISA2 = 0;
  3586  010FDA  9492               	bcf	3986,2,c	;volatile
  3587                           
  3588                           ;swspi.c: 41: TRISCbits.TRISC4 = 1;
  3589  010FDC  8894               	bsf	3988,4,c	;volatile
  3590                           
  3591                           ;swspi.c: 42: TRISCbits.TRISC5 = 0;
  3592  010FDE  9A94               	bcf	3988,5,c	;volatile
  3593                           
  3594                           ;swspi.c: 43: TRISCbits.TRISC3 = 0;
  3595  010FE0  9694               	bcf	3988,3,c	;volatile
  3596  010FE2  0012               	return		;funcret
  3597  010FE4                     __end_of_SWSPIOpen:
  3598                           	opt stack 0
  3599                           tblptru	equ	0xFF8
  3600                           tblptrh	equ	0xFF7
  3601                           tblptrl	equ	0xFF6
  3602                           tablat	equ	0xFF5
  3603                           prodh	equ	0xFF4
  3604                           prodl	equ	0xFF3
  3605                           intcon	equ	0xFF2
  3606                           postinc0	equ	0xFEE
  3607                           wreg	equ	0xFE8
  3608                           status	equ	0xFD8
  3609                           
  3610 ;; *************** function _LcdWriteString *****************
  3611 ;; Defined at:
  3612 ;;		line 202 in file "lcd.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;  s               2   20[COMRAM] PTR const unsigned char 
  3615 ;;		 -> STR_22(13), STR_17(2), STR_16(2), STR_15(2), 
  3616 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_10(6), 
  3617 ;;		 -> STR_9(6), STR_8(6), STR_7(6), STR_6(6), 
  3618 ;;		 -> STR_5(5), STR_4(5), STR_3(5), msg(20), 
  3619 ;;		 -> LcdLines(144), 
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;		None
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      void 
  3624 ;; Registers used:
  3625 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3631 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;Total ram usage:        2 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    4
  3638 ;; This function calls:
  3639 ;;		_LcdChar
  3640 ;; This function is called by:
  3641 ;;		_setLcd
  3642 ;;		_updateLcd
  3643 ;;		_LcdInit
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text28
  3648  010B5C                     __ptext28:
  3649                           	opt stack 0
  3650  010B5C                     _LcdWriteString:
  3651                           	opt stack 24
  3652                           
  3653                           ;lcd.c: 204: while(*s)
  3654                           
  3655                           ;incstack = 0
  3656  010B5C  D015               	goto	l2689
  3657  010B5E                     l2685:
  3658                           
  3659                           ;lcd.c: 205: {
  3660                           ;lcd.c: 206: LcdChar(*s++);
  3661  010B5E  C015  FFF6         	movff	LcdWriteString@s,tblptrl
  3662  010B62  C016  FFF7         	movff	LcdWriteString@s+1,tblptrh
  3663  010B66  0E00               	movlw	low (__mediumconst shr (0+16))
  3664  010B68  6EF8               	movwf	tblptru,c
  3665  010B6A  0E0F               	movlw	(high __ramtop+-1)
  3666  010B6C  64F7               	cpfsgt	tblptrh,c
  3667  010B6E  D003               	bra	u1917
  3668  010B70  0008               	tblrd		*
  3669  010B72  50F5               	movf	tablat,w,c
  3670  010B74  D005               	bra	u1910
  3671  010B76                     u1917:
  3672  010B76  CFF6 FFE9          	movff	tblptrl,fsr0l
  3673  010B7A  CFF7 FFEA          	movff	tblptrh,fsr0h
  3674  010B7E  50EF               	movf	indf0,w,c
  3675  010B80                     u1910:
  3676  010B80  EC25  F087         	call	_LcdChar
  3677  010B84  4A15               	infsnz	LcdWriteString@s,f,c
  3678  010B86  2A16               	incf	LcdWriteString@s+1,f,c
  3679  010B88                     l2689:
  3680  010B88  C015  FFF6         	movff	LcdWriteString@s,tblptrl
  3681  010B8C  C016  FFF7         	movff	LcdWriteString@s+1,tblptrh
  3682  010B90  0E00               	movlw	low (__mediumconst shr (0+16))
  3683  010B92  6EF8               	movwf	tblptru,c
  3684  010B94  0E0F               	movlw	(high __ramtop+-1)
  3685  010B96  64F7               	cpfsgt	tblptrh,c
  3686  010B98  D003               	bra	u1927
  3687  010B9A  0008               	tblrd		*
  3688  010B9C  50F5               	movf	tablat,w,c
  3689  010B9E  D005               	bra	u1920
  3690  010BA0                     u1927:
  3691  010BA0  CFF6 FFE9          	movff	tblptrl,fsr0l
  3692  010BA4  CFF7 FFEA          	movff	tblptrh,fsr0h
  3693  010BA8  50EF               	movf	indf0,w,c
  3694  010BAA                     u1920:
  3695  010BAA  0900               	iorlw	0
  3696  010BAC  B4D8               	btfsc	status,2,c
  3697  010BAE  0012               	return	
  3698  010BB0  D7D6               	goto	l2685
  3699  010BB2                     __end_of_LcdWriteString:
  3700                           	opt stack 0
  3701                           tblptru	equ	0xFF8
  3702                           tblptrh	equ	0xFF7
  3703                           tblptrl	equ	0xFF6
  3704                           tablat	equ	0xFF5
  3705                           prodh	equ	0xFF4
  3706                           prodl	equ	0xFF3
  3707                           intcon	equ	0xFF2
  3708                           indf0	equ	0xFEF
  3709                           postinc0	equ	0xFEE
  3710                           fsr0h	equ	0xFEA
  3711                           fsr0l	equ	0xFE9
  3712                           wreg	equ	0xFE8
  3713                           status	equ	0xFD8
  3714                           
  3715 ;; *************** function _LcdChar *****************
  3716 ;; Defined at:
  3717 ;;		line 186 in file "lcd.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;  letter          1    wreg     unsigned char 
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;  letter          1   19[COMRAM] unsigned char 
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  1    wreg      void 
  3724 ;; Registers used:
  3725 ;;		wreg, status,2, status,0, cstack
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3734 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3735 ;;Total ram usage:        1 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    3
  3738 ;; This function calls:
  3739 ;;		_setGPIO
  3740 ;; This function is called by:
  3741 ;;		_LcdWriteString
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           	psect	text29
  3746  010E4A                     __ptext29:
  3747                           	opt stack 0
  3748  010E4A                     _LcdChar:
  3749                           	opt stack 24
  3750                           
  3751                           ;incstack = 0
  3752                           ;LcdChar@letter stored from wreg
  3753  010E4A  6E14               	movwf	LcdChar@letter,c
  3754                           
  3755                           ;lcd.c: 188: setGPIO(0x12,0x80);
  3756  010E4C  0E80               	movlw	128
  3757  010E4E  6E12               	movwf	setGPIO@value,c
  3758  010E50  0E12               	movlw	18
  3759  010E52  ECAB  F087         	call	_setGPIO
  3760                           
  3761                           ;lcd.c: 190: setGPIO(0x13,letter);
  3762  010E56  C014  F012         	movff	LcdChar@letter,setGPIO@value
  3763  010E5A  0E13               	movlw	19
  3764  010E5C  ECAB  F087         	call	_setGPIO
  3765                           
  3766                           ;lcd.c: 192: setGPIO(0x12, 0xc0);
  3767  010E60  0EC0               	movlw	192
  3768  010E62  6E12               	movwf	setGPIO@value,c
  3769  010E64  0E12               	movlw	18
  3770  010E66  ECAB  F087         	call	_setGPIO
  3771                           
  3772                           ;lcd.c: 194: setGPIO(0x12,0x00);
  3773  010E6A  0E00               	movlw	0
  3774  010E6C  6E12               	movwf	setGPIO@value,c
  3775  010E6E  0E12               	movlw	18
  3776  010E70  ECAB  F087         	call	_setGPIO
  3777  010E74  0012               	return		;funcret
  3778  010E76                     __end_of_LcdChar:
  3779                           	opt stack 0
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           prodh	equ	0xFF4
  3785                           prodl	equ	0xFF3
  3786                           intcon	equ	0xFF2
  3787                           indf0	equ	0xFEF
  3788                           postinc0	equ	0xFEE
  3789                           fsr0h	equ	0xFEA
  3790                           fsr0l	equ	0xFE9
  3791                           wreg	equ	0xFE8
  3792                           status	equ	0xFD8
  3793                           
  3794 ;; *************** function _LcdClear *****************
  3795 ;; Defined at:
  3796 ;;		line 166 in file "lcd.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;		None
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;		None
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  1    wreg      void 
  3803 ;; Registers used:
  3804 ;;		wreg, status,2, status,0, cstack
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;Total ram usage:        0 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; Hardware stack levels required when called:    4
  3817 ;; This function calls:
  3818 ;;		_lcdCommand
  3819 ;; This function is called by:
  3820 ;;		_setLcd
  3821 ;;		_updateLcd
  3822 ;;		_LcdInit
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text30
  3827  011016                     __ptext30:
  3828                           	opt stack 0
  3829  011016                     _LcdClear:
  3830                           	opt stack 24
  3831                           
  3832                           ;lcd.c: 169: lcdCommand(0x01);
  3833                           
  3834                           ;incstack = 0
  3835  011016  0E01               	movlw	1
  3836  011018  EC3B  F087         	call	_lcdCommand
  3837  01101C  0012               	return		;funcret
  3838  01101E                     __end_of_LcdClear:
  3839                           	opt stack 0
  3840                           tblptru	equ	0xFF8
  3841                           tblptrh	equ	0xFF7
  3842                           tblptrl	equ	0xFF6
  3843                           tablat	equ	0xFF5
  3844                           prodh	equ	0xFF4
  3845                           prodl	equ	0xFF3
  3846                           intcon	equ	0xFF2
  3847                           indf0	equ	0xFEF
  3848                           postinc0	equ	0xFEE
  3849                           fsr0h	equ	0xFEA
  3850                           fsr0l	equ	0xFE9
  3851                           wreg	equ	0xFE8
  3852                           status	equ	0xFD8
  3853                           
  3854 ;; *************** function _lcdCommand *****************
  3855 ;; Defined at:
  3856 ;;		line 102 in file "lcd.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;  command         1    wreg     unsigned char 
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;  command         1   19[COMRAM] unsigned char 
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  1    wreg      void 
  3863 ;; Registers used:
  3864 ;;		wreg, status,2, status,0, cstack
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3874 ;;Total ram usage:        1 bytes
  3875 ;; Hardware stack levels used:    1
  3876 ;; Hardware stack levels required when called:    3
  3877 ;; This function calls:
  3878 ;;		_setGPIO
  3879 ;; This function is called by:
  3880 ;;		_LcdInit
  3881 ;;		_LcdClear
  3882 ;;		_LcdGoTo
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           	psect	text31
  3887  010E76                     __ptext31:
  3888                           	opt stack 0
  3889  010E76                     _lcdCommand:
  3890                           	opt stack 24
  3891                           
  3892                           ;incstack = 0
  3893                           ;lcdCommand@command stored from wreg
  3894  010E76  6E14               	movwf	lcdCommand@command,c
  3895                           
  3896                           ;lcd.c: 104: setGPIO(0x12,0x00);
  3897  010E78  0E00               	movlw	0
  3898  010E7A  6E12               	movwf	setGPIO@value,c
  3899  010E7C  0E12               	movlw	18
  3900  010E7E  ECAB  F087         	call	_setGPIO
  3901                           
  3902                           ;lcd.c: 106: setGPIO(0x13, command);
  3903  010E82  C014  F012         	movff	lcdCommand@command,setGPIO@value
  3904  010E86  0E13               	movlw	19
  3905  010E88  ECAB  F087         	call	_setGPIO
  3906                           
  3907                           ;lcd.c: 108: setGPIO(0x12,0x40);
  3908  010E8C  0E40               	movlw	64
  3909  010E8E  6E12               	movwf	setGPIO@value,c
  3910  010E90  0E12               	movlw	18
  3911  010E92  ECAB  F087         	call	_setGPIO
  3912                           
  3913                           ;lcd.c: 110: setGPIO(0x12,0x00);
  3914  010E96  0E00               	movlw	0
  3915  010E98  6E12               	movwf	setGPIO@value,c
  3916  010E9A  0E12               	movlw	18
  3917  010E9C  ECAB  F087         	call	_setGPIO
  3918  010EA0  0012               	return		;funcret
  3919  010EA2                     __end_of_lcdCommand:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           intcon	equ	0xFF2
  3928                           indf0	equ	0xFEF
  3929                           postinc0	equ	0xFEE
  3930                           fsr0h	equ	0xFEA
  3931                           fsr0l	equ	0xFE9
  3932                           wreg	equ	0xFE8
  3933                           status	equ	0xFD8
  3934                           
  3935 ;; *************** function _setGPIO *****************
  3936 ;; Defined at:
  3937 ;;		line 55 in file "lcd.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;  address         1    wreg     unsigned char 
  3940 ;;  value           1   17[COMRAM] unsigned char 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  address         1   18[COMRAM] unsigned char 
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  1    wreg      void 
  3945 ;; Registers used:
  3946 ;;		wreg, status,2, status,0, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3952 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;Total ram usage:        2 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    2
  3959 ;; This function calls:
  3960 ;;		_SWSPIClearCS
  3961 ;;		_SWSPISetCS
  3962 ;;		_SWSPIWrite
  3963 ;; This function is called by:
  3964 ;;		_lcdCommand
  3965 ;;		_LcdInit
  3966 ;;		_LcdChar
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text32
  3971  010F56                     __ptext32:
  3972                           	opt stack 0
  3973  010F56                     _setGPIO:
  3974                           	opt stack 24
  3975                           
  3976                           ;incstack = 0
  3977                           ;setGPIO@address stored from wreg
  3978  010F56  6E13               	movwf	setGPIO@address,c
  3979                           
  3980                           ;lcd.c: 58: SWSPIClearCS();
  3981  010F58  EC21  F088         	call	_SWSPIClearCS	;wreg free
  3982                           
  3983                           ;lcd.c: 61: SWSPIWrite(0x40);
  3984  010F5C  0E40               	movlw	64
  3985  010F5E  EC02  F086         	call	_SWSPIWrite
  3986                           
  3987                           ;lcd.c: 62: SWSPIWrite(address);
  3988  010F62  5013               	movf	setGPIO@address,w,c
  3989  010F64  EC02  F086         	call	_SWSPIWrite
  3990                           
  3991                           ;lcd.c: 63: SWSPIWrite(value);
  3992  010F68  5012               	movf	setGPIO@value,w,c
  3993  010F6A  EC02  F086         	call	_SWSPIWrite
  3994                           
  3995                           ;lcd.c: 64: SWSPISetCS();
  3996  010F6E  EC1F  F088         	call	_SWSPISetCS	;wreg free
  3997  010F72  0012               	return		;funcret
  3998  010F74                     __end_of_setGPIO:
  3999                           	opt stack 0
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           intcon	equ	0xFF2
  4007                           indf0	equ	0xFEF
  4008                           postinc0	equ	0xFEE
  4009                           fsr0h	equ	0xFEA
  4010                           fsr0l	equ	0xFE9
  4011                           wreg	equ	0xFE8
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function _SWSPIWrite *****************
  4015 ;; Defined at:
  4016 ;;		line 75 in file "swspi.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  output          1    wreg     unsigned char 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  output          1   15[COMRAM] unsigned char 
  4021 ;;  BitCount        1   16[COMRAM] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      unsigned char 
  4024 ;; Registers used:
  4025 ;;		wreg, status,2, status,0
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;Total ram usage:        2 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    1
  4038 ;; This function calls:
  4039 ;;		Nothing
  4040 ;; This function is called by:
  4041 ;;		_setGPIO
  4042 ;;		_setIODIR
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           	psect	text33
  4047  010C04                     __ptext33:
  4048                           	opt stack 0
  4049  010C04                     _SWSPIWrite:
  4050                           	opt stack 24
  4051                           
  4052                           ;incstack = 0
  4053                           ;SWSPIWrite@output stored from wreg
  4054  010C04  6E10               	movwf	SWSPIWrite@output,c
  4055                           
  4056                           ;swspi.c: 77: char BitCount;
  4057                           ;swspi.c: 78: static char input;
  4058                           ;swspi.c: 80: BitCount = 8;
  4059  010C06  0E08               	movlw	8
  4060  010C08  6E11               	movwf	SWSPIWrite@BitCount,c
  4061                           
  4062                           ;swspi.c: 81: input = output;
  4063  010C0A  C010  F03F         	movff	SWSPIWrite@output,SWSPIWrite@input
  4064                           
  4065                           ;swspi.c: 87: PORTCbits.RC5 = 0;
  4066  010C0E  9A82               	bcf	3970,5,c	;volatile
  4067                           
  4068                           ;swspi.c: 88: if(input&0x80)
  4069  010C10  BE3F               	btfsc	SWSPIWrite@input,7,c
  4070                           
  4071                           ;swspi.c: 89: PORTCbits.RC5 = 1;
  4072  010C12  8A82               	bsf	3970,5,c	;volatile
  4073                           
  4074                           ;swspi.c: 90: __nop();
  4075  010C14  F000               	nop	
  4076                           
  4077                           ;swspi.c: 91: __nop();
  4078  010C16  F000               	nop	
  4079  010C18                     l298:
  4080                           
  4081                           ;swspi.c: 93: {
  4082                           ;swspi.c: 109: if (PORTCbits.RC4)
  4083  010C18  A882               	btfss	3970,4,c	;volatile
  4084  010C1A  D003               	goto	l2569
  4085                           
  4086                           ;swspi.c: 110: input = (input << 1) | 0x1;
  4087  010C1C  80D8               	bsf	status,0,c
  4088  010C1E  363F               	rlcf	SWSPIWrite@input,f,c
  4089  010C20  D003               	goto	l2571
  4090  010C22                     l2569:
  4091                           
  4092                           ;swspi.c: 111: else
  4093                           ;swspi.c: 112: input = input << 1;
  4094  010C22  503F               	movf	SWSPIWrite@input,w,c
  4095  010C24  243F               	addwf	SWSPIWrite@input,w,c
  4096  010C26  6E3F               	movwf	SWSPIWrite@input,c
  4097  010C28                     l2571:
  4098                           
  4099                           ;swspi.c: 114: PORTCbits.RC3 = 1;
  4100  010C28  8682               	bsf	3970,3,c	;volatile
  4101                           
  4102                           ;swspi.c: 118: __nop();
  4103  010C2A  F000               	nop	
  4104                           
  4105                           ;swspi.c: 119: __nop();
  4106  010C2C  F000               	nop	
  4107                           
  4108                           ;swspi.c: 120: __nop();
  4109  010C2E  F000               	nop	
  4110                           
  4111                           ;swspi.c: 121: __nop();
  4112  010C30  F000               	nop	
  4113                           
  4114                           ;swspi.c: 122: __nop();
  4115  010C32  F000               	nop	
  4116                           
  4117                           ;swspi.c: 123: __nop();
  4118  010C34  F000               	nop	
  4119                           
  4120                           ;swspi.c: 124: __nop();
  4121  010C36  F000               	nop	
  4122                           
  4123                           ;swspi.c: 125: __nop();
  4124  010C38  F000               	nop	
  4125                           
  4126                           ;swspi.c: 126: __nop();
  4127  010C3A  F000               	nop	
  4128                           
  4129                           ;swspi.c: 127: __nop();
  4130  010C3C  F000               	nop	
  4131                           
  4132                           ;swspi.c: 128: __nop();
  4133  010C3E  F000               	nop	
  4134                           
  4135                           ;swspi.c: 129: PORTCbits.RC3 = 0;
  4136  010C40  9682               	bcf	3970,3,c	;volatile
  4137                           
  4138                           ;swspi.c: 130: PORTCbits.RC5 = 0;
  4139  010C42  9A82               	bcf	3970,5,c	;volatile
  4140                           
  4141                           ;swspi.c: 131: if(input&0x80)
  4142  010C44  BE3F               	btfsc	SWSPIWrite@input,7,c
  4143                           
  4144                           ;swspi.c: 132: PORTCbits.RC5 = 1;
  4145  010C46  8A82               	bsf	3970,5,c	;volatile
  4146                           
  4147                           ;swspi.c: 133: BitCount--;
  4148  010C48  0611               	decf	SWSPIWrite@BitCount,f,c
  4149                           
  4150                           ;swspi.c: 134: } while(BitCount);
  4151  010C4A  5011               	movf	SWSPIWrite@BitCount,w,c
  4152  010C4C  B4D8               	btfsc	status,2,c
  4153  010C4E  0012               	return	
  4154  010C50  D7E3               	goto	l298
  4155  010C52                     __end_of_SWSPIWrite:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodh	equ	0xFF4
  4162                           prodl	equ	0xFF3
  4163                           intcon	equ	0xFF2
  4164                           indf0	equ	0xFEF
  4165                           postinc0	equ	0xFEE
  4166                           fsr0h	equ	0xFEA
  4167                           fsr0l	equ	0xFE9
  4168                           wreg	equ	0xFE8
  4169                           status	equ	0xFD8
  4170                           
  4171 ;; *************** function _SWSPISetCS *****************
  4172 ;; Defined at:
  4173 ;;		line 53 in file "swspi.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;		None
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;		None
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  1    wreg      void 
  4180 ;; Registers used:
  4181 ;;		None
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;Total ram usage:        0 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    1
  4194 ;; This function calls:
  4195 ;;		Nothing
  4196 ;; This function is called by:
  4197 ;;		_setGPIO
  4198 ;;		_setIODIR
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           	psect	text34
  4203  01103E                     __ptext34:
  4204                           	opt stack 0
  4205  01103E                     _SWSPISetCS:
  4206                           	opt stack 24
  4207                           
  4208                           ;swspi.c: 55: PORTAbits.RA2 = 1;
  4209                           
  4210                           ;incstack = 0
  4211  01103E  8480               	bsf	3968,2,c	;volatile
  4212  011040  0012               	return		;funcret
  4213  011042                     __end_of_SWSPISetCS:
  4214                           	opt stack 0
  4215                           tblptru	equ	0xFF8
  4216                           tblptrh	equ	0xFF7
  4217                           tblptrl	equ	0xFF6
  4218                           tablat	equ	0xFF5
  4219                           prodh	equ	0xFF4
  4220                           prodl	equ	0xFF3
  4221                           intcon	equ	0xFF2
  4222                           indf0	equ	0xFEF
  4223                           postinc0	equ	0xFEE
  4224                           fsr0h	equ	0xFEA
  4225                           fsr0l	equ	0xFE9
  4226                           wreg	equ	0xFE8
  4227                           status	equ	0xFD8
  4228                           
  4229 ;; *************** function _SWSPIClearCS *****************
  4230 ;; Defined at:
  4231 ;;		line 64 in file "swspi.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		None
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;Total ram usage:        0 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    1
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_setGPIO
  4256 ;;		_setIODIR
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           	psect	text35
  4261  011042                     __ptext35:
  4262                           	opt stack 0
  4263  011042                     _SWSPIClearCS:
  4264                           	opt stack 24
  4265                           
  4266                           ;swspi.c: 66: PORTAbits.RA2 = 0;
  4267                           
  4268                           ;incstack = 0
  4269  011042  9480               	bcf	3968,2,c	;volatile
  4270  011044  0012               	return		;funcret
  4271  011046                     __end_of_SWSPIClearCS:
  4272                           	opt stack 0
  4273                           tblptru	equ	0xFF8
  4274                           tblptrh	equ	0xFF7
  4275                           tblptrl	equ	0xFF6
  4276                           tablat	equ	0xFF5
  4277                           prodh	equ	0xFF4
  4278                           prodl	equ	0xFF3
  4279                           intcon	equ	0xFF2
  4280                           indf0	equ	0xFEF
  4281                           postinc0	equ	0xFEE
  4282                           fsr0h	equ	0xFEA
  4283                           fsr0l	equ	0xFE9
  4284                           wreg	equ	0xFE8
  4285                           status	equ	0xFD8
  4286                           
  4287 ;; *************** function _checkInputs *****************
  4288 ;; Defined at:
  4289 ;;		line 322 in file "clima.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  adcVal          2   51[COMRAM] unsigned int 
  4294 ;;  leftButton      1   50[COMRAM] unsigned char 
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  1    wreg      void 
  4297 ;; Registers used:
  4298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4305 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4306 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4307 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4308 ;;Total ram usage:        6 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    3
  4311 ;; This function calls:
  4312 ;;		_ADCRead
  4313 ;;		___lwdiv
  4314 ;;		___wmul
  4315 ;;		_sprintf
  4316 ;; This function is called by:
  4317 ;;		_main
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text36
  4322  010736                     __ptext36:
  4323                           	opt stack 0
  4324  010736                     _checkInputs:
  4325                           	opt stack 27
  4326                           
  4327                           ;clima.c: 324: unsigned int adcVal = 0;
  4328                           
  4329                           ;incstack = 0
  4330  010736  0E00               	movlw	0
  4331  010738  6E35               	movwf	checkInputs@adcVal+1,c
  4332  01073A  0E00               	movlw	0
  4333  01073C  6E34               	movwf	checkInputs@adcVal,c
  4334                           
  4335                           ;clima.c: 325: byte leftButton = 0;
  4336  01073E  0E00               	movlw	0
  4337  010740  6E33               	movwf	checkInputs@leftButton,c
  4338                           
  4339                           ;clima.c: 327: static byte leftButton_old = 0;
  4340                           ;clima.c: 330: leftButton = PORTBbits.RB0;
  4341  010742  0E00               	movlw	0
  4342  010744  B081               	btfsc	3969,0,c	;volatile
  4343  010746  0E01               	movlw	1
  4344  010748  6E33               	movwf	checkInputs@leftButton,c
  4345                           
  4346                           ;clima.c: 331: if ( (leftButton == 0)
  4347                           ;clima.c: 332: && (leftButton != leftButton_old)
  4348                           ;clima.c: 333: )
  4349  01074A  5033               	movf	checkInputs@leftButton,w,c
  4350  01074C  A4D8               	btfss	status,2,c
  4351  01074E  D006               	goto	l3139
  4352  010750  5041               	movf	checkInputs@leftButton_old,w,c
  4353  010752  1833               	xorwf	checkInputs@leftButton,w,c
  4354  010754  B4D8               	btfsc	status,2,c
  4355  010756  D002               	goto	l3139
  4356                           
  4357                           ;clima.c: 334: {
  4358                           ;clima.c: 335: leftButtonEv = 1;
  4359  010758  0E01               	movlw	1
  4360  01075A  6E47               	movwf	_leftButtonEv,c
  4361  01075C                     l3139:
  4362                           
  4363                           ;clima.c: 336: }
  4364                           ;clima.c: 337: leftButton_old = leftButton;
  4365  01075C  C033  F041         	movff	checkInputs@leftButton,checkInputs@leftButton_old
  4366                           
  4367                           ;clima.c: 347: adcVal = ADCRead(0);
  4368  010760  0E00               	movlw	0
  4369  010762  ECEE  F086         	call	_ADCRead
  4370  010766  C010  F034         	movff	?_ADCRead,checkInputs@adcVal
  4371  01076A  C011  F035         	movff	?_ADCRead+1,checkInputs@adcVal+1
  4372                           
  4373                           ;clima.c: 348: setTemp = adcVal/64 + 21;
  4374  01076E  C034  F030         	movff	checkInputs@adcVal,??_checkInputs
  4375  010772  C035  F031         	movff	checkInputs@adcVal+1,??_checkInputs+1
  4376  010776  0E06               	movlw	6
  4377  010778  6E32               	movwf	(??_checkInputs+2)& (0+255),c
  4378  01077A                     u2495:
  4379  01077A  90D8               	bcf	status,0,c
  4380  01077C  3231               	rrcf	??_checkInputs+1,f,c
  4381  01077E  3230               	rrcf	??_checkInputs,f,c
  4382  010780  2E32               	decfsz	(??_checkInputs+2)& (0+255),f,c
  4383  010782  D7FB               	goto	u2495
  4384  010784  5030               	movf	??_checkInputs,w,c
  4385  010786  0F15               	addlw	21
  4386  010788  6E46               	movwf	_setTemp,c
  4387                           
  4388                           ;clima.c: 351: if (inDeb == 0)
  4389  01078A  5042               	movf	_inDeb,w,c
  4390  01078C  A4D8               	btfss	status,2,c
  4391  01078E  D061               	goto	l3159
  4392                           
  4393                           ;clima.c: 352: {
  4394                           ;clima.c: 362: adcVal = ADCRead(1);
  4395  010790  0E01               	movlw	1
  4396  010792  ECEE  F086         	call	_ADCRead
  4397  010796  C010  F034         	movff	?_ADCRead,checkInputs@adcVal
  4398  01079A  C011  F035         	movff	?_ADCRead+1,checkInputs@adcVal+1
  4399                           
  4400                           ;clima.c: 363: outTemp = (adcVal*5 - (400))/(19);
  4401  01079E  C034  F010         	movff	checkInputs@adcVal,___wmul@multiplier
  4402  0107A2  C035  F011         	movff	checkInputs@adcVal+1,___wmul@multiplier+1
  4403  0107A6  0E00               	movlw	0
  4404  0107A8  6E13               	movwf	___wmul@multiplicand+1,c
  4405  0107AA  0E05               	movlw	5
  4406  0107AC  6E12               	movwf	___wmul@multiplicand,c
  4407  0107AE  EC66  F087         	call	___wmul	;wreg free
  4408  0107B2  0E70               	movlw	112
  4409  0107B4  2410               	addwf	?___wmul,w,c
  4410  0107B6  6E16               	movwf	___lwdiv@dividend,c
  4411  0107B8  0EFE               	movlw	254
  4412  0107BA  2011               	addwfc	?___wmul+1,w,c
  4413  0107BC  6E17               	movwf	___lwdiv@dividend+1,c
  4414  0107BE  0E00               	movlw	0
  4415  0107C0  6E19               	movwf	___lwdiv@divisor+1,c
  4416  0107C2  0E13               	movlw	19
  4417  0107C4  6E18               	movwf	___lwdiv@divisor,c
  4418  0107C6  ECD9  F085         	call	___lwdiv	;wreg free
  4419  0107CA  C016  F03B         	movff	?___lwdiv,_outTemp
  4420  0107CE  C017  F03C         	movff	?___lwdiv+1,_outTemp+1
  4421                           
  4422                           ;clima.c: 364: ;
  4423                           ;clima.c: 365: sprintf(msg, "%d", outTemp);
  4424  0107D2  0E60               	movlw	low _msg
  4425  0107D4  6E22               	movwf	sprintf@sp,c
  4426  0107D6  0E00               	movlw	high _msg
  4427  0107D8  6E23               	movwf	sprintf@sp+1,c
  4428  0107DA  0EF8               	movlw	low STR_11
  4429  0107DC  6E24               	movwf	sprintf@f,c
  4430  0107DE  0EFF               	movlw	high STR_11
  4431  0107E0  6E25               	movwf	sprintf@f+1,c
  4432  0107E2  C03B  F026         	movff	_outTemp,?_sprintf+4
  4433  0107E6  C03C  F027         	movff	_outTemp+1,?_sprintf+5
  4434  0107EA  EC00  F080         	call	_sprintf	;wreg free
  4435                           
  4436                           ;clima.c: 366: ;
  4437                           ;clima.c: 367: ;
  4438                           ;clima.c: 381: adcVal = ADCRead(3);
  4439  0107EE  0E03               	movlw	3
  4440  0107F0  ECEE  F086         	call	_ADCRead
  4441  0107F4  C010  F034         	movff	?_ADCRead,checkInputs@adcVal
  4442  0107F8  C011  F035         	movff	?_ADCRead+1,checkInputs@adcVal+1
  4443                           
  4444                           ;clima.c: 382: inTemp = (adcVal*5 - (400))/(10);
  4445  0107FC  C034  F010         	movff	checkInputs@adcVal,___wmul@multiplier
  4446  010800  C035  F011         	movff	checkInputs@adcVal+1,___wmul@multiplier+1
  4447  010804  0E00               	movlw	0
  4448  010806  6E13               	movwf	___wmul@multiplicand+1,c
  4449  010808  0E05               	movlw	5
  4450  01080A  6E12               	movwf	___wmul@multiplicand,c
  4451  01080C  EC66  F087         	call	___wmul	;wreg free
  4452  010810  0E70               	movlw	112
  4453  010812  2410               	addwf	?___wmul,w,c
  4454  010814  6E16               	movwf	___lwdiv@dividend,c
  4455  010816  0EFE               	movlw	254
  4456  010818  2011               	addwfc	?___wmul+1,w,c
  4457  01081A  6E17               	movwf	___lwdiv@dividend+1,c
  4458  01081C  0E00               	movlw	0
  4459  01081E  6E19               	movwf	___lwdiv@divisor+1,c
  4460  010820  0E0A               	movlw	10
  4461  010822  6E18               	movwf	___lwdiv@divisor,c
  4462  010824  ECD9  F085         	call	___lwdiv	;wreg free
  4463  010828  C016  F03D         	movff	?___lwdiv,_inTemp
  4464  01082C  C017  F03E         	movff	?___lwdiv+1,_inTemp+1
  4465                           
  4466                           ;clima.c: 383: ;
  4467                           ;clima.c: 384: sprintf(msg, "%d", inTemp);
  4468  010830  0E60               	movlw	low _msg
  4469  010832  6E22               	movwf	sprintf@sp,c
  4470  010834  0E00               	movlw	high _msg
  4471  010836  6E23               	movwf	sprintf@sp+1,c
  4472  010838  0EF8               	movlw	low STR_11
  4473  01083A  6E24               	movwf	sprintf@f,c
  4474  01083C  0EFF               	movlw	high STR_11
  4475  01083E  6E25               	movwf	sprintf@f+1,c
  4476  010840  C03D  F026         	movff	_inTemp,?_sprintf+4
  4477  010844  C03E  F027         	movff	_inTemp+1,?_sprintf+5
  4478  010848  EC00  F080         	call	_sprintf	;wreg free
  4479                           
  4480                           ;clima.c: 385: ;
  4481                           ;clima.c: 386: ;
  4482                           ;clima.c: 388: inDeb = ((3000)/(100));
  4483  01084C  0E1E               	movlw	30
  4484  01084E  6E42               	movwf	_inDeb,c
  4485                           
  4486                           ;clima.c: 389: }
  4487  010850  0012               	return	
  4488  010852                     l3159:
  4489                           
  4490                           ;clima.c: 390: else
  4491                           ;clima.c: 391: {
  4492                           ;clima.c: 392: inDeb--;
  4493  010852  0642               	decf	_inDeb,f,c
  4494  010854  0012               	return	
  4495  010856                     __end_of_checkInputs:
  4496                           	opt stack 0
  4497                           tblptru	equ	0xFF8
  4498                           tblptrh	equ	0xFF7
  4499                           tblptrl	equ	0xFF6
  4500                           tablat	equ	0xFF5
  4501                           prodh	equ	0xFF4
  4502                           prodl	equ	0xFF3
  4503                           intcon	equ	0xFF2
  4504                           indf0	equ	0xFEF
  4505                           postinc0	equ	0xFEE
  4506                           fsr0h	equ	0xFEA
  4507                           fsr0l	equ	0xFE9
  4508                           wreg	equ	0xFE8
  4509                           status	equ	0xFD8
  4510                           
  4511 ;; *************** function _sprintf *****************
  4512 ;; Defined at:
  4513 ;;		line 492 in file "D:\Hella\Compiler\sources\common\doprnt.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  sp              2   33[COMRAM] PTR unsigned char 
  4516 ;;		 -> msg(20), 
  4517 ;;  f               2   35[COMRAM] PTR const unsigned char 
  4518 ;;		 -> STR_20(22), STR_19(3), STR_18(3), STR_11(3), 
  4519 ;;		 -> STR_2(5), STR_1(5), 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  tmpval          4    0        struct .
  4522 ;;  cp              3    0        PTR const unsigned char 
  4523 ;;  width           2    6[BANK0 ] int 
  4524 ;;  val             2    3[BANK0 ] unsigned int 
  4525 ;;  ap              2    0[BANK0 ] PTR void [1]
  4526 ;;		 -> ?_sprintf(2), 
  4527 ;;  len             2    0        unsigned int 
  4528 ;;  c               1    8[BANK0 ] char 
  4529 ;;  flag            1    5[BANK0 ] unsigned char 
  4530 ;;  prec            1    2[BANK0 ] char 
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  2   33[COMRAM] int 
  4533 ;; Registers used:
  4534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4540 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;      Totals:        14       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4544 ;;Total ram usage:       23 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; Hardware stack levels required when called:    2
  4547 ;; This function calls:
  4548 ;;		___lwdiv
  4549 ;;		___lwmod
  4550 ;;		___wmul
  4551 ;;		_isdigit
  4552 ;; This function is called by:
  4553 ;;		_updateLcd
  4554 ;;		_checkInputs
  4555 ;;		_stateMachine
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text37
  4560  010000                     __ptext37:
  4561                           	opt stack 0
  4562  010000                     _sprintf:
  4563                           	opt stack 26
  4564                           
  4565                           ;doprnt.c: 494: va_list ap;
  4566                           ;doprnt.c: 499: signed char c;
  4567                           ;doprnt.c: 501: int width;
  4568                           ;doprnt.c: 506: signed char prec;
  4569                           ;doprnt.c: 508: unsigned char flag;
  4570                           ;doprnt.c: 523: union {
  4571                           ;doprnt.c: 524: unsigned long vd;
  4572                           ;doprnt.c: 525: double integ;
  4573                           ;doprnt.c: 526: } tmpval;
  4574                           ;doprnt.c: 528: unsigned int val;
  4575                           ;doprnt.c: 529: unsigned len;
  4576                           ;doprnt.c: 530: const char * cp;
  4577                           ;doprnt.c: 533: *ap = __va_start();
  4578                           
  4579                           ;incstack = 0
  4580  010000  0E26               	movlw	low (?_sprintf+4)
  4581  010002  0100               	movlb	0	; () banked
  4582  010004  6F74               	movwf	sprintf@ap& (0+255),b
  4583  010006  0E00               	movlw	high (?_sprintf+4)
  4584  010008  0100               	movlb	0	; () banked
  4585  01000A  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  4586                           
  4587                           ;doprnt.c: 536: while(c = *f++) {
  4588  01000C  D16A               	goto	l2799
  4589  01000E                     l2693:
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;doprnt.c: 538: if(c != '%')
  4593  01000E  0E25               	movlw	37
  4594  010010  0100               	movlb	0	; () banked
  4595  010012  197C               	xorwf	sprintf@c& (0+255),w,b
  4596  010014  B4D8               	btfsc	status,2,c
  4597  010016  D009               	goto	l2699
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;doprnt.c: 540: {
  4601                           ;doprnt.c: 541: ((*sp++ = (c)));
  4602  010018  C022  FFD9         	movff	sprintf@sp,fsr2l
  4603  01001C  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  4604  010020  C07C  FFDF         	movff	sprintf@c,indf2
  4605                           
  4606                           ; BSR set to: 0
  4607  010024  4A22               	infsnz	sprintf@sp,f,c
  4608  010026  2A23               	incf	sprintf@sp+1,f,c
  4609                           
  4610                           ;doprnt.c: 542: continue;
  4611  010028  D15C               	goto	l2799
  4612  01002A                     l2699:
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;doprnt.c: 543: }
  4616                           ;doprnt.c: 546: width = 0;
  4617  01002A  0E00               	movlw	0
  4618  01002C  0100               	movlb	0	; () banked
  4619  01002E  6F7B               	movwf	(sprintf@width+1)& (0+255),b
  4620  010030  0E00               	movlw	0
  4621  010032  6F7A               	movwf	sprintf@width& (0+255),b
  4622                           
  4623                           ;doprnt.c: 548: flag = 0;
  4624  010034  0E00               	movlw	0
  4625  010036  0100               	movlb	0	; () banked
  4626  010038  6F79               	movwf	sprintf@flag& (0+255),b
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;doprnt.c: 551: switch(*f) {
  4630                           
  4631                           ;doprnt.c: 550: for(;;) {
  4632  01003A  D004               	goto	l2705
  4633  01003C                     l2701:
  4634                           
  4635                           ;doprnt.c: 580: flag |= 0x04;
  4636  01003C  0100               	movlb	0	; () banked
  4637  01003E  8579               	bsf	sprintf@flag& (0+255),2,b
  4638                           
  4639                           ;doprnt.c: 581: f++;
  4640  010040  4A24               	infsnz	sprintf@f,f,c
  4641  010042  2A25               	incf	sprintf@f+1,f,c
  4642  010044                     l2705:
  4643  010044  C024  FFF6         	movff	sprintf@f,tblptrl
  4644  010048  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4645  01004C                     	if	0	;tblptru may be non-zero
  4646  01004C                     	endif
  4647  01004C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4648  01004C  0E00               	movlw	low (__mediumconst shr (0+16))
  4649  01004E  6EF8               	movwf	tblptru,c
  4650  010050                     	endif
  4651  010050  0008               	tblrd		*
  4652  010052  50F5               	movf	tablat,w,c
  4653                           
  4654                           ; Switch size 1, requested type "space"
  4655                           ; Number of cases is 1, Range of values is 48 to 48
  4656                           ; switch strategies available:
  4657                           ; Name         Instructions Cycles
  4658                           ; simple_byte            4     3 (average)
  4659                           ;	Chosen strategy is simple_byte
  4660  010054  0A30               	xorlw	48	; case 48
  4661  010056  B4D8               	btfsc	status,2,c
  4662  010058  D7F1               	goto	l2701
  4663                           
  4664                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4665                           
  4666                           ;doprnt.c: 586: }
  4667                           
  4668                           ;doprnt.c: 585: break;
  4669  01005A  C024  FFF6         	movff	sprintf@f,tblptrl
  4670  01005E  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4671  010062                     	if	0	;tblptru may be non-zero
  4672  010062                     	endif
  4673  010062                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4674  010062  0E00               	movlw	low (__mediumconst shr (0+16))
  4675  010064  6EF8               	movwf	tblptru,c
  4676  010066                     	endif
  4677  010066  0008               	tblrd		*
  4678  010068  50F5               	movf	tablat,w,c
  4679  01006A  ECBA  F087         	call	_isdigit
  4680  01006E  A0D8               	btfss	status,0,c
  4681  010070  D039               	goto	l2721
  4682                           
  4683                           ;doprnt.c: 598: width = 0;
  4684  010072  0E00               	movlw	0
  4685  010074  0100               	movlb	0	; () banked
  4686  010076  6F7B               	movwf	(sprintf@width+1)& (0+255),b
  4687  010078  0E00               	movlw	0
  4688  01007A  6F7A               	movwf	sprintf@width& (0+255),b
  4689  01007C                     l2711:
  4690                           
  4691                           ;doprnt.c: 600: width *= 10;
  4692  01007C  C07A  F010         	movff	sprintf@width,___wmul@multiplier
  4693  010080  C07B  F011         	movff	sprintf@width+1,___wmul@multiplier+1
  4694  010084  0E00               	movlw	0
  4695  010086  6E13               	movwf	___wmul@multiplicand+1,c
  4696  010088  0E0A               	movlw	10
  4697  01008A  6E12               	movwf	___wmul@multiplicand,c
  4698  01008C  EC66  F087         	call	___wmul	;wreg free
  4699  010090  C010  F07A         	movff	?___wmul,sprintf@width
  4700  010094  C011  F07B         	movff	?___wmul+1,sprintf@width+1
  4701                           
  4702                           ;doprnt.c: 601: width += *f++ - '0';
  4703  010098  0ED0               	movlw	208
  4704  01009A  6E2C               	movwf	??_sprintf& (0+255),c
  4705  01009C  0EFF               	movlw	255
  4706  01009E  6E2D               	movwf	(??_sprintf+1)& (0+255),c
  4707  0100A0  C024  FFF6         	movff	sprintf@f,tblptrl
  4708  0100A4  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4709  0100A8                     	if	0	;tblptru may be non-zero
  4710  0100A8                     	endif
  4711  0100A8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4712  0100A8  0E00               	movlw	low (__mediumconst shr (0+16))
  4713  0100AA  6EF8               	movwf	tblptru,c
  4714  0100AC                     	endif
  4715  0100AC  0008               	tblrd		*
  4716  0100AE  50F5               	movf	tablat,w,c
  4717  0100B0  6E2E               	movwf	(??_sprintf+2)& (0+255),c
  4718  0100B2  6A2F               	clrf	(??_sprintf+3)& (0+255),c
  4719  0100B4  502C               	movf	??_sprintf,w,c
  4720  0100B6  262E               	addwf	??_sprintf+2,f,c
  4721  0100B8  502D               	movf	??_sprintf+1,w,c
  4722  0100BA  222F               	addwfc	??_sprintf+3,f,c
  4723  0100BC  502E               	movf	??_sprintf+2,w,c
  4724  0100BE  0100               	movlb	0	; () banked
  4725  0100C0  277A               	addwf	sprintf@width& (0+255),f,b
  4726  0100C2  502F               	movf	??_sprintf+3,w,c
  4727  0100C4  0100               	movlb	0	; () banked
  4728  0100C6  237B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4729                           
  4730                           ; BSR set to: 0
  4731  0100C8  4A24               	infsnz	sprintf@f,f,c
  4732  0100CA  2A25               	incf	sprintf@f+1,f,c
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4736  0100CC  C024  FFF6         	movff	sprintf@f,tblptrl
  4737  0100D0  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4738  0100D4                     	if	0	;tblptru may be non-zero
  4739  0100D4                     	endif
  4740  0100D4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4741  0100D4  0E00               	movlw	low (__mediumconst shr (0+16))
  4742  0100D6  6EF8               	movwf	tblptru,c
  4743  0100D8                     	endif
  4744  0100D8  0008               	tblrd		*
  4745  0100DA  50F5               	movf	tablat,w,c
  4746  0100DC  ECBA  F087         	call	_isdigit
  4747  0100E0  B0D8               	btfsc	status,0,c
  4748  0100E2  D7CC               	goto	l2711
  4749  0100E4                     l2721:
  4750  0100E4  C024  FFF6         	movff	sprintf@f,tblptrl
  4751  0100E8  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4752  0100EC  4A24               	infsnz	sprintf@f,f,c
  4753  0100EE  2A25               	incf	sprintf@f+1,f,c
  4754  0100F0                     	if	0	;tblptru may be non-zero
  4755  0100F0                     	endif
  4756  0100F0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4757  0100F0  0E00               	movlw	low (__mediumconst shr (0+16))
  4758  0100F2  6EF8               	movwf	tblptru,c
  4759  0100F4                     	endif
  4760  0100F4  0008               	tblrd		*
  4761  0100F6  CFF5 F07C          	movff	tablat,sprintf@c
  4762  0100FA  0100               	movlb	0	; () banked
  4763  0100FC  517C               	movf	sprintf@c& (0+255),w,b
  4764                           
  4765                           ; Switch size 1, requested type "space"
  4766                           ; Number of cases is 3, Range of values is 0 to 105
  4767                           ; switch strategies available:
  4768                           ; Name         Instructions Cycles
  4769                           ; simple_byte           10     6 (average)
  4770                           ;	Chosen strategy is simple_byte
  4771  0100FE  0A00               	xorlw	0	; case 0
  4772  010100  B4D8               	btfsc	status,2,c
  4773  010102  D0FE               	goto	l2801
  4774  010104  0A64               	xorlw	100	; case 100
  4775  010106  B4D8               	btfsc	status,2,c
  4776  010108  D003               	goto	l2723
  4777  01010A  0A0D               	xorlw	13	; case 105
  4778  01010C  A4D8               	btfss	status,2,c
  4779  01010E  D0E9               	goto	l2799
  4780  010110                     l2723:
  4781                           
  4782                           ;doprnt.c: 1253: {
  4783                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4784  010110  C074  FFD9         	movff	sprintf@ap,fsr2l
  4785  010114  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  4786  010118  CFDE F077          	movff	postinc2,sprintf@val
  4787  01011C  CFDD F078          	movff	postdec2,sprintf@val+1
  4788  010120  0E02               	movlw	2
  4789  010122  0100               	movlb	0	; () banked
  4790  010124  2774               	addwf	sprintf@ap& (0+255),f,b
  4791  010126  0E00               	movlw	0
  4792  010128  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;doprnt.c: 1261: if((int)val < 0) {
  4796  01012A  0100               	movlb	0	; () banked
  4797  01012C  AF78               	btfss	(sprintf@val+1)& (0+255),7,b
  4798  01012E  D008               	goto	l2733
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;doprnt.c: 1262: flag |= 0x03;
  4802  010130  0E03               	movlw	3
  4803  010132  0100               	movlb	0	; () banked
  4804  010134  1379               	iorwf	sprintf@flag& (0+255),f,b
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;doprnt.c: 1263: val = -val;
  4808  010136  0100               	movlb	0	; () banked
  4809  010138  6D77               	negf	sprintf@val& (0+255),b
  4810  01013A  1F78               	comf	(sprintf@val+1)& (0+255),f,b
  4811  01013C  B0D8               	btfsc	status,0,c
  4812  01013E  2B78               	incf	(sprintf@val+1)& (0+255),f,b
  4813  010140                     l2733:
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;doprnt.c: 1264: }
  4817                           ;doprnt.c: 1266: }
  4818                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4819  010140  0E01               	movlw	1
  4820  010142  0100               	movlb	0	; () banked
  4821  010144  6F7C               	movwf	sprintf@c& (0+255),b
  4822  010146                     l2735:
  4823                           
  4824                           ; BSR set to: 0
  4825  010146  0E05               	movlw	5
  4826  010148  0100               	movlb	0	; () banked
  4827  01014A  197C               	xorwf	sprintf@c& (0+255),w,b
  4828  01014C  B4D8               	btfsc	status,2,c
  4829  01014E  D019               	goto	l2747
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;doprnt.c: 1306: if(val < dpowers[c])
  4833                           
  4834                           ; BSR set to: 0
  4835                           
  4836                           ; BSR set to: 0
  4837  010150  0100               	movlb	0	; () banked
  4838  010152  517C               	movf	sprintf@c& (0+255),w,b
  4839  010154  0D02               	mullw	2
  4840  010156  0EF5               	movlw	low _dpowers
  4841  010158  24F3               	addwf	prodl,w,c
  4842  01015A  6EF6               	movwf	tblptrl,c
  4843  01015C  0EFE               	movlw	high _dpowers
  4844  01015E  20F4               	addwfc	prodh,w,c
  4845  010160  6EF7               	movwf	tblptrh,c
  4846  010162                     	if	1	;There are 3 active tblptr bytes
  4847  010162  6AF8               	clrf	tblptru,c
  4848  010164  0E00               	movlw	low (__mediumconst shr (0+16))
  4849  010166  22F8               	addwfc	tblptru,f,c
  4850  010168                     	endif
  4851  010168  0009               	tblrd		*+
  4852  01016A  50F5               	movf	tablat,w,c
  4853  01016C  0100               	movlb	0	; () banked
  4854  01016E  5D77               	subwf	sprintf@val& (0+255),w,b
  4855  010170  0009               	tblrd		*+
  4856  010172  50F5               	movf	tablat,w,c
  4857  010174  0100               	movlb	0	; () banked
  4858  010176  5978               	subwfb	(sprintf@val+1)& (0+255),w,b
  4859  010178  A0D8               	btfss	status,0,c
  4860  01017A  D003               	goto	l2747
  4861                           
  4862                           ; BSR set to: 0
  4863                           
  4864                           ; BSR set to: 0
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;doprnt.c: 1307: break;
  4868  01017C  0100               	movlb	0	; () banked
  4869  01017E  2B7C               	incf	sprintf@c& (0+255),f,b
  4870  010180  D7E2               	goto	l2735
  4871  010182                     l2747:
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4875  010182  0100               	movlb	0	; () banked
  4876  010184  517A               	movf	sprintf@width& (0+255),w,b
  4877  010186  0100               	movlb	0	; () banked
  4878  010188  117B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4879  01018A  B4D8               	btfsc	status,2,c
  4880  01018C  D00A               	goto	l2753
  4881                           
  4882                           ; BSR set to: 0
  4883  01018E  C079  F02C         	movff	sprintf@flag,??_sprintf
  4884  010192  0E03               	movlw	3
  4885  010194  162C               	andwf	??_sprintf,f,c
  4886  010196  B4D8               	btfsc	status,2,c
  4887  010198  D004               	goto	l2753
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;doprnt.c: 1346: width--;
  4891  01019A  0100               	movlb	0	; () banked
  4892  01019C  077A               	decf	sprintf@width& (0+255),f,b
  4893  01019E  A0D8               	btfss	status,0,c
  4894  0101A0  077B               	decf	(sprintf@width+1)& (0+255),f,b
  4895  0101A2                     l2753:
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;doprnt.c: 1381: if(width > c)
  4899  0101A2  0E80               	movlw	128
  4900  0101A4  0100               	movlb	0	; () banked
  4901  0101A6  BF7C               	btfsc	sprintf@c& (0+255),7,b
  4902  0101A8  0E7F               	movlw	127
  4903  0101AA  6E2C               	movwf	??_sprintf& (0+255),c
  4904  0101AC  0100               	movlb	0	; () banked
  4905  0101AE  517A               	movf	sprintf@width& (0+255),w,b
  4906  0101B0  0100               	movlb	0	; () banked
  4907  0101B2  5D7C               	subwf	sprintf@c& (0+255),w,b
  4908  0101B4  0100               	movlb	0	; () banked
  4909  0101B6  517B               	movf	(sprintf@width+1)& (0+255),w,b
  4910  0101B8  0A80               	xorlw	128
  4911  0101BA  582C               	subwfb	??_sprintf& (0+255),w,c
  4912  0101BC  B0D8               	btfsc	status,0,c
  4913  0101BE  D00B               	goto	l2757
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;doprnt.c: 1382: width -= c;
  4917  0101C0  0100               	movlb	0	; () banked
  4918  0101C2  517C               	movf	sprintf@c& (0+255),w,b
  4919  0101C4  0100               	movlb	0	; () banked
  4920  0101C6  5F7A               	subwf	sprintf@width& (0+255),f,b
  4921  0101C8  0E00               	movlw	0
  4922  0101CA  0100               	movlb	0	; () banked
  4923  0101CC  BF7C               	btfsc	sprintf@c& (0+255),7,b
  4924  0101CE  0EFF               	movlw	255
  4925  0101D0  0100               	movlb	0	; () banked
  4926  0101D2  5B7B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4927  0101D4  D005               	goto	l2759
  4928  0101D6                     l2757:
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;doprnt.c: 1383: else
  4932                           ;doprnt.c: 1384: width = 0;
  4933  0101D6  0E00               	movlw	0
  4934  0101D8  0100               	movlb	0	; () banked
  4935  0101DA  6F7B               	movwf	(sprintf@width+1)& (0+255),b
  4936  0101DC  0E00               	movlw	0
  4937  0101DE  6F7A               	movwf	sprintf@width& (0+255),b
  4938  0101E0                     l2759:
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;doprnt.c: 1387: if(flag & 0x04) {
  4942  0101E0  0100               	movlb	0	; () banked
  4943  0101E2  A579               	btfss	sprintf@flag& (0+255),2,b
  4944  0101E4  D021               	goto	l2775
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;doprnt.c: 1392: if(flag & 0x03)
  4948  0101E6  C079  F02C         	movff	sprintf@flag,??_sprintf
  4949  0101EA  0E03               	movlw	3
  4950  0101EC  162C               	andwf	??_sprintf,f,c
  4951  0101EE  B4D8               	btfsc	status,2,c
  4952  0101F0  D008               	goto	l2767
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4956  0101F2  C022  FFD9         	movff	sprintf@sp,fsr2l
  4957  0101F6  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  4958  0101FA  0E2D               	movlw	45
  4959  0101FC  6EDF               	movwf	indf2,c
  4960                           
  4961                           ; BSR set to: 0
  4962  0101FE  4A22               	infsnz	sprintf@sp,f,c
  4963  010200  2A23               	incf	sprintf@sp+1,f,c
  4964  010202                     l2767:
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;doprnt.c: 1415: if(width)
  4968  010202  0100               	movlb	0	; () banked
  4969  010204  517A               	movf	sprintf@width& (0+255),w,b
  4970  010206  0100               	movlb	0	; () banked
  4971  010208  117B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4972  01020A  B4D8               	btfsc	status,2,c
  4973  01020C  D033               	goto	l2789
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4977                           
  4978                           ; BSR set to: 0
  4979                           
  4980                           ;doprnt.c: 1416: do
  4981  01020E  C022  FFD9         	movff	sprintf@sp,fsr2l
  4982  010212  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  4983  010216  0E30               	movlw	48
  4984  010218  6EDF               	movwf	indf2,c
  4985                           
  4986                           ; BSR set to: 0
  4987  01021A  4A22               	infsnz	sprintf@sp,f,c
  4988  01021C  2A23               	incf	sprintf@sp+1,f,c
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;doprnt.c: 1418: while(--width);
  4992  01021E  0100               	movlb	0	; () banked
  4993  010220  077A               	decf	sprintf@width& (0+255),f,b
  4994  010222  A0D8               	btfss	status,0,c
  4995  010224  077B               	decf	(sprintf@width+1)& (0+255),f,b
  4996  010226  D7ED               	goto	l2767
  4997  010228                     l2775:
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;doprnt.c: 1422: {
  5001                           ;doprnt.c: 1424: if(width
  5002                           ;doprnt.c: 1428: )
  5003  010228  0100               	movlb	0	; () banked
  5004  01022A  517A               	movf	sprintf@width& (0+255),w,b
  5005  01022C  0100               	movlb	0	; () banked
  5006  01022E  117B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5007  010230  B4D8               	btfsc	status,2,c
  5008  010232  D012               	goto	l2783
  5009  010234                     l2777:
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5013  010234  C022  FFD9         	movff	sprintf@sp,fsr2l
  5014  010238  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  5015  01023C  0E20               	movlw	32
  5016  01023E  6EDF               	movwf	indf2,c
  5017                           
  5018                           ; BSR set to: 0
  5019  010240  4A22               	infsnz	sprintf@sp,f,c
  5020  010242  2A23               	incf	sprintf@sp+1,f,c
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;doprnt.c: 1431: while(--width);
  5024  010244  0100               	movlb	0	; () banked
  5025  010246  077A               	decf	sprintf@width& (0+255),f,b
  5026  010248  A0D8               	btfss	status,0,c
  5027  01024A  077B               	decf	(sprintf@width+1)& (0+255),f,b
  5028  01024C  0100               	movlb	0	; () banked
  5029  01024E  517A               	movf	sprintf@width& (0+255),w,b
  5030  010250  0100               	movlb	0	; () banked
  5031  010252  117B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5032  010254  A4D8               	btfss	status,2,c
  5033  010256  D7EE               	goto	l2777
  5034  010258                     l2783:
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;doprnt.c: 1438: if(flag & 0x03)
  5038  010258  C079  F02C         	movff	sprintf@flag,??_sprintf
  5039  01025C  0E03               	movlw	3
  5040  01025E  162C               	andwf	??_sprintf,f,c
  5041  010260  B4D8               	btfsc	status,2,c
  5042  010262  D008               	goto	l2789
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5046  010264  C022  FFD9         	movff	sprintf@sp,fsr2l
  5047  010268  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  5048  01026C  0E2D               	movlw	45
  5049  01026E  6EDF               	movwf	indf2,c
  5050                           
  5051                           ; BSR set to: 0
  5052  010270  4A22               	infsnz	sprintf@sp,f,c
  5053  010272  2A23               	incf	sprintf@sp+1,f,c
  5054  010274                     l2789:
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;doprnt.c: 1469: }
  5058                           ;doprnt.c: 1472: prec = c;
  5059  010274  C07C  F076         	movff	sprintf@c,sprintf@prec
  5060                           
  5061                           ;doprnt.c: 1474: while(prec--) {
  5062  010278  D02E               	goto	l2797
  5063  01027A                     l2791:
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;doprnt.c: 1478: {
  5067                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5068  01027A  0100               	movlb	0	; () banked
  5069  01027C  5176               	movf	sprintf@prec& (0+255),w,b
  5070  01027E  0D02               	mullw	2
  5071  010280  0EF5               	movlw	low _dpowers
  5072  010282  24F3               	addwf	prodl,w,c
  5073  010284  6EF6               	movwf	tblptrl,c
  5074  010286  0EFE               	movlw	high _dpowers
  5075  010288  20F4               	addwfc	prodh,w,c
  5076  01028A  6EF7               	movwf	tblptrh,c
  5077  01028C                     	if	1	;There are 3 active tblptr bytes
  5078  01028C  6AF8               	clrf	tblptru,c
  5079  01028E  0E00               	movlw	low (__mediumconst shr (0+16))
  5080  010290  22F8               	addwfc	tblptru,f,c
  5081  010292                     	endif
  5082  010292  0009               	tblrd		*+
  5083  010294  CFF5 F018          	movff	tablat,___lwdiv@divisor
  5084  010298  000A               	tblrd		*-
  5085  01029A  CFF5 F019          	movff	tablat,___lwdiv@divisor+1
  5086  01029E  C077  F016         	movff	sprintf@val,___lwdiv@dividend
  5087  0102A2  C078  F017         	movff	sprintf@val+1,___lwdiv@dividend+1
  5088  0102A6  ECD9  F085         	call	___lwdiv	;wreg free
  5089  0102AA  C016  F01D         	movff	?___lwdiv,___lwmod@dividend
  5090  0102AE  C017  F01E         	movff	?___lwdiv+1,___lwmod@dividend+1
  5091  0102B2  0E00               	movlw	0
  5092  0102B4  6E20               	movwf	___lwmod@divisor+1,c
  5093  0102B6  0E0A               	movlw	10
  5094  0102B8  6E1F               	movwf	___lwmod@divisor,c
  5095  0102BA  EC70  F086         	call	___lwmod	;wreg free
  5096  0102BE  501D               	movf	?___lwmod,w,c
  5097  0102C0  0F30               	addlw	48
  5098  0102C2  0100               	movlb	0	; () banked
  5099  0102C4  6F7C               	movwf	sprintf@c& (0+255),b
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;doprnt.c: 1523: }
  5103                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5104  0102C6  C022  FFD9         	movff	sprintf@sp,fsr2l
  5105  0102CA  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  5106  0102CE  C07C  FFDF         	movff	sprintf@c,indf2
  5107                           
  5108                           ; BSR set to: 0
  5109  0102D2  4A22               	infsnz	sprintf@sp,f,c
  5110  0102D4  2A23               	incf	sprintf@sp+1,f,c
  5111  0102D6                     l2797:
  5112                           
  5113                           ; BSR set to: 0
  5114  0102D6  0100               	movlb	0	; () banked
  5115  0102D8  0776               	decf	sprintf@prec& (0+255),f,b
  5116  0102DA  0100               	movlb	0	; () banked
  5117  0102DC  2976               	incf	sprintf@prec& (0+255),w,b
  5118  0102DE  A4D8               	btfss	status,2,c
  5119  0102E0  D7CC               	goto	l2791
  5120  0102E2                     l2799:
  5121  0102E2  C024  FFF6         	movff	sprintf@f,tblptrl
  5122  0102E6  C025  FFF7         	movff	sprintf@f+1,tblptrh
  5123  0102EA  4A24               	infsnz	sprintf@f,f,c
  5124  0102EC  2A25               	incf	sprintf@f+1,f,c
  5125  0102EE                     	if	0	;tblptru may be non-zero
  5126  0102EE                     	endif
  5127  0102EE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5128  0102EE  0E00               	movlw	low (__mediumconst shr (0+16))
  5129  0102F0  6EF8               	movwf	tblptru,c
  5130  0102F2                     	endif
  5131  0102F2  0008               	tblrd		*
  5132  0102F4  CFF5 F07C          	movff	tablat,sprintf@c
  5133  0102F8  0100               	movlb	0	; () banked
  5134  0102FA  517C               	movf	sprintf@c& (0+255),w,b
  5135  0102FC  A4D8               	btfss	status,2,c
  5136  0102FE  D687               	goto	l2693
  5137  010300                     l2801:
  5138                           
  5139                           ;doprnt.c: 1538: *sp = 0;
  5140  010300  C022  FFD9         	movff	sprintf@sp,fsr2l
  5141  010304  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  5142  010308  0E00               	movlw	0
  5143  01030A  6EDF               	movwf	indf2,c
  5144  01030C  0012               	return	
  5145  01030E                     __end_of_sprintf:
  5146                           	opt stack 0
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           prodh	equ	0xFF4
  5152                           prodl	equ	0xFF3
  5153                           intcon	equ	0xFF2
  5154                           indf0	equ	0xFEF
  5155                           postinc0	equ	0xFEE
  5156                           fsr0h	equ	0xFEA
  5157                           fsr0l	equ	0xFE9
  5158                           wreg	equ	0xFE8
  5159                           indf2	equ	0xFDF
  5160                           postinc2	equ	0xFDE
  5161                           postdec2	equ	0xFDD
  5162                           fsr2h	equ	0xFDA
  5163                           fsr2l	equ	0xFD9
  5164                           status	equ	0xFD8
  5165                           
  5166 ;; *************** function _isdigit *****************
  5167 ;; Defined at:
  5168 ;;		line 8 in file "D:\Hella\Compiler\sources\common\isdigit.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;  c               1    wreg     unsigned char 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  c               1   17[COMRAM] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;		None               void
  5175 ;; Registers used:
  5176 ;;		wreg, status,2, status,0
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;Total ram usage:        3 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    1
  5189 ;; This function calls:
  5190 ;;		Nothing
  5191 ;; This function is called by:
  5192 ;;		_sprintf
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           	psect	text38
  5197  010F74                     __ptext38:
  5198                           	opt stack 0
  5199  010F74                     _isdigit:
  5200                           	opt stack 26
  5201                           
  5202                           ;incstack = 0
  5203                           ;isdigit@c stored from wreg
  5204  010F74  6E12               	movwf	isdigit@c,c
  5205  010F76  0E00               	movlw	0
  5206  010F78  6E11               	movwf	_isdigit$1784,c
  5207  010F7A  0E3A               	movlw	58
  5208  010F7C  6012               	cpfslt	isdigit@c,c
  5209  010F7E  D005               	goto	l2631
  5210  010F80  0E2F               	movlw	47
  5211  010F82  6412               	cpfsgt	isdigit@c,c
  5212  010F84  D002               	goto	l2631
  5213  010F86  0E01               	movlw	1
  5214  010F88  6E11               	movwf	_isdigit$1784,c
  5215  010F8A                     l2631:
  5216  010F8A  C011  F010         	movff	_isdigit$1784,??_isdigit
  5217  010F8E  3010               	rrcf	??_isdigit,w,c
  5218  010F90  0012               	return	
  5219  010F92                     __end_of_isdigit:
  5220                           	opt stack 0
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           intcon	equ	0xFF2
  5228                           indf0	equ	0xFEF
  5229                           postinc0	equ	0xFEE
  5230                           fsr0h	equ	0xFEA
  5231                           fsr0l	equ	0xFE9
  5232                           wreg	equ	0xFE8
  5233                           indf2	equ	0xFDF
  5234                           postinc2	equ	0xFDE
  5235                           postdec2	equ	0xFDD
  5236                           fsr2h	equ	0xFDA
  5237                           fsr2l	equ	0xFD9
  5238                           status	equ	0xFD8
  5239                           
  5240 ;; *************** function ___wmul *****************
  5241 ;; Defined at:
  5242 ;;		line 15 in file "D:\Hella\Compiler\sources\common\Umul16.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  multiplier      2   15[COMRAM] unsigned int 
  5245 ;;  multiplicand    2   17[COMRAM] unsigned int 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  product         2   19[COMRAM] unsigned int 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  2   15[COMRAM] unsigned int 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2, status,0, prodl, prodh
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5257 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;Total ram usage:        6 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    1
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_checkInputs
  5268 ;;		_sprintf
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           	psect	text39
  5273  010ECC                     __ptext39:
  5274                           	opt stack 0
  5275  010ECC                     ___wmul:
  5276                           	opt stack 26
  5277                           
  5278                           ;incstack = 0
  5279  010ECC  5010               	movf	___wmul@multiplier,w,c
  5280  010ECE  0212               	mulwf	___wmul@multiplicand,c
  5281  010ED0  CFF3 F014          	movff	prodl,___wmul@product
  5282  010ED4  CFF4 F015          	movff	prodh,___wmul@product+1
  5283  010ED8  5010               	movf	___wmul@multiplier,w,c
  5284  010EDA  0213               	mulwf	___wmul@multiplicand+1,c
  5285  010EDC  50F3               	movf	prodl,w,c
  5286  010EDE  2615               	addwf	___wmul@product+1,f,c
  5287  010EE0  5011               	movf	___wmul@multiplier+1,w,c
  5288  010EE2  0212               	mulwf	___wmul@multiplicand,c
  5289  010EE4  50F3               	movf	prodl,w,c
  5290  010EE6  2615               	addwf	___wmul@product+1,f,c
  5291  010EE8  C014  F010         	movff	___wmul@product,?___wmul
  5292  010EEC  C015  F011         	movff	___wmul@product+1,?___wmul+1
  5293  010EF0  0012               	return	
  5294  010EF2                     __end_of___wmul:
  5295                           	opt stack 0
  5296                           tblptru	equ	0xFF8
  5297                           tblptrh	equ	0xFF7
  5298                           tblptrl	equ	0xFF6
  5299                           tablat	equ	0xFF5
  5300                           prodh	equ	0xFF4
  5301                           prodl	equ	0xFF3
  5302                           intcon	equ	0xFF2
  5303                           indf0	equ	0xFEF
  5304                           postinc0	equ	0xFEE
  5305                           fsr0h	equ	0xFEA
  5306                           fsr0l	equ	0xFE9
  5307                           wreg	equ	0xFE8
  5308                           indf2	equ	0xFDF
  5309                           postinc2	equ	0xFDE
  5310                           postdec2	equ	0xFDD
  5311                           fsr2h	equ	0xFDA
  5312                           fsr2l	equ	0xFD9
  5313                           status	equ	0xFD8
  5314                           
  5315 ;; *************** function ___lwmod *****************
  5316 ;; Defined at:
  5317 ;;		line 8 in file "D:\Hella\Compiler\sources\common\lwmod.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  dividend        2   28[COMRAM] unsigned int 
  5320 ;;  divisor         2   30[COMRAM] unsigned int 
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;  counter         1   32[COMRAM] unsigned char 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  2   28[COMRAM] unsigned int 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5332 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;Total ram usage:        5 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    1
  5339 ;; This function calls:
  5340 ;;		Nothing
  5341 ;; This function is called by:
  5342 ;;		_sprintf
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           	psect	text40
  5347  010CE0                     __ptext40:
  5348                           	opt stack 0
  5349  010CE0                     ___lwmod:
  5350                           	opt stack 26
  5351                           
  5352                           ;incstack = 0
  5353  010CE0  501F               	movf	___lwmod@divisor,w,c
  5354  010CE2  1020               	iorwf	___lwmod@divisor+1,w,c
  5355  010CE4  B4D8               	btfsc	status,2,c
  5356  010CE6  D018               	goto	l840
  5357  010CE8  0E01               	movlw	1
  5358  010CEA  6E21               	movwf	___lwmod@counter,c
  5359  010CEC  D004               	goto	l2669
  5360  010CEE                     l2667:
  5361  010CEE  90D8               	bcf	status,0,c
  5362  010CF0  361F               	rlcf	___lwmod@divisor,f,c
  5363  010CF2  3620               	rlcf	___lwmod@divisor+1,f,c
  5364  010CF4  2A21               	incf	___lwmod@counter,f,c
  5365  010CF6                     l2669:
  5366  010CF6  AE20               	btfss	___lwmod@divisor+1,7,c
  5367  010CF8  D7FA               	goto	l2667
  5368  010CFA                     l2671:
  5369  010CFA  501F               	movf	___lwmod@divisor,w,c
  5370  010CFC  5C1D               	subwf	___lwmod@dividend,w,c
  5371  010CFE  5020               	movf	___lwmod@divisor+1,w,c
  5372  010D00  581E               	subwfb	___lwmod@dividend+1,w,c
  5373  010D02  A0D8               	btfss	status,0,c
  5374  010D04  D004               	goto	l2675
  5375  010D06  501F               	movf	___lwmod@divisor,w,c
  5376  010D08  5E1D               	subwf	___lwmod@dividend,f,c
  5377  010D0A  5020               	movf	___lwmod@divisor+1,w,c
  5378  010D0C  5A1E               	subwfb	___lwmod@dividend+1,f,c
  5379  010D0E                     l2675:
  5380  010D0E  90D8               	bcf	status,0,c
  5381  010D10  3220               	rrcf	___lwmod@divisor+1,f,c
  5382  010D12  321F               	rrcf	___lwmod@divisor,f,c
  5383  010D14  2E21               	decfsz	___lwmod@counter,f,c
  5384  010D16  D7F1               	goto	l2671
  5385  010D18                     l840:
  5386  010D18  C01D  F01D         	movff	___lwmod@dividend,?___lwmod
  5387  010D1C  C01E  F01E         	movff	___lwmod@dividend+1,?___lwmod+1
  5388  010D20  0012               	return		;funcret
  5389  010D22                     __end_of___lwmod:
  5390                           	opt stack 0
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           prodh	equ	0xFF4
  5396                           prodl	equ	0xFF3
  5397                           intcon	equ	0xFF2
  5398                           indf0	equ	0xFEF
  5399                           postinc0	equ	0xFEE
  5400                           fsr0h	equ	0xFEA
  5401                           fsr0l	equ	0xFE9
  5402                           wreg	equ	0xFE8
  5403                           indf2	equ	0xFDF
  5404                           postinc2	equ	0xFDE
  5405                           postdec2	equ	0xFDD
  5406                           fsr2h	equ	0xFDA
  5407                           fsr2l	equ	0xFD9
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function ___lwdiv *****************
  5411 ;; Defined at:
  5412 ;;		line 8 in file "D:\Hella\Compiler\sources\common\lwdiv.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  dividend        2   21[COMRAM] unsigned int 
  5415 ;;  divisor         2   23[COMRAM] unsigned int 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  quotient        2   26[COMRAM] unsigned int 
  5418 ;;  counter         1   25[COMRAM] unsigned char 
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  2   21[COMRAM] unsigned int 
  5421 ;; Registers used:
  5422 ;;		wreg, status,2, status,0
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5428 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;Total ram usage:        7 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    1
  5435 ;; This function calls:
  5436 ;;		Nothing
  5437 ;; This function is called by:
  5438 ;;		_checkInputs
  5439 ;;		_sprintf
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           	psect	text41
  5444  010BB2                     __ptext41:
  5445                           	opt stack 0
  5446  010BB2                     ___lwdiv:
  5447                           	opt stack 26
  5448                           
  5449                           ;incstack = 0
  5450  010BB2  0E00               	movlw	0
  5451  010BB4  6E1C               	movwf	___lwdiv@quotient+1,c
  5452  010BB6  0E00               	movlw	0
  5453  010BB8  6E1B               	movwf	___lwdiv@quotient,c
  5454  010BBA  5018               	movf	___lwdiv@divisor,w,c
  5455  010BBC  1019               	iorwf	___lwdiv@divisor+1,w,c
  5456  010BBE  B4D8               	btfsc	status,2,c
  5457  010BC0  D01C               	goto	l830
  5458  010BC2  0E01               	movlw	1
  5459  010BC4  6E1A               	movwf	___lwdiv@counter,c
  5460  010BC6  D004               	goto	l2649
  5461  010BC8                     l2647:
  5462  010BC8  90D8               	bcf	status,0,c
  5463  010BCA  3618               	rlcf	___lwdiv@divisor,f,c
  5464  010BCC  3619               	rlcf	___lwdiv@divisor+1,f,c
  5465  010BCE  2A1A               	incf	___lwdiv@counter,f,c
  5466  010BD0                     l2649:
  5467  010BD0  AE19               	btfss	___lwdiv@divisor+1,7,c
  5468  010BD2  D7FA               	goto	l2647
  5469  010BD4                     l2651:
  5470  010BD4  90D8               	bcf	status,0,c
  5471  010BD6  361B               	rlcf	___lwdiv@quotient,f,c
  5472  010BD8  361C               	rlcf	___lwdiv@quotient+1,f,c
  5473  010BDA  5018               	movf	___lwdiv@divisor,w,c
  5474  010BDC  5C16               	subwf	___lwdiv@dividend,w,c
  5475  010BDE  5019               	movf	___lwdiv@divisor+1,w,c
  5476  010BE0  5817               	subwfb	___lwdiv@dividend+1,w,c
  5477  010BE2  A0D8               	btfss	status,0,c
  5478  010BE4  D005               	goto	l2659
  5479  010BE6  5018               	movf	___lwdiv@divisor,w,c
  5480  010BE8  5E16               	subwf	___lwdiv@dividend,f,c
  5481  010BEA  5019               	movf	___lwdiv@divisor+1,w,c
  5482  010BEC  5A17               	subwfb	___lwdiv@dividend+1,f,c
  5483  010BEE  801B               	bsf	___lwdiv@quotient,0,c
  5484  010BF0                     l2659:
  5485  010BF0  90D8               	bcf	status,0,c
  5486  010BF2  3219               	rrcf	___lwdiv@divisor+1,f,c
  5487  010BF4  3218               	rrcf	___lwdiv@divisor,f,c
  5488  010BF6  2E1A               	decfsz	___lwdiv@counter,f,c
  5489  010BF8  D7ED               	goto	l2651
  5490  010BFA                     l830:
  5491  010BFA  C01B  F016         	movff	___lwdiv@quotient,?___lwdiv
  5492  010BFE  C01C  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5493  010C02  0012               	return		;funcret
  5494  010C04                     __end_of___lwdiv:
  5495                           	opt stack 0
  5496                           tblptru	equ	0xFF8
  5497                           tblptrh	equ	0xFF7
  5498                           tblptrl	equ	0xFF6
  5499                           tablat	equ	0xFF5
  5500                           prodh	equ	0xFF4
  5501                           prodl	equ	0xFF3
  5502                           intcon	equ	0xFF2
  5503                           indf0	equ	0xFEF
  5504                           postinc0	equ	0xFEE
  5505                           fsr0h	equ	0xFEA
  5506                           fsr0l	equ	0xFE9
  5507                           wreg	equ	0xFE8
  5508                           indf2	equ	0xFDF
  5509                           postinc2	equ	0xFDE
  5510                           postdec2	equ	0xFDD
  5511                           fsr2h	equ	0xFDA
  5512                           fsr2l	equ	0xFD9
  5513                           status	equ	0xFD8
  5514                           
  5515 ;; *************** function _ADCRead *****************
  5516 ;; Defined at:
  5517 ;;		line 578 in file "clima.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  ch              1    wreg     unsigned char 
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;  ch              1   18[COMRAM] unsigned char 
  5522 ;; Return value:  Size  Location     Type
  5523 ;;                  2   15[COMRAM] unsigned int 
  5524 ;; Registers used:
  5525 ;;		wreg, status,2, status,0
  5526 ;; Tracked objects:
  5527 ;;		On entry : 0/0
  5528 ;;		On exit  : 0/0
  5529 ;;		Unchanged: 0/0
  5530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5531 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5534 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5535 ;;Total ram usage:        4 bytes
  5536 ;; Hardware stack levels used:    1
  5537 ;; Hardware stack levels required when called:    1
  5538 ;; This function calls:
  5539 ;;		Nothing
  5540 ;; This function is called by:
  5541 ;;		_checkInputs
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           	psect	text42
  5546  010DDC                     __ptext42:
  5547                           	opt stack 0
  5548  010DDC                     _ADCRead:
  5549                           	opt stack 28
  5550                           
  5551                           ;incstack = 0
  5552                           ;ADCRead@ch stored from wreg
  5553  010DDC  6E13               	movwf	ADCRead@ch,c
  5554                           
  5555                           ;clima.c: 580: if(ch>13) return 0;
  5556  010DDE  0E0D               	movlw	13
  5557  010DE0  6413               	cpfsgt	ADCRead@ch,c
  5558  010DE2  D005               	goto	l198
  5559  010DE4  0E00               	movlw	0
  5560  010DE6  6E11               	movwf	?_ADCRead+1,c
  5561  010DE8  0E00               	movlw	0
  5562  010DEA  6E10               	movwf	?_ADCRead,c
  5563  010DEC  0012               	return	
  5564  010DEE                     l198:
  5565                           
  5566                           ;clima.c: 582: ADCON0bits.ADON = 1;
  5567  010DEE  80C2               	bsf	4034,0,c	;volatile
  5568                           
  5569                           ;clima.c: 583: ADCON0bits.CHS = ch;
  5570  010DF0  C013  F012         	movff	ADCRead@ch,??_ADCRead
  5571  010DF4  4612               	rlncf	??_ADCRead,f,c
  5572  010DF6  4612               	rlncf	??_ADCRead,f,c
  5573  010DF8  50C2               	movf	4034,w,c	;volatile
  5574  010DFA  1812               	xorwf	??_ADCRead,w,c
  5575  010DFC  0BC3               	andlw	-61
  5576  010DFE  1812               	xorwf	??_ADCRead,w,c
  5577  010E00  6EC2               	movwf	4034,c	;volatile
  5578                           
  5579                           ;clima.c: 584: ADCON0bits.ADON = 1;
  5580  010E02  80C2               	bsf	4034,0,c	;volatile
  5581                           
  5582                           ;clima.c: 585: ADCON0bits.GO_nDONE = 1;
  5583  010E04  82C2               	bsf	4034,1,c	;volatile
  5584  010E06                     l200:
  5585  010E06  B2C2               	btfsc	4034,1,c	;volatile
  5586  010E08  D7FE               	goto	l200
  5587                           
  5588                           ;clima.c: 589: return ADRES;
  5589  010E0A  CFC3 F010          	movff	4035,?_ADCRead	;volatile
  5590  010E0E  CFC4 F011          	movff	4036,?_ADCRead+1	;volatile
  5591  010E12  0012               	return		;funcret
  5592  010E14                     __end_of_ADCRead:
  5593                           	opt stack 0
  5594                           tblptru	equ	0xFF8
  5595                           tblptrh	equ	0xFF7
  5596                           tblptrl	equ	0xFF6
  5597                           tablat	equ	0xFF5
  5598                           prodh	equ	0xFF4
  5599                           prodl	equ	0xFF3
  5600                           intcon	equ	0xFF2
  5601                           indf0	equ	0xFEF
  5602                           postinc0	equ	0xFEE
  5603                           fsr0h	equ	0xFEA
  5604                           fsr0l	equ	0xFE9
  5605                           wreg	equ	0xFE8
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           postdec2	equ	0xFDD
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8
  5612                           
  5613 ;; *************** function _ISR *****************
  5614 ;; Defined at:
  5615 ;;		line 657 in file "clima.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;		None
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;		None
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      void 
  5622 ;; Registers used:
  5623 ;;		wreg, status,2, status,0
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;Total ram usage:       15 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		Interrupt level 2
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	intcode
  5643  000008                     __pintcode:
  5644                           	opt stack 0
  5645  000008                     _ISR:
  5646                           	opt stack 24
  5647                           
  5648                           ;incstack = 0
  5649  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5650  00000A  ED2B  F084         	call	int_func,f	;refresh shadow registers
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           indf0	equ	0xFEF
  5659                           postinc0	equ	0xFEE
  5660                           fsr0h	equ	0xFEA
  5661                           fsr0l	equ	0xFE9
  5662                           wreg	equ	0xFE8
  5663                           indf2	equ	0xFDF
  5664                           postinc2	equ	0xFDE
  5665                           postdec2	equ	0xFDD
  5666                           fsr2h	equ	0xFDA
  5667                           fsr2l	equ	0xFD9
  5668                           status	equ	0xFD8
  5669                           
  5670                           	psect	intcode_body
  5671  010856                     __pintcode_body:
  5672                           	opt stack 24
  5673  010856                     int_func:
  5674                           	opt stack 24
  5675  010856  0006               	pop		; remove dummy address from shadow register refresh
  5676  010858  CFFA F002          	movff	pclath,??_ISR+1
  5677  01085C  CFFB F003          	movff	pclatu,??_ISR+2
  5678  010860  CFE9 F004          	movff	fsr0l,??_ISR+3
  5679  010864  CFEA F005          	movff	fsr0h,??_ISR+4
  5680  010868  CFE1 F006          	movff	fsr1l,??_ISR+5
  5681  01086C  CFE2 F007          	movff	fsr1h,??_ISR+6
  5682  010870  CFD9 F008          	movff	fsr2l,??_ISR+7
  5683  010874  CFDA F009          	movff	fsr2h,??_ISR+8
  5684  010878  CFF3 F00A          	movff	prodl,??_ISR+9
  5685  01087C  CFF4 F00B          	movff	prodh,??_ISR+10
  5686  010880  CFF6 F00C          	movff	tblptrl,??_ISR+11
  5687  010884  CFF7 F00D          	movff	tblptrh,??_ISR+12
  5688  010888  CFF8 F00E          	movff	tblptru,??_ISR+13
  5689  01088C  CFF5 F00F          	movff	tablat,??_ISR+14
  5690                           
  5691                           ;clima.c: 660: if (T0IE && T0IF)
  5692  010890  BAF2               	btfsc	intcon,5,c	;volatile
  5693  010892  A4F2               	btfss	intcon,2,c	;volatile
  5694  010894  D040               	goto	i2l222
  5695                           
  5696                           ;clima.c: 661: {
  5697                           ;clima.c: 662: T0IF = 0;
  5698  010896  94F2               	bcf	intcon,2,c	;volatile
  5699                           
  5700                           ;clima.c: 663: T0CONbits.TMR0ON = 0;
  5701  010898  9ED5               	bcf	4053,7,c	;volatile
  5702                           
  5703                           ;clima.c: 664: TMR0H = 0xFB;
  5704  01089A  0EFB               	movlw	251
  5705  01089C  6ED7               	movwf	4055,c	;volatile
  5706                           
  5707                           ;clima.c: 665: TMR0L = 0x1D-2;
  5708  01089E  0E1B               	movlw	27
  5709  0108A0  6ED6               	movwf	4054,c	;volatile
  5710                           
  5711                           ;clima.c: 667: T0CONbits.TMR0ON = 1;
  5712  0108A2  8ED5               	bsf	4053,7,c	;volatile
  5713                           
  5714                           ;clima.c: 668: tick++;
  5715  0108A4  2A45               	incf	_tick,f,c
  5716                           
  5717                           ;clima.c: 670: if ((tick & 0b11) == 0b11)
  5718  0108A6  5045               	movf	_tick,w,c
  5719  0108A8  0B03               	andlw	3
  5720  0108AA  0A03               	xorlw	3
  5721  0108AC  A4D8               	btfss	status,2,c
  5722  0108AE  D009               	goto	i2l1801
  5723                           
  5724                           ;clima.c: 671: {
  5725                           ;clima.c: 672: cnt++;
  5726  0108B0  2A43               	incf	_cnt,f,c
  5727                           
  5728                           ;clima.c: 674: if (cnt == 25)
  5729  0108B2  0E19               	movlw	25
  5730  0108B4  1843               	xorwf	_cnt,w,c
  5731  0108B6  A4D8               	btfss	status,2,c
  5732  0108B8  D004               	goto	i2l1801
  5733                           
  5734                           ;clima.c: 676: {
  5735                           ;clima.c: 677: ev = 1;
  5736  0108BA  0E01               	movlw	1
  5737  0108BC  6E44               	movwf	_ev,c
  5738                           
  5739                           ;clima.c: 678: cnt = 0;
  5740  0108BE  0E00               	movlw	0
  5741  0108C0  6E43               	movwf	_cnt,c
  5742  0108C2                     i2l1801:
  5743                           
  5744                           ;clima.c: 679: }
  5745                           ;clima.c: 680: }
  5746                           ;clima.c: 682: PORTJbits.RJ0 = tick&1;
  5747  0108C2  C045  F001         	movff	_tick,??_ISR
  5748  0108C6  0E01               	movlw	1
  5749  0108C8  1601               	andwf	??_ISR,f,c
  5750  0108CA  5088               	movf	3976,w,c	;volatile
  5751  0108CC  1801               	xorwf	??_ISR,w,c
  5752  0108CE  0BFE               	andlw	-2
  5753  0108D0  1801               	xorwf	??_ISR,w,c
  5754  0108D2  6E88               	movwf	3976,c	;volatile
  5755                           
  5756                           ;clima.c: 685: if (fanSpeedCool > (tick & 0x07))
  5757  0108D4  C045  F001         	movff	_tick,??_ISR
  5758  0108D8  0E07               	movlw	7
  5759  0108DA  1601               	andwf	??_ISR,f,c
  5760  0108DC  504E               	movf	_fanSpeedCool,w,c
  5761  0108DE  5C01               	subwf	??_ISR,w,c
  5762  0108E0  B0D8               	btfsc	status,0,c
  5763  0108E2  D002               	goto	i2l216
  5764                           
  5765                           ;clima.c: 686: (PORTDbits.RD4) = 1;
  5766  0108E4  8883               	bsf	3971,4,c	;volatile
  5767  0108E6  D001               	goto	i2l1807
  5768  0108E8                     i2l216:
  5769                           
  5770                           ;clima.c: 687: else
  5771                           ;clima.c: 688: (PORTDbits.RD4) = 0;
  5772  0108E8  9883               	bcf	3971,4,c	;volatile
  5773  0108EA                     i2l1807:
  5774                           
  5775                           ;clima.c: 691: if (fanSpeedHeatVent > (tick & 0x07))
  5776  0108EA  C045  F001         	movff	_tick,??_ISR
  5777  0108EE  0E07               	movlw	7
  5778  0108F0  1601               	andwf	??_ISR,f,c
  5779  0108F2  504D               	movf	_fanSpeedHeatVent,w,c
  5780  0108F4  5C01               	subwf	??_ISR,w,c
  5781  0108F6  B0D8               	btfsc	status,0,c
  5782  0108F8  D002               	goto	i2l218
  5783                           
  5784                           ;clima.c: 692: (PORTDbits.RD5) = 1;
  5785  0108FA  8A83               	bsf	3971,5,c	;volatile
  5786  0108FC  D001               	goto	i2l1811
  5787  0108FE                     i2l218:
  5788                           
  5789                           ;clima.c: 693: else
  5790                           ;clima.c: 694: (PORTDbits.RD5) = 0;
  5791  0108FE  9A83               	bcf	3971,5,c	;volatile
  5792  010900                     i2l1811:
  5793                           
  5794                           ;clima.c: 697: if (levelHeat > (tick & 0x07))
  5795  010900  C045  F001         	movff	_tick,??_ISR
  5796  010904  0E07               	movlw	7
  5797  010906  1601               	andwf	??_ISR,f,c
  5798  010908  504C               	movf	_levelHeat,w,c
  5799  01090A  5C01               	subwf	??_ISR,w,c
  5800  01090C  B0D8               	btfsc	status,0,c
  5801  01090E  D002               	goto	i2l220
  5802                           
  5803                           ;clima.c: 698: (PORTDbits.RD3) = 1;
  5804  010910  8683               	bsf	3971,3,c	;volatile
  5805  010912  D001               	goto	i2l222
  5806  010914                     i2l220:
  5807                           
  5808                           ;clima.c: 699: else
  5809                           ;clima.c: 700: (PORTDbits.RD3) = 0;
  5810  010914  9683               	bcf	3971,3,c	;volatile
  5811  010916                     i2l222:
  5812  010916  C00F  FFF5         	movff	??_ISR+14,tablat
  5813  01091A  C00E  FFF8         	movff	??_ISR+13,tblptru
  5814  01091E  C00D  FFF7         	movff	??_ISR+12,tblptrh
  5815  010922  C00C  FFF6         	movff	??_ISR+11,tblptrl
  5816  010926  C00B  FFF4         	movff	??_ISR+10,prodh
  5817  01092A  C00A  FFF3         	movff	??_ISR+9,prodl
  5818  01092E  C009  FFDA         	movff	??_ISR+8,fsr2h
  5819  010932  C008  FFD9         	movff	??_ISR+7,fsr2l
  5820  010936  C007  FFE2         	movff	??_ISR+6,fsr1h
  5821  01093A  C006  FFE1         	movff	??_ISR+5,fsr1l
  5822  01093E  C005  FFEA         	movff	??_ISR+4,fsr0h
  5823  010942  C004  FFE9         	movff	??_ISR+3,fsr0l
  5824  010946  C003  FFFB         	movff	??_ISR+2,pclatu
  5825  01094A  C002  FFFA         	movff	??_ISR+1,pclath
  5826  01094E  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5827  010950  0011               	retfie		f
  5828  010952                     __end_of_ISR:
  5829                           	opt stack 0
  5830                           pclatu	equ	0xFFB
  5831                           pclath	equ	0xFFA
  5832                           tblptru	equ	0xFF8
  5833                           tblptrh	equ	0xFF7
  5834                           tblptrl	equ	0xFF6
  5835                           tablat	equ	0xFF5
  5836                           prodh	equ	0xFF4
  5837                           prodl	equ	0xFF3
  5838                           intcon	equ	0xFF2
  5839                           indf0	equ	0xFEF
  5840                           postinc0	equ	0xFEE
  5841                           fsr0h	equ	0xFEA
  5842                           fsr0l	equ	0xFE9
  5843                           wreg	equ	0xFE8
  5844                           fsr1h	equ	0xFE2
  5845                           fsr1l	equ	0xFE1
  5846                           indf2	equ	0xFDF
  5847                           postinc2	equ	0xFDE
  5848                           postdec2	equ	0xFDD
  5849                           fsr2h	equ	0xFDA
  5850                           fsr2l	equ	0xFD9
  5851                           status	equ	0xFD8
  5852                           pclatu	equ	0xFFB
  5853                           pclath	equ	0xFFA
  5854                           tblptru	equ	0xFF8
  5855                           tblptrh	equ	0xFF7
  5856                           tblptrl	equ	0xFF6
  5857                           tablat	equ	0xFF5
  5858                           prodh	equ	0xFF4
  5859                           prodl	equ	0xFF3
  5860                           intcon	equ	0xFF2
  5861                           indf0	equ	0xFEF
  5862                           postinc0	equ	0xFEE
  5863                           fsr0h	equ	0xFEA
  5864                           fsr0l	equ	0xFE9
  5865                           wreg	equ	0xFE8
  5866                           fsr1h	equ	0xFE2
  5867                           fsr1l	equ	0xFE1
  5868                           indf2	equ	0xFDF
  5869                           postinc2	equ	0xFDE
  5870                           postdec2	equ	0xFDD
  5871                           fsr2h	equ	0xFDA
  5872                           fsr2l	equ	0xFD9
  5873                           status	equ	0xFD8
  5874                           
  5875                           	psect	rparam
  5876  0000                     pclatu	equ	0xFFB
  5877                           pclath	equ	0xFFA
  5878                           tblptru	equ	0xFF8
  5879                           tblptrh	equ	0xFF7
  5880                           tblptrl	equ	0xFF6
  5881                           tablat	equ	0xFF5
  5882                           prodh	equ	0xFF4
  5883                           prodl	equ	0xFF3
  5884                           intcon	equ	0xFF2
  5885                           indf0	equ	0xFEF
  5886                           postinc0	equ	0xFEE
  5887                           fsr0h	equ	0xFEA
  5888                           fsr0l	equ	0xFE9
  5889                           wreg	equ	0xFE8
  5890                           fsr1h	equ	0xFE2
  5891                           fsr1l	equ	0xFE1
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           postdec2	equ	0xFDD
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899                           	psect	temp
  5900  000050                     btemp:
  5901                           	opt stack 0
  5902  000050                     	ds	1
  5903  0000                     int$flags	set	btemp
  5904                           pclatu	equ	0xFFB
  5905                           pclath	equ	0xFFA
  5906                           tblptru	equ	0xFF8
  5907                           tblptrh	equ	0xFF7
  5908                           tblptrl	equ	0xFF6
  5909                           tablat	equ	0xFF5
  5910                           prodh	equ	0xFF4
  5911                           prodl	equ	0xFF3
  5912                           intcon	equ	0xFF2
  5913                           indf0	equ	0xFEF
  5914                           postinc0	equ	0xFEE
  5915                           fsr0h	equ	0xFEA
  5916                           fsr0l	equ	0xFE9
  5917                           wreg	equ	0xFE8
  5918                           fsr1h	equ	0xFE2
  5919                           fsr1l	equ	0xFE1
  5920                           indf2	equ	0xFDF
  5921                           postinc2	equ	0xFDE
  5922                           postdec2	equ	0xFDD
  5923                           fsr2h	equ	0xFDA
  5924                           fsr2l	equ	0xFD9
  5925                           status	equ	0xFD8


Data Sizes:
    Strings     112
    Constant    154
    Data        0
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      79
    BANK0           160     10      30
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_20(CODE[22]), STR_19(CODE[3]), STR_18(CODE[3]), STR_11(CODE[3]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> msg(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    UART_puts@s	PTR unsigned char  size(2) Largest target is 20
		 -> STR_21(CODE[20]), 

    LcdWriteString@s	PTR const unsigned char  size(2) Largest target is 144
		 -> STR_22(CODE[13]), STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_6(CODE[6]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), msg(BANK0[20]), 
		 -> LcdLines(CODE[144]), 


Critical Paths under _main in COMRAM

    _main->_checkInputs
    _stateMachine->_updateLcd
    _updateLcd->_sprintf
    ___lwtoft->___ftpack
    _setLcd->_LcdWriteString
    _LcdGoTo->_lcdCommand
    _UART_puts->_Delay10TCYx
    _UART_puts->_UART_putc
    _LcdInit->_LcdWriteString
    _setIODIR->_SWSPIWrite
    _LcdWriteString->_LcdChar
    _LcdChar->_setGPIO
    _LcdClear->_lcdCommand
    _lcdCommand->_setGPIO
    _setGPIO->_SWSPIWrite
    _checkInputs->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _stateMachine->_sprintf
    _updateLcd->_sprintf
    _checkInputs->_sprintf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   33359
                                              9 BANK0      1     1      0
                        _checkInputs
                               _init
                       _stateMachine
                      _updateOutputs
 ---------------------------------------------------------------------------------
 (1) _updateOutputs                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stateMachine                                         3     3      0   16994
                                             48 COMRAM     2     2      0
                            ___fttol
                           ___lwtoft
                     _getOnOffButton
                     _setCoolElement
                     _setHeatElement
                 _setLcdBacklightLed
                    _setSpeedFanCool
                _setSpeedFanHeatVent
                      _setStandbyLed
                            _sprintf
                          _updateLcd
 ---------------------------------------------------------------------------------
 (2) _updateLcd                                            1     1      0    8461
                                             47 COMRAM     1     1      0
                           _LcdClear
                            _LcdGoTo
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setLcdBacklightLed                                   2     0      2     185
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setCoolElement                                       2     0      2     339
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getOnOffButton                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2469
                                             23 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2284
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     525
                                             15 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   10566
                            _LcdInit
                          _UART_Init
                          _UART_puts
                            _initAdc
                        _initButtons
                            _initPwm
                            _initTmr
                     _setHeatElement
                             _setLcd
                    _setSpeedFanCool
                _setSpeedFanHeatVent
                      _setStandbyLed
 ---------------------------------------------------------------------------------
 (2) _setStandbyLed                                        2     0      2     262
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setSpeedFanHeatVent                                  1     1      0      65
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setSpeedFanCool                                      1     1      0      65
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLcd                                               0     0      0    4198
                           _LcdClear
                            _LcdGoTo
                     _LcdWriteString
 ---------------------------------------------------------------------------------
 (3) _LcdGoTo                                              1     1      0     885
                                             20 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _setHeatElement                                       2     0      2     493
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _initTmr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPwm                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initAdc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_puts                                            2     0      2     186
                                             16 COMRAM     2     0      2
                        _Delay10TCYx
                          _UART_putc
 ---------------------------------------------------------------------------------
 (3) _UART_putc                                            1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            2     2      0      23
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LcdInit                                              0     0      0    5274
                           _LcdClear
                     _LcdWriteString
                          _SWSPIOpen
                         _lcdCommand
                            _setGPIO
                           _setIODIR
 ---------------------------------------------------------------------------------
 (3) _setIODIR                                             2     1      1     284
                                             17 COMRAM     2     1      1
                       _SWSPIClearCS
                         _SWSPISetCS
                         _SWSPIWrite
 ---------------------------------------------------------------------------------
 (3) _SWSPIOpen                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LcdWriteString                                       2     0      2    2459
                                             20 COMRAM     2     0      2
                            _LcdChar
 ---------------------------------------------------------------------------------
 (4) _LcdChar                                              1     1      0     854
                                             19 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (3) _LcdClear                                             0     0      0     854
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (4) _lcdCommand                                           1     1      0     854
                                             19 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (5) _setGPIO                                              2     1      1     823
                                             17 COMRAM     2     1      1
                       _SWSPIClearCS
                         _SWSPISetCS
                         _SWSPIWrite
 ---------------------------------------------------------------------------------
 (6) _SWSPIWrite                                           2     2      0      68
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _SWSPISetCS                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _SWSPIClearCS                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkInputs                                          6     6      0    5793
                                             47 COMRAM     6     6      0
                            _ADCRead
                            ___lwdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    4130
                                             33 COMRAM    14     4     10
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     694
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             28 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     703
                                             21 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     2      2      62
                                             15 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 15    15      0       0
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkInputs
     _ADCRead
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _sprintf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit
   _init
     _LcdInit
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _SWSPIOpen
       _lcdCommand
         _setGPIO
           _SWSPIClearCS
           _SWSPISetCS
           _SWSPIWrite
       _setGPIO
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
       _setIODIR
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
     _UART_Init
     _UART_puts
       _Delay10TCYx
       _UART_putc
     _initAdc
     _initButtons
     _initPwm
     _initTmr
     _setHeatElement
     _setLcd
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdGoTo
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
     _setSpeedFanCool
     _setSpeedFanHeatVent
     _setStandbyLed
   _stateMachine
     ___fttol
     ___lwtoft
       ___ftpack
     _getOnOffButton
     _setCoolElement
     _setHeatElement
     _setLcdBacklightLed
     _setSpeedFanCool
     _setSpeedFanHeatVent
     _setStandbyLed
     _sprintf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit
     _updateLcd
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdGoTo
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
   _updateOutputs

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      1E       5       18.8%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      4F       1       84.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6D      32        0.0%
DATA                 0      0      6D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed May 22 18:56:06 2019

               _updateOutputs 0EA2                             _a 0040                            _ev 0044  
         ___wmul@multiplicand 0012  __size_of_setSpeedFanHeatVent 0012                   __CFG_OSC$HS 000000  
                         l200 0E06                           l142 0620                           l356 0FFA  
                         l198 0DEE                           l298 0C18                           l830 0BFA  
                         l647 0AD4                           l840 0D18                           _GIE 007F97  
                         _ISR 0008                    _SWSPISetCS 103E                _setCoolElement 1024  
                         _cnt 0043                           _msg 0060               __end_of_ADCRead 0E14  
           lcdCommand@command 0014                           prod 000FF3                    _SWSPIWrite 0C04  
                         wreg 000FE8                    _TXSTA1bits 000FAC                          ?_ISR 0001  
    setSpeedFanHeatVent@speed 0010         __size_of_SWSPIClearCS 0004                  __CFG_WDT$OFF 000000  
      __end_of_setHeatElement 1036                          l3103 09E4                          l3121 0A34  
                        l3113 0A0C                          l3051 0E14                          l3115 0A18  
                        l3107 09F4                          l3203 0428                          l3117 0A1E  
                        l3221 04B4                          l3301 0D7C                          l3215 0486  
                        l3241 051C                          l3139 075C                          l3163 0336  
                        l2701 003C                          l3085 097E                          l3237 0504  
                        l2631 0F8A                          l2711 007C                          l3159 0852  
                        l3247 0534                          l2801 0300                          l2721 00E4  
                        l2705 0044                          l3185 039E                          l3169 034A  
                        l2651 0BD4                          l2723 0110                          l2571 0C28  
                        l2733 0140                          l3197 03FA                          l2647 0BC8  
                        l2671 0CFA                          l2735 0146                          l2831 0A64  
                        l2649 0BD0                          l2753 01A2                          l2569 0C22  
                        l2841 0AC0                          l2833 0A6E                          l2659 0BF0  
                        l2675 0D0E                          l2667 0CEE                          l2747 0182  
                        l2819 0FE6                          l2843 0ACA                          l2835 0A8C  
                        l2827 0A56                          l2923 060E                          l2915 05E4  
                        l2669 0CF6                          l2757 01D6                          l2693 000E  
                        l2685 0B5E                          l2941 0666                          l2933 063A  
                        l2791 027A                          l2783 0258                          l2767 0202  
                        l2775 0228                          l2759 01E0                          l2871 0FCC  
                        l2839 0AA2                          l2919 05FA                          l2777 0234  
                        l2689 0B88                          l2961 06E2                          l2945 067C  
                        l2937 0650                          l2929 0624                          l2699 002A  
                        l2947 0688                          l2797 02D6                          l2789 0274  
                        l2877 0FBA                          l2799 02E2                          l2969 0710  
                        l2897 056E                          STR_1 FFE4                          STR_2 FFE4  
                        STR_3 FFEE                          STR_4 FFE9                          STR_5 FFF3  
                        STR_6 FFC6                          STR_7 FFCC                          STR_8 FFD2  
                        STR_9 FFD8                          _T0IE 007F95                          _T0IF 007F92  
                        u2410 099C                          u2415 0994                          u2605 0EAA  
                        u1910 0B80                          u2606 0EAC                          u2391 0962  
                        u2615 0EB4                          u1920 0BAA                          u2616 0EB6  
                        u2625 0EBE                          u2626 0EC0                          u2635 0EC8  
                        u2636 0ECA                          u1917 0B76                          u2495 077A  
                        u1927 0BA0                          u2657 0FE8                          _RCIF 007CF5  
                        _TMR0 000FD6                          _main 0D62                  ___ftpack@arg 0010  
                        _init 0AF4                  ___ftpack@exp 0013                          _tick 0045  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0050  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
             __end_of_LcdChar 0E76               __end_of_LcdGoTo 100E               __end_of_LcdInit 0C9E  
              ?_updateOutputs 0001                  ___param_bank 000000                  ?_initButtons 0001  
                       ??_ISR 0001                   _Delay10TCYx 0FE4                  ___fttol@exp1 001E  
                ___fttol@lval 001A        __end_of_setCoolElement 102A                         ?_main 0001  
                       ?_init 0001                         _ADRES 000FC3                         STR_10 FFDE  
                       STR_11 FFF8                         STR_12 FFA3                         STR_20 FF8F  
                       STR_13 FFFD                         STR_21 FFA5                         STR_14 FFFB  
                       STR_22 FFB9                         STR_15 FFA3                         STR_16 FFFB  
                       STR_17 FFFD                         STR_18 FFF8                         STR_19 FFF8  
                       _T0CON 000FD5               __end_of___fttol 0A46               __end_of___lwdiv 0C04  
             __end_of___lwmod 0D22                         i2l220 0914                         i2l222 0916  
                       i2l216 08E8                         i2l218 08FE                  _SWSPIClearCS 1042  
                       _RCREG 000FAE                         _TMR0H 000FD7                         _TMR1H 000FCF  
                       _TMR0L 000FD6                         _TMR1L 000FCE                         _SPBRG 000FAF  
                       _PORTD 000F83                         _TRISA 000F92                         _TRMT1 007D61  
                       _TRISD 000F95                         _TXREG 000FAD          __size_of_checkInputs 0120  
              __CFG_FCMEN$OFF 000000            __size_of_UART_Init 001C                         _inDeb 0042  
             __end_of_initAdc 0DDC              _fanSpeedHeatVent 004D               __end_of_dpowers FEFF  
          __size_of_UART_putc 000E               __end_of_initPwm 1016               __end_of_initTmr 0D62  
          __size_of_UART_puts 0036               __end_of_setGPIO 0F74               __end_of_isdigit 0F92  
               ___ftpack@sign 0014                         _value 0036               ?_setHeatElement 0010  
                       main@i 007D                         pclath 000FFA                         tablat 000FF5  
                       status 000FD8               __end_of_sprintf 030E      __size_of_setSpeedFanCool 0012  
            __end_of_LcdClear 101E              __end_of_LcdLines FF8F            __size_of_SWSPIOpen 0012  
             __initialization 0F16                  __end_of_main 0DA0                  __end_of_init 0B5C  
                   ??_ADCRead 0012               ?_setCoolElement 0010                        ??_main 0036  
               ___fttol@sign1 0019                        ??_init 0017                 __activetblptr 000003  
                 ?_SWSPISetCS 0001                   ?_SWSPIWrite 0001                     ADCRead@ch 0013  
            __end_of___ftpack 0AF4                        i2l1801 08C2                        i2l1811 0900  
                      i2l1807 08EA              __end_of___lwtoft 0F16                     ??_LcdChar 0014  
                   ??_LcdGoTo 0015                     ??_LcdInit 0017         __end_of_setStandbyLed 1030  
                      _TRISB0 007C98    __end_of_setLcdBacklightLed 1024               ??_updateOutputs 0010  
           __end_of_UART_Init 0FAE                        ___wmul 0ECC             __end_of_UART_putc 1002  
           __end_of_UART_puts 0E4A                     ??___fttol 0014                     ??___lwdiv 001A  
                      _inTemp 003D                     ??___lwmod 0021              __end_of_setIODIR 0F56  
                      clear_0 0F1C                        clear_1 0F28                        _setLcd 0C9E  
                 setIODIR@dir 0012                     ??_initAdc 0010                     ??_initPwm 0010  
                   ??_initTmr 0010                     ??_setGPIO 0013                     ??_isdigit 0010  
               LcdChar@letter 0014                  __mediumconst FEF4                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8             __end_of_SWSPIOpen 0FE4  
                   ??_sprintf 002C           setHeatElement@state 0010           _setSpeedFanHeatVent 0FAE  
                  __accesstop 0060       __end_of__initialization 0F2E       __size_of_LcdWriteString 0056  
                _fanSpeedCool 004E                 ___rparam_used 000001           __size_of_SWSPISetCS 0004  
         __size_of_SWSPIWrite 004E                    ___fttol@f1 0010                __pcstackCOMRAM 0001  
     __size_of_getOnOffButton 0004             ??_setSpeedFanCool 0010          ?_setSpeedFanHeatVent 0001  
        __size_of_initButtons 0004                    ___lwtoft@c 0018                     ?_LcdClear 0001  
                sprintf@width 007A                    __pbssBANK0 0060                  ?_Delay10TCYx 0001  
                  _lcdCommand 0E76                       ?___wmul 0010                    _climaState 004F  
       ??_setSpeedFanHeatVent 0010                       _ADCRead 0DDC                       ?_setLcd 0001  
                   ?___ftpack 0010                     ?___lwtoft 0018              ??_setHeatElement 0012  
                  ??_LcdClear 0015            __size_of_updateLcd 01E6                       _LcdChar 0E4A  
                     _LcdGoTo 1002                       _LcdInit 0C52                     ?_setIODIR 0012  
   checkInputs@leftButton_old 0041                       __Hparam 0000                       __Lparam 0000  
            ??_setCoolElement 0012               __size_of___wmul 0026                       ___fttol 0952  
                     ___lwdiv 0BB2                       ___lwmod 0CE0                       __pcinit 0F16  
                  ??___ftpack 0015               Delay10TCYx@unit 0010                       __ramtop 1000  
               ??_checkInputs 0030               __size_of_setLcd 0042                       __ptext0 0D62  
                     __ptext1 0EA2                       __ptext2 030E                       __ptext3 0550  
                     __ptext4 101E                       __ptext5 1024                       __ptext6 1036  
                     __ptext7 0EF2                       __ptext8 0A46                       __ptext9 0952  
                  ??___lwtoft 001B                     _T0CONbits 000FD5                  __size_of_ISR 094A  
                     _initAdc 0DA0                  ??_SWSPISetCS 0010                       _dpowers FEF5  
                     _initPwm 100E                       _initTmr 0D22                       _setGPIO 0F56  
                     _isdigit 0F74                  ??_SWSPIWrite 0010                       _setTemp 0046  
                     _outTemp 003B               setIODIR@address 0013                  setGPIO@value 0012  
                     _sprintf 0000                __pintcode_body 0856          end_of_initialization 0F2E  
              _LcdWriteString 0B5C                    ??_setIODIR 0013                       int_func 0856  
              _getOnOffButton 1036            __end_of_SWSPISetCS 1042             __end_of_updateLcd 0736  
                   _RCSTAbits 000FAB            __end_of_SWSPIWrite 0C52                       postdec2 000FDD  
                 ?_lcdCommand 0001                       postinc0 000FEE                       postinc2 000FDE  
                   _UART_Init 0F92            _setLcdBacklightLed 101E                     _PORTAbits 000F80  
                   _PORTBbits 000F81                     _PORTCbits 000F82                     _PORTDbits 000F83  
                   _UART_putc 0FF4                     _UART_puts 0E14         checkInputs@leftButton 0033  
                   _PORTJbits 000F88                     _TRISAbits 000F92                     _TRISCbits 000F94  
                   _TRISDbits 000F95                    _standbyLed 0049           ?_setLcdBacklightLed 0010  
                   _TRISJbits 000F9A           __end_of_checkInputs 0856               _lcdBacklightLed 0048  
      __end_of_LcdWriteString 0BB2                     _SWSPIOpen 0FD2               _setSpeedFanCool 0FC0  
                   _TXSTAbits 000FAC        __end_of_getOnOffButton 103A         __end_of_updateOutputs 0ECC  
        ??_setLcdBacklightLed 0012                 ?_stateMachine 0001                  _leftButtonEv 0047  
              __end_of___wmul 0EF2                    ?_UART_Init 0001          __size_of_Delay10TCYx 0010  
                  ?_UART_putc 0001                    ?_UART_puts 0011                __end_of_setLcd 0CE0  
      __size_of_setStandbyLed 0006           start_initialization 0F16                   __end_of_ISR 0952  
             ?_LcdWriteString 0015             __size_of_LcdClear 0008           __size_of_lcdCommand 002C  
        setSpeedFanCool@speed 0010                    ?_SWSPIOpen 0001               ?_getOnOffButton 0001  
     setLcdBacklightLed@state 0010                ??_stateMachine 0031                 ??_initButtons 0010  
                    ??___wmul 0014                      ?_ADCRead 0010                      ??_setLcd 0017  
                 _checkInputs 0736            setStandbyLed@state 0010                 ?_SWSPIClearCS 0001  
           updateLcd@fanSpeed 0030             __size_of___ftpack 00AE                   __pbssCOMRAM 0036  
           __size_of___lwtoft 0024                 __pcstackBANK0 0074       __end_of_setSpeedFanCool 0FD2  
                _isdigit$1784 0011             checkInputs@adcVal 0034                      ?_LcdChar 0001  
                    ?_LcdGoTo 0001                      ?_LcdInit 0001                   sprintf@flag 0079  
                 sprintf@prec 0076                 _setStandbyLed 102A             __size_of_setIODIR 001E  
 __end_of_setSpeedFanHeatVent 0FC0              ___lwdiv@dividend 0016                     __pintcode 0008  
               __pmediumconst FEF4                   _heatElement 004B                      ?___fttol 0010  
                    ?___lwdiv 0016                      ?___lwmod 001D                   ??_UART_Init 0010  
              ??_SWSPIClearCS 0010                   ??_UART_putc 0010                   ??_UART_puts 0013  
         __end_of_initButtons 103E                      ?_initAdc 0001                      ?_initPwm 0001  
                    ?_initTmr 0001                      ?_setGPIO 0012                      ?_isdigit 0001  
                   _levelHeat 004C              ___lwdiv@quotient 001B                      ?_sprintf 0022  
                  UART_Init@x 0010            SWSPIWrite@BitCount 0011                   ??_SWSPIOpen 0010  
                 _coolElement 004A                ?_setStandbyLed 0010                ___wmul@product 0014  
                    _PIE1bits 000F9D                      _PIR1bits 000F9E                    UART_puts@s 0011  
              setGPIO@address 0013                  ??_lcdCommand 0014                     _updateLcd 0550  
            __size_of_ADCRead 0038                    _ADCON0bits 000FC2                    _ADCON1bits 000FC1  
                  _ADCON2bits 000FC0             ___wmul@multiplier 0010                      _LcdClear 1016  
        __end_of_stateMachine 0550              ?_setSpeedFanCool 0001                      _LcdLines FEFF  
          __end_of_lcdCommand 0EA2                _shouldClearLcd 0039       __size_of_setHeatElement 0006  
            __size_of_LcdChar 002C              __size_of_LcdGoTo 000C              __size_of_LcdInit 004C  
                    __Hrparam 0000                      __Lrparam 0000                   _initButtons 103A  
            __size_of___fttol 00F4              __size_of___lwdiv 0052              __size_of___lwmod 0042  
                  ?_updateLcd 0001                      ___ftpack 0A46                      ___lwtoft 0EF2  
            ??_LcdWriteString 0017                    sprintf@val 0077       __size_of_setCoolElement 0006  
            __size_of_initAdc 003C              __size_of_initPwm 0008              __size_of_initTmr 0040  
            __size_of_setGPIO 001E              __size_of_isdigit 001E               ___lwdiv@divisor 0018  
             ___lwdiv@counter 001A                      __ptext10 0AF4                      __ptext11 102A  
                    __ptext20 0DA0                      __ptext12 0FAE                      __ptext21 0E14  
                    __ptext13 0FC0                      __ptext30 1016                      __ptext22 0FF4  
                    __ptext14 0C9E                      __ptext31 0E76                      __ptext23 0FE4  
                    __ptext15 1002                      __ptext40 0CE0                      __ptext32 0F56  
                    __ptext24 0F92                      __ptext16 1030                      __ptext41 0BB2  
                    __ptext33 0C04                      __ptext25 0C52                      __ptext17 0D22  
                    __ptext42 0DDC                      __ptext34 103E                      __ptext26 0F38  
                    __ptext18 100E                      __ptext35 1042                      __ptext27 0FD2  
                    __ptext19 103A                      __ptext36 0736                      __ptext28 0B5C  
                    __ptext37 0000                      __ptext29 0E4A                      __ptext38 0F74  
                    __ptext39 0ECC              ??_getOnOffButton 0010              __size_of_sprintf 030E  
             ??_setStandbyLed 0012                      _setIODIR 0F38                 __size_of_main 003E  
               __size_of_init 0068                 UART_putc@data 0010          __end_of_SWSPIClearCS 1046  
 __size_of_setLcdBacklightLed 0006                 ??_Delay10TCYx 0010                      int$flags 0050  
             LcdWriteString@s 0015                    _MEMCONbits 000F9C                  ?_checkInputs 0001  
                    isdigit@c 0012        __size_of_updateOutputs 002A                      intlevel2 0000  
                  LcdGoTo@pos 0015                     sprintf@ap 0074                     sprintf@sp 0022  
            ___lwmod@dividend 001D                    _RCSTA1bits 000FAB                   ??_updateLcd 0030  
       __size_of_stateMachine 0242           setCoolElement@state 0010           __end_of_Delay10TCYx 0FF4  
                    sprintf@c 007C                      sprintf@f 0024              SWSPIWrite@output 0010  
             ___lwmod@divisor 001F               ___lwmod@counter 0021               SWSPIWrite@input 003F  
              _setHeatElement 1030                  _stateMachine 030E  
