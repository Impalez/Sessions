

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon May 20 15:32:27 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.41 (B)
    54                           ; Generated 21/02/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F8722 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	mediumconst
    89  00FEF4                     __pmediumconst:
    90                           	opt stack 0
    91  00FEF4  00                 	db	0
    92  00FEF5                     _dpowers:
    93                           	opt stack 0
    94  00FEF5  0001               	dw	1
    95  00FEF7  000A               	dw	10
    96  00FEF9  0064               	dw	100
    97  00FEFB  03E8               	dw	1000
    98  00FEFD  2710               	dw	10000
    99  00FEFF                     __end_of_dpowers:
   100                           	opt stack 0
   101  00FEFF                     _LcdLines:
   102                           	opt stack 0
   103  00FEFF  20                 	db	32
   104  00FF00  20                 	db	32
   105  00FF01  43                 	db	67
   106  00FF02  6C                 	db	108
   107  00FF03  69                 	db	105
   108  00FF04  6D                 	db	109
   109  00FF05  61                 	db	97
   110  00FF06  20                 	db	32
   111  00FF07  69                 	db	105
   112  00FF08  73                 	db	115
   113  00FF09  20                 	db	32
   114  00FF0A  4F                 	db	79
   115  00FF0B  46                 	db	70
   116  00FF0C  46                 	db	70
   117  00FF0D  20                 	db	32
   118  00FF0E  20                 	db	32
   119  00FF0F  00                 	db	0
   120  00FF10  00                 	db	0
   121  00FF11  2D                 	db	45
   122  00FF12  2D                 	db	45
   123  00FF13  2D                 	db	45
   124  00FF14  2D                 	db	45
   125  00FF15  2D                 	db	45
   126  00FF16  2D                 	db	45
   127  00FF17  2D                 	db	45
   128  00FF18  2D                 	db	45
   129  00FF19  2D                 	db	45
   130  00FF1A  2D                 	db	45
   131  00FF1B  2D                 	db	45
   132  00FF1C  2D                 	db	45
   133  00FF1D  2D                 	db	45
   134  00FF1E  2D                 	db	45
   135  00FF1F  2D                 	db	45
   136  00FF20  2D                 	db	45
   137  00FF21  00                 	db	0
   138  00FF22  00                 	db	0
   139  00FF23  54                 	db	84
   140  00FF24  65                 	db	101
   141  00FF25  3A                 	db	58
   142  00FF26  2B                 	db	43
   143  00FF27  20                 	db	32
   144  00FF28  20                 	db	32
   145  00FF29  43                 	db	67
   146  00FF2A  20                 	db	32
   147  00FF2B  54                 	db	84
   148  00FF2C  69                 	db	105
   149  00FF2D  3A                 	db	58
   150  00FF2E  2B                 	db	43
   151  00FF2F  20                 	db	32
   152  00FF30  20                 	db	32
   153  00FF31  43                 	db	67
   154  00FF32  20                 	db	32
   155  00FF33  00                 	db	0
   156  00FF34  00                 	db	0
   157  00FF35  52                 	db	82
   158  00FF36  65                 	db	101
   159  00FF37  63                 	db	99
   160  00FF38  65                 	db	101
   161  00FF39  20                 	db	32
   162  00FF3A  20                 	db	32
   163  00FF3B  20                 	db	32
   164  00FF3C  20                 	db	32
   165  00FF3D  20                 	db	32
   166  00FF3E  20                 	db	32
   167  00FF3F  20                 	db	32
   168  00FF40  3C                 	db	60
   169  00FF41  20                 	db	32
   170  00FF42  20                 	db	32
   171  00FF43  43                 	db	67
   172  00FF44  3E                 	db	62
   173  00FF45  00                 	db	0
   174  00FF46  00                 	db	0
   175  00FF47  54                 	db	84
   176  00FF48  65                 	db	101
   177  00FF49  3A                 	db	58
   178  00FF4A  2B                 	db	43
   179  00FF4B  20                 	db	32
   180  00FF4C  20                 	db	32
   181  00FF4D  43                 	db	67
   182  00FF4E  20                 	db	32
   183  00FF4F  54                 	db	84
   184  00FF50  69                 	db	105
   185  00FF51  3A                 	db	58
   186  00FF52  2B                 	db	43
   187  00FF53  20                 	db	32
   188  00FF54  20                 	db	32
   189  00FF55  43                 	db	67
   190  00FF56  20                 	db	32
   191  00FF57  00                 	db	0
   192  00FF58  00                 	db	0
   193  00FF59  43                 	db	67
   194  00FF5A  61                 	db	97
   195  00FF5B  6C                 	db	108
   196  00FF5C  64                 	db	100
   197  00FF5D  20                 	db	32
   198  00FF5E  20                 	db	32
   199  00FF5F  20                 	db	32
   200  00FF60  20                 	db	32
   201  00FF61  20                 	db	32
   202  00FF62  20                 	db	32
   203  00FF63  20                 	db	32
   204  00FF64  3C                 	db	60
   205  00FF65  20                 	db	32
   206  00FF66  20                 	db	32
   207  00FF67  43                 	db	67
   208  00FF68  3E                 	db	62
   209  00FF69  00                 	db	0
   210  00FF6A  00                 	db	0
   211  00FF6B  54                 	db	84
   212  00FF6C  65                 	db	101
   213  00FF6D  3A                 	db	58
   214  00FF6E  2B                 	db	43
   215  00FF6F  20                 	db	32
   216  00FF70  20                 	db	32
   217  00FF71  43                 	db	67
   218  00FF72  20                 	db	32
   219  00FF73  54                 	db	84
   220  00FF74  69                 	db	105
   221  00FF75  3A                 	db	58
   222  00FF76  2B                 	db	43
   223  00FF77  20                 	db	32
   224  00FF78  20                 	db	32
   225  00FF79  43                 	db	67
   226  00FF7A  20                 	db	32
   227  00FF7B  00                 	db	0
   228  00FF7C  00                 	db	0
   229  00FF7D  56                 	db	86
   230  00FF7E  65                 	db	101
   231  00FF7F  6E                 	db	110
   232  00FF80  74                 	db	116
   233  00FF81  20                 	db	32
   234  00FF82  20                 	db	32
   235  00FF83  20                 	db	32
   236  00FF84  20                 	db	32
   237  00FF85  20                 	db	32
   238  00FF86  20                 	db	32
   239  00FF87  20                 	db	32
   240  00FF88  20                 	db	32
   241  00FF89  20                 	db	32
   242  00FF8A  20                 	db	32
   243  00FF8B  43                 	db	67
   244  00FF8C  20                 	db	32
   245  00FF8D  00                 	db	0
   246  00FF8E  00                 	db	0
   247  00FF8F                     __end_of_LcdLines:
   248                           	opt stack 0
   249  0000                     _TMR0	set	4054
   250  0000                     _ADRES	set	4035
   251  0000                     _PIR1bits	set	3998
   252  0000                     _RCREG	set	4014
   253  0000                     _TXREG	set	4013
   254  0000                     _RCSTA1bits	set	4011
   255  0000                     _PIE1bits	set	3997
   256  0000                     _RCSTAbits	set	4011
   257  0000                     _TXSTAbits	set	4012
   258  0000                     _SPBRG	set	4015
   259  0000                     _TXSTA1bits	set	4012
   260  0000                     _TRISCbits	set	3988
   261  0000                     _TRISAbits	set	3986
   262  0000                     _PORTCbits	set	3970
   263  0000                     _PORTAbits	set	3968
   264  0000                     _MEMCONbits	set	3996
   265  0000                     _PORTD	set	3971
   266  0000                     _TRISD	set	3989
   267  0000                     _TMR0L	set	4054
   268  0000                     _TMR0H	set	4055
   269  0000                     _TMR1L	set	4046
   270  0000                     _TMR1H	set	4047
   271  0000                     _T0CONbits	set	4053
   272  0000                     _T0CON	set	4053
   273  0000                     _TRISJbits	set	3994
   274  0000                     _PORTJbits	set	3976
   275  0000                     _TRISDbits	set	3989
   276  0000                     _ADCON2bits	set	4032
   277  0000                     _ADCON1bits	set	4033
   278  0000                     _ADCON0bits	set	4034
   279  0000                     _TRISA	set	3986
   280  0000                     _PORTDbits	set	3971
   281  0000                     _PORTBbits	set	3969
   282  0000                     _RCIF	set	31989
   283  0000                     _TRMT1	set	32097
   284  0000                     _T0IF	set	32658
   285  0000                     _GIE	set	32663
   286  0000                     _T0IE	set	32661
   287  0000                     _TRISB0	set	31896
   288  00FF8F                     STR_19:
   289  00FF8F  48                 	db	72	;'H'
   290  00FF90  53                 	db	83	;'S'
   291  00FF91  3A                 	db	58	;':'
   292  00FF92  25                 	db	37
   293  00FF93  64                 	db	100	;'d'
   294  00FF94  2C                 	db	44
   295  00FF95  20                 	db	32
   296  00FF96  48                 	db	72	;'H'
   297  00FF97  4C                 	db	76	;'L'
   298  00FF98  3A                 	db	58	;':'
   299  00FF99  25                 	db	37
   300  00FF9A  64                 	db	100	;'d'
   301  00FF9B  2C                 	db	44
   302  00FF9C  20                 	db	32
   303  00FF9D  43                 	db	67	;'C'
   304  00FF9E  53                 	db	83	;'S'
   305  00FF9F  3A                 	db	58	;':'
   306  00FFA0  25                 	db	37
   307  00FFA1  64                 	db	100	;'d'
   308  00FFA2  2C                 	db	44
   309  00FFA3  20                 	db	32
   310  00FFA4  00                 	db	0
   311  00FFA5                     STR_20:
   312  00FFA5  0A                 	db	10
   313  00FFA6  0D                 	db	13
   314  00FFA7  49                 	db	73	;'I'
   315  00FFA8  6E                 	db	110	;'n'
   316  00FFA9  69                 	db	105	;'i'
   317  00FFAA  74                 	db	116	;'t'
   318  00FFAB  69                 	db	105	;'i'
   319  00FFAC  61                 	db	97	;'a'
   320  00FFAD  6C                 	db	108	;'l'
   321  00FFAE  69                 	db	105	;'i'
   322  00FFAF  7A                 	db	122	;'z'
   323  00FFB0  69                 	db	105	;'i'
   324  00FFB1  6E                 	db	110	;'n'
   325  00FFB2  67                 	db	103	;'g'
   326  00FFB3  2E                 	db	46
   327  00FFB4  2E                 	db	46
   328  00FFB5  2E                 	db	46
   329  00FFB6  0A                 	db	10
   330  00FFB7  0D                 	db	13
   331  00FFB8  00                 	db	0
   332  00FFB9                     STR_21:
   333  00FFB9  4C                 	db	76	;'L'
   334  00FFBA  43                 	db	67	;'C'
   335  00FFBB  44                 	db	68	;'D'
   336  00FFBC  20                 	db	32
   337  00FFBD  69                 	db	105	;'i'
   338  00FFBE  6E                 	db	110	;'n'
   339  00FFBF  69                 	db	105	;'i'
   340  00FFC0  74                 	db	116	;'t'
   341  00FFC1  20                 	db	32
   342  00FFC2  2E                 	db	46
   343  00FFC3  2E                 	db	46
   344  00FFC4  2E                 	db	46
   345  00FFC5  00                 	db	0
   346  00FFC6  7C                 	db	124
   347  00FFC7  2E                 	db	46
   348  00FFC8  2E                 	db	46
   349  00FFC9  2E                 	db	46
   350  00FFCA  2E                 	db	46
   351  00FFCB  00                 	db	0
   352  00FFCC  7C                 	db	124
   353  00FFCD  7C                 	db	124
   354  00FFCE  2E                 	db	46
   355  00FFCF  2E                 	db	46
   356  00FFD0  2E                 	db	46
   357  00FFD1  00                 	db	0
   358  00FFD2  7C                 	db	124
   359  00FFD3  7C                 	db	124
   360  00FFD4  7C                 	db	124
   361  00FFD5  2E                 	db	46
   362  00FFD6  2E                 	db	46
   363  00FFD7  00                 	db	0
   364  00FFD8  7C                 	db	124
   365  00FFD9  7C                 	db	124
   366  00FFDA  7C                 	db	124
   367  00FFDB  7C                 	db	124
   368  00FFDC  2E                 	db	46
   369  00FFDD  00                 	db	0
   370  00FFDE  7C                 	db	124
   371  00FFDF  7C                 	db	124
   372  00FFE0  7C                 	db	124
   373  00FFE1  7C                 	db	124
   374  00FFE2  7C                 	db	124
   375  00FFE3  00                 	db	0
   376  00FFE4                     STR_1:
   377  00FFE4  25                 	db	37
   378  00FFE5  30                 	db	48	;'0'
   379  00FFE6  32                 	db	50	;'2'
   380  00FFE7  64                 	db	100	;'d'
   381  00FFE8  00                 	db	0
   382  00FFE9  43                 	db	67	;'C'
   383  00FFEA  61                 	db	97	;'a'
   384  00FFEB  6C                 	db	108	;'l'
   385  00FFEC  64                 	db	100	;'d'
   386  00FFED  00                 	db	0
   387  00FFEE  52                 	db	82	;'R'
   388  00FFEF  65                 	db	101	;'e'
   389  00FFF0  63                 	db	99	;'c'
   390  00FFF1  65                 	db	101	;'e'
   391  00FFF2  00                 	db	0
   392  00FFF3  56                 	db	86	;'V'
   393  00FFF4  65                 	db	101	;'e'
   394  00FFF5  6E                 	db	110	;'n'
   395  00FFF6  74                 	db	116	;'t'
   396  00FFF7  00                 	db	0
   397  00FFF8                     STR_11:
   398  00FFF8  25                 	db	37
   399  00FFF9  64                 	db	100	;'d'
   400  00FFFA  00                 	db	0
   401  00FFFB                     STR_14:
   402  00FFFB  3C                 	db	60	;'<'
   403  00FFFC  00                 	db	0
   404  00FFFD                     STR_13:
   405  00FFFD  3E                 	db	62	;'>'
   406  00FFFE  00                 	db	0
   407  0000                     
   408                           ; #config settings
   409  00FFFF  00                 	db	0	; dummy byte at the end
   410  0000                     
   411                           	psect	cinit
   412  0108BC                     __pcinit:
   413                           	opt stack 0
   414  0108BC                     start_initialization:
   415                           	opt stack 0
   416  0108BC                     __initialization:
   417                           	opt stack 0
   418                           
   419                           ; Clear objects allocated to BANK0 (20 bytes)
   420  0108BC  EE00  F060         	lfsr	0,__pbssBANK0
   421  0108C0  0E14               	movlw	20
   422  0108C2                     clear_0:
   423  0108C2  6AEE               	clrf	postinc0,c
   424  0108C4  06E8               	decf	wreg,f,c
   425  0108C6  E1FD               	bnz	clear_0
   426                           
   427                           ; Clear objects allocated to COMRAM (21 bytes)
   428  0108C8  EE00  F03A         	lfsr	0,__pbssCOMRAM
   429  0108CC  0E15               	movlw	21
   430  0108CE                     clear_1:
   431  0108CE  6AEE               	clrf	postinc0,c
   432  0108D0  06E8               	decf	wreg,f,c
   433  0108D2  E1FD               	bnz	clear_1
   434  0108D4                     end_of_initialization:
   435                           	opt stack 0
   436  0108D4                     __end_of__initialization:
   437                           	opt stack 0
   438  0108D4  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   439  0108D6  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   440  0108D8  0100               	movlb	0
   441  0108DA  EFB6  F083         	goto	_main	;jump to C main() function
   442                           postinc0	equ	0xFEE
   443                           wreg	equ	0xFE8
   444                           
   445                           	psect	bssCOMRAM
   446  00003A                     __pbssCOMRAM:
   447                           	opt stack 0
   448  00003A                     _outTemp:
   449                           	opt stack 0
   450  00003A                     	ds	2
   451  00003C                     _inTemp:
   452                           	opt stack 0
   453  00003C                     	ds	2
   454  00003E                     SWSPIWrite@input:
   455                           	opt stack 0
   456  00003E                     	ds	1
   457  00003F                     _a:
   458                           	opt stack 0
   459  00003F                     	ds	1
   460  000040                     checkInputs@leftButton_old:
   461                           	opt stack 0
   462  000040                     	ds	1
   463  000041                     _inDeb:
   464                           	opt stack 0
   465  000041                     	ds	1
   466  000042                     _cnt:
   467                           	opt stack 0
   468  000042                     	ds	1
   469  000043                     _ev:
   470                           	opt stack 0
   471  000043                     	ds	1
   472  000044                     _tick:
   473                           	opt stack 0
   474  000044                     	ds	1
   475  000045                     _setTemp:
   476                           	opt stack 0
   477  000045                     	ds	1
   478  000046                     _leftButtonEv:
   479                           	opt stack 0
   480  000046                     	ds	1
   481  000047                     _lcdBacklightLed:
   482                           	opt stack 0
   483  000047                     	ds	1
   484  000048                     _standbyLed:
   485                           	opt stack 0
   486  000048                     	ds	1
   487  000049                     _coolElement:
   488                           	opt stack 0
   489  000049                     	ds	1
   490  00004A                     _heatElement:
   491                           	opt stack 0
   492  00004A                     	ds	1
   493  00004B                     _levelHeat:
   494                           	opt stack 0
   495  00004B                     	ds	1
   496  00004C                     _fanSpeedHeatVent:
   497                           	opt stack 0
   498  00004C                     	ds	1
   499  00004D                     _fanSpeedCool:
   500                           	opt stack 0
   501  00004D                     	ds	1
   502  00004E                     _climaState:
   503                           	opt stack 0
   504  00004E                     	ds	1
   505                           postinc0	equ	0xFEE
   506                           wreg	equ	0xFE8
   507                           
   508                           	psect	bssBANK0
   509  000060                     __pbssBANK0:
   510                           	opt stack 0
   511  000060                     _msg:
   512                           	opt stack 0
   513  000060                     	ds	20
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           
   517                           	psect	cstackBANK0
   518  000074                     __pcstackBANK0:
   519                           	opt stack 0
   520  000074                     ??_checkInputs:
   521                           
   522                           ; 1 bytes @ 0x0
   523  000074                     	ds	3
   524  000077                     checkInputs@adcVal:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x3
   528  000077                     	ds	2
   529  000079                     checkInputs@leftButton:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x5
   533  000079                     	ds	1
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           
   537                           	psect	cstackCOMRAM
   538  000001                     __pcstackCOMRAM:
   539                           	opt stack 0
   540  000001                     ??_ISR:
   541  000001                     
   542                           ; 1 bytes @ 0x0
   543  000001                     	ds	15
   544  000010                     ??_isdigit:
   545  000010                     ?_ADCRead:
   546                           	opt stack 0
   547  000010                     ?___wmul:
   548                           	opt stack 0
   549  000010                     setSpeedFanCool@speed:
   550                           	opt stack 0
   551  000010                     setSpeedFanHeatVent@speed:
   552                           	opt stack 0
   553  000010                     SWSPIWrite@output:
   554                           	opt stack 0
   555  000010                     UART_putc@data:
   556                           	opt stack 0
   557  000010                     Delay10TCYx@unit:
   558                           	opt stack 0
   559  000010                     setStandbyLed@state:
   560                           	opt stack 0
   561  000010                     setHeatElement@state:
   562                           	opt stack 0
   563  000010                     UART_Init@x:
   564                           	opt stack 0
   565  000010                     ___wmul@multiplier:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0xF
   569  000010                     	ds	1
   570  000011                     SWSPIWrite@BitCount:
   571                           	opt stack 0
   572  000011                     _isdigit$1777:
   573                           	opt stack 0
   574  000011                     UART_puts@s:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x10
   578  000011                     	ds	1
   579  000012                     ??_ADCRead:
   580  000012                     setGPIO@value:
   581                           	opt stack 0
   582  000012                     setIODIR@dir:
   583                           	opt stack 0
   584  000012                     isdigit@c:
   585                           	opt stack 0
   586  000012                     ___wmul@multiplicand:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x11
   590  000012                     	ds	1
   591  000013                     ADCRead@ch:
   592                           	opt stack 0
   593  000013                     setGPIO@address:
   594                           	opt stack 0
   595  000013                     setIODIR@address:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x12
   599  000013                     	ds	1
   600  000014                     lcdCommand@command:
   601                           	opt stack 0
   602  000014                     LcdChar@letter:
   603                           	opt stack 0
   604  000014                     ___wmul@product:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x13
   608  000014                     	ds	1
   609  000015                     LcdGoTo@pos:
   610                           	opt stack 0
   611  000015                     LcdWriteString@s:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x14
   615  000015                     	ds	1
   616  000016                     ?___lwdiv:
   617                           	opt stack 0
   618  000016                     ___lwdiv@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x15
   622  000016                     	ds	1
   623  000017                     
   624                           ; 1 bytes @ 0x16
   625  000017                     	ds	1
   626  000018                     ___lwdiv@divisor:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x17
   630  000018                     	ds	2
   631  00001A                     ___lwdiv@counter:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x19
   635  00001A                     	ds	1
   636  00001B                     ___lwdiv@quotient:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x1A
   640  00001B                     	ds	2
   641  00001D                     ?___lwmod:
   642                           	opt stack 0
   643  00001D                     ___lwmod@dividend:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x1C
   647  00001D                     	ds	2
   648  00001F                     ___lwmod@divisor:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x1E
   652  00001F                     	ds	2
   653  000021                     ___lwmod@counter:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x20
   657  000021                     	ds	1
   658  000022                     ?_sprintf:
   659                           	opt stack 0
   660  000022                     sprintf@sp:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x21
   664  000022                     	ds	2
   665  000024                     sprintf@f:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x23
   669  000024                     	ds	8
   670  00002C                     ??_sprintf:
   671                           
   672                           ; 1 bytes @ 0x2B
   673  00002C                     	ds	4
   674  000030                     sprintf@ap:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x2F
   678  000030                     	ds	2
   679  000032                     sprintf@prec:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x31
   683  000032                     	ds	1
   684  000033                     sprintf@val:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x32
   688  000033                     	ds	2
   689  000035                     sprintf@flag:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x34
   693  000035                     	ds	1
   694  000036                     sprintf@width:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x35
   698  000036                     	ds	2
   699  000038                     sprintf@c:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x37
   703  000038                     	ds	1
   704  000039                     main@i:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x38
   708  000039                     	ds	1
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           
   712 ;;
   713 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   714 ;;
   715 ;; *************** function _main *****************
   716 ;; Defined at:
   717 ;;		line 675 in file "clima.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;  i               1   56[COMRAM] unsigned char 
   722 ;; Return value:  Size  Location     Type
   723 ;;                  1    wreg      void 
   724 ;; Registers used:
   725 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   734 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   735 ;;Total ram usage:        1 bytes
   736 ;; Hardware stack levels required when called:    7
   737 ;; This function calls:
   738 ;;		_checkInputs
   739 ;;		_init
   740 ;;		_stateMachine
   741 ;;		_updateOutputs
   742 ;; This function is called by:
   743 ;;		Startup code after reset
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           	psect	text0
   748  01076C                     __ptext0:
   749                           	opt stack 0
   750  01076C                     _main:
   751                           	opt stack 24
   752                           
   753                           ;clima.c: 677: init();
   754                           
   755                           ;incstack = 0
   756  01076C  EC42  F082         	call	_init	;wreg free
   757                           
   758                           ;clima.c: 678: char i = 0;
   759  010770  0E00               	movlw	0
   760  010772  6E39               	movwf	main@i,c
   761                           
   762                           ;clima.c: 680: PORTJbits.RJ0 = 0;
   763  010774  9088               	bcf	3976,0,c	;volatile
   764                           
   765                           ;clima.c: 681: TRISJbits.TRISJ0 = 0;
   766  010776  909A               	bcf	3994,0,c	;volatile
   767                           
   768                           ;clima.c: 682: PORTJbits.RJ1 = 0;
   769  010778  9288               	bcf	3976,1,c	;volatile
   770                           
   771                           ;clima.c: 683: TRISJbits.TRISJ1 = 0;
   772  01077A  929A               	bcf	3994,1,c	;volatile
   773                           
   774                           ;clima.c: 684: PORTJbits.RJ2 = 0;
   775  01077C  9488               	bcf	3976,2,c	;volatile
   776                           
   777                           ;clima.c: 685: TRISJbits.TRISJ2 = 0;
   778  01077E  949A               	bcf	3994,2,c	;volatile
   779                           
   780                           ;clima.c: 687: TRISD = 0;
   781  010780  0E00               	movlw	0
   782  010782  6E95               	movwf	3989,c	;volatile
   783  010784                     l2470:
   784  010784  5043               	movf	_ev,w,c
   785  010786  B4D8               	btfsc	status,2,c
   786  010788  D7FD               	goto	l2470
   787                           
   788                           ;clima.c: 693: ev = 0;
   789  01078A  0E00               	movlw	0
   790  01078C  6E43               	movwf	_ev,c
   791                           
   792                           ;clima.c: 695: i++;
   793  01078E  2A39               	incf	main@i,f,c
   794                           
   795                           ;clima.c: 696: PORTJbits.RJ2 = 1;
   796  010790  8488               	bsf	3976,2,c	;volatile
   797                           
   798                           ;clima.c: 698: checkInputs();
   799  010792  ECD7  F081         	call	_checkInputs	;wreg free
   800                           
   801                           ;clima.c: 699: stateMachine();
   802  010796  EC79  F083         	call	_stateMachine	;wreg free
   803                           
   804                           ;clima.c: 700: updateOutputs();
   805  01079A  EC36  F084         	call	_updateOutputs	;wreg free
   806                           
   807                           ;clima.c: 703: leftButtonEv = 0;
   808  01079E  0E00               	movlw	0
   809  0107A0  6E46               	movwf	_leftButtonEv,c
   810                           
   811                           ;clima.c: 705: PORTJbits.RJ2 = 0;
   812  0107A2  9488               	bcf	3976,2,c	;volatile
   813  0107A4  D7EF               	goto	l2470
   814  0107A6                     __end_of_main:
   815                           	opt stack 0
   816                           postinc0	equ	0xFEE
   817                           wreg	equ	0xFE8
   818                           status	equ	0xFD8
   819                           
   820 ;; *************** function _updateOutputs *****************
   821 ;; Defined at:
   822 ;;		line 431 in file "clima.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;		None
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		None
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;Total ram usage:        0 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    1
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_main
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           	psect	text1
   851  01086C                     __ptext1:
   852                           	opt stack 0
   853  01086C                     _updateOutputs:
   854                           	opt stack 29
   855                           
   856                           ;clima.c: 434: PORTDbits.RD7 = standbyLed;
   857                           
   858                           ;incstack = 0
   859  01086C  B048               	btfsc	_standbyLed,0,c
   860  01086E  D002               	bra	u455
   861  010870  9E83               	bcf	3971,7,c	;volatile
   862  010872  D001               	bra	u456
   863  010874                     u455:
   864  010874  8E83               	bsf	3971,7,c	;volatile
   865  010876                     u456:
   866                           
   867                           ;clima.c: 437: PORTDbits.RD6 = lcdBacklightLed;
   868  010876  B047               	btfsc	_lcdBacklightLed,0,c
   869  010878  D002               	bra	u465
   870  01087A  9C83               	bcf	3971,6,c	;volatile
   871  01087C  D001               	bra	u466
   872  01087E                     u465:
   873  01087E  8C83               	bsf	3971,6,c	;volatile
   874  010880                     u466:
   875                           
   876                           ;clima.c: 440: PORTDbits.RD1 = coolElement;
   877  010880  B049               	btfsc	_coolElement,0,c
   878  010882  D002               	bra	u475
   879  010884  9283               	bcf	3971,1,c	;volatile
   880  010886  D001               	bra	u476
   881  010888                     u475:
   882  010888  8283               	bsf	3971,1,c	;volatile
   883  01088A                     u476:
   884                           
   885                           ;clima.c: 443: PORTDbits.RD0 = heatElement;
   886  01088A  B04A               	btfsc	_heatElement,0,c
   887  01088C  D002               	bra	u485
   888  01088E  9083               	bcf	3971,0,c	;volatile
   889  010890  D001               	bra	u486
   890  010892                     u485:
   891  010892  8083               	bsf	3971,0,c	;volatile
   892  010894                     u486:
   893  010894  0012               	return		;funcret
   894  010896                     __end_of_updateOutputs:
   895                           	opt stack 0
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           status	equ	0xFD8
   899                           
   900 ;; *************** function _stateMachine *****************
   901 ;; Defined at:
   902 ;;		line 392 in file "clima.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;		None
   905 ;; Auto vars:     Size  Location     Type
   906 ;;  err             1    0        unsigned char 
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;Total ram usage:        0 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; Hardware stack levels required when called:    3
   923 ;; This function calls:
   924 ;;		_sprintf
   925 ;; This function is called by:
   926 ;;		_main
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text2
   931  0106F2                     __ptext2:
   932                           	opt stack 0
   933  0106F2                     _stateMachine:
   934                           	opt stack 27
   935                           
   936                           ;clima.c: 394: byte err;
   937                           ;clima.c: 396: ;
   938                           ;clima.c: 397: sprintf(msg, "HS:%d, HL:%d, CS:%d, ", fanSpeedHeatVent, levelHeat, fanSpe
      +                          edCool);
   939                           
   940                           ;incstack = 0
   941  0106F2  0E60               	movlw	low _msg
   942  0106F4  6E22               	movwf	sprintf@sp,c
   943  0106F6  0E00               	movlw	high _msg
   944  0106F8  6E23               	movwf	sprintf@sp+1,c
   945  0106FA  0E8F               	movlw	low STR_19
   946  0106FC  6E24               	movwf	sprintf@f,c
   947  0106FE  0EFF               	movlw	high STR_19
   948  010700  6E25               	movwf	sprintf@f+1,c
   949  010702  C04C  F026         	movff	_fanSpeedHeatVent,?_sprintf+4
   950  010706  6A27               	clrf	?_sprintf+5,c
   951  010708  C04B  F028         	movff	_levelHeat,?_sprintf+6
   952  01070C  6A29               	clrf	?_sprintf+7,c
   953  01070E  C04D  F02A         	movff	_fanSpeedCool,?_sprintf+8
   954  010712  6A2B               	clrf	?_sprintf+9,c
   955  010714  EC00  F080         	call	_sprintf	;wreg free
   956                           
   957                           ;clima.c: 422: }
   958                           ;clima.c: 423: }
   959                           
   960                           ;clima.c: 420: {
   961                           ;clima.c: 421: break;
   962                           
   963                           ;clima.c: 416: {
   964                           ;clima.c: 418: }
   965                           ;clima.c: 419: default:
   966                           
   967                           ;clima.c: 412: {
   968                           ;clima.c: 414: }
   969                           ;clima.c: 415: case STATE_ON_VENT:
   970                           
   971                           ;clima.c: 408: {
   972                           ;clima.c: 410: }
   973                           ;clima.c: 411: case STATE_ON_HEAT:
   974                           
   975                           ;clima.c: 404: {
   976                           ;clima.c: 406: }
   977                           ;clima.c: 407: case STATE_ON_COOL:
   978                           
   979                           ;clima.c: 402: {
   980                           ;clima.c: 403: case STATE_OFF:
   981                           
   982                           ;clima.c: 398: ;
   983                           ;clima.c: 399: ;
   984                           ;clima.c: 401: switch (climaState)
   985  010718  504E               	movf	_climaState,w,c
   986                           
   987                           ; Switch size 1, requested type "space"
   988                           ; Number of cases is 4, Range of values is 0 to 3
   989                           ; switch strategies available:
   990                           ; Name         Instructions Cycles
   991                           ; simple_byte           13     7 (average)
   992                           ;	Chosen strategy is simple_byte
   993  01071A  0A00               	xorlw	0	; case 0
   994  01071C  B4D8               	btfsc	status,2,c
   995  01071E  0012               	return	
   996  010720  0A01               	xorlw	1	; case 1
   997  010722  B4D8               	btfsc	status,2,c
   998  010724  0012               	return	
   999  010726  0A03               	xorlw	3	; case 2
  1000  010728  B4D8               	btfsc	status,2,c
  1001  01072A  0012               	return	
  1002  01072C  0A01               	xorlw	1	; case 3
  1003  01072E  0012               	return	
  1004  010730                     __end_of_stateMachine:
  1005                           	opt stack 0
  1006                           postinc0	equ	0xFEE
  1007                           wreg	equ	0xFE8
  1008                           status	equ	0xFD8
  1009                           
  1010 ;; *************** function _init *****************
  1011 ;; Defined at:
  1012 ;;		line 625 in file "clima.c"
  1013 ;; Parameters:    Size  Location     Type
  1014 ;;		None
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;		None
  1017 ;; Return value:  Size  Location     Type
  1018 ;;                  1    wreg      void 
  1019 ;; Registers used:
  1020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/0
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1030 ;;Total ram usage:        0 bytes
  1031 ;; Hardware stack levels used:    1
  1032 ;; Hardware stack levels required when called:    6
  1033 ;; This function calls:
  1034 ;;		_LcdInit
  1035 ;;		_UART_Init
  1036 ;;		_UART_puts
  1037 ;;		_initAdc
  1038 ;;		_initButtons
  1039 ;;		_initPwm
  1040 ;;		_initTmr
  1041 ;;		_setHeatElement
  1042 ;;		_setLcd
  1043 ;;		_setSpeedFanCool
  1044 ;;		_setSpeedFanHeatVent
  1045 ;;		_setStandbyLed
  1046 ;; This function is called by:
  1047 ;;		_main
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text3
  1052  010484                     __ptext3:
  1053                           	opt stack 0
  1054  010484                     _init:
  1055                           	opt stack 24
  1056                           
  1057                           ;clima.c: 627: TRISD=0;
  1058                           
  1059                           ;incstack = 0
  1060  010484  0E00               	movlw	0
  1061  010486  6E95               	movwf	3989,c	;volatile
  1062                           
  1063                           ;clima.c: 628: PORTD=0;
  1064  010488  0E00               	movlw	0
  1065  01048A  6E83               	movwf	3971,c	;volatile
  1066                           
  1067                           ;clima.c: 629: MEMCONbits.EBDIS=1;
  1068  01048C  8E9C               	bsf	3996,7,c	;volatile
  1069                           
  1070                           ;clima.c: 632: UART_Init();
  1071  01048E  EC9C  F084         	call	_UART_Init	;wreg free
  1072                           
  1073                           ;clima.c: 633: UART_puts((char *)"\n\rInitializing...\n\r");
  1074  010492  0EA5               	movlw	low STR_20
  1075  010494  6E11               	movwf	UART_puts@s,c
  1076  010496  0EFF               	movlw	high STR_20
  1077  010498  6E12               	movwf	UART_puts@s+1,c
  1078  01049A  ECEF  F083         	call	_UART_puts	;wreg free
  1079                           
  1080                           ;clima.c: 636: initButtons();
  1081  01049E  ECE8  F084         	call	_initButtons	;wreg free
  1082                           
  1083                           ;clima.c: 639: initAdc();
  1084  0104A2  EC98  F083         	call	_initAdc	;wreg free
  1085                           
  1086                           ;clima.c: 642: initPwm();
  1087  0104A6  ECDA  F084         	call	_initPwm	;wreg free
  1088                           
  1089                           ;clima.c: 645: initTmr();
  1090  0104AA  EC59  F083         	call	_initTmr	;wreg free
  1091                           
  1092                           ;clima.c: 648: LcdInit();
  1093  0104AE  ECF1  F082         	call	_LcdInit	;wreg free
  1094                           
  1095                           ;clima.c: 651: ;
  1096                           ;clima.c: 652: climaState = STATE_OFF;
  1097  0104B2  0E00               	movlw	0
  1098  0104B4  6E4E               	movwf	_climaState,c
  1099                           
  1100                           ;clima.c: 653: setLcd();
  1101  0104B6  EC17  F083         	call	_setLcd	;wreg free
  1102                           
  1103                           ;clima.c: 656: setStandbyLed(1);
  1104  0104BA  0E00               	movlw	0
  1105  0104BC  6E11               	movwf	setStandbyLed@state+1,c
  1106  0104BE  0E01               	movlw	1
  1107  0104C0  6E10               	movwf	setStandbyLed@state,c
  1108  0104C2  ECE2  F084         	call	_setStandbyLed	;wreg free
  1109                           
  1110                           ;clima.c: 658: setHeatElement(0);
  1111  0104C6  0E00               	movlw	0
  1112  0104C8  6E11               	movwf	setHeatElement@state+1,c
  1113  0104CA  0E00               	movlw	0
  1114  0104CC  6E10               	movwf	setHeatElement@state,c
  1115  0104CE  ECE5  F084         	call	_setHeatElement	;wreg free
  1116                           
  1117                           ;clima.c: 661: setSpeedFanCool(0);
  1118  0104D2  0E00               	movlw	0
  1119  0104D4  ECB3  F084         	call	_setSpeedFanCool
  1120                           
  1121                           ;clima.c: 663: setSpeedFanHeatVent(0);
  1122  0104D8  0E00               	movlw	0
  1123  0104DA  ECAA  F084         	call	_setSpeedFanHeatVent
  1124                           
  1125                           ;clima.c: 665: setHeatElement(0);
  1126  0104DE  0E00               	movlw	0
  1127  0104E0  6E11               	movwf	setHeatElement@state+1,c
  1128  0104E2  0E00               	movlw	0
  1129  0104E4  6E10               	movwf	setHeatElement@state,c
  1130  0104E6  ECE5  F084         	call	_setHeatElement	;wreg free
  1131  0104EA  0012               	return		;funcret
  1132  0104EC                     __end_of_init:
  1133                           	opt stack 0
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           status	equ	0xFD8
  1137                           
  1138 ;; *************** function _setStandbyLed *****************
  1139 ;; Defined at:
  1140 ;;		line 135 in file "clima.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;  state           2   15[COMRAM] unsigned int 
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		None
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1154 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1158 ;;Total ram usage:        2 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    1
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_init
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text4
  1169  0109C4                     __ptext4:
  1170                           	opt stack 0
  1171  0109C4                     _setStandbyLed:
  1172                           	opt stack 28
  1173                           
  1174                           ;clima.c: 137: standbyLed = state;
  1175                           
  1176                           ;incstack = 0
  1177  0109C4  C010  F048         	movff	setStandbyLed@state,_standbyLed
  1178  0109C8  0012               	return		;funcret
  1179  0109CA                     __end_of_setStandbyLed:
  1180                           	opt stack 0
  1181                           postinc0	equ	0xFEE
  1182                           wreg	equ	0xFE8
  1183                           status	equ	0xFD8
  1184                           
  1185 ;; *************** function _setSpeedFanHeatVent *****************
  1186 ;; Defined at:
  1187 ;;		line 186 in file "clima.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  speed           1    wreg     unsigned char 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  speed           1   15[COMRAM] unsigned char 
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg, status,2, status,0
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;Total ram usage:        1 bytes
  1206 ;; Hardware stack levels used:    1
  1207 ;; Hardware stack levels required when called:    1
  1208 ;; This function calls:
  1209 ;;		Nothing
  1210 ;; This function is called by:
  1211 ;;		_init
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           	psect	text5
  1216  010954                     __ptext5:
  1217                           	opt stack 0
  1218  010954                     _setSpeedFanHeatVent:
  1219                           	opt stack 28
  1220                           
  1221                           ;incstack = 0
  1222                           ;setSpeedFanHeatVent@speed stored from wreg
  1223  010954  6E10               	movwf	setSpeedFanHeatVent@speed,c
  1224                           
  1225                           ;clima.c: 188: if (speed)
  1226  010956  5010               	movf	setSpeedFanHeatVent@speed,w,c
  1227  010958  B4D8               	btfsc	status,2,c
  1228  01095A  D002               	goto	l1194
  1229                           
  1230                           ;clima.c: 189: speed += 3;
  1231  01095C  0E03               	movlw	3
  1232  01095E  2610               	addwf	setSpeedFanHeatVent@speed,f,c
  1233  010960                     l1194:
  1234                           
  1235                           ;clima.c: 190: fanSpeedHeatVent = speed;
  1236  010960  C010  F04C         	movff	setSpeedFanHeatVent@speed,_fanSpeedHeatVent
  1237  010964  0012               	return		;funcret
  1238  010966                     __end_of_setSpeedFanHeatVent:
  1239                           	opt stack 0
  1240                           postinc0	equ	0xFEE
  1241                           wreg	equ	0xFE8
  1242                           status	equ	0xFD8
  1243                           
  1244 ;; *************** function _setSpeedFanCool *****************
  1245 ;; Defined at:
  1246 ;;		line 175 in file "clima.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;  speed           1    wreg     unsigned char 
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;  speed           1   15[COMRAM] unsigned char 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      void 
  1253 ;; Registers used:
  1254 ;;		wreg, status,2, status,0
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;Total ram usage:        1 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    1
  1267 ;; This function calls:
  1268 ;;		Nothing
  1269 ;; This function is called by:
  1270 ;;		_init
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	text6
  1275  010966                     __ptext6:
  1276                           	opt stack 0
  1277  010966                     _setSpeedFanCool:
  1278                           	opt stack 28
  1279                           
  1280                           ;incstack = 0
  1281                           ;setSpeedFanCool@speed stored from wreg
  1282  010966  6E10               	movwf	setSpeedFanCool@speed,c
  1283                           
  1284                           ;clima.c: 177: if (speed)
  1285  010968  5010               	movf	setSpeedFanCool@speed,w,c
  1286  01096A  B4D8               	btfsc	status,2,c
  1287  01096C  D002               	goto	l1188
  1288                           
  1289                           ;clima.c: 178: speed += 3;
  1290  01096E  0E03               	movlw	3
  1291  010970  2610               	addwf	setSpeedFanCool@speed,f,c
  1292  010972                     l1188:
  1293                           
  1294                           ;clima.c: 179: fanSpeedCool = speed;
  1295  010972  C010  F04D         	movff	setSpeedFanCool@speed,_fanSpeedCool
  1296  010976  0012               	return		;funcret
  1297  010978                     __end_of_setSpeedFanCool:
  1298                           	opt stack 0
  1299                           postinc0	equ	0xFEE
  1300                           wreg	equ	0xFE8
  1301                           status	equ	0xFD8
  1302                           
  1303 ;; *************** function _setLcd *****************
  1304 ;; Defined at:
  1305 ;;		line 225 in file "clima.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;		None
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;		None
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;Total ram usage:        0 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; Hardware stack levels required when called:    5
  1326 ;; This function calls:
  1327 ;;		_LcdClear
  1328 ;;		_LcdGoTo
  1329 ;;		_LcdWriteString
  1330 ;; This function is called by:
  1331 ;;		_init
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text7
  1336  01062E                     __ptext7:
  1337                           	opt stack 0
  1338  01062E                     _setLcd:
  1339                           	opt stack 24
  1340                           
  1341                           ;clima.c: 227: LcdClear();
  1342                           
  1343                           ;incstack = 0
  1344  01062E  ECDE  F084         	call	_LcdClear	;wreg free
  1345                           
  1346                           ;clima.c: 228: LcdGoTo(0);
  1347  010632  0E00               	movlw	0
  1348  010634  ECD4  F084         	call	_LcdGoTo
  1349                           
  1350                           ;clima.c: 229: LcdWriteString(LcdLines[climaState][0]);
  1351  010638  504E               	movf	_climaState,w,c
  1352  01063A  0D24               	mullw	36
  1353  01063C  0EFF               	movlw	low _LcdLines
  1354  01063E  24F3               	addwf	prodl,w,c
  1355  010640  6E15               	movwf	LcdWriteString@s,c
  1356  010642  0EFE               	movlw	high _LcdLines
  1357  010644  20F4               	addwfc	prodh,w,c
  1358  010646  6E16               	movwf	LcdWriteString@s+1,c
  1359  010648  EC76  F082         	call	_LcdWriteString	;wreg free
  1360                           
  1361                           ;clima.c: 230: LcdGoTo(0x40);
  1362  01064C  0E40               	movlw	64
  1363  01064E  ECD4  F084         	call	_LcdGoTo
  1364                           
  1365                           ;clima.c: 231: LcdWriteString(LcdLines[climaState][1]);
  1366  010652  504E               	movf	_climaState,w,c
  1367  010654  0D24               	mullw	36
  1368  010656  0E12               	movlw	18
  1369  010658  26F3               	addwf	prodl,f,c
  1370  01065A  0E00               	movlw	0
  1371  01065C  22F4               	addwfc	prodh,f,c
  1372  01065E  0EFF               	movlw	low _LcdLines
  1373  010660  24F3               	addwf	prodl,w,c
  1374  010662  6E15               	movwf	LcdWriteString@s,c
  1375  010664  0EFE               	movlw	high _LcdLines
  1376  010666  20F4               	addwfc	prodh,w,c
  1377  010668  6E16               	movwf	LcdWriteString@s+1,c
  1378  01066A  EC76  F082         	call	_LcdWriteString	;wreg free
  1379  01066E  0012               	return		;funcret
  1380  010670                     __end_of_setLcd:
  1381                           	opt stack 0
  1382                           prodh	equ	0xFF4
  1383                           prodl	equ	0xFF3
  1384                           postinc0	equ	0xFEE
  1385                           wreg	equ	0xFE8
  1386                           status	equ	0xFD8
  1387                           
  1388 ;; *************** function _LcdGoTo *****************
  1389 ;; Defined at:
  1390 ;;		line 176 in file "lcd.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  pos             1    wreg     unsigned char 
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  pos             1   20[COMRAM] unsigned char 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      void 
  1397 ;; Registers used:
  1398 ;;		wreg, status,2, status,0, cstack
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1408 ;;Total ram usage:        1 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; Hardware stack levels required when called:    4
  1411 ;; This function calls:
  1412 ;;		_lcdCommand
  1413 ;; This function is called by:
  1414 ;;		_setLcd
  1415 ;;		_updateLcd
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text8
  1420  0109A8                     __ptext8:
  1421                           	opt stack 0
  1422  0109A8                     _LcdGoTo:
  1423                           	opt stack 24
  1424                           
  1425                           ;incstack = 0
  1426                           ;LcdGoTo@pos stored from wreg
  1427  0109A8  6E15               	movwf	LcdGoTo@pos,c
  1428                           
  1429                           ;lcd.c: 179: lcdCommand(0x80+pos);
  1430  0109AA  5015               	movf	LcdGoTo@pos,w,c
  1431  0109AC  0F80               	addlw	128
  1432  0109AE  EC20  F084         	call	_lcdCommand
  1433  0109B2  0012               	return		;funcret
  1434  0109B4                     __end_of_LcdGoTo:
  1435                           	opt stack 0
  1436                           prodh	equ	0xFF4
  1437                           prodl	equ	0xFF3
  1438                           postinc0	equ	0xFEE
  1439                           wreg	equ	0xFE8
  1440                           status	equ	0xFD8
  1441                           
  1442 ;; *************** function _setHeatElement *****************
  1443 ;; Defined at:
  1444 ;;		line 155 in file "clima.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  state           2   15[COMRAM] unsigned int 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;		None
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		None
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1458 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1461 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1462 ;;Total ram usage:        2 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; Hardware stack levels required when called:    1
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_init
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text9
  1473  0109CA                     __ptext9:
  1474                           	opt stack 0
  1475  0109CA                     _setHeatElement:
  1476                           	opt stack 28
  1477                           
  1478                           ;clima.c: 157: heatElement = state;
  1479                           
  1480                           ;incstack = 0
  1481  0109CA  C010  F04A         	movff	setHeatElement@state,_heatElement
  1482  0109CE  0012               	return		;funcret
  1483  0109D0                     __end_of_setHeatElement:
  1484                           	opt stack 0
  1485                           prodh	equ	0xFF4
  1486                           prodl	equ	0xFF3
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           status	equ	0xFD8
  1490                           
  1491 ;; *************** function _initTmr *****************
  1492 ;; Defined at:
  1493 ;;		line 528 in file "clima.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    1
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_init
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text10
  1522  0106B2                     __ptext10:
  1523                           	opt stack 0
  1524  0106B2                     _initTmr:
  1525                           	opt stack 28
  1526                           
  1527                           ;clima.c: 530: PORTJbits.RJ6 = 0;
  1528                           
  1529                           ;incstack = 0
  1530  0106B2  9C88               	bcf	3976,6,c	;volatile
  1531                           
  1532                           ;clima.c: 531: PORTJbits.RJ7 = 0;
  1533  0106B4  9E88               	bcf	3976,7,c	;volatile
  1534                           
  1535                           ;clima.c: 532: TRISJbits.TRISJ7 = 0;
  1536  0106B6  9E9A               	bcf	3994,7,c	;volatile
  1537                           
  1538                           ;clima.c: 533: TRISJbits.TRISJ6 = 0;
  1539  0106B8  9C9A               	bcf	3994,6,c	;volatile
  1540                           
  1541                           ;clima.c: 535: PORTDbits.RD3 = 0;
  1542  0106BA  9683               	bcf	3971,3,c	;volatile
  1543                           
  1544                           ;clima.c: 536: PORTDbits.RD4 = 0;
  1545  0106BC  9883               	bcf	3971,4,c	;volatile
  1546                           
  1547                           ;clima.c: 537: PORTDbits.RD5 = 0;
  1548  0106BE  9A83               	bcf	3971,5,c	;volatile
  1549                           
  1550                           ;clima.c: 538: TRISDbits.TRISD3 = 0;
  1551  0106C0  9695               	bcf	3989,3,c	;volatile
  1552                           
  1553                           ;clima.c: 539: TRISDbits.TRISD4 = 0;
  1554  0106C2  9895               	bcf	3989,4,c	;volatile
  1555                           
  1556                           ;clima.c: 540: TRISDbits.TRISD5 = 0;
  1557  0106C4  9A95               	bcf	3989,5,c	;volatile
  1558                           
  1559                           ;clima.c: 544: TMR0 = 0;
  1560  0106C6  0E00               	movlw	0
  1561  0106C8  6ED7               	movwf	4055,c	;volatile
  1562  0106CA  0E00               	movlw	0
  1563  0106CC  6ED6               	movwf	4054,c	;volatile
  1564                           
  1565                           ;clima.c: 545: T0CON = 0;
  1566  0106CE  0E00               	movlw	0
  1567  0106D0  6ED5               	movwf	4053,c	;volatile
  1568                           
  1569                           ;clima.c: 546: T0CONbits.TMR0ON = 0;
  1570  0106D2  9ED5               	bcf	4053,7,c	;volatile
  1571                           
  1572                           ;clima.c: 547: T0CONbits.T08BIT = 0;
  1573  0106D4  9CD5               	bcf	4053,6,c	;volatile
  1574                           
  1575                           ;clima.c: 548: T0CONbits.T0CS = 0;
  1576  0106D6  9AD5               	bcf	4053,5,c	;volatile
  1577                           
  1578                           ;clima.c: 549: T0CONbits.T0SE = 0;
  1579  0106D8  98D5               	bcf	4053,4,c	;volatile
  1580                           
  1581                           ;clima.c: 550: T0CONbits.PSA = 0;
  1582  0106DA  96D5               	bcf	4053,3,c	;volatile
  1583                           
  1584                           ;clima.c: 551: T0CONbits.T0PS = 0;
  1585  0106DC  90D5               	bcf	4053,0,c	;volatile
  1586  0106DE  92D5               	bcf	4053,1,c	;volatile
  1587  0106E0  94D5               	bcf	4053,2,c	;volatile
  1588                           
  1589                           ;clima.c: 557: TMR1H = 0xFB;
  1590  0106E2  0EFB               	movlw	251
  1591  0106E4  6ECF               	movwf	4047,c	;volatile
  1592                           
  1593                           ;clima.c: 558: TMR1L = 0x1D;
  1594  0106E6  0E1D               	movlw	29
  1595  0106E8  6ECE               	movwf	4046,c	;volatile
  1596                           
  1597                           ;clima.c: 559: T0IE = 1;
  1598  0106EA  8AF2               	bsf	intcon,5,c	;volatile
  1599                           
  1600                           ;clima.c: 560: GIE = 1;
  1601  0106EC  8EF2               	bsf	intcon,7,c	;volatile
  1602                           
  1603                           ;clima.c: 561: T0CONbits.TMR0ON = 1;
  1604  0106EE  8ED5               	bsf	4053,7,c	;volatile
  1605  0106F0  0012               	return		;funcret
  1606  0106F2                     __end_of_initTmr:
  1607                           	opt stack 0
  1608                           prodh	equ	0xFF4
  1609                           prodl	equ	0xFF3
  1610                           intcon	equ	0xFF2
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           status	equ	0xFD8
  1614                           
  1615 ;; *************** function _initPwm *****************
  1616 ;; Defined at:
  1617 ;;		line 511 in file "clima.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;		None
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;		None
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		None
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 0/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1635 ;;Total ram usage:        0 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; Hardware stack levels required when called:    1
  1638 ;; This function calls:
  1639 ;;		Nothing
  1640 ;; This function is called by:
  1641 ;;		_init
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text11
  1646  0109B4                     __ptext11:
  1647                           	opt stack 0
  1648  0109B4                     _initPwm:
  1649                           	opt stack 28
  1650                           
  1651                           ;clima.c: 516: (TRISDbits.TRISD3) = 0;
  1652                           
  1653                           ;incstack = 0
  1654  0109B4  9695               	bcf	3989,3,c	;volatile
  1655                           
  1656                           ;clima.c: 518: (TRISDbits.TRISD4) = 0;
  1657  0109B6  9895               	bcf	3989,4,c	;volatile
  1658                           
  1659                           ;clima.c: 520: (TRISDbits.TRISD5) = 0;
  1660  0109B8  9A95               	bcf	3989,5,c	;volatile
  1661  0109BA  0012               	return		;funcret
  1662  0109BC                     __end_of_initPwm:
  1663                           	opt stack 0
  1664                           prodh	equ	0xFF4
  1665                           prodl	equ	0xFF3
  1666                           intcon	equ	0xFF2
  1667                           postinc0	equ	0xFEE
  1668                           wreg	equ	0xFE8
  1669                           status	equ	0xFD8
  1670                           
  1671 ;; *************** function _initButtons *****************
  1672 ;; Defined at:
  1673 ;;		line 451 in file "clima.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      void 
  1680 ;; Registers used:
  1681 ;;		None
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;Total ram usage:        0 bytes
  1692 ;; Hardware stack levels used:    1
  1693 ;; Hardware stack levels required when called:    1
  1694 ;; This function calls:
  1695 ;;		Nothing
  1696 ;; This function is called by:
  1697 ;;		_init
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text12
  1702  0109D0                     __ptext12:
  1703                           	opt stack 0
  1704  0109D0                     _initButtons:
  1705                           	opt stack 28
  1706                           
  1707                           ;clima.c: 454: TRISB0 = 1;
  1708                           
  1709                           ;incstack = 0
  1710  0109D0  8093               	bsf	3987,0,c	;volatile
  1711  0109D2  0012               	return		;funcret
  1712  0109D4                     __end_of_initButtons:
  1713                           	opt stack 0
  1714                           prodh	equ	0xFF4
  1715                           prodl	equ	0xFF3
  1716                           intcon	equ	0xFF2
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           status	equ	0xFD8
  1720                           
  1721 ;; *************** function _initAdc *****************
  1722 ;; Defined at:
  1723 ;;		line 463 in file "clima.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2, status,0
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1741 ;;Total ram usage:        0 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    1
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_init
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text13
  1752  010730                     __ptext13:
  1753                           	opt stack 0
  1754  010730                     _initAdc:
  1755                           	opt stack 28
  1756                           
  1757                           ;clima.c: 466: TRISA = TRISA | (1<<0);
  1758                           
  1759                           ;incstack = 0
  1760  010730  5092               	movf	3986,w,c	;volatile
  1761  010732  0901               	iorlw	1
  1762  010734  6E92               	movwf	3986,c	;volatile
  1763                           
  1764                           ;clima.c: 469: TRISA = TRISA | (1<<1);
  1765  010736  5092               	movf	3986,w,c	;volatile
  1766  010738  0902               	iorlw	2
  1767  01073A  6E92               	movwf	3986,c	;volatile
  1768                           
  1769                           ;clima.c: 472: TRISA = TRISA | (1<<3);
  1770  01073C  5092               	movf	3986,w,c	;volatile
  1771  01073E  0908               	iorlw	8
  1772  010740  6E92               	movwf	3986,c	;volatile
  1773                           
  1774                           ;clima.c: 475: ADCON0bits.CHS = 1;
  1775  010742  50C2               	movf	4034,w,c	;volatile
  1776  010744  0BC3               	andlw	-61
  1777  010746  0904               	iorlw	4
  1778  010748  6EC2               	movwf	4034,c	;volatile
  1779                           
  1780                           ;clima.c: 476: ADCON0bits.GO_nDONE = 0;
  1781  01074A  92C2               	bcf	4034,1,c	;volatile
  1782                           
  1783                           ;clima.c: 477: ADCON0bits.ADON = 0;
  1784  01074C  90C2               	bcf	4034,0,c	;volatile
  1785                           
  1786                           ;clima.c: 479: ADCON1bits.VCFG = 0b00;
  1787  01074E  0ECF               	movlw	-49
  1788  010750  16C1               	andwf	4033,f,c	;volatile
  1789                           
  1790                           ;clima.c: 480: ADCON1bits.PCFG = 0b0000;
  1791  010752  90C1               	bcf	4033,0,c	;volatile
  1792  010754  92C1               	bcf	4033,1,c	;volatile
  1793  010756  94C1               	bcf	4033,2,c	;volatile
  1794  010758  96C1               	bcf	4033,3,c	;volatile
  1795                           
  1796                           ;clima.c: 482: ADCON2bits.ADFM = 1;
  1797  01075A  8EC0               	bsf	4032,7,c	;volatile
  1798                           
  1799                           ;clima.c: 483: ADCON2bits.ACQT = 0b111;
  1800  01075C  86C0               	bsf	4032,3,c	;volatile
  1801  01075E  88C0               	bsf	4032,4,c	;volatile
  1802  010760  8AC0               	bsf	4032,5,c	;volatile
  1803                           
  1804                           ;clima.c: 484: ADCON2bits.ADCS = 0b010;
  1805  010762  50C0               	movf	4032,w,c	;volatile
  1806  010764  0BF8               	andlw	-8
  1807  010766  0902               	iorlw	2
  1808  010768  6EC0               	movwf	4032,c	;volatile
  1809  01076A  0012               	return		;funcret
  1810  01076C                     __end_of_initAdc:
  1811                           	opt stack 0
  1812                           prodh	equ	0xFF4
  1813                           prodl	equ	0xFF3
  1814                           intcon	equ	0xFF2
  1815                           postinc0	equ	0xFEE
  1816                           wreg	equ	0xFE8
  1817                           status	equ	0xFD8
  1818                           
  1819 ;; *************** function _UART_puts *****************
  1820 ;; Defined at:
  1821 ;;		line 88 in file "uart.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;  s               2   16[COMRAM] PTR unsigned char 
  1824 ;;		 -> STR_20(20), 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;Total ram usage:        2 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    2
  1843 ;; This function calls:
  1844 ;;		_Delay10TCYx
  1845 ;;		_UART_putc
  1846 ;; This function is called by:
  1847 ;;		_init
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text14
  1852  0107DE                     __ptext14:
  1853                           	opt stack 0
  1854  0107DE                     _UART_puts:
  1855                           	opt stack 27
  1856  0107DE                     
  1857                           ;uart.c: 91: {
  1858                           ;uart.c: 92: UART_putc(*s);
  1859  0107DE  C011  FFF6         	movff	UART_puts@s,tblptrl
  1860  0107E2  C012  FFF7         	movff	UART_puts@s+1,tblptrh
  1861  0107E6                     	if	0	;tblptru may be non-zero
  1862  0107E6                     	endif
  1863  0107E6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1864  0107E6  0E00               	movlw	low (__mediumconst shr (0+16))
  1865  0107E8  6EF8               	movwf	tblptru,c
  1866  0107EA                     	endif
  1867  0107EA  0008               	tblrd		*
  1868  0107EC  50F5               	movf	tablat,w,c
  1869  0107EE  ECCD  F084         	call	_UART_putc
  1870                           
  1871                           ;uart.c: 93: s++;
  1872  0107F2  4A11               	infsnz	UART_puts@s,f,c
  1873  0107F4  2A12               	incf	UART_puts@s+1,f,c
  1874                           
  1875                           ;uart.c: 94: Delay10TCYx(250);
  1876  0107F6  0EFA               	movlw	250
  1877  0107F8  ECC5  F084         	call	_Delay10TCYx
  1878                           
  1879                           ;uart.c: 95: } while(*s != 0);
  1880  0107FC  C011  FFF6         	movff	UART_puts@s,tblptrl
  1881  010800  C012  FFF7         	movff	UART_puts@s+1,tblptrh
  1882  010804                     	if	0	;tblptru may be non-zero
  1883  010804                     	endif
  1884  010804                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1885  010804  0E00               	movlw	low (__mediumconst shr (0+16))
  1886  010806  6EF8               	movwf	tblptru,c
  1887  010808                     	endif
  1888  010808  0008               	tblrd		*
  1889  01080A  50F5               	movf	tablat,w,c
  1890  01080C  0900               	iorlw	0
  1891  01080E  B4D8               	btfsc	status,2,c
  1892  010810  0012               	return	
  1893  010812  D7E5               	goto	l1950
  1894  010814                     __end_of_UART_puts:
  1895                           	opt stack 0
  1896                           tblptru	equ	0xFF8
  1897                           tblptrh	equ	0xFF7
  1898                           tblptrl	equ	0xFF6
  1899                           tablat	equ	0xFF5
  1900                           prodh	equ	0xFF4
  1901                           prodl	equ	0xFF3
  1902                           intcon	equ	0xFF2
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _UART_putc *****************
  1908 ;; Defined at:
  1909 ;;		line 80 in file "uart.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  data            1    wreg     unsigned char 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  data            1   15[COMRAM] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;Total ram usage:        1 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    1
  1930 ;; This function calls:
  1931 ;;		Nothing
  1932 ;; This function is called by:
  1933 ;;		_UART_puts
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text15
  1938  01099A                     __ptext15:
  1939                           	opt stack 0
  1940  01099A                     _UART_putc:
  1941                           	opt stack 27
  1942                           
  1943                           ;incstack = 0
  1944                           ;UART_putc@data stored from wreg
  1945  01099A  6E10               	movwf	UART_putc@data,c
  1946                           
  1947                           ;uart.c: 82: TXREG = data;
  1948  01099C  C010  FFAD         	movff	UART_putc@data,4013	;volatile
  1949  0109A0                     l341:
  1950  0109A0  A89E               	btfss	3998,4,c	;volatile
  1951  0109A2  D7FE               	goto	l341
  1952                           
  1953                           ;uart.c: 84: PIR1bits.TXIF = 0;
  1954  0109A4  989E               	bcf	3998,4,c	;volatile
  1955  0109A6  0012               	return		;funcret
  1956  0109A8                     __end_of_UART_putc:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           prodh	equ	0xFF4
  1963                           prodl	equ	0xFF3
  1964                           intcon	equ	0xFF2
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           status	equ	0xFD8
  1968                           
  1969 ;; *************** function _Delay10TCYx *****************
  1970 ;; Defined at:
  1971 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10tcyx.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  unit            1    wreg     unsigned char 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  unit            1   15[COMRAM] unsigned char 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;Total ram usage:        1 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    1
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_UART_puts
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           	psect	text16
  2000  01098A                     __ptext16:
  2001                           	opt stack 0
  2002  01098A                     _Delay10TCYx:
  2003                           	opt stack 27
  2004                           
  2005                           ;incstack = 0
  2006                           ;Delay10TCYx@unit stored from wreg
  2007  01098A  6E10               	movwf	Delay10TCYx@unit,c
  2008  01098C  0E03               	movlw	3
  2009  01098E                     u1707:
  2010  01098E  2EE8               	decfsz	wreg,f,c
  2011  010990  D7FE               	bra	u1707
  2012  010992  F000               	nop	
  2013  010994  2E10               	decfsz	Delay10TCYx@unit,f,c
  2014  010996  D7FA               	goto	l1120
  2015  010998  0012               	return	
  2016  01099A                     __end_of_Delay10TCYx:
  2017                           	opt stack 0
  2018                           tblptru	equ	0xFF8
  2019                           tblptrh	equ	0xFF7
  2020                           tblptrl	equ	0xFF6
  2021                           tablat	equ	0xFF5
  2022                           prodh	equ	0xFF4
  2023                           prodl	equ	0xFF3
  2024                           intcon	equ	0xFF2
  2025                           postinc0	equ	0xFEE
  2026                           wreg	equ	0xFE8
  2027                           status	equ	0xFD8
  2028                           
  2029 ;; *************** function _UART_Init *****************
  2030 ;; Defined at:
  2031 ;;		line 11 in file "uart.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;		None
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;  x               2   15[COMRAM] unsigned int 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      unsigned char 
  2038 ;; Registers used:
  2039 ;;		wreg, status,2
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2048 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2049 ;;Total ram usage:        2 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; Hardware stack levels required when called:    1
  2052 ;; This function calls:
  2053 ;;		Nothing
  2054 ;; This function is called by:
  2055 ;;		_init
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           	psect	text17
  2060  010938                     __ptext17:
  2061                           	opt stack 0
  2062  010938                     _UART_Init:
  2063                           	opt stack 28
  2064                           
  2065                           ;uart.c: 33: unsigned int x;
  2066                           ;uart.c: 34: x = (10000000/19200)/64 - 1 ;
  2067                           
  2068                           ;incstack = 0
  2069  010938  0E00               	movlw	0
  2070  01093A  6E11               	movwf	UART_Init@x+1,c
  2071  01093C  0E07               	movlw	7
  2072  01093E  6E10               	movwf	UART_Init@x,c
  2073                           
  2074                           ;uart.c: 37: TRISCbits.TRISC6 = 0;
  2075  010940  9C94               	bcf	3988,6,c	;volatile
  2076                           
  2077                           ;uart.c: 38: TRISCbits.TRISC7 = 1;
  2078  010942  8E94               	bsf	3988,7,c	;volatile
  2079                           
  2080                           ;uart.c: 41: TXSTA1bits.SYNC = 0;
  2081  010944  98AC               	bcf	4012,4,c	;volatile
  2082                           
  2083                           ;uart.c: 42: SPBRG = x;
  2084  010946  C010  FFAF         	movff	UART_Init@x,4015	;volatile
  2085                           
  2086                           ;uart.c: 43: TXSTAbits.TXEN =1;
  2087  01094A  8AAC               	bsf	4012,5,c	;volatile
  2088                           
  2089                           ;uart.c: 44: RCSTAbits.CREN =1;
  2090  01094C  88AB               	bsf	4011,4,c	;volatile
  2091                           
  2092                           ;uart.c: 45: PIE1bits.RCIE = 1;
  2093  01094E  8A9D               	bsf	3997,5,c	;volatile
  2094                           
  2095                           ;uart.c: 46: RCSTA1bits.SPEN = 1;
  2096  010950  8EAB               	bsf	4011,7,c	;volatile
  2097  010952  0012               	return	
  2098  010954                     __end_of_UART_Init:
  2099                           	opt stack 0
  2100                           tblptru	equ	0xFF8
  2101                           tblptrh	equ	0xFF7
  2102                           tblptrl	equ	0xFF6
  2103                           tablat	equ	0xFF5
  2104                           prodh	equ	0xFF4
  2105                           prodl	equ	0xFF3
  2106                           intcon	equ	0xFF2
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           status	equ	0xFD8
  2110                           
  2111 ;; *************** function _LcdInit *****************
  2112 ;; Defined at:
  2113 ;;		line 123 in file "lcd.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;		None
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;		None
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;Total ram usage:        0 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    5
  2134 ;; This function calls:
  2135 ;;		_LcdClear
  2136 ;;		_LcdWriteString
  2137 ;;		_SWSPIOpen
  2138 ;;		_lcdCommand
  2139 ;;		_setGPIO
  2140 ;;		_setIODIR
  2141 ;; This function is called by:
  2142 ;;		_init
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           	psect	text18
  2147  0105E2                     __ptext18:
  2148                           	opt stack 0
  2149  0105E2                     _LcdInit:
  2150                           	opt stack 24
  2151                           
  2152                           ;lcd.c: 126: SWSPIOpen();
  2153                           
  2154                           ;incstack = 0
  2155  0105E2  ECBC  F084         	call	_SWSPIOpen	;wreg free
  2156                           
  2157                           ;lcd.c: 135: setIODIR(0x01,0x00);
  2158  0105E6  0E00               	movlw	0
  2159  0105E8  6E12               	movwf	setIODIR@dir,c
  2160  0105EA  0E01               	movlw	1
  2161  0105EC  EC6F  F084         	call	_setIODIR
  2162                           
  2163                           ;lcd.c: 137: setIODIR(0x00,0x00);
  2164  0105F0  0E00               	movlw	0
  2165  0105F2  6E12               	movwf	setIODIR@dir,c
  2166  0105F4  0E00               	movlw	0
  2167  0105F6  EC6F  F084         	call	_setIODIR
  2168                           
  2169                           ;lcd.c: 139: setGPIO(0x00,0x00);
  2170  0105FA  0E00               	movlw	0
  2171  0105FC  6E12               	movwf	setGPIO@value,c
  2172  0105FE  0E00               	movlw	0
  2173  010600  EC7E  F084         	call	_setGPIO
  2174                           
  2175                           ;lcd.c: 142: lcdCommand(0b00111111);
  2176  010604  0E3F               	movlw	63
  2177  010606  EC20  F084         	call	_lcdCommand
  2178                           
  2179                           ;lcd.c: 145: lcdCommand(0b00001100);
  2180  01060A  0E0C               	movlw	12
  2181  01060C  EC20  F084         	call	_lcdCommand
  2182                           
  2183                           ;lcd.c: 148: lcdCommand(0b00000001);
  2184  010610  0E01               	movlw	1
  2185  010612  EC20  F084         	call	_lcdCommand
  2186                           
  2187                           ;lcd.c: 151: lcdCommand(0b00000110);
  2188  010616  0E06               	movlw	6
  2189  010618  EC20  F084         	call	_lcdCommand
  2190                           
  2191                           ;lcd.c: 154: LcdWriteString("LCD init ...");
  2192  01061C  0EB9               	movlw	low STR_21
  2193  01061E  6E15               	movwf	LcdWriteString@s,c
  2194  010620  0EFF               	movlw	high STR_21
  2195  010622  6E16               	movwf	LcdWriteString@s+1,c
  2196  010624  EC76  F082         	call	_LcdWriteString	;wreg free
  2197                           
  2198                           ;lcd.c: 158: LcdClear();
  2199  010628  ECDE  F084         	call	_LcdClear	;wreg free
  2200  01062C  0012               	return		;funcret
  2201  01062E                     __end_of_LcdInit:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           tblptrh	equ	0xFF7
  2205                           tblptrl	equ	0xFF6
  2206                           tablat	equ	0xFF5
  2207                           prodh	equ	0xFF4
  2208                           prodl	equ	0xFF3
  2209                           intcon	equ	0xFF2
  2210                           postinc0	equ	0xFEE
  2211                           wreg	equ	0xFE8
  2212                           status	equ	0xFD8
  2213                           
  2214 ;; *************** function _setIODIR *****************
  2215 ;; Defined at:
  2216 ;;		line 81 in file "lcd.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  address         1    wreg     unsigned char 
  2219 ;;  dir             1   17[COMRAM] unsigned char 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  address         1   18[COMRAM] unsigned char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, status,2, status,0, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2231 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;Total ram usage:        2 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    2
  2238 ;; This function calls:
  2239 ;;		_SWSPIClearCS
  2240 ;;		_SWSPISetCS
  2241 ;;		_SWSPIWrite
  2242 ;; This function is called by:
  2243 ;;		_LcdInit
  2244 ;; This function uses a non-reentrant model
  2245 ;;
  2246                           
  2247                           	psect	text19
  2248  0108DE                     __ptext19:
  2249                           	opt stack 0
  2250  0108DE                     _setIODIR:
  2251                           	opt stack 26
  2252                           
  2253                           ;incstack = 0
  2254                           ;setIODIR@address stored from wreg
  2255  0108DE  6E13               	movwf	setIODIR@address,c
  2256                           
  2257                           ;lcd.c: 84: SWSPIClearCS();
  2258  0108E0  ECEC  F084         	call	_SWSPIClearCS	;wreg free
  2259                           
  2260                           ;lcd.c: 85: SWSPIWrite(0x40);
  2261  0108E4  0E40               	movlw	64
  2262  0108E6  ECCA  F082         	call	_SWSPIWrite
  2263                           
  2264                           ;lcd.c: 86: SWSPIWrite(address);
  2265  0108EA  5013               	movf	setIODIR@address,w,c
  2266  0108EC  ECCA  F082         	call	_SWSPIWrite
  2267                           
  2268                           ;lcd.c: 87: SWSPIWrite(dir);
  2269  0108F0  5012               	movf	setIODIR@dir,w,c
  2270  0108F2  ECCA  F082         	call	_SWSPIWrite
  2271                           
  2272                           ;lcd.c: 88: SWSPISetCS();
  2273  0108F6  ECEA  F084         	call	_SWSPISetCS	;wreg free
  2274  0108FA  0012               	return		;funcret
  2275  0108FC                     __end_of_setIODIR:
  2276                           	opt stack 0
  2277                           tblptru	equ	0xFF8
  2278                           tblptrh	equ	0xFF7
  2279                           tblptrl	equ	0xFF6
  2280                           tablat	equ	0xFF5
  2281                           prodh	equ	0xFF4
  2282                           prodl	equ	0xFF3
  2283                           intcon	equ	0xFF2
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _SWSPIOpen *****************
  2289 ;; Defined at:
  2290 ;;		line 15 in file "swspi.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		None
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;Total ram usage:        0 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    1
  2311 ;; This function calls:
  2312 ;;		Nothing
  2313 ;; This function is called by:
  2314 ;;		_LcdInit
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text20
  2319  010978                     __ptext20:
  2320                           	opt stack 0
  2321  010978                     _SWSPIOpen:
  2322                           	opt stack 27
  2323                           
  2324                           ;swspi.c: 17: PORTAbits.RA2 = 1;
  2325                           
  2326                           ;incstack = 0
  2327  010978  8480               	bsf	3968,2,c	;volatile
  2328                           
  2329                           ;swspi.c: 18: PORTCbits.RC4 = 1;
  2330  01097A  8882               	bsf	3970,4,c	;volatile
  2331                           
  2332                           ;swspi.c: 21: PORTCbits.RC5 = 0;
  2333  01097C  9A82               	bcf	3970,5,c	;volatile
  2334                           
  2335                           ;swspi.c: 22: PORTCbits.RC3 = 0;
  2336  01097E  9682               	bcf	3970,3,c	;volatile
  2337                           
  2338                           ;swspi.c: 40: TRISAbits.TRISA2 = 0;
  2339  010980  9492               	bcf	3986,2,c	;volatile
  2340                           
  2341                           ;swspi.c: 41: TRISCbits.TRISC4 = 1;
  2342  010982  8894               	bsf	3988,4,c	;volatile
  2343                           
  2344                           ;swspi.c: 42: TRISCbits.TRISC5 = 0;
  2345  010984  9A94               	bcf	3988,5,c	;volatile
  2346                           
  2347                           ;swspi.c: 43: TRISCbits.TRISC3 = 0;
  2348  010986  9694               	bcf	3988,3,c	;volatile
  2349  010988  0012               	return		;funcret
  2350  01098A                     __end_of_SWSPIOpen:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           prodh	equ	0xFF4
  2357                           prodl	equ	0xFF3
  2358                           intcon	equ	0xFF2
  2359                           postinc0	equ	0xFEE
  2360                           wreg	equ	0xFE8
  2361                           status	equ	0xFD8
  2362                           
  2363 ;; *************** function _LcdWriteString *****************
  2364 ;; Defined at:
  2365 ;;		line 202 in file "lcd.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;  s               2   20[COMRAM] PTR const unsigned char 
  2368 ;;		 -> STR_21(13), STR_17(2), STR_16(2), STR_15(2), 
  2369 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_10(6), 
  2370 ;;		 -> STR_9(6), STR_8(6), STR_7(6), STR_6(6), 
  2371 ;;		 -> STR_5(5), STR_4(5), STR_3(5), msg(20), 
  2372 ;;		 -> LcdLines(144), 
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;		None
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  1    wreg      void 
  2377 ;; Registers used:
  2378 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2384 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;Total ram usage:        2 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    4
  2391 ;; This function calls:
  2392 ;;		_LcdChar
  2393 ;; This function is called by:
  2394 ;;		_setLcd
  2395 ;;		_LcdInit
  2396 ;;		_updateLcd
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text21
  2401  0104EC                     __ptext21:
  2402                           	opt stack 0
  2403  0104EC                     _LcdWriteString:
  2404                           	opt stack 24
  2405                           
  2406                           ;lcd.c: 204: while(*s)
  2407                           
  2408                           ;incstack = 0
  2409  0104EC  D015               	goto	l1746
  2410  0104EE                     l1742:
  2411                           
  2412                           ;lcd.c: 205: {
  2413                           ;lcd.c: 206: LcdChar(*s++);
  2414  0104EE  C015  FFF6         	movff	LcdWriteString@s,tblptrl
  2415  0104F2  C016  FFF7         	movff	LcdWriteString@s+1,tblptrh
  2416  0104F6  0E00               	movlw	low (__mediumconst shr (0+16))
  2417  0104F8  6EF8               	movwf	tblptru,c
  2418  0104FA  0E0F               	movlw	(high __ramtop+-1)
  2419  0104FC  64F7               	cpfsgt	tblptrh,c
  2420  0104FE  D003               	bra	u767
  2421  010500  0008               	tblrd		*
  2422  010502  50F5               	movf	tablat,w,c
  2423  010504  D005               	bra	u760
  2424  010506                     u767:
  2425  010506  CFF6 FFE9          	movff	tblptrl,fsr0l
  2426  01050A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2427  01050E  50EF               	movf	indf0,w,c
  2428  010510                     u760:
  2429  010510  EC0A  F084         	call	_LcdChar
  2430  010514  4A15               	infsnz	LcdWriteString@s,f,c
  2431  010516  2A16               	incf	LcdWriteString@s+1,f,c
  2432  010518                     l1746:
  2433  010518  C015  FFF6         	movff	LcdWriteString@s,tblptrl
  2434  01051C  C016  FFF7         	movff	LcdWriteString@s+1,tblptrh
  2435  010520  0E00               	movlw	low (__mediumconst shr (0+16))
  2436  010522  6EF8               	movwf	tblptru,c
  2437  010524  0E0F               	movlw	(high __ramtop+-1)
  2438  010526  64F7               	cpfsgt	tblptrh,c
  2439  010528  D003               	bra	u777
  2440  01052A  0008               	tblrd		*
  2441  01052C  50F5               	movf	tablat,w,c
  2442  01052E  D005               	bra	u770
  2443  010530                     u777:
  2444  010530  CFF6 FFE9          	movff	tblptrl,fsr0l
  2445  010534  CFF7 FFEA          	movff	tblptrh,fsr0h
  2446  010538  50EF               	movf	indf0,w,c
  2447  01053A                     u770:
  2448  01053A  0900               	iorlw	0
  2449  01053C  B4D8               	btfsc	status,2,c
  2450  01053E  0012               	return	
  2451  010540  D7D6               	goto	l1742
  2452  010542                     __end_of_LcdWriteString:
  2453                           	opt stack 0
  2454                           tblptru	equ	0xFF8
  2455                           tblptrh	equ	0xFF7
  2456                           tblptrl	equ	0xFF6
  2457                           tablat	equ	0xFF5
  2458                           prodh	equ	0xFF4
  2459                           prodl	equ	0xFF3
  2460                           intcon	equ	0xFF2
  2461                           indf0	equ	0xFEF
  2462                           postinc0	equ	0xFEE
  2463                           fsr0h	equ	0xFEA
  2464                           fsr0l	equ	0xFE9
  2465                           wreg	equ	0xFE8
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _LcdChar *****************
  2469 ;; Defined at:
  2470 ;;		line 186 in file "lcd.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  letter          1    wreg     unsigned char 
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  letter          1   19[COMRAM] unsigned char 
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  1    wreg      void 
  2477 ;; Registers used:
  2478 ;;		wreg, status,2, status,0, cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2487 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;Total ram usage:        1 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    3
  2491 ;; This function calls:
  2492 ;;		_setGPIO
  2493 ;; This function is called by:
  2494 ;;		_LcdWriteString
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           	psect	text22
  2499  010814                     __ptext22:
  2500                           	opt stack 0
  2501  010814                     _LcdChar:
  2502                           	opt stack 24
  2503                           
  2504                           ;incstack = 0
  2505                           ;LcdChar@letter stored from wreg
  2506  010814  6E14               	movwf	LcdChar@letter,c
  2507                           
  2508                           ;lcd.c: 188: setGPIO(0x12,0x80);
  2509  010816  0E80               	movlw	128
  2510  010818  6E12               	movwf	setGPIO@value,c
  2511  01081A  0E12               	movlw	18
  2512  01081C  EC7E  F084         	call	_setGPIO
  2513                           
  2514                           ;lcd.c: 190: setGPIO(0x13,letter);
  2515  010820  C014  F012         	movff	LcdChar@letter,setGPIO@value
  2516  010824  0E13               	movlw	19
  2517  010826  EC7E  F084         	call	_setGPIO
  2518                           
  2519                           ;lcd.c: 192: setGPIO(0x12, 0xc0);
  2520  01082A  0EC0               	movlw	192
  2521  01082C  6E12               	movwf	setGPIO@value,c
  2522  01082E  0E12               	movlw	18
  2523  010830  EC7E  F084         	call	_setGPIO
  2524                           
  2525                           ;lcd.c: 194: setGPIO(0x12,0x00);
  2526  010834  0E00               	movlw	0
  2527  010836  6E12               	movwf	setGPIO@value,c
  2528  010838  0E12               	movlw	18
  2529  01083A  EC7E  F084         	call	_setGPIO
  2530  01083E  0012               	return		;funcret
  2531  010840                     __end_of_LcdChar:
  2532                           	opt stack 0
  2533                           tblptru	equ	0xFF8
  2534                           tblptrh	equ	0xFF7
  2535                           tblptrl	equ	0xFF6
  2536                           tablat	equ	0xFF5
  2537                           prodh	equ	0xFF4
  2538                           prodl	equ	0xFF3
  2539                           intcon	equ	0xFF2
  2540                           indf0	equ	0xFEF
  2541                           postinc0	equ	0xFEE
  2542                           fsr0h	equ	0xFEA
  2543                           fsr0l	equ	0xFE9
  2544                           wreg	equ	0xFE8
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _LcdClear *****************
  2548 ;; Defined at:
  2549 ;;		line 166 in file "lcd.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, status,2, status,0, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;Total ram usage:        0 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    4
  2570 ;; This function calls:
  2571 ;;		_lcdCommand
  2572 ;; This function is called by:
  2573 ;;		_setLcd
  2574 ;;		_LcdInit
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text23
  2579  0109BC                     __ptext23:
  2580                           	opt stack 0
  2581  0109BC                     _LcdClear:
  2582                           	opt stack 24
  2583                           
  2584                           ;lcd.c: 169: lcdCommand(0x01);
  2585                           
  2586                           ;incstack = 0
  2587  0109BC  0E01               	movlw	1
  2588  0109BE  EC20  F084         	call	_lcdCommand
  2589  0109C2  0012               	return		;funcret
  2590  0109C4                     __end_of_LcdClear:
  2591                           	opt stack 0
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           prodh	equ	0xFF4
  2597                           prodl	equ	0xFF3
  2598                           intcon	equ	0xFF2
  2599                           indf0	equ	0xFEF
  2600                           postinc0	equ	0xFEE
  2601                           fsr0h	equ	0xFEA
  2602                           fsr0l	equ	0xFE9
  2603                           wreg	equ	0xFE8
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _lcdCommand *****************
  2607 ;; Defined at:
  2608 ;;		line 102 in file "lcd.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  command         1    wreg     unsigned char 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  command         1   19[COMRAM] unsigned char 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;Total ram usage:        1 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    3
  2629 ;; This function calls:
  2630 ;;		_setGPIO
  2631 ;; This function is called by:
  2632 ;;		_LcdInit
  2633 ;;		_LcdClear
  2634 ;;		_LcdGoTo
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text24
  2639  010840                     __ptext24:
  2640                           	opt stack 0
  2641  010840                     _lcdCommand:
  2642                           	opt stack 24
  2643                           
  2644                           ;incstack = 0
  2645                           ;lcdCommand@command stored from wreg
  2646  010840  6E14               	movwf	lcdCommand@command,c
  2647                           
  2648                           ;lcd.c: 104: setGPIO(0x12,0x00);
  2649  010842  0E00               	movlw	0
  2650  010844  6E12               	movwf	setGPIO@value,c
  2651  010846  0E12               	movlw	18
  2652  010848  EC7E  F084         	call	_setGPIO
  2653                           
  2654                           ;lcd.c: 106: setGPIO(0x13, command);
  2655  01084C  C014  F012         	movff	lcdCommand@command,setGPIO@value
  2656  010850  0E13               	movlw	19
  2657  010852  EC7E  F084         	call	_setGPIO
  2658                           
  2659                           ;lcd.c: 108: setGPIO(0x12,0x40);
  2660  010856  0E40               	movlw	64
  2661  010858  6E12               	movwf	setGPIO@value,c
  2662  01085A  0E12               	movlw	18
  2663  01085C  EC7E  F084         	call	_setGPIO
  2664                           
  2665                           ;lcd.c: 110: setGPIO(0x12,0x00);
  2666  010860  0E00               	movlw	0
  2667  010862  6E12               	movwf	setGPIO@value,c
  2668  010864  0E12               	movlw	18
  2669  010866  EC7E  F084         	call	_setGPIO
  2670  01086A  0012               	return		;funcret
  2671  01086C                     __end_of_lcdCommand:
  2672                           	opt stack 0
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           prodh	equ	0xFF4
  2678                           prodl	equ	0xFF3
  2679                           intcon	equ	0xFF2
  2680                           indf0	equ	0xFEF
  2681                           postinc0	equ	0xFEE
  2682                           fsr0h	equ	0xFEA
  2683                           fsr0l	equ	0xFE9
  2684                           wreg	equ	0xFE8
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function _setGPIO *****************
  2688 ;; Defined at:
  2689 ;;		line 55 in file "lcd.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  address         1    wreg     unsigned char 
  2692 ;;  value           1   17[COMRAM] unsigned char 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  address         1   18[COMRAM] unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2704 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;Total ram usage:        2 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    2
  2711 ;; This function calls:
  2712 ;;		_SWSPIClearCS
  2713 ;;		_SWSPISetCS
  2714 ;;		_SWSPIWrite
  2715 ;; This function is called by:
  2716 ;;		_lcdCommand
  2717 ;;		_LcdInit
  2718 ;;		_LcdChar
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text25
  2723  0108FC                     __ptext25:
  2724                           	opt stack 0
  2725  0108FC                     _setGPIO:
  2726                           	opt stack 24
  2727                           
  2728                           ;incstack = 0
  2729                           ;setGPIO@address stored from wreg
  2730  0108FC  6E13               	movwf	setGPIO@address,c
  2731                           
  2732                           ;lcd.c: 58: SWSPIClearCS();
  2733  0108FE  ECEC  F084         	call	_SWSPIClearCS	;wreg free
  2734                           
  2735                           ;lcd.c: 61: SWSPIWrite(0x40);
  2736  010902  0E40               	movlw	64
  2737  010904  ECCA  F082         	call	_SWSPIWrite
  2738                           
  2739                           ;lcd.c: 62: SWSPIWrite(address);
  2740  010908  5013               	movf	setGPIO@address,w,c
  2741  01090A  ECCA  F082         	call	_SWSPIWrite
  2742                           
  2743                           ;lcd.c: 63: SWSPIWrite(value);
  2744  01090E  5012               	movf	setGPIO@value,w,c
  2745  010910  ECCA  F082         	call	_SWSPIWrite
  2746                           
  2747                           ;lcd.c: 64: SWSPISetCS();
  2748  010914  ECEA  F084         	call	_SWSPISetCS	;wreg free
  2749  010918  0012               	return		;funcret
  2750  01091A                     __end_of_setGPIO:
  2751                           	opt stack 0
  2752                           tblptru	equ	0xFF8
  2753                           tblptrh	equ	0xFF7
  2754                           tblptrl	equ	0xFF6
  2755                           tablat	equ	0xFF5
  2756                           prodh	equ	0xFF4
  2757                           prodl	equ	0xFF3
  2758                           intcon	equ	0xFF2
  2759                           indf0	equ	0xFEF
  2760                           postinc0	equ	0xFEE
  2761                           fsr0h	equ	0xFEA
  2762                           fsr0l	equ	0xFE9
  2763                           wreg	equ	0xFE8
  2764                           status	equ	0xFD8
  2765                           
  2766 ;; *************** function _SWSPIWrite *****************
  2767 ;; Defined at:
  2768 ;;		line 75 in file "swspi.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;  output          1    wreg     unsigned char 
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;  output          1   15[COMRAM] unsigned char 
  2773 ;;  BitCount        1   16[COMRAM] unsigned char 
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      unsigned char 
  2776 ;; Registers used:
  2777 ;;		wreg, status,2, status,0
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;Total ram usage:        2 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; Hardware stack levels required when called:    1
  2790 ;; This function calls:
  2791 ;;		Nothing
  2792 ;; This function is called by:
  2793 ;;		_setGPIO
  2794 ;;		_setIODIR
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text26
  2799  010594                     __ptext26:
  2800                           	opt stack 0
  2801  010594                     _SWSPIWrite:
  2802                           	opt stack 24
  2803                           
  2804                           ;incstack = 0
  2805                           ;SWSPIWrite@output stored from wreg
  2806  010594  6E10               	movwf	SWSPIWrite@output,c
  2807                           
  2808                           ;swspi.c: 77: char BitCount;
  2809                           ;swspi.c: 78: static char input;
  2810                           ;swspi.c: 80: BitCount = 8;
  2811  010596  0E08               	movlw	8
  2812  010598  6E11               	movwf	SWSPIWrite@BitCount,c
  2813                           
  2814                           ;swspi.c: 81: input = output;
  2815  01059A  C010  F03E         	movff	SWSPIWrite@output,SWSPIWrite@input
  2816                           
  2817                           ;swspi.c: 87: PORTCbits.RC5 = 0;
  2818  01059E  9A82               	bcf	3970,5,c	;volatile
  2819                           
  2820                           ;swspi.c: 88: if(input&0x80)
  2821  0105A0  BE3E               	btfsc	SWSPIWrite@input,7,c
  2822                           
  2823                           ;swspi.c: 89: PORTCbits.RC5 = 1;
  2824  0105A2  8A82               	bsf	3970,5,c	;volatile
  2825                           
  2826                           ;swspi.c: 90: __nop();
  2827  0105A4  F000               	nop	
  2828                           
  2829                           ;swspi.c: 91: __nop();
  2830  0105A6  F000               	nop	
  2831  0105A8                     l283:
  2832                           
  2833                           ;swspi.c: 93: {
  2834                           ;swspi.c: 109: if (PORTCbits.RC4)
  2835  0105A8  A882               	btfss	3970,4,c	;volatile
  2836  0105AA  D003               	goto	l1682
  2837                           
  2838                           ;swspi.c: 110: input = (input << 1) | 0x1;
  2839  0105AC  80D8               	bsf	status,0,c
  2840  0105AE  363E               	rlcf	SWSPIWrite@input,f,c
  2841  0105B0  D003               	goto	l1684
  2842  0105B2                     l1682:
  2843                           
  2844                           ;swspi.c: 111: else
  2845                           ;swspi.c: 112: input = input << 1;
  2846  0105B2  503E               	movf	SWSPIWrite@input,w,c
  2847  0105B4  243E               	addwf	SWSPIWrite@input,w,c
  2848  0105B6  6E3E               	movwf	SWSPIWrite@input,c
  2849  0105B8                     l1684:
  2850                           
  2851                           ;swspi.c: 114: PORTCbits.RC3 = 1;
  2852  0105B8  8682               	bsf	3970,3,c	;volatile
  2853                           
  2854                           ;swspi.c: 118: __nop();
  2855  0105BA  F000               	nop	
  2856                           
  2857                           ;swspi.c: 119: __nop();
  2858  0105BC  F000               	nop	
  2859                           
  2860                           ;swspi.c: 120: __nop();
  2861  0105BE  F000               	nop	
  2862                           
  2863                           ;swspi.c: 121: __nop();
  2864  0105C0  F000               	nop	
  2865                           
  2866                           ;swspi.c: 122: __nop();
  2867  0105C2  F000               	nop	
  2868                           
  2869                           ;swspi.c: 123: __nop();
  2870  0105C4  F000               	nop	
  2871                           
  2872                           ;swspi.c: 124: __nop();
  2873  0105C6  F000               	nop	
  2874                           
  2875                           ;swspi.c: 125: __nop();
  2876  0105C8  F000               	nop	
  2877                           
  2878                           ;swspi.c: 126: __nop();
  2879  0105CA  F000               	nop	
  2880                           
  2881                           ;swspi.c: 127: __nop();
  2882  0105CC  F000               	nop	
  2883                           
  2884                           ;swspi.c: 128: __nop();
  2885  0105CE  F000               	nop	
  2886                           
  2887                           ;swspi.c: 129: PORTCbits.RC3 = 0;
  2888  0105D0  9682               	bcf	3970,3,c	;volatile
  2889                           
  2890                           ;swspi.c: 130: PORTCbits.RC5 = 0;
  2891  0105D2  9A82               	bcf	3970,5,c	;volatile
  2892                           
  2893                           ;swspi.c: 131: if(input&0x80)
  2894  0105D4  BE3E               	btfsc	SWSPIWrite@input,7,c
  2895                           
  2896                           ;swspi.c: 132: PORTCbits.RC5 = 1;
  2897  0105D6  8A82               	bsf	3970,5,c	;volatile
  2898                           
  2899                           ;swspi.c: 133: BitCount--;
  2900  0105D8  0611               	decf	SWSPIWrite@BitCount,f,c
  2901                           
  2902                           ;swspi.c: 134: } while(BitCount);
  2903  0105DA  5011               	movf	SWSPIWrite@BitCount,w,c
  2904  0105DC  B4D8               	btfsc	status,2,c
  2905  0105DE  0012               	return	
  2906  0105E0  D7E3               	goto	l283
  2907  0105E2                     __end_of_SWSPIWrite:
  2908                           	opt stack 0
  2909                           tblptru	equ	0xFF8
  2910                           tblptrh	equ	0xFF7
  2911                           tblptrl	equ	0xFF6
  2912                           tablat	equ	0xFF5
  2913                           prodh	equ	0xFF4
  2914                           prodl	equ	0xFF3
  2915                           intcon	equ	0xFF2
  2916                           indf0	equ	0xFEF
  2917                           postinc0	equ	0xFEE
  2918                           fsr0h	equ	0xFEA
  2919                           fsr0l	equ	0xFE9
  2920                           wreg	equ	0xFE8
  2921                           status	equ	0xFD8
  2922                           
  2923 ;; *************** function _SWSPISetCS *****************
  2924 ;; Defined at:
  2925 ;;		line 53 in file "swspi.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;		None
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;		None
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		None
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;Total ram usage:        0 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    1
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_setGPIO
  2950 ;;		_setIODIR
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text27
  2955  0109D4                     __ptext27:
  2956                           	opt stack 0
  2957  0109D4                     _SWSPISetCS:
  2958                           	opt stack 24
  2959                           
  2960                           ;swspi.c: 55: PORTAbits.RA2 = 1;
  2961                           
  2962                           ;incstack = 0
  2963  0109D4  8480               	bsf	3968,2,c	;volatile
  2964  0109D6  0012               	return		;funcret
  2965  0109D8                     __end_of_SWSPISetCS:
  2966                           	opt stack 0
  2967                           tblptru	equ	0xFF8
  2968                           tblptrh	equ	0xFF7
  2969                           tblptrl	equ	0xFF6
  2970                           tablat	equ	0xFF5
  2971                           prodh	equ	0xFF4
  2972                           prodl	equ	0xFF3
  2973                           intcon	equ	0xFF2
  2974                           indf0	equ	0xFEF
  2975                           postinc0	equ	0xFEE
  2976                           fsr0h	equ	0xFEA
  2977                           fsr0l	equ	0xFE9
  2978                           wreg	equ	0xFE8
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function _SWSPIClearCS *****************
  2982 ;; Defined at:
  2983 ;;		line 64 in file "swspi.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;		None
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		None
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;Total ram usage:        0 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    1
  3004 ;; This function calls:
  3005 ;;		Nothing
  3006 ;; This function is called by:
  3007 ;;		_setGPIO
  3008 ;;		_setIODIR
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text28
  3013  0109D8                     __ptext28:
  3014                           	opt stack 0
  3015  0109D8                     _SWSPIClearCS:
  3016                           	opt stack 24
  3017                           
  3018                           ;swspi.c: 66: PORTAbits.RA2 = 0;
  3019                           
  3020                           ;incstack = 0
  3021  0109D8  9480               	bcf	3968,2,c	;volatile
  3022  0109DA  0012               	return		;funcret
  3023  0109DC                     __end_of_SWSPIClearCS:
  3024                           	opt stack 0
  3025                           tblptru	equ	0xFF8
  3026                           tblptrh	equ	0xFF7
  3027                           tblptrl	equ	0xFF6
  3028                           tablat	equ	0xFF5
  3029                           prodh	equ	0xFF4
  3030                           prodl	equ	0xFF3
  3031                           intcon	equ	0xFF2
  3032                           indf0	equ	0xFEF
  3033                           postinc0	equ	0xFEE
  3034                           fsr0h	equ	0xFEA
  3035                           fsr0l	equ	0xFE9
  3036                           wreg	equ	0xFE8
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function _checkInputs *****************
  3040 ;; Defined at:
  3041 ;;		line 319 in file "clima.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  adcVal          2    3[BANK0 ] unsigned int 
  3046 ;;  leftButton      1    5[BANK0 ] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;Total ram usage:        6 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    3
  3063 ;; This function calls:
  3064 ;;		_ADCRead
  3065 ;;		___lwdiv
  3066 ;;		___wmul
  3067 ;;		_sprintf
  3068 ;; This function is called by:
  3069 ;;		_main
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text29
  3074  0103AE                     __ptext29:
  3075                           	opt stack 0
  3076  0103AE                     _checkInputs:
  3077                           	opt stack 27
  3078                           
  3079                           ;clima.c: 321: unsigned int adcVal = 0;
  3080                           
  3081                           ;incstack = 0
  3082  0103AE  0E00               	movlw	0
  3083  0103B0  0100               	movlb	0	; () banked
  3084  0103B2  6F78               	movwf	(checkInputs@adcVal+1)& (0+255),b
  3085  0103B4  0E00               	movlw	0
  3086  0103B6  6F77               	movwf	checkInputs@adcVal& (0+255),b
  3087                           
  3088                           ;clima.c: 322: byte leftButton = 0;
  3089  0103B8  0E00               	movlw	0
  3090  0103BA  0100               	movlb	0	; () banked
  3091  0103BC  6F79               	movwf	checkInputs@leftButton& (0+255),b
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;clima.c: 324: static byte leftButton_old = 0;
  3095                           ;clima.c: 327: leftButton = PORTBbits.RB0;
  3096  0103BE  0E00               	movlw	0
  3097  0103C0  B081               	btfsc	3969,0,c	;volatile
  3098  0103C2  0E01               	movlw	1
  3099  0103C4  0100               	movlb	0	; () banked
  3100  0103C6  6F79               	movwf	checkInputs@leftButton& (0+255),b
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;clima.c: 328: if ( (leftButton == 0)
  3104                           ;clima.c: 329: && (leftButton != leftButton_old)
  3105                           ;clima.c: 330: )
  3106  0103C8  0100               	movlb	0	; () banked
  3107  0103CA  5179               	movf	checkInputs@leftButton& (0+255),w,b
  3108  0103CC  0100               	movlb	0	; () banked
  3109  0103CE  A4D8               	btfss	status,2,c
  3110  0103D0  D007               	goto	l2350
  3111                           
  3112                           ; BSR set to: 0
  3113  0103D2  5040               	movf	checkInputs@leftButton_old,w,c
  3114  0103D4  0100               	movlb	0	; () banked
  3115  0103D6  1979               	xorwf	checkInputs@leftButton& (0+255),w,b
  3116  0103D8  B4D8               	btfsc	status,2,c
  3117  0103DA  D002               	goto	l2350
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;clima.c: 331: {
  3121                           ;clima.c: 332: leftButtonEv = 1;
  3122  0103DC  0E01               	movlw	1
  3123  0103DE  6E46               	movwf	_leftButtonEv,c
  3124  0103E0                     l2350:
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;clima.c: 333: }
  3128                           ;clima.c: 334: leftButton_old = leftButton;
  3129  0103E0  C079  F040         	movff	checkInputs@leftButton,checkInputs@leftButton_old
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;clima.c: 344: adcVal = ADCRead(0);
  3133  0103E4  0E00               	movlw	0
  3134  0103E6  ECD3  F083         	call	_ADCRead
  3135  0103EA  C010  F077         	movff	?_ADCRead,checkInputs@adcVal
  3136  0103EE  C011  F078         	movff	?_ADCRead+1,checkInputs@adcVal+1
  3137                           
  3138                           ;clima.c: 345: setTemp = adcVal/64 + 21;
  3139  0103F2  C077  F074         	movff	checkInputs@adcVal,??_checkInputs
  3140  0103F6  C078  F075         	movff	checkInputs@adcVal+1,??_checkInputs+1
  3141  0103FA  0E06               	movlw	6
  3142  0103FC  0100               	movlb	0	; () banked
  3143  0103FE  6F76               	movwf	(??_checkInputs+2)& (0+255),b
  3144  010400                     u1565:
  3145  010400  0100               	movlb	0	; () banked
  3146  010402  90D8               	bcf	status,0,c
  3147  010404  3375               	rrcf	(??_checkInputs+1)& (0+255),f,b
  3148  010406  3374               	rrcf	??_checkInputs& (0+255),f,b
  3149  010408  0100               	movlb	0	; () banked
  3150  01040A  2F76               	decfsz	(??_checkInputs+2)& (0+255),f,b
  3151  01040C  D7F9               	goto	u1565
  3152  01040E  0100               	movlb	0	; () banked
  3153  010410  5174               	movf	??_checkInputs& (0+255),w,b
  3154  010412  0F15               	addlw	21
  3155  010414  6E45               	movwf	_setTemp,c
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;clima.c: 348: if (inDeb == 0)
  3159  010416  5041               	movf	_inDeb,w,c
  3160  010418  A4D8               	btfss	status,2,c
  3161  01041A  D032               	goto	l2366
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;clima.c: 349: {
  3165                           ;clima.c: 359: adcVal = ADCRead(1);
  3166  01041C  0E01               	movlw	1
  3167  01041E  ECD3  F083         	call	_ADCRead
  3168  010422  C010  F077         	movff	?_ADCRead,checkInputs@adcVal
  3169  010426  C011  F078         	movff	?_ADCRead+1,checkInputs@adcVal+1
  3170                           
  3171                           ;clima.c: 360: outTemp = (adcVal*5 - (400))/(19);
  3172  01042A  C077  F010         	movff	checkInputs@adcVal,___wmul@multiplier
  3173  01042E  C078  F011         	movff	checkInputs@adcVal+1,___wmul@multiplier+1
  3174  010432  0E00               	movlw	0
  3175  010434  6E13               	movwf	___wmul@multiplicand+1,c
  3176  010436  0E05               	movlw	5
  3177  010438  6E12               	movwf	___wmul@multiplicand,c
  3178  01043A  EC4B  F084         	call	___wmul	;wreg free
  3179  01043E  0E70               	movlw	112
  3180  010440  2410               	addwf	?___wmul,w,c
  3181  010442  6E16               	movwf	___lwdiv@dividend,c
  3182  010444  0EFE               	movlw	254
  3183  010446  2011               	addwfc	?___wmul+1,w,c
  3184  010448  6E17               	movwf	___lwdiv@dividend+1,c
  3185  01044A  0E00               	movlw	0
  3186  01044C  6E19               	movwf	___lwdiv@divisor+1,c
  3187  01044E  0E13               	movlw	19
  3188  010450  6E18               	movwf	___lwdiv@divisor,c
  3189  010452  ECA1  F082         	call	___lwdiv	;wreg free
  3190  010456  C016  F03A         	movff	?___lwdiv,_outTemp
  3191  01045A  C017  F03B         	movff	?___lwdiv+1,_outTemp+1
  3192                           
  3193                           ;clima.c: 361: ;
  3194                           ;clima.c: 362: sprintf(msg, "%d", outTemp);
  3195  01045E  0E60               	movlw	low _msg
  3196  010460  6E22               	movwf	sprintf@sp,c
  3197  010462  0E00               	movlw	high _msg
  3198  010464  6E23               	movwf	sprintf@sp+1,c
  3199  010466  0EF8               	movlw	low STR_11
  3200  010468  6E24               	movwf	sprintf@f,c
  3201  01046A  0EFF               	movlw	high STR_11
  3202  01046C  6E25               	movwf	sprintf@f+1,c
  3203  01046E  C03A  F026         	movff	_outTemp,?_sprintf+4
  3204  010472  C03B  F027         	movff	_outTemp+1,?_sprintf+5
  3205  010476  EC00  F080         	call	_sprintf	;wreg free
  3206                           
  3207                           ;clima.c: 363: ;
  3208                           ;clima.c: 364: ;
  3209                           ;clima.c: 378: inDeb = ((3000)/(100));
  3210  01047A  0E1E               	movlw	30
  3211  01047C  6E41               	movwf	_inDeb,c
  3212                           
  3213                           ;clima.c: 379: }
  3214  01047E  0012               	return	
  3215  010480                     l2366:
  3216                           
  3217                           ;clima.c: 380: else
  3218                           ;clima.c: 381: {
  3219                           ;clima.c: 382: inDeb--;
  3220  010480  0641               	decf	_inDeb,f,c
  3221  010482  0012               	return	
  3222  010484                     __end_of_checkInputs:
  3223                           	opt stack 0
  3224                           tblptru	equ	0xFF8
  3225                           tblptrh	equ	0xFF7
  3226                           tblptrl	equ	0xFF6
  3227                           tablat	equ	0xFF5
  3228                           prodh	equ	0xFF4
  3229                           prodl	equ	0xFF3
  3230                           intcon	equ	0xFF2
  3231                           indf0	equ	0xFEF
  3232                           postinc0	equ	0xFEE
  3233                           fsr0h	equ	0xFEA
  3234                           fsr0l	equ	0xFE9
  3235                           wreg	equ	0xFE8
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function _sprintf *****************
  3239 ;; Defined at:
  3240 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  sp              2   33[COMRAM] PTR unsigned char 
  3243 ;;		 -> msg(20), 
  3244 ;;  f               2   35[COMRAM] PTR const unsigned char 
  3245 ;;		 -> STR_19(22), STR_18(3), STR_11(3), STR_2(5), 
  3246 ;;		 -> STR_1(5), 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  tmpval          4    0        struct .
  3249 ;;  cp              3    0        PTR const unsigned char 
  3250 ;;  width           2   53[COMRAM] int 
  3251 ;;  val             2   50[COMRAM] unsigned int 
  3252 ;;  ap              2   47[COMRAM] PTR void [1]
  3253 ;;		 -> ?_sprintf(2), 
  3254 ;;  len             2    0        unsigned int 
  3255 ;;  c               1   55[COMRAM] char 
  3256 ;;  flag            1   52[COMRAM] unsigned char 
  3257 ;;  prec            1   49[COMRAM] char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  2   33[COMRAM] int 
  3260 ;; Registers used:
  3261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3267 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3269 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3270 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3271 ;;Total ram usage:       23 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    2
  3274 ;; This function calls:
  3275 ;;		___lwdiv
  3276 ;;		___lwmod
  3277 ;;		___wmul
  3278 ;;		_isdigit
  3279 ;; This function is called by:
  3280 ;;		_checkInputs
  3281 ;;		_stateMachine
  3282 ;;		_updateLcd
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           	psect	text30
  3287  010000                     __ptext30:
  3288                           	opt stack 0
  3289  010000                     _sprintf:
  3290                           	opt stack 27
  3291                           
  3292                           ;doprnt.c: 494: va_list ap;
  3293                           ;doprnt.c: 499: signed char c;
  3294                           ;doprnt.c: 501: int width;
  3295                           ;doprnt.c: 506: signed char prec;
  3296                           ;doprnt.c: 508: unsigned char flag;
  3297                           ;doprnt.c: 523: union {
  3298                           ;doprnt.c: 524: unsigned long vd;
  3299                           ;doprnt.c: 525: double integ;
  3300                           ;doprnt.c: 526: } tmpval;
  3301                           ;doprnt.c: 528: unsigned int val;
  3302                           ;doprnt.c: 529: unsigned len;
  3303                           ;doprnt.c: 530: const char * cp;
  3304                           ;doprnt.c: 533: *ap = __va_start();
  3305                           
  3306                           ;incstack = 0
  3307  010000  0E26               	movlw	low (?_sprintf+4)
  3308  010002  6E30               	movwf	sprintf@ap,c
  3309  010004  0E00               	movlw	high (?_sprintf+4)
  3310  010006  6E31               	movwf	sprintf@ap+1,c
  3311                           
  3312                           ;doprnt.c: 536: while(c = *f++) {
  3313  010008  D13F               	goto	l2322
  3314  01000A                     l2216:
  3315                           
  3316                           ;doprnt.c: 538: if(c != '%')
  3317  01000A  0E25               	movlw	37
  3318  01000C  1838               	xorwf	sprintf@c,w,c
  3319  01000E  B4D8               	btfsc	status,2,c
  3320  010010  D009               	goto	l2222
  3321                           
  3322                           ;doprnt.c: 540: {
  3323                           ;doprnt.c: 541: ((*sp++ = (c)));
  3324  010012  C022  FFD9         	movff	sprintf@sp,fsr2l
  3325  010016  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  3326  01001A  C038  FFDF         	movff	sprintf@c,indf2
  3327  01001E  4A22               	infsnz	sprintf@sp,f,c
  3328  010020  2A23               	incf	sprintf@sp+1,f,c
  3329                           
  3330                           ;doprnt.c: 542: continue;
  3331  010022  D132               	goto	l2322
  3332  010024                     l2222:
  3333                           
  3334                           ;doprnt.c: 543: }
  3335                           ;doprnt.c: 546: width = 0;
  3336  010024  0E00               	movlw	0
  3337  010026  6E37               	movwf	sprintf@width+1,c
  3338  010028  0E00               	movlw	0
  3339  01002A  6E36               	movwf	sprintf@width,c
  3340                           
  3341                           ;doprnt.c: 548: flag = 0;
  3342  01002C  0E00               	movlw	0
  3343  01002E  6E35               	movwf	sprintf@flag,c
  3344                           
  3345                           ;doprnt.c: 551: switch(*f) {
  3346                           
  3347                           ;doprnt.c: 550: for(;;) {
  3348  010030  D003               	goto	l2228
  3349  010032                     l2224:
  3350                           
  3351                           ;doprnt.c: 580: flag |= 0x04;
  3352  010032  8435               	bsf	sprintf@flag,2,c
  3353                           
  3354                           ;doprnt.c: 581: f++;
  3355  010034  4A24               	infsnz	sprintf@f,f,c
  3356  010036  2A25               	incf	sprintf@f+1,f,c
  3357  010038                     l2228:
  3358  010038  C024  FFF6         	movff	sprintf@f,tblptrl
  3359  01003C  C025  FFF7         	movff	sprintf@f+1,tblptrh
  3360  010040                     	if	0	;tblptru may be non-zero
  3361  010040                     	endif
  3362  010040                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3363  010040  0E00               	movlw	low (__mediumconst shr (0+16))
  3364  010042  6EF8               	movwf	tblptru,c
  3365  010044                     	endif
  3366  010044  0008               	tblrd		*
  3367  010046  50F5               	movf	tablat,w,c
  3368                           
  3369                           ; Switch size 1, requested type "space"
  3370                           ; Number of cases is 1, Range of values is 48 to 48
  3371                           ; switch strategies available:
  3372                           ; Name         Instructions Cycles
  3373                           ; simple_byte            4     3 (average)
  3374                           ;	Chosen strategy is simple_byte
  3375  010048  0A30               	xorlw	48	; case 48
  3376  01004A  B4D8               	btfsc	status,2,c
  3377  01004C  D7F2               	goto	l2224
  3378                           
  3379                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3380                           
  3381                           ;doprnt.c: 586: }
  3382                           
  3383                           ;doprnt.c: 585: break;
  3384  01004E  C024  FFF6         	movff	sprintf@f,tblptrl
  3385  010052  C025  FFF7         	movff	sprintf@f+1,tblptrh
  3386  010056                     	if	0	;tblptru may be non-zero
  3387  010056                     	endif
  3388  010056                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3389  010056  0E00               	movlw	low (__mediumconst shr (0+16))
  3390  010058  6EF8               	movwf	tblptru,c
  3391  01005A                     	endif
  3392  01005A  0008               	tblrd		*
  3393  01005C  50F5               	movf	tablat,w,c
  3394  01005E  EC8D  F084         	call	_isdigit
  3395  010062  A0D8               	btfss	status,0,c
  3396  010064  D036               	goto	l2244
  3397                           
  3398                           ;doprnt.c: 598: width = 0;
  3399  010066  0E00               	movlw	0
  3400  010068  6E37               	movwf	sprintf@width+1,c
  3401  01006A  0E00               	movlw	0
  3402  01006C  6E36               	movwf	sprintf@width,c
  3403  01006E                     l2234:
  3404                           
  3405                           ;doprnt.c: 600: width *= 10;
  3406  01006E  C036  F010         	movff	sprintf@width,___wmul@multiplier
  3407  010072  C037  F011         	movff	sprintf@width+1,___wmul@multiplier+1
  3408  010076  0E00               	movlw	0
  3409  010078  6E13               	movwf	___wmul@multiplicand+1,c
  3410  01007A  0E0A               	movlw	10
  3411  01007C  6E12               	movwf	___wmul@multiplicand,c
  3412  01007E  EC4B  F084         	call	___wmul	;wreg free
  3413  010082  C010  F036         	movff	?___wmul,sprintf@width
  3414  010086  C011  F037         	movff	?___wmul+1,sprintf@width+1
  3415                           
  3416                           ;doprnt.c: 601: width += *f++ - '0';
  3417  01008A  0ED0               	movlw	208
  3418  01008C  6E2C               	movwf	??_sprintf& (0+255),c
  3419  01008E  0EFF               	movlw	255
  3420  010090  6E2D               	movwf	(??_sprintf+1)& (0+255),c
  3421  010092  C024  FFF6         	movff	sprintf@f,tblptrl
  3422  010096  C025  FFF7         	movff	sprintf@f+1,tblptrh
  3423  01009A                     	if	0	;tblptru may be non-zero
  3424  01009A                     	endif
  3425  01009A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3426  01009A  0E00               	movlw	low (__mediumconst shr (0+16))
  3427  01009C  6EF8               	movwf	tblptru,c
  3428  01009E                     	endif
  3429  01009E  0008               	tblrd		*
  3430  0100A0  50F5               	movf	tablat,w,c
  3431  0100A2  6E2E               	movwf	(??_sprintf+2)& (0+255),c
  3432  0100A4  6A2F               	clrf	(??_sprintf+3)& (0+255),c
  3433  0100A6  502C               	movf	??_sprintf,w,c
  3434  0100A8  262E               	addwf	??_sprintf+2,f,c
  3435  0100AA  502D               	movf	??_sprintf+1,w,c
  3436  0100AC  222F               	addwfc	??_sprintf+3,f,c
  3437  0100AE  502E               	movf	??_sprintf+2,w,c
  3438  0100B0  2636               	addwf	sprintf@width,f,c
  3439  0100B2  502F               	movf	??_sprintf+3,w,c
  3440  0100B4  2237               	addwfc	sprintf@width+1,f,c
  3441  0100B6  4A24               	infsnz	sprintf@f,f,c
  3442  0100B8  2A25               	incf	sprintf@f+1,f,c
  3443                           
  3444                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3445  0100BA  C024  FFF6         	movff	sprintf@f,tblptrl
  3446  0100BE  C025  FFF7         	movff	sprintf@f+1,tblptrh
  3447  0100C2                     	if	0	;tblptru may be non-zero
  3448  0100C2                     	endif
  3449  0100C2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3450  0100C2  0E00               	movlw	low (__mediumconst shr (0+16))
  3451  0100C4  6EF8               	movwf	tblptru,c
  3452  0100C6                     	endif
  3453  0100C6  0008               	tblrd		*
  3454  0100C8  50F5               	movf	tablat,w,c
  3455  0100CA  EC8D  F084         	call	_isdigit
  3456  0100CE  B0D8               	btfsc	status,0,c
  3457  0100D0  D7CE               	goto	l2234
  3458  0100D2                     l2244:
  3459  0100D2  C024  FFF6         	movff	sprintf@f,tblptrl
  3460  0100D6  C025  FFF7         	movff	sprintf@f+1,tblptrh
  3461  0100DA  4A24               	infsnz	sprintf@f,f,c
  3462  0100DC  2A25               	incf	sprintf@f+1,f,c
  3463  0100DE                     	if	0	;tblptru may be non-zero
  3464  0100DE                     	endif
  3465  0100DE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3466  0100DE  0E00               	movlw	low (__mediumconst shr (0+16))
  3467  0100E0  6EF8               	movwf	tblptru,c
  3468  0100E2                     	endif
  3469  0100E2  0008               	tblrd		*
  3470  0100E4  CFF5 F038          	movff	tablat,sprintf@c
  3471  0100E8  5038               	movf	sprintf@c,w,c
  3472                           
  3473                           ; Switch size 1, requested type "space"
  3474                           ; Number of cases is 3, Range of values is 0 to 105
  3475                           ; switch strategies available:
  3476                           ; Name         Instructions Cycles
  3477                           ; simple_byte           10     6 (average)
  3478                           ;	Chosen strategy is simple_byte
  3479  0100EA  0A00               	xorlw	0	; case 0
  3480  0100EC  B4D8               	btfsc	status,2,c
  3481  0100EE  D0DA               	goto	l2324
  3482  0100F0  0A64               	xorlw	100	; case 100
  3483  0100F2  B4D8               	btfsc	status,2,c
  3484  0100F4  D003               	goto	l2246
  3485  0100F6  0A0D               	xorlw	13	; case 105
  3486  0100F8  A4D8               	btfss	status,2,c
  3487  0100FA  D0C6               	goto	l2322
  3488  0100FC                     l2246:
  3489                           
  3490                           ;doprnt.c: 1253: {
  3491                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3492  0100FC  C030  FFD9         	movff	sprintf@ap,fsr2l
  3493  010100  C031  FFDA         	movff	sprintf@ap+1,fsr2h
  3494  010104  CFDE F033          	movff	postinc2,sprintf@val
  3495  010108  CFDD F034          	movff	postdec2,sprintf@val+1
  3496  01010C  0E02               	movlw	2
  3497  01010E  2630               	addwf	sprintf@ap,f,c
  3498  010110  0E00               	movlw	0
  3499  010112  2231               	addwfc	sprintf@ap+1,f,c
  3500                           
  3501                           ;doprnt.c: 1261: if((int)val < 0) {
  3502  010114  AE34               	btfss	sprintf@val+1,7,c
  3503  010116  D006               	goto	l2256
  3504                           
  3505                           ;doprnt.c: 1262: flag |= 0x03;
  3506  010118  0E03               	movlw	3
  3507  01011A  1235               	iorwf	sprintf@flag,f,c
  3508                           
  3509                           ;doprnt.c: 1263: val = -val;
  3510  01011C  6C33               	negf	sprintf@val,c
  3511  01011E  1E34               	comf	sprintf@val+1,f,c
  3512  010120  B0D8               	btfsc	status,0,c
  3513  010122  2A34               	incf	sprintf@val+1,f,c
  3514  010124                     l2256:
  3515                           
  3516                           ;doprnt.c: 1264: }
  3517                           ;doprnt.c: 1266: }
  3518                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3519  010124  0E01               	movlw	1
  3520  010126  6E38               	movwf	sprintf@c,c
  3521  010128                     l2258:
  3522  010128  0E05               	movlw	5
  3523  01012A  1838               	xorwf	sprintf@c,w,c
  3524  01012C  B4D8               	btfsc	status,2,c
  3525  01012E  D015               	goto	l2270
  3526                           
  3527                           ;doprnt.c: 1306: if(val < dpowers[c])
  3528  010130  5038               	movf	sprintf@c,w,c
  3529  010132  0D02               	mullw	2
  3530  010134  0EF5               	movlw	low _dpowers
  3531  010136  24F3               	addwf	prodl,w,c
  3532  010138  6EF6               	movwf	tblptrl,c
  3533  01013A  0EFE               	movlw	high _dpowers
  3534  01013C  20F4               	addwfc	prodh,w,c
  3535  01013E  6EF7               	movwf	tblptrh,c
  3536  010140                     	if	1	;There are 3 active tblptr bytes
  3537  010140  6AF8               	clrf	tblptru,c
  3538  010142  0E00               	movlw	low (__mediumconst shr (0+16))
  3539  010144  22F8               	addwfc	tblptru,f,c
  3540  010146                     	endif
  3541  010146  0009               	tblrd		*+
  3542  010148  50F5               	movf	tablat,w,c
  3543  01014A  5C33               	subwf	sprintf@val,w,c
  3544  01014C  0009               	tblrd		*+
  3545  01014E  50F5               	movf	tablat,w,c
  3546  010150  5834               	subwfb	sprintf@val+1,w,c
  3547  010152  A0D8               	btfss	status,0,c
  3548  010154  D002               	goto	l2270
  3549                           
  3550                           ;doprnt.c: 1307: break;
  3551  010156  2A38               	incf	sprintf@c,f,c
  3552  010158  D7E7               	goto	l2258
  3553  01015A                     l2270:
  3554                           
  3555                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3556  01015A  5036               	movf	sprintf@width,w,c
  3557  01015C  1037               	iorwf	sprintf@width+1,w,c
  3558  01015E  B4D8               	btfsc	status,2,c
  3559  010160  D009               	goto	l2276
  3560  010162  C035  F02C         	movff	sprintf@flag,??_sprintf
  3561  010166  0E03               	movlw	3
  3562  010168  162C               	andwf	??_sprintf,f,c
  3563  01016A  B4D8               	btfsc	status,2,c
  3564  01016C  D003               	goto	l2276
  3565                           
  3566                           ;doprnt.c: 1346: width--;
  3567  01016E  0636               	decf	sprintf@width,f,c
  3568  010170  A0D8               	btfss	status,0,c
  3569  010172  0637               	decf	sprintf@width+1,f,c
  3570  010174                     l2276:
  3571                           
  3572                           ;doprnt.c: 1381: if(width > c)
  3573  010174  0E80               	movlw	128
  3574  010176  BE38               	btfsc	sprintf@c,7,c
  3575  010178  0E7F               	movlw	127
  3576  01017A  6E2C               	movwf	??_sprintf& (0+255),c
  3577  01017C  5036               	movf	sprintf@width,w,c
  3578  01017E  5C38               	subwf	sprintf@c,w,c
  3579  010180  5037               	movf	sprintf@width+1,w,c
  3580  010182  0A80               	xorlw	128
  3581  010184  582C               	subwfb	??_sprintf& (0+255),w,c
  3582  010186  B0D8               	btfsc	status,0,c
  3583  010188  D007               	goto	l2280
  3584                           
  3585                           ;doprnt.c: 1382: width -= c;
  3586  01018A  5038               	movf	sprintf@c,w,c
  3587  01018C  5E36               	subwf	sprintf@width,f,c
  3588  01018E  0E00               	movlw	0
  3589  010190  BE38               	btfsc	sprintf@c,7,c
  3590  010192  0EFF               	movlw	255
  3591  010194  5A37               	subwfb	sprintf@width+1,f,c
  3592  010196  D004               	goto	l2282
  3593  010198                     l2280:
  3594                           
  3595                           ;doprnt.c: 1383: else
  3596                           ;doprnt.c: 1384: width = 0;
  3597  010198  0E00               	movlw	0
  3598  01019A  6E37               	movwf	sprintf@width+1,c
  3599  01019C  0E00               	movlw	0
  3600  01019E  6E36               	movwf	sprintf@width,c
  3601  0101A0                     l2282:
  3602                           
  3603                           ;doprnt.c: 1387: if(flag & 0x04) {
  3604  0101A0  A435               	btfss	sprintf@flag,2,c
  3605  0101A2  D01E               	goto	l2298
  3606                           
  3607                           ;doprnt.c: 1392: if(flag & 0x03)
  3608  0101A4  C035  F02C         	movff	sprintf@flag,??_sprintf
  3609  0101A8  0E03               	movlw	3
  3610  0101AA  162C               	andwf	??_sprintf,f,c
  3611  0101AC  B4D8               	btfsc	status,2,c
  3612  0101AE  D008               	goto	l2290
  3613                           
  3614                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  3615  0101B0  C022  FFD9         	movff	sprintf@sp,fsr2l
  3616  0101B4  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  3617  0101B8  0E2D               	movlw	45
  3618  0101BA  6EDF               	movwf	indf2,c
  3619  0101BC  4A22               	infsnz	sprintf@sp,f,c
  3620  0101BE  2A23               	incf	sprintf@sp+1,f,c
  3621  0101C0                     l2290:
  3622                           
  3623                           ;doprnt.c: 1415: if(width)
  3624  0101C0  5036               	movf	sprintf@width,w,c
  3625  0101C2  1037               	iorwf	sprintf@width+1,w,c
  3626  0101C4  B4D8               	btfsc	status,2,c
  3627  0101C6  D02D               	goto	l2312
  3628                           
  3629                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3630                           
  3631                           ;doprnt.c: 1416: do
  3632  0101C8  C022  FFD9         	movff	sprintf@sp,fsr2l
  3633  0101CC  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  3634  0101D0  0E30               	movlw	48
  3635  0101D2  6EDF               	movwf	indf2,c
  3636  0101D4  4A22               	infsnz	sprintf@sp,f,c
  3637  0101D6  2A23               	incf	sprintf@sp+1,f,c
  3638                           
  3639                           ;doprnt.c: 1418: while(--width);
  3640  0101D8  0636               	decf	sprintf@width,f,c
  3641  0101DA  A0D8               	btfss	status,0,c
  3642  0101DC  0637               	decf	sprintf@width+1,f,c
  3643  0101DE  D7F0               	goto	l2290
  3644  0101E0                     l2298:
  3645                           
  3646                           ;doprnt.c: 1422: {
  3647                           ;doprnt.c: 1424: if(width
  3648                           ;doprnt.c: 1428: )
  3649  0101E0  5036               	movf	sprintf@width,w,c
  3650  0101E2  1037               	iorwf	sprintf@width+1,w,c
  3651  0101E4  B4D8               	btfsc	status,2,c
  3652  0101E6  D00F               	goto	l2306
  3653  0101E8                     l2300:
  3654                           
  3655                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3656  0101E8  C022  FFD9         	movff	sprintf@sp,fsr2l
  3657  0101EC  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  3658  0101F0  0E20               	movlw	32
  3659  0101F2  6EDF               	movwf	indf2,c
  3660  0101F4  4A22               	infsnz	sprintf@sp,f,c
  3661  0101F6  2A23               	incf	sprintf@sp+1,f,c
  3662                           
  3663                           ;doprnt.c: 1431: while(--width);
  3664  0101F8  0636               	decf	sprintf@width,f,c
  3665  0101FA  A0D8               	btfss	status,0,c
  3666  0101FC  0637               	decf	sprintf@width+1,f,c
  3667  0101FE  5036               	movf	sprintf@width,w,c
  3668  010200  1037               	iorwf	sprintf@width+1,w,c
  3669  010202  A4D8               	btfss	status,2,c
  3670  010204  D7F1               	goto	l2300
  3671  010206                     l2306:
  3672                           
  3673                           ;doprnt.c: 1438: if(flag & 0x03)
  3674  010206  C035  F02C         	movff	sprintf@flag,??_sprintf
  3675  01020A  0E03               	movlw	3
  3676  01020C  162C               	andwf	??_sprintf,f,c
  3677  01020E  B4D8               	btfsc	status,2,c
  3678  010210  D008               	goto	l2312
  3679                           
  3680                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3681  010212  C022  FFD9         	movff	sprintf@sp,fsr2l
  3682  010216  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  3683  01021A  0E2D               	movlw	45
  3684  01021C  6EDF               	movwf	indf2,c
  3685  01021E  4A22               	infsnz	sprintf@sp,f,c
  3686  010220  2A23               	incf	sprintf@sp+1,f,c
  3687  010222                     l2312:
  3688                           
  3689                           ;doprnt.c: 1469: }
  3690                           ;doprnt.c: 1472: prec = c;
  3691  010222  C038  F032         	movff	sprintf@c,sprintf@prec
  3692                           
  3693                           ;doprnt.c: 1474: while(prec--) {
  3694  010226  D02C               	goto	l2320
  3695  010228                     l2314:
  3696                           
  3697                           ;doprnt.c: 1478: {
  3698                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3699  010228  5032               	movf	sprintf@prec,w,c
  3700  01022A  0D02               	mullw	2
  3701  01022C  0EF5               	movlw	low _dpowers
  3702  01022E  24F3               	addwf	prodl,w,c
  3703  010230  6EF6               	movwf	tblptrl,c
  3704  010232  0EFE               	movlw	high _dpowers
  3705  010234  20F4               	addwfc	prodh,w,c
  3706  010236  6EF7               	movwf	tblptrh,c
  3707  010238                     	if	1	;There are 3 active tblptr bytes
  3708  010238  6AF8               	clrf	tblptru,c
  3709  01023A  0E00               	movlw	low (__mediumconst shr (0+16))
  3710  01023C  22F8               	addwfc	tblptru,f,c
  3711  01023E                     	endif
  3712  01023E  0009               	tblrd		*+
  3713  010240  CFF5 F018          	movff	tablat,___lwdiv@divisor
  3714  010244  000A               	tblrd		*-
  3715  010246  CFF5 F019          	movff	tablat,___lwdiv@divisor+1
  3716  01024A  C033  F016         	movff	sprintf@val,___lwdiv@dividend
  3717  01024E  C034  F017         	movff	sprintf@val+1,___lwdiv@dividend+1
  3718  010252  ECA1  F082         	call	___lwdiv	;wreg free
  3719  010256  C016  F01D         	movff	?___lwdiv,___lwmod@dividend
  3720  01025A  C017  F01E         	movff	?___lwdiv+1,___lwmod@dividend+1
  3721  01025E  0E00               	movlw	0
  3722  010260  6E20               	movwf	___lwmod@divisor+1,c
  3723  010262  0E0A               	movlw	10
  3724  010264  6E1F               	movwf	___lwmod@divisor,c
  3725  010266  EC38  F083         	call	___lwmod	;wreg free
  3726  01026A  501D               	movf	?___lwmod,w,c
  3727  01026C  0F30               	addlw	48
  3728  01026E  6E38               	movwf	sprintf@c,c
  3729                           
  3730                           ;doprnt.c: 1523: }
  3731                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3732  010270  C022  FFD9         	movff	sprintf@sp,fsr2l
  3733  010274  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  3734  010278  C038  FFDF         	movff	sprintf@c,indf2
  3735  01027C  4A22               	infsnz	sprintf@sp,f,c
  3736  01027E  2A23               	incf	sprintf@sp+1,f,c
  3737  010280                     l2320:
  3738  010280  0632               	decf	sprintf@prec,f,c
  3739  010282  2832               	incf	sprintf@prec,w,c
  3740  010284  A4D8               	btfss	status,2,c
  3741  010286  D7D0               	goto	l2314
  3742  010288                     l2322:
  3743  010288  C024  FFF6         	movff	sprintf@f,tblptrl
  3744  01028C  C025  FFF7         	movff	sprintf@f+1,tblptrh
  3745  010290  4A24               	infsnz	sprintf@f,f,c
  3746  010292  2A25               	incf	sprintf@f+1,f,c
  3747  010294                     	if	0	;tblptru may be non-zero
  3748  010294                     	endif
  3749  010294                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3750  010294  0E00               	movlw	low (__mediumconst shr (0+16))
  3751  010296  6EF8               	movwf	tblptru,c
  3752  010298                     	endif
  3753  010298  0008               	tblrd		*
  3754  01029A  CFF5 F038          	movff	tablat,sprintf@c
  3755  01029E  5038               	movf	sprintf@c,w,c
  3756  0102A0  A4D8               	btfss	status,2,c
  3757  0102A2  D6B3               	goto	l2216
  3758  0102A4                     l2324:
  3759                           
  3760                           ;doprnt.c: 1538: *sp = 0;
  3761  0102A4  C022  FFD9         	movff	sprintf@sp,fsr2l
  3762  0102A8  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  3763  0102AC  0E00               	movlw	0
  3764  0102AE  6EDF               	movwf	indf2,c
  3765  0102B0  0012               	return	
  3766  0102B2                     __end_of_sprintf:
  3767                           	opt stack 0
  3768                           tblptru	equ	0xFF8
  3769                           tblptrh	equ	0xFF7
  3770                           tblptrl	equ	0xFF6
  3771                           tablat	equ	0xFF5
  3772                           prodh	equ	0xFF4
  3773                           prodl	equ	0xFF3
  3774                           intcon	equ	0xFF2
  3775                           indf0	equ	0xFEF
  3776                           postinc0	equ	0xFEE
  3777                           fsr0h	equ	0xFEA
  3778                           fsr0l	equ	0xFE9
  3779                           wreg	equ	0xFE8
  3780                           indf2	equ	0xFDF
  3781                           postinc2	equ	0xFDE
  3782                           postdec2	equ	0xFDD
  3783                           fsr2h	equ	0xFDA
  3784                           fsr2l	equ	0xFD9
  3785                           status	equ	0xFD8
  3786                           
  3787 ;; *************** function _isdigit *****************
  3788 ;; Defined at:
  3789 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;  c               1    wreg     unsigned char 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  c               1   17[COMRAM] unsigned char 
  3794 ;; Return value:  Size  Location     Type
  3795 ;;		None               void
  3796 ;; Registers used:
  3797 ;;		wreg, status,2, status,0
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3804 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;Total ram usage:        3 bytes
  3808 ;; Hardware stack levels used:    1
  3809 ;; Hardware stack levels required when called:    1
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_sprintf
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text31
  3818  01091A                     __ptext31:
  3819                           	opt stack 0
  3820  01091A                     _isdigit:
  3821                           	opt stack 27
  3822                           
  3823                           ;incstack = 0
  3824                           ;isdigit@c stored from wreg
  3825  01091A  6E12               	movwf	isdigit@c,c
  3826  01091C  0E00               	movlw	0
  3827  01091E  6E11               	movwf	_isdigit$1777,c
  3828  010920  0E3A               	movlw	58
  3829  010922  6012               	cpfslt	isdigit@c,c
  3830  010924  D005               	goto	l2166
  3831  010926  0E2F               	movlw	47
  3832  010928  6412               	cpfsgt	isdigit@c,c
  3833  01092A  D002               	goto	l2166
  3834  01092C  0E01               	movlw	1
  3835  01092E  6E11               	movwf	_isdigit$1777,c
  3836  010930                     l2166:
  3837  010930  C011  F010         	movff	_isdigit$1777,??_isdigit
  3838  010934  3010               	rrcf	??_isdigit,w,c
  3839  010936  0012               	return	
  3840  010938                     __end_of_isdigit:
  3841                           	opt stack 0
  3842                           tblptru	equ	0xFF8
  3843                           tblptrh	equ	0xFF7
  3844                           tblptrl	equ	0xFF6
  3845                           tablat	equ	0xFF5
  3846                           prodh	equ	0xFF4
  3847                           prodl	equ	0xFF3
  3848                           intcon	equ	0xFF2
  3849                           indf0	equ	0xFEF
  3850                           postinc0	equ	0xFEE
  3851                           fsr0h	equ	0xFEA
  3852                           fsr0l	equ	0xFE9
  3853                           wreg	equ	0xFE8
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function ___wmul *****************
  3862 ;; Defined at:
  3863 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  multiplier      2   15[COMRAM] unsigned int 
  3866 ;;  multiplicand    2   17[COMRAM] unsigned int 
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  product         2   19[COMRAM] unsigned int 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  2   15[COMRAM] unsigned int 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, prodl, prodh
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3878 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;Total ram usage:        6 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    1
  3885 ;; This function calls:
  3886 ;;		Nothing
  3887 ;; This function is called by:
  3888 ;;		_checkInputs
  3889 ;;		_sprintf
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text32
  3894  010896                     __ptext32:
  3895                           	opt stack 0
  3896  010896                     ___wmul:
  3897                           	opt stack 27
  3898                           
  3899                           ;incstack = 0
  3900  010896  5010               	movf	___wmul@multiplier,w,c
  3901  010898  0212               	mulwf	___wmul@multiplicand,c
  3902  01089A  CFF3 F014          	movff	prodl,___wmul@product
  3903  01089E  CFF4 F015          	movff	prodh,___wmul@product+1
  3904  0108A2  5010               	movf	___wmul@multiplier,w,c
  3905  0108A4  0213               	mulwf	___wmul@multiplicand+1,c
  3906  0108A6  50F3               	movf	prodl,w,c
  3907  0108A8  2615               	addwf	___wmul@product+1,f,c
  3908  0108AA  5011               	movf	___wmul@multiplier+1,w,c
  3909  0108AC  0212               	mulwf	___wmul@multiplicand,c
  3910  0108AE  50F3               	movf	prodl,w,c
  3911  0108B0  2615               	addwf	___wmul@product+1,f,c
  3912  0108B2  C014  F010         	movff	___wmul@product,?___wmul
  3913  0108B6  C015  F011         	movff	___wmul@product+1,?___wmul+1
  3914  0108BA  0012               	return	
  3915  0108BC                     __end_of___wmul:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           indf0	equ	0xFEF
  3925                           postinc0	equ	0xFEE
  3926                           fsr0h	equ	0xFEA
  3927                           fsr0l	equ	0xFE9
  3928                           wreg	equ	0xFE8
  3929                           indf2	equ	0xFDF
  3930                           postinc2	equ	0xFDE
  3931                           postdec2	equ	0xFDD
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function ___lwmod *****************
  3937 ;; Defined at:
  3938 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  dividend        2   28[COMRAM] unsigned int 
  3941 ;;  divisor         2   30[COMRAM] unsigned int 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;  counter         1   32[COMRAM] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  2   28[COMRAM] unsigned int 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;Total ram usage:        5 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    1
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_sprintf
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text33
  3968  010670                     __ptext33:
  3969                           	opt stack 0
  3970  010670                     ___lwmod:
  3971                           	opt stack 27
  3972                           
  3973                           ;incstack = 0
  3974  010670  501F               	movf	___lwmod@divisor,w,c
  3975  010672  1020               	iorwf	___lwmod@divisor+1,w,c
  3976  010674  B4D8               	btfsc	status,2,c
  3977  010676  D018               	goto	l825
  3978  010678  0E01               	movlw	1
  3979  01067A  6E21               	movwf	___lwmod@counter,c
  3980  01067C  D004               	goto	l2204
  3981  01067E                     l2202:
  3982  01067E  90D8               	bcf	status,0,c
  3983  010680  361F               	rlcf	___lwmod@divisor,f,c
  3984  010682  3620               	rlcf	___lwmod@divisor+1,f,c
  3985  010684  2A21               	incf	___lwmod@counter,f,c
  3986  010686                     l2204:
  3987  010686  AE20               	btfss	___lwmod@divisor+1,7,c
  3988  010688  D7FA               	goto	l2202
  3989  01068A                     l2206:
  3990  01068A  501F               	movf	___lwmod@divisor,w,c
  3991  01068C  5C1D               	subwf	___lwmod@dividend,w,c
  3992  01068E  5020               	movf	___lwmod@divisor+1,w,c
  3993  010690  581E               	subwfb	___lwmod@dividend+1,w,c
  3994  010692  A0D8               	btfss	status,0,c
  3995  010694  D004               	goto	l2210
  3996  010696  501F               	movf	___lwmod@divisor,w,c
  3997  010698  5E1D               	subwf	___lwmod@dividend,f,c
  3998  01069A  5020               	movf	___lwmod@divisor+1,w,c
  3999  01069C  5A1E               	subwfb	___lwmod@dividend+1,f,c
  4000  01069E                     l2210:
  4001  01069E  90D8               	bcf	status,0,c
  4002  0106A0  3220               	rrcf	___lwmod@divisor+1,f,c
  4003  0106A2  321F               	rrcf	___lwmod@divisor,f,c
  4004  0106A4  2E21               	decfsz	___lwmod@counter,f,c
  4005  0106A6  D7F1               	goto	l2206
  4006  0106A8                     l825:
  4007  0106A8  C01D  F01D         	movff	___lwmod@dividend,?___lwmod
  4008  0106AC  C01E  F01E         	movff	___lwmod@dividend+1,?___lwmod+1
  4009  0106B0  0012               	return		;funcret
  4010  0106B2                     __end_of___lwmod:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           prodh	equ	0xFF4
  4017                           prodl	equ	0xFF3
  4018                           intcon	equ	0xFF2
  4019                           indf0	equ	0xFEF
  4020                           postinc0	equ	0xFEE
  4021                           fsr0h	equ	0xFEA
  4022                           fsr0l	equ	0xFE9
  4023                           wreg	equ	0xFE8
  4024                           indf2	equ	0xFDF
  4025                           postinc2	equ	0xFDE
  4026                           postdec2	equ	0xFDD
  4027                           fsr2h	equ	0xFDA
  4028                           fsr2l	equ	0xFD9
  4029                           status	equ	0xFD8
  4030                           
  4031 ;; *************** function ___lwdiv *****************
  4032 ;; Defined at:
  4033 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  dividend        2   21[COMRAM] unsigned int 
  4036 ;;  divisor         2   23[COMRAM] unsigned int 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  quotient        2   26[COMRAM] unsigned int 
  4039 ;;  counter         1   25[COMRAM] unsigned char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  2   21[COMRAM] unsigned int 
  4042 ;; Registers used:
  4043 ;;		wreg, status,2, status,0
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4049 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;Total ram usage:        7 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    1
  4056 ;; This function calls:
  4057 ;;		Nothing
  4058 ;; This function is called by:
  4059 ;;		_checkInputs
  4060 ;;		_sprintf
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           	psect	text34
  4065  010542                     __ptext34:
  4066                           	opt stack 0
  4067  010542                     ___lwdiv:
  4068                           	opt stack 27
  4069                           
  4070                           ;incstack = 0
  4071  010542  0E00               	movlw	0
  4072  010544  6E1C               	movwf	___lwdiv@quotient+1,c
  4073  010546  0E00               	movlw	0
  4074  010548  6E1B               	movwf	___lwdiv@quotient,c
  4075  01054A  5018               	movf	___lwdiv@divisor,w,c
  4076  01054C  1019               	iorwf	___lwdiv@divisor+1,w,c
  4077  01054E  B4D8               	btfsc	status,2,c
  4078  010550  D01C               	goto	l815
  4079  010552  0E01               	movlw	1
  4080  010554  6E1A               	movwf	___lwdiv@counter,c
  4081  010556  D004               	goto	l2184
  4082  010558                     l2182:
  4083  010558  90D8               	bcf	status,0,c
  4084  01055A  3618               	rlcf	___lwdiv@divisor,f,c
  4085  01055C  3619               	rlcf	___lwdiv@divisor+1,f,c
  4086  01055E  2A1A               	incf	___lwdiv@counter,f,c
  4087  010560                     l2184:
  4088  010560  AE19               	btfss	___lwdiv@divisor+1,7,c
  4089  010562  D7FA               	goto	l2182
  4090  010564                     l2186:
  4091  010564  90D8               	bcf	status,0,c
  4092  010566  361B               	rlcf	___lwdiv@quotient,f,c
  4093  010568  361C               	rlcf	___lwdiv@quotient+1,f,c
  4094  01056A  5018               	movf	___lwdiv@divisor,w,c
  4095  01056C  5C16               	subwf	___lwdiv@dividend,w,c
  4096  01056E  5019               	movf	___lwdiv@divisor+1,w,c
  4097  010570  5817               	subwfb	___lwdiv@dividend+1,w,c
  4098  010572  A0D8               	btfss	status,0,c
  4099  010574  D005               	goto	l2194
  4100  010576  5018               	movf	___lwdiv@divisor,w,c
  4101  010578  5E16               	subwf	___lwdiv@dividend,f,c
  4102  01057A  5019               	movf	___lwdiv@divisor+1,w,c
  4103  01057C  5A17               	subwfb	___lwdiv@dividend+1,f,c
  4104  01057E  801B               	bsf	___lwdiv@quotient,0,c
  4105  010580                     l2194:
  4106  010580  90D8               	bcf	status,0,c
  4107  010582  3219               	rrcf	___lwdiv@divisor+1,f,c
  4108  010584  3218               	rrcf	___lwdiv@divisor,f,c
  4109  010586  2E1A               	decfsz	___lwdiv@counter,f,c
  4110  010588  D7ED               	goto	l2186
  4111  01058A                     l815:
  4112  01058A  C01B  F016         	movff	___lwdiv@quotient,?___lwdiv
  4113  01058E  C01C  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4114  010592  0012               	return		;funcret
  4115  010594                     __end_of___lwdiv:
  4116                           	opt stack 0
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           prodh	equ	0xFF4
  4122                           prodl	equ	0xFF3
  4123                           intcon	equ	0xFF2
  4124                           indf0	equ	0xFEF
  4125                           postinc0	equ	0xFEE
  4126                           fsr0h	equ	0xFEA
  4127                           fsr0l	equ	0xFE9
  4128                           wreg	equ	0xFE8
  4129                           indf2	equ	0xFDF
  4130                           postinc2	equ	0xFDE
  4131                           postdec2	equ	0xFDD
  4132                           fsr2h	equ	0xFDA
  4133                           fsr2l	equ	0xFD9
  4134                           status	equ	0xFD8
  4135                           
  4136 ;; *************** function _ADCRead *****************
  4137 ;; Defined at:
  4138 ;;		line 492 in file "clima.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;  ch              1    wreg     unsigned char 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  ch              1   18[COMRAM] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  2   15[COMRAM] unsigned int 
  4145 ;; Registers used:
  4146 ;;		wreg, status,2, status,0
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4152 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;Total ram usage:        4 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    1
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_checkInputs
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text35
  4167  0107A6                     __ptext35:
  4168                           	opt stack 0
  4169  0107A6                     _ADCRead:
  4170                           	opt stack 28
  4171                           
  4172                           ;incstack = 0
  4173                           ;ADCRead@ch stored from wreg
  4174  0107A6  6E13               	movwf	ADCRead@ch,c
  4175                           
  4176                           ;clima.c: 494: if(ch>13) return 0;
  4177  0107A8  0E0D               	movlw	13
  4178  0107AA  6413               	cpfsgt	ADCRead@ch,c
  4179  0107AC  D005               	goto	l183
  4180  0107AE  0E00               	movlw	0
  4181  0107B0  6E11               	movwf	?_ADCRead+1,c
  4182  0107B2  0E00               	movlw	0
  4183  0107B4  6E10               	movwf	?_ADCRead,c
  4184  0107B6  0012               	return	
  4185  0107B8                     l183:
  4186                           
  4187                           ;clima.c: 496: ADCON0bits.ADON = 1;
  4188  0107B8  80C2               	bsf	4034,0,c	;volatile
  4189                           
  4190                           ;clima.c: 497: ADCON0bits.CHS = ch;
  4191  0107BA  C013  F012         	movff	ADCRead@ch,??_ADCRead
  4192  0107BE  4612               	rlncf	??_ADCRead,f,c
  4193  0107C0  4612               	rlncf	??_ADCRead,f,c
  4194  0107C2  50C2               	movf	4034,w,c	;volatile
  4195  0107C4  1812               	xorwf	??_ADCRead,w,c
  4196  0107C6  0BC3               	andlw	-61
  4197  0107C8  1812               	xorwf	??_ADCRead,w,c
  4198  0107CA  6EC2               	movwf	4034,c	;volatile
  4199                           
  4200                           ;clima.c: 498: ADCON0bits.ADON = 1;
  4201  0107CC  80C2               	bsf	4034,0,c	;volatile
  4202                           
  4203                           ;clima.c: 499: ADCON0bits.GO_nDONE = 1;
  4204  0107CE  82C2               	bsf	4034,1,c	;volatile
  4205  0107D0                     l185:
  4206  0107D0  B2C2               	btfsc	4034,1,c	;volatile
  4207  0107D2  D7FE               	goto	l185
  4208                           
  4209                           ;clima.c: 503: return ADRES;
  4210  0107D4  CFC3 F010          	movff	4035,?_ADCRead	;volatile
  4211  0107D8  CFC4 F011          	movff	4036,?_ADCRead+1	;volatile
  4212  0107DC  0012               	return		;funcret
  4213  0107DE                     __end_of_ADCRead:
  4214                           	opt stack 0
  4215                           tblptru	equ	0xFF8
  4216                           tblptrh	equ	0xFF7
  4217                           tblptrl	equ	0xFF6
  4218                           tablat	equ	0xFF5
  4219                           prodh	equ	0xFF4
  4220                           prodl	equ	0xFF3
  4221                           intcon	equ	0xFF2
  4222                           indf0	equ	0xFEF
  4223                           postinc0	equ	0xFEE
  4224                           fsr0h	equ	0xFEA
  4225                           fsr0l	equ	0xFE9
  4226                           wreg	equ	0xFE8
  4227                           indf2	equ	0xFDF
  4228                           postinc2	equ	0xFDE
  4229                           postdec2	equ	0xFDD
  4230                           fsr2h	equ	0xFDA
  4231                           fsr2l	equ	0xFD9
  4232                           status	equ	0xFD8
  4233                           
  4234 ;; *************** function _ISR *****************
  4235 ;; Defined at:
  4236 ;;		line 571 in file "clima.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;		None
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;		None
  4241 ;; Return value:  Size  Location     Type
  4242 ;;                  1    wreg      void 
  4243 ;; Registers used:
  4244 ;;		wreg, status,2, status,0
  4245 ;; Tracked objects:
  4246 ;;		On entry : 0/0
  4247 ;;		On exit  : 0/0
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4252 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4253 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4254 ;;Total ram usage:       15 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		Interrupt level 2
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	intcode
  4264  000008                     __pintcode:
  4265                           	opt stack 0
  4266  000008                     _ISR:
  4267                           	opt stack 24
  4268                           
  4269                           ;incstack = 0
  4270  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4271  00000A  ED59  F081         	call	int_func,f	;refresh shadow registers
  4272                           tblptru	equ	0xFF8
  4273                           tblptrh	equ	0xFF7
  4274                           tblptrl	equ	0xFF6
  4275                           tablat	equ	0xFF5
  4276                           prodh	equ	0xFF4
  4277                           prodl	equ	0xFF3
  4278                           intcon	equ	0xFF2
  4279                           indf0	equ	0xFEF
  4280                           postinc0	equ	0xFEE
  4281                           fsr0h	equ	0xFEA
  4282                           fsr0l	equ	0xFE9
  4283                           wreg	equ	0xFE8
  4284                           indf2	equ	0xFDF
  4285                           postinc2	equ	0xFDE
  4286                           postdec2	equ	0xFDD
  4287                           fsr2h	equ	0xFDA
  4288                           fsr2l	equ	0xFD9
  4289                           status	equ	0xFD8
  4290                           
  4291                           	psect	intcode_body
  4292  0102B2                     __pintcode_body:
  4293                           	opt stack 24
  4294  0102B2                     int_func:
  4295                           	opt stack 24
  4296  0102B2  0006               	pop		; remove dummy address from shadow register refresh
  4297  0102B4  CFFA F002          	movff	pclath,??_ISR+1
  4298  0102B8  CFFB F003          	movff	pclatu,??_ISR+2
  4299  0102BC  CFE9 F004          	movff	fsr0l,??_ISR+3
  4300  0102C0  CFEA F005          	movff	fsr0h,??_ISR+4
  4301  0102C4  CFE1 F006          	movff	fsr1l,??_ISR+5
  4302  0102C8  CFE2 F007          	movff	fsr1h,??_ISR+6
  4303  0102CC  CFD9 F008          	movff	fsr2l,??_ISR+7
  4304  0102D0  CFDA F009          	movff	fsr2h,??_ISR+8
  4305  0102D4  CFF3 F00A          	movff	prodl,??_ISR+9
  4306  0102D8  CFF4 F00B          	movff	prodh,??_ISR+10
  4307  0102DC  CFF6 F00C          	movff	tblptrl,??_ISR+11
  4308  0102E0  CFF7 F00D          	movff	tblptrh,??_ISR+12
  4309  0102E4  CFF8 F00E          	movff	tblptru,??_ISR+13
  4310  0102E8  CFF5 F00F          	movff	tablat,??_ISR+14
  4311                           
  4312                           ;clima.c: 574: if (T0IE && T0IF)
  4313  0102EC  BAF2               	btfsc	intcon,5,c	;volatile
  4314  0102EE  A4F2               	btfss	intcon,2,c	;volatile
  4315  0102F0  D040               	goto	i2l207
  4316                           
  4317                           ;clima.c: 575: {
  4318                           ;clima.c: 576: T0IF = 0;
  4319  0102F2  94F2               	bcf	intcon,2,c	;volatile
  4320                           
  4321                           ;clima.c: 577: T0CONbits.TMR0ON = 0;
  4322  0102F4  9ED5               	bcf	4053,7,c	;volatile
  4323                           
  4324                           ;clima.c: 578: TMR0H = 0xFB;
  4325  0102F6  0EFB               	movlw	251
  4326  0102F8  6ED7               	movwf	4055,c	;volatile
  4327                           
  4328                           ;clima.c: 579: TMR0L = 0x1D-2;
  4329  0102FA  0E1B               	movlw	27
  4330  0102FC  6ED6               	movwf	4054,c	;volatile
  4331                           
  4332                           ;clima.c: 581: T0CONbits.TMR0ON = 1;
  4333  0102FE  8ED5               	bsf	4053,7,c	;volatile
  4334                           
  4335                           ;clima.c: 582: tick++;
  4336  010300  2A44               	incf	_tick,f,c
  4337                           
  4338                           ;clima.c: 584: if ((tick & 0b11) == 0b11)
  4339  010302  5044               	movf	_tick,w,c
  4340  010304  0B03               	andlw	3
  4341  010306  0A03               	xorlw	3
  4342  010308  A4D8               	btfss	status,2,c
  4343  01030A  D009               	goto	i2l1604
  4344                           
  4345                           ;clima.c: 585: {
  4346                           ;clima.c: 586: cnt++;
  4347  01030C  2A42               	incf	_cnt,f,c
  4348                           
  4349                           ;clima.c: 588: if (cnt == 25)
  4350  01030E  0E19               	movlw	25
  4351  010310  1842               	xorwf	_cnt,w,c
  4352  010312  A4D8               	btfss	status,2,c
  4353  010314  D004               	goto	i2l1604
  4354                           
  4355                           ;clima.c: 590: {
  4356                           ;clima.c: 591: ev = 1;
  4357  010316  0E01               	movlw	1
  4358  010318  6E43               	movwf	_ev,c
  4359                           
  4360                           ;clima.c: 592: cnt = 0;
  4361  01031A  0E00               	movlw	0
  4362  01031C  6E42               	movwf	_cnt,c
  4363  01031E                     i2l1604:
  4364                           
  4365                           ;clima.c: 593: }
  4366                           ;clima.c: 594: }
  4367                           ;clima.c: 596: PORTJbits.RJ0 = tick&1;
  4368  01031E  C044  F001         	movff	_tick,??_ISR
  4369  010322  0E01               	movlw	1
  4370  010324  1601               	andwf	??_ISR,f,c
  4371  010326  5088               	movf	3976,w,c	;volatile
  4372  010328  1801               	xorwf	??_ISR,w,c
  4373  01032A  0BFE               	andlw	-2
  4374  01032C  1801               	xorwf	??_ISR,w,c
  4375  01032E  6E88               	movwf	3976,c	;volatile
  4376                           
  4377                           ;clima.c: 599: if (fanSpeedCool > (tick & 0x07))
  4378  010330  C044  F001         	movff	_tick,??_ISR
  4379  010334  0E07               	movlw	7
  4380  010336  1601               	andwf	??_ISR,f,c
  4381  010338  504D               	movf	_fanSpeedCool,w,c
  4382  01033A  5C01               	subwf	??_ISR,w,c
  4383  01033C  B0D8               	btfsc	status,0,c
  4384  01033E  D002               	goto	i2l201
  4385                           
  4386                           ;clima.c: 600: (PORTDbits.RD4) = 1;
  4387  010340  8883               	bsf	3971,4,c	;volatile
  4388  010342  D001               	goto	i2l1610
  4389  010344                     i2l201:
  4390                           
  4391                           ;clima.c: 601: else
  4392                           ;clima.c: 602: (PORTDbits.RD4) = 0;
  4393  010344  9883               	bcf	3971,4,c	;volatile
  4394  010346                     i2l1610:
  4395                           
  4396                           ;clima.c: 605: if (fanSpeedHeatVent > (tick & 0x07))
  4397  010346  C044  F001         	movff	_tick,??_ISR
  4398  01034A  0E07               	movlw	7
  4399  01034C  1601               	andwf	??_ISR,f,c
  4400  01034E  504C               	movf	_fanSpeedHeatVent,w,c
  4401  010350  5C01               	subwf	??_ISR,w,c
  4402  010352  B0D8               	btfsc	status,0,c
  4403  010354  D002               	goto	i2l203
  4404                           
  4405                           ;clima.c: 606: (PORTDbits.RD5) = 1;
  4406  010356  8A83               	bsf	3971,5,c	;volatile
  4407  010358  D001               	goto	i2l1614
  4408  01035A                     i2l203:
  4409                           
  4410                           ;clima.c: 607: else
  4411                           ;clima.c: 608: (PORTDbits.RD5) = 0;
  4412  01035A  9A83               	bcf	3971,5,c	;volatile
  4413  01035C                     i2l1614:
  4414                           
  4415                           ;clima.c: 611: if (levelHeat > (tick & 0x07))
  4416  01035C  C044  F001         	movff	_tick,??_ISR
  4417  010360  0E07               	movlw	7
  4418  010362  1601               	andwf	??_ISR,f,c
  4419  010364  504B               	movf	_levelHeat,w,c
  4420  010366  5C01               	subwf	??_ISR,w,c
  4421  010368  B0D8               	btfsc	status,0,c
  4422  01036A  D002               	goto	i2l205
  4423                           
  4424                           ;clima.c: 612: (PORTDbits.RD3) = 1;
  4425  01036C  8683               	bsf	3971,3,c	;volatile
  4426  01036E  D001               	goto	i2l207
  4427  010370                     i2l205:
  4428                           
  4429                           ;clima.c: 613: else
  4430                           ;clima.c: 614: (PORTDbits.RD3) = 0;
  4431  010370  9683               	bcf	3971,3,c	;volatile
  4432  010372                     i2l207:
  4433  010372  C00F  FFF5         	movff	??_ISR+14,tablat
  4434  010376  C00E  FFF8         	movff	??_ISR+13,tblptru
  4435  01037A  C00D  FFF7         	movff	??_ISR+12,tblptrh
  4436  01037E  C00C  FFF6         	movff	??_ISR+11,tblptrl
  4437  010382  C00B  FFF4         	movff	??_ISR+10,prodh
  4438  010386  C00A  FFF3         	movff	??_ISR+9,prodl
  4439  01038A  C009  FFDA         	movff	??_ISR+8,fsr2h
  4440  01038E  C008  FFD9         	movff	??_ISR+7,fsr2l
  4441  010392  C007  FFE2         	movff	??_ISR+6,fsr1h
  4442  010396  C006  FFE1         	movff	??_ISR+5,fsr1l
  4443  01039A  C005  FFEA         	movff	??_ISR+4,fsr0h
  4444  01039E  C004  FFE9         	movff	??_ISR+3,fsr0l
  4445  0103A2  C003  FFFB         	movff	??_ISR+2,pclatu
  4446  0103A6  C002  FFFA         	movff	??_ISR+1,pclath
  4447  0103AA  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4448  0103AC  0011               	retfie		f
  4449  0103AE                     __end_of_ISR:
  4450                           	opt stack 0
  4451                           pclatu	equ	0xFFB
  4452                           pclath	equ	0xFFA
  4453                           tblptru	equ	0xFF8
  4454                           tblptrh	equ	0xFF7
  4455                           tblptrl	equ	0xFF6
  4456                           tablat	equ	0xFF5
  4457                           prodh	equ	0xFF4
  4458                           prodl	equ	0xFF3
  4459                           intcon	equ	0xFF2
  4460                           indf0	equ	0xFEF
  4461                           postinc0	equ	0xFEE
  4462                           fsr0h	equ	0xFEA
  4463                           fsr0l	equ	0xFE9
  4464                           wreg	equ	0xFE8
  4465                           fsr1h	equ	0xFE2
  4466                           fsr1l	equ	0xFE1
  4467                           indf2	equ	0xFDF
  4468                           postinc2	equ	0xFDE
  4469                           postdec2	equ	0xFDD
  4470                           fsr2h	equ	0xFDA
  4471                           fsr2l	equ	0xFD9
  4472                           status	equ	0xFD8
  4473                           pclatu	equ	0xFFB
  4474                           pclath	equ	0xFFA
  4475                           tblptru	equ	0xFF8
  4476                           tblptrh	equ	0xFF7
  4477                           tblptrl	equ	0xFF6
  4478                           tablat	equ	0xFF5
  4479                           prodh	equ	0xFF4
  4480                           prodl	equ	0xFF3
  4481                           intcon	equ	0xFF2
  4482                           indf0	equ	0xFEF
  4483                           postinc0	equ	0xFEE
  4484                           fsr0h	equ	0xFEA
  4485                           fsr0l	equ	0xFE9
  4486                           wreg	equ	0xFE8
  4487                           fsr1h	equ	0xFE2
  4488                           fsr1l	equ	0xFE1
  4489                           indf2	equ	0xFDF
  4490                           postinc2	equ	0xFDE
  4491                           postdec2	equ	0xFDD
  4492                           fsr2h	equ	0xFDA
  4493                           fsr2l	equ	0xFD9
  4494                           status	equ	0xFD8
  4495                           
  4496                           	psect	rparam
  4497  0000                     pclatu	equ	0xFFB
  4498                           pclath	equ	0xFFA
  4499                           tblptru	equ	0xFF8
  4500                           tblptrh	equ	0xFF7
  4501                           tblptrl	equ	0xFF6
  4502                           tablat	equ	0xFF5
  4503                           prodh	equ	0xFF4
  4504                           prodl	equ	0xFF3
  4505                           intcon	equ	0xFF2
  4506                           indf0	equ	0xFEF
  4507                           postinc0	equ	0xFEE
  4508                           fsr0h	equ	0xFEA
  4509                           fsr0l	equ	0xFE9
  4510                           wreg	equ	0xFE8
  4511                           fsr1h	equ	0xFE2
  4512                           fsr1l	equ	0xFE1
  4513                           indf2	equ	0xFDF
  4514                           postinc2	equ	0xFDE
  4515                           postdec2	equ	0xFDD
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520                           	psect	temp
  4521  00004F                     btemp:
  4522                           	opt stack 0
  4523  00004F                     	ds	1
  4524  0000                     int$flags	set	btemp
  4525                           pclatu	equ	0xFFB
  4526                           pclath	equ	0xFFA
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           intcon	equ	0xFF2
  4534                           indf0	equ	0xFEF
  4535                           postinc0	equ	0xFEE
  4536                           fsr0h	equ	0xFEA
  4537                           fsr0l	equ	0xFE9
  4538                           wreg	equ	0xFE8
  4539                           fsr1h	equ	0xFE2
  4540                           fsr1l	equ	0xFE1
  4541                           indf2	equ	0xFDF
  4542                           postinc2	equ	0xFDE
  4543                           postdec2	equ	0xFDD
  4544                           fsr2h	equ	0xFDA
  4545                           fsr2l	equ	0xFD9
  4546                           status	equ	0xFD8


Data Sizes:
    Strings     112
    Constant    154
    Data        0
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      78
    BANK0           160      6      26
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_19(CODE[22]), STR_18(CODE[3]), STR_11(CODE[3]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> msg(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    UART_puts@s	PTR unsigned char  size(2) Largest target is 20
		 -> STR_20(CODE[20]), 

    LcdWriteString@s	PTR const unsigned char  size(2) Largest target is 144
		 -> STR_21(CODE[13]), STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_6(CODE[6]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), msg(BANK0[20]), 
		 -> LcdLines(CODE[144]), 


Critical Paths under _main in COMRAM

    _stateMachine->_sprintf
    _setLcd->_LcdWriteString
    _LcdGoTo->_lcdCommand
    _UART_puts->_Delay10TCYx
    _UART_puts->_UART_putc
    _LcdInit->_LcdWriteString
    _setIODIR->_SWSPIWrite
    _LcdWriteString->_LcdChar
    _LcdChar->_setGPIO
    _LcdClear->_lcdCommand
    _lcdCommand->_setGPIO
    _setGPIO->_SWSPIWrite
    _checkInputs->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_checkInputs

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   16797
                                             56 COMRAM     1     1      0
                        _checkInputs
                               _init
                       _stateMachine
                      _updateOutputs
 ---------------------------------------------------------------------------------
 (1) _updateOutputs                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stateMachine                                         1     1      0    3668
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    8134
                            _LcdInit
                          _UART_Init
                          _UART_puts
                            _initAdc
                        _initButtons
                            _initPwm
                            _initTmr
                     _setHeatElement
                             _setLcd
                    _setSpeedFanCool
                _setSpeedFanHeatVent
                      _setStandbyLed
 ---------------------------------------------------------------------------------
 (2) _setStandbyLed                                        2     0      2      86
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setSpeedFanHeatVent                                  1     1      0      30
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setSpeedFanCool                                      1     1      0      30
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLcd                                               0     0      0    3411
                           _LcdClear
                            _LcdGoTo
                     _LcdWriteString
 ---------------------------------------------------------------------------------
 (3) _LcdGoTo                                              1     1      0     710
                                             20 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _setHeatElement                                       2     0      2     150
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _initTmr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPwm                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initAdc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_puts                                            2     0      2     139
                                             16 COMRAM     2     0      2
                        _Delay10TCYx
                          _UART_putc
 ---------------------------------------------------------------------------------
 (3) _UART_putc                                            1     1      0      15
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      15
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            2     2      0      15
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LcdInit                                              0     0      0    4273
                           _LcdClear
                     _LcdWriteString
                          _SWSPIOpen
                         _lcdCommand
                            _setGPIO
                           _setIODIR
 ---------------------------------------------------------------------------------
 (3) _setIODIR                                             2     1      1     218
                                             17 COMRAM     2     1      1
                       _SWSPIClearCS
                         _SWSPISetCS
                         _SWSPIWrite
 ---------------------------------------------------------------------------------
 (3) _SWSPIOpen                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LcdWriteString                                       2     0      2    2013
                                             20 COMRAM     2     0      2
                            _LcdChar
 ---------------------------------------------------------------------------------
 (4) _LcdChar                                              1     1      0     688
                                             19 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (3) _LcdClear                                             0     0      0     688
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (4) _lcdCommand                                           1     1      0     688
                                             19 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (5) _setGPIO                                              2     1      1     666
                                             17 COMRAM     2     1      1
                       _SWSPIClearCS
                         _SWSPISetCS
                         _SWSPIWrite
 ---------------------------------------------------------------------------------
 (6) _SWSPIWrite                                           2     2      0      46
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _SWSPISetCS                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _SWSPIClearCS                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkInputs                                          6     6      0    4989
                                              0 BANK0      6     6      0
                            _ADCRead
                            ___lwdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             32    22     10    3668
                                             33 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     540
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             28 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             21 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     2      2      62
                                             15 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 15    15      0       0
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkInputs
     _ADCRead
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _sprintf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit
   _init
     _LcdInit
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _SWSPIOpen
       _lcdCommand
         _setGPIO
           _SWSPIClearCS
           _SWSPISetCS
           _SWSPIWrite
       _setGPIO
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
       _setIODIR
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
     _UART_Init
     _UART_puts
       _Delay10TCYx
       _UART_putc
     _initAdc
     _initButtons
     _initPwm
     _initTmr
     _setHeatElement
     _setLcd
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdGoTo
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
     _setSpeedFanCool
     _setSpeedFanHeatVent
     _setStandbyLed
   _stateMachine
     _sprintf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit
   _updateOutputs

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      6      1A       5       16.3%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      4E       1       83.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      68      32        0.0%
DATA                 0      0      68       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon May 20 15:32:27 2019

               _updateOutputs 086C                             _a 003F                            _ev 0043  
         ___wmul@multiplicand 0012  __size_of_setSpeedFanHeatVent 0012                   __CFG_OSC$HS 000000  
                         l341 09A0                           l183 07B8                           l185 07D0  
                         l283 05A8                           l815 058A                           l825 06A8  
                         _GIE 007F97                           _ISR 0008                           u455 0874  
                         u456 0876                           u465 087E                           u466 0880  
                         u475 0888                           u476 088A                           u485 0892  
                         u486 0894                           u760 0510                           u770 053A  
                         u767 0506                           u777 0530                    _SWSPISetCS 09D4  
                         _cnt 0042                           _msg 0060               __end_of_ADCRead 07DE  
           lcdCommand@command 0014                           prod 000FF3                    _SWSPIWrite 0594  
                         wreg 000FE8                    _TXSTA1bits 000FAC                          ?_ISR 0001  
    setSpeedFanHeatVent@speed 0010         __size_of_SWSPIClearCS 0004                  __CFG_WDT$OFF 000000  
                        l1120 098C        __end_of_setHeatElement 09D0                          l2210 069E  
                        l2202 067E                          l2204 0686                          l2300 01E8  
                        l2206 068A                          l2222 0024                          l2320 0280  
                        l2312 0222                          l2224 0032                          l2216 000A  
                        l2314 0228                          l2306 0206                          l2234 006E  
                        l2322 0288                          l1194 0960                          l2324 02A4  
                        l2244 00D2                          l2228 0038                          l1188 0972  
                        l2182 0558                          l2166 0930                          l2270 015A  
                        l2246 00FC                          l2350 03E0                          l2184 0560  
                        l2280 0198                          l2256 0124                          l2194 0580  
                        l2186 0564                          l2290 01C0                          l2282 01A0  
                        l2258 0128                          l2276 0174                          l2366 0480  
                        l1742 04EE                          l2470 0784                          l2298 01E0  
                        l1682 05B2                          l1746 0518                          l1684 05B8  
                        l1950 07DE                          STR_1 FFE4                          STR_3 FFEE  
                        STR_4 FFE9                          STR_5 FFF3                          STR_6 FFC6  
                        STR_7 FFCC                          STR_8 FFD2                          STR_9 FFD8  
                        _T0IE 007F95                          _T0IF 007F92                          u1707 098E  
                        u1565 0400                          _RCIF 007CF5                          _TMR0 000FD6  
                        _main 076C                          _init 0484                          _tick 0044  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 004F  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
             __end_of_LcdChar 0840               __end_of_LcdGoTo 09B4               __end_of_LcdInit 062E  
              ?_updateOutputs 0001                  ___param_bank 000000                  ?_initButtons 0001  
                       ??_ISR 0001                   _Delay10TCYx 098A                         ?_main 0001  
                       ?_init 0001                         _ADRES 000FC3                         STR_10 FFDE  
                       STR_11 FFF8                         STR_20 FFA5                         STR_13 FFFD  
                       STR_21 FFB9                         STR_14 FFFB                         STR_18 FFF8  
                       STR_19 FF8F                         _T0CON 000FD5               __end_of___lwdiv 0594  
                       i2l201 0344               __end_of___lwmod 06B2                         i2l203 035A  
                       i2l205 0370                         i2l207 0372                  _SWSPIClearCS 09D8  
                       _RCREG 000FAE                         _TMR0H 000FD7                         _TMR1H 000FCF  
                       _TMR0L 000FD6                         _TMR1L 000FCE                         _SPBRG 000FAF  
                       _PORTD 000F83                         _TRISA 000F92                         _TRMT1 007D61  
                       _TRISD 000F95                         _TXREG 000FAD          __size_of_checkInputs 00D6  
              __CFG_FCMEN$OFF 000000            __size_of_UART_Init 001C                         _inDeb 0041  
             __end_of_initAdc 076C              _fanSpeedHeatVent 004C               __end_of_dpowers FEFF  
          __size_of_UART_putc 000E               __end_of_initPwm 09BC               __end_of_initTmr 06F2  
          __size_of_UART_puts 0036               __end_of_setGPIO 091A               __end_of_isdigit 0938  
             ?_setHeatElement 0010                         main@i 0039                         pclath 000FFA  
                       tablat 000FF5                         status 000FD8               __end_of_sprintf 02B2  
    __size_of_setSpeedFanCool 0012              __end_of_LcdClear 09C4              __end_of_LcdLines FF8F  
          __size_of_SWSPIOpen 0012               __initialization 08BC                  __end_of_main 07A6  
                __end_of_init 04EC                     ??_ADCRead 0012                        ??_main 0039  
                      ??_init 0017                 __activetblptr 000003                   ?_SWSPISetCS 0001  
                 ?_SWSPIWrite 0001                     ADCRead@ch 0013                        i2l1610 0346  
                      i2l1604 031E                        i2l1614 035C                     ??_LcdChar 0014  
                   ??_LcdGoTo 0015                     ??_LcdInit 0017         __end_of_setStandbyLed 09CA  
                      _TRISB0 007C98               ??_updateOutputs 0010             __end_of_UART_Init 0954  
                      ___wmul 0896             __end_of_UART_putc 09A8             __end_of_UART_puts 0814  
                   ??___lwdiv 001A                        _inTemp 003C                     ??___lwmod 0021  
            __end_of_setIODIR 08FC                        clear_0 08C2                        clear_1 08CE  
                      _setLcd 062E                   setIODIR@dir 0012                     ??_initAdc 0010  
                   ??_initPwm 0010                     ??_initTmr 0010                     ??_setGPIO 0013  
                   ??_isdigit 0010                 LcdChar@letter 0014                  __mediumconst FEF4  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
           __end_of_SWSPIOpen 098A                     ??_sprintf 002C           setHeatElement@state 0010  
         _setSpeedFanHeatVent 0954                    __accesstop 0060       __end_of__initialization 08D4  
     __size_of_LcdWriteString 0056                  _fanSpeedCool 004D                 ___rparam_used 000001  
         __size_of_SWSPISetCS 0004           __size_of_SWSPIWrite 004E                __pcstackCOMRAM 0001  
           ??_setSpeedFanCool 0010          ?_setSpeedFanHeatVent 0001          __size_of_initButtons 0004  
                   ?_LcdClear 0001                  sprintf@width 0036                    __pbssBANK0 0060  
                ?_Delay10TCYx 0001                    _lcdCommand 0840                       ?___wmul 0010  
                  _climaState 004E         ??_setSpeedFanHeatVent 0010                       _ADCRead 07A6  
                     ?_setLcd 0001              ??_setHeatElement 0012                    ??_LcdClear 0015  
                     _LcdChar 0814                       _LcdGoTo 09A8                       _LcdInit 05E2  
                   ?_setIODIR 0012     checkInputs@leftButton_old 0040                       __Hparam 0000  
                     __Lparam 0000               __size_of___wmul 0026                       ___lwdiv 0542  
                     ___lwmod 0670                       __pcinit 08BC               Delay10TCYx@unit 0010  
                     __ramtop 1000                 ??_checkInputs 0074               __size_of_setLcd 0042  
                     __ptext0 076C                       __ptext1 086C                       __ptext2 06F2  
                     __ptext3 0484                       __ptext4 09C4                       __ptext5 0954  
                     __ptext6 0966                       __ptext7 062E                       __ptext8 09A8  
                     __ptext9 09CA                     _T0CONbits 000FD5                  __size_of_ISR 03A6  
                     _initAdc 0730                  ??_SWSPISetCS 0010                       _dpowers FEF5  
                     _initPwm 09B4                       _initTmr 06B2                       _setGPIO 08FC  
                     _isdigit 091A                  ??_SWSPIWrite 0010                       _setTemp 0045  
                     _outTemp 003A               setIODIR@address 0013                  setGPIO@value 0012  
                     _sprintf 0000                __pintcode_body 02B2          end_of_initialization 08D4  
              _LcdWriteString 04EC                    ??_setIODIR 0013                       int_func 02B2  
          __end_of_SWSPISetCS 09D8                     _RCSTAbits 000FAB            __end_of_SWSPIWrite 05E2  
                     postdec2 000FDD                   ?_lcdCommand 0001                       postinc0 000FEE  
                     postinc2 000FDE                     _UART_Init 0938                     _PORTAbits 000F80  
                   _PORTBbits 000F81                     _PORTCbits 000F82                     _PORTDbits 000F83  
                   _UART_putc 099A                     _UART_puts 07DE         checkInputs@leftButton 0079  
                   _PORTJbits 000F88                     _TRISAbits 000F92                     _TRISCbits 000F94  
                   _TRISDbits 000F95                    _standbyLed 0048                     _TRISJbits 000F9A  
         __end_of_checkInputs 0484               _lcdBacklightLed 0047        __end_of_LcdWriteString 0542  
                   _SWSPIOpen 0978               _setSpeedFanCool 0966                     _TXSTAbits 000FAC  
       __end_of_updateOutputs 0896                 ?_stateMachine 0001                  _leftButtonEv 0046  
              __end_of___wmul 08BC                    ?_UART_Init 0001          __size_of_Delay10TCYx 0010  
                  ?_UART_putc 0001                    ?_UART_puts 0011                __end_of_setLcd 0670  
      __size_of_setStandbyLed 0006           start_initialization 08BC                   __end_of_ISR 03AE  
             ?_LcdWriteString 0015             __size_of_LcdClear 0008           __size_of_lcdCommand 002C  
        setSpeedFanCool@speed 0010                    ?_SWSPIOpen 0001                ??_stateMachine 0039  
               ??_initButtons 0010                      ??___wmul 0014                      ?_ADCRead 0010  
                    ??_setLcd 0017                   _checkInputs 03AE            setStandbyLed@state 0010  
               ?_SWSPIClearCS 0001                   __pbssCOMRAM 003A                 __pcstackBANK0 0074  
     __end_of_setSpeedFanCool 0978                  _isdigit$1777 0011             checkInputs@adcVal 0077  
                    ?_LcdChar 0001                      ?_LcdGoTo 0001                      ?_LcdInit 0001  
                 sprintf@flag 0035                   sprintf@prec 0032                 _setStandbyLed 09C4  
           __size_of_setIODIR 001E   __end_of_setSpeedFanHeatVent 0966              ___lwdiv@dividend 0016  
                   __pintcode 0008                 __pmediumconst FEF4                   _heatElement 004A  
                    ?___lwdiv 0016                      ?___lwmod 001D                   ??_UART_Init 0010  
              ??_SWSPIClearCS 0010                   ??_UART_putc 0010                   ??_UART_puts 0013  
         __end_of_initButtons 09D4                      ?_initAdc 0001                      ?_initPwm 0001  
                    ?_initTmr 0001                      ?_setGPIO 0012                      ?_isdigit 0001  
                   _levelHeat 004B              ___lwdiv@quotient 001B                      ?_sprintf 0022  
                  UART_Init@x 0010            SWSPIWrite@BitCount 0011                   ??_SWSPIOpen 0010  
                 _coolElement 0049                ?_setStandbyLed 0010                ___wmul@product 0014  
                    _PIE1bits 000F9D                      _PIR1bits 000F9E                    UART_puts@s 0011  
              setGPIO@address 0013                  ??_lcdCommand 0014              __size_of_ADCRead 0038  
                  _ADCON0bits 000FC2                    _ADCON1bits 000FC1                    _ADCON2bits 000FC0  
           ___wmul@multiplier 0010                      _LcdClear 09BC          __end_of_stateMachine 0730  
            ?_setSpeedFanCool 0001                      _LcdLines FEFF            __end_of_lcdCommand 086C  
     __size_of_setHeatElement 0006              __size_of_LcdChar 002C              __size_of_LcdGoTo 000C  
            __size_of_LcdInit 004C                      __Hrparam 0000                      __Lrparam 0000  
                 _initButtons 09D0              __size_of___lwdiv 0052              __size_of___lwmod 0042  
            ??_LcdWriteString 0017                    sprintf@val 0033              __size_of_initAdc 003C  
            __size_of_initPwm 0008              __size_of_initTmr 0040              __size_of_setGPIO 001E  
            __size_of_isdigit 001E               ___lwdiv@divisor 0018               ___lwdiv@counter 001A  
                    __ptext10 06B2                      __ptext11 09B4                      __ptext20 0978  
                    __ptext12 09D0                      __ptext21 04EC                      __ptext13 0730  
                    __ptext30 0000                      __ptext22 0814                      __ptext14 07DE  
                    __ptext31 091A                      __ptext23 09BC                      __ptext15 099A  
                    __ptext32 0896                      __ptext24 0840                      __ptext16 098A  
                    __ptext33 0670                      __ptext25 08FC                      __ptext17 0938  
                    __ptext34 0542                      __ptext26 0594                      __ptext18 05E2  
                    __ptext35 07A6                      __ptext27 09D4                      __ptext19 08DE  
                    __ptext28 09D8                      __ptext29 03AE              __size_of_sprintf 02B2  
             ??_setStandbyLed 0012                      _setIODIR 08DE                 __size_of_main 003A  
               __size_of_init 0068                 UART_putc@data 0010          __end_of_SWSPIClearCS 09DC  
               ??_Delay10TCYx 0010                      int$flags 004F               LcdWriteString@s 0015  
                  _MEMCONbits 000F9C                  ?_checkInputs 0001                      isdigit@c 0012  
      __size_of_updateOutputs 002A                      intlevel2 0000                    LcdGoTo@pos 0015  
                   sprintf@ap 0030                     sprintf@sp 0022              ___lwmod@dividend 001D  
                  _RCSTA1bits 000FAB         __size_of_stateMachine 003E           __end_of_Delay10TCYx 099A  
                    sprintf@c 0038                      sprintf@f 0024              SWSPIWrite@output 0010  
             ___lwmod@divisor 001F               ___lwmod@counter 0021               SWSPIWrite@input 003E  
              _setHeatElement 09CA                  _stateMachine 06F2  
