

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon May 20 15:27:30 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           ; Version 1.41 (B)
    59                           ; Generated 21/02/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F8722 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	mediumconst
    94  00FEF4                     __pmediumconst:
    95                           	opt stack 0
    96  00FEF4  00                 	db	0
    97  00FEF5                     _dpowers:
    98                           	opt stack 0
    99  00FEF5  0001               	dw	1
   100  00FEF7  000A               	dw	10
   101  00FEF9  0064               	dw	100
   102  00FEFB  03E8               	dw	1000
   103  00FEFD  2710               	dw	10000
   104  00FEFF                     __end_of_dpowers:
   105                           	opt stack 0
   106  00FEFF                     _LcdLines:
   107                           	opt stack 0
   108  00FEFF  20                 	db	32
   109  00FF00  20                 	db	32
   110  00FF01  43                 	db	67
   111  00FF02  6C                 	db	108
   112  00FF03  69                 	db	105
   113  00FF04  6D                 	db	109
   114  00FF05  61                 	db	97
   115  00FF06  20                 	db	32
   116  00FF07  69                 	db	105
   117  00FF08  73                 	db	115
   118  00FF09  20                 	db	32
   119  00FF0A  4F                 	db	79
   120  00FF0B  46                 	db	70
   121  00FF0C  46                 	db	70
   122  00FF0D  20                 	db	32
   123  00FF0E  20                 	db	32
   124  00FF0F  00                 	db	0
   125  00FF10  00                 	db	0
   126  00FF11  2D                 	db	45
   127  00FF12  2D                 	db	45
   128  00FF13  2D                 	db	45
   129  00FF14  2D                 	db	45
   130  00FF15  2D                 	db	45
   131  00FF16  2D                 	db	45
   132  00FF17  2D                 	db	45
   133  00FF18  2D                 	db	45
   134  00FF19  2D                 	db	45
   135  00FF1A  2D                 	db	45
   136  00FF1B  2D                 	db	45
   137  00FF1C  2D                 	db	45
   138  00FF1D  2D                 	db	45
   139  00FF1E  2D                 	db	45
   140  00FF1F  2D                 	db	45
   141  00FF20  2D                 	db	45
   142  00FF21  00                 	db	0
   143  00FF22  00                 	db	0
   144  00FF23  54                 	db	84
   145  00FF24  65                 	db	101
   146  00FF25  3A                 	db	58
   147  00FF26  2B                 	db	43
   148  00FF27  20                 	db	32
   149  00FF28  20                 	db	32
   150  00FF29  43                 	db	67
   151  00FF2A  20                 	db	32
   152  00FF2B  54                 	db	84
   153  00FF2C  69                 	db	105
   154  00FF2D  3A                 	db	58
   155  00FF2E  2B                 	db	43
   156  00FF2F  20                 	db	32
   157  00FF30  20                 	db	32
   158  00FF31  43                 	db	67
   159  00FF32  20                 	db	32
   160  00FF33  00                 	db	0
   161  00FF34  00                 	db	0
   162  00FF35  52                 	db	82
   163  00FF36  65                 	db	101
   164  00FF37  63                 	db	99
   165  00FF38  65                 	db	101
   166  00FF39  20                 	db	32
   167  00FF3A  20                 	db	32
   168  00FF3B  20                 	db	32
   169  00FF3C  20                 	db	32
   170  00FF3D  20                 	db	32
   171  00FF3E  20                 	db	32
   172  00FF3F  20                 	db	32
   173  00FF40  3C                 	db	60
   174  00FF41  20                 	db	32
   175  00FF42  20                 	db	32
   176  00FF43  43                 	db	67
   177  00FF44  3E                 	db	62
   178  00FF45  00                 	db	0
   179  00FF46  00                 	db	0
   180  00FF47  54                 	db	84
   181  00FF48  65                 	db	101
   182  00FF49  3A                 	db	58
   183  00FF4A  2B                 	db	43
   184  00FF4B  20                 	db	32
   185  00FF4C  20                 	db	32
   186  00FF4D  43                 	db	67
   187  00FF4E  20                 	db	32
   188  00FF4F  54                 	db	84
   189  00FF50  69                 	db	105
   190  00FF51  3A                 	db	58
   191  00FF52  2B                 	db	43
   192  00FF53  20                 	db	32
   193  00FF54  20                 	db	32
   194  00FF55  43                 	db	67
   195  00FF56  20                 	db	32
   196  00FF57  00                 	db	0
   197  00FF58  00                 	db	0
   198  00FF59  43                 	db	67
   199  00FF5A  61                 	db	97
   200  00FF5B  6C                 	db	108
   201  00FF5C  64                 	db	100
   202  00FF5D  20                 	db	32
   203  00FF5E  20                 	db	32
   204  00FF5F  20                 	db	32
   205  00FF60  20                 	db	32
   206  00FF61  20                 	db	32
   207  00FF62  20                 	db	32
   208  00FF63  20                 	db	32
   209  00FF64  3C                 	db	60
   210  00FF65  20                 	db	32
   211  00FF66  20                 	db	32
   212  00FF67  43                 	db	67
   213  00FF68  3E                 	db	62
   214  00FF69  00                 	db	0
   215  00FF6A  00                 	db	0
   216  00FF6B  54                 	db	84
   217  00FF6C  65                 	db	101
   218  00FF6D  3A                 	db	58
   219  00FF6E  2B                 	db	43
   220  00FF6F  20                 	db	32
   221  00FF70  20                 	db	32
   222  00FF71  43                 	db	67
   223  00FF72  20                 	db	32
   224  00FF73  54                 	db	84
   225  00FF74  69                 	db	105
   226  00FF75  3A                 	db	58
   227  00FF76  2B                 	db	43
   228  00FF77  20                 	db	32
   229  00FF78  20                 	db	32
   230  00FF79  43                 	db	67
   231  00FF7A  20                 	db	32
   232  00FF7B  00                 	db	0
   233  00FF7C  00                 	db	0
   234  00FF7D  56                 	db	86
   235  00FF7E  65                 	db	101
   236  00FF7F  6E                 	db	110
   237  00FF80  74                 	db	116
   238  00FF81  20                 	db	32
   239  00FF82  20                 	db	32
   240  00FF83  20                 	db	32
   241  00FF84  20                 	db	32
   242  00FF85  20                 	db	32
   243  00FF86  20                 	db	32
   244  00FF87  20                 	db	32
   245  00FF88  20                 	db	32
   246  00FF89  20                 	db	32
   247  00FF8A  20                 	db	32
   248  00FF8B  43                 	db	67
   249  00FF8C  20                 	db	32
   250  00FF8D  00                 	db	0
   251  00FF8E  00                 	db	0
   252  00FF8F                     __end_of_LcdLines:
   253                           	opt stack 0
   254  0000                     _TMR0	set	4054
   255  0000                     _ADRES	set	4035
   256  0000                     _PIR1bits	set	3998
   257  0000                     _RCREG	set	4014
   258  0000                     _TXREG	set	4013
   259  0000                     _RCSTA1bits	set	4011
   260  0000                     _PIE1bits	set	3997
   261  0000                     _RCSTAbits	set	4011
   262  0000                     _TXSTAbits	set	4012
   263  0000                     _SPBRG	set	4015
   264  0000                     _TXSTA1bits	set	4012
   265  0000                     _TRISCbits	set	3988
   266  0000                     _TRISAbits	set	3986
   267  0000                     _PORTCbits	set	3970
   268  0000                     _PORTAbits	set	3968
   269  0000                     _MEMCONbits	set	3996
   270  0000                     _PORTD	set	3971
   271  0000                     _TRISD	set	3989
   272  0000                     _TMR0L	set	4054
   273  0000                     _TMR0H	set	4055
   274  0000                     _TMR1L	set	4046
   275  0000                     _TMR1H	set	4047
   276  0000                     _T0CONbits	set	4053
   277  0000                     _T0CON	set	4053
   278  0000                     _TRISJbits	set	3994
   279  0000                     _PORTJbits	set	3976
   280  0000                     _TRISDbits	set	3989
   281  0000                     _ADCON2bits	set	4032
   282  0000                     _ADCON1bits	set	4033
   283  0000                     _ADCON0bits	set	4034
   284  0000                     _TRISA	set	3986
   285  0000                     _PORTDbits	set	3971
   286  0000                     _PORTBbits	set	3969
   287  0000                     _RCIF	set	31989
   288  0000                     _TRMT1	set	32097
   289  0000                     _T0IF	set	32658
   290  0000                     _GIE	set	32663
   291  0000                     _T0IE	set	32661
   292  0000                     _TRISB0	set	31896
   293  00FF8F                     STR_19:
   294  00FF8F  48                 	db	72	;'H'
   295  00FF90  53                 	db	83	;'S'
   296  00FF91  3A                 	db	58	;':'
   297  00FF92  25                 	db	37
   298  00FF93  64                 	db	100	;'d'
   299  00FF94  2C                 	db	44
   300  00FF95  20                 	db	32
   301  00FF96  48                 	db	72	;'H'
   302  00FF97  4C                 	db	76	;'L'
   303  00FF98  3A                 	db	58	;':'
   304  00FF99  25                 	db	37
   305  00FF9A  64                 	db	100	;'d'
   306  00FF9B  2C                 	db	44
   307  00FF9C  20                 	db	32
   308  00FF9D  43                 	db	67	;'C'
   309  00FF9E  53                 	db	83	;'S'
   310  00FF9F  3A                 	db	58	;':'
   311  00FFA0  25                 	db	37
   312  00FFA1  64                 	db	100	;'d'
   313  00FFA2  2C                 	db	44
   314  00FFA3  20                 	db	32
   315  00FFA4  00                 	db	0
   316  00FFA5                     STR_20:
   317  00FFA5  0A                 	db	10
   318  00FFA6  0D                 	db	13
   319  00FFA7  49                 	db	73	;'I'
   320  00FFA8  6E                 	db	110	;'n'
   321  00FFA9  69                 	db	105	;'i'
   322  00FFAA  74                 	db	116	;'t'
   323  00FFAB  69                 	db	105	;'i'
   324  00FFAC  61                 	db	97	;'a'
   325  00FFAD  6C                 	db	108	;'l'
   326  00FFAE  69                 	db	105	;'i'
   327  00FFAF  7A                 	db	122	;'z'
   328  00FFB0  69                 	db	105	;'i'
   329  00FFB1  6E                 	db	110	;'n'
   330  00FFB2  67                 	db	103	;'g'
   331  00FFB3  2E                 	db	46
   332  00FFB4  2E                 	db	46
   333  00FFB5  2E                 	db	46
   334  00FFB6  0A                 	db	10
   335  00FFB7  0D                 	db	13
   336  00FFB8  00                 	db	0
   337  00FFB9                     STR_21:
   338  00FFB9  4C                 	db	76	;'L'
   339  00FFBA  43                 	db	67	;'C'
   340  00FFBB  44                 	db	68	;'D'
   341  00FFBC  20                 	db	32
   342  00FFBD  69                 	db	105	;'i'
   343  00FFBE  6E                 	db	110	;'n'
   344  00FFBF  69                 	db	105	;'i'
   345  00FFC0  74                 	db	116	;'t'
   346  00FFC1  20                 	db	32
   347  00FFC2  2E                 	db	46
   348  00FFC3  2E                 	db	46
   349  00FFC4  2E                 	db	46
   350  00FFC5  00                 	db	0
   351  00FFC6                     STR_6:
   352  00FFC6  7C                 	db	124
   353  00FFC7  2E                 	db	46
   354  00FFC8  2E                 	db	46
   355  00FFC9  2E                 	db	46
   356  00FFCA  2E                 	db	46
   357  00FFCB  00                 	db	0
   358  00FFCC                     STR_7:
   359  00FFCC  7C                 	db	124
   360  00FFCD  7C                 	db	124
   361  00FFCE  2E                 	db	46
   362  00FFCF  2E                 	db	46
   363  00FFD0  2E                 	db	46
   364  00FFD1  00                 	db	0
   365  00FFD2                     STR_8:
   366  00FFD2  7C                 	db	124
   367  00FFD3  7C                 	db	124
   368  00FFD4  7C                 	db	124
   369  00FFD5  2E                 	db	46
   370  00FFD6  2E                 	db	46
   371  00FFD7  00                 	db	0
   372  00FFD8                     STR_9:
   373  00FFD8  7C                 	db	124
   374  00FFD9  7C                 	db	124
   375  00FFDA  7C                 	db	124
   376  00FFDB  7C                 	db	124
   377  00FFDC  2E                 	db	46
   378  00FFDD  00                 	db	0
   379  00FFDE                     STR_10:
   380  00FFDE  7C                 	db	124
   381  00FFDF  7C                 	db	124
   382  00FFE0  7C                 	db	124
   383  00FFE1  7C                 	db	124
   384  00FFE2  7C                 	db	124
   385  00FFE3  00                 	db	0
   386  00FFE4                     STR_1:
   387  00FFE4  25                 	db	37
   388  00FFE5  30                 	db	48	;'0'
   389  00FFE6  32                 	db	50	;'2'
   390  00FFE7  64                 	db	100	;'d'
   391  00FFE8  00                 	db	0
   392  00FFE9                     STR_4:
   393  00FFE9  43                 	db	67	;'C'
   394  00FFEA  61                 	db	97	;'a'
   395  00FFEB  6C                 	db	108	;'l'
   396  00FFEC  64                 	db	100	;'d'
   397  00FFED  00                 	db	0
   398  00FFEE                     STR_3:
   399  00FFEE  52                 	db	82	;'R'
   400  00FFEF  65                 	db	101	;'e'
   401  00FFF0  63                 	db	99	;'c'
   402  00FFF1  65                 	db	101	;'e'
   403  00FFF2  00                 	db	0
   404  00FFF3                     STR_5:
   405  00FFF3  56                 	db	86	;'V'
   406  00FFF4  65                 	db	101	;'e'
   407  00FFF5  6E                 	db	110	;'n'
   408  00FFF6  74                 	db	116	;'t'
   409  00FFF7  00                 	db	0
   410  00FFF8                     STR_11:
   411  00FFF8  25                 	db	37
   412  00FFF9  64                 	db	100	;'d'
   413  00FFFA  00                 	db	0
   414  00FFFB                     STR_14:
   415  00FFFB  3C                 	db	60	;'<'
   416  00FFFC  00                 	db	0
   417  00FFFD                     STR_13:
   418  00FFFD  3E                 	db	62	;'>'
   419  00FFFE  00                 	db	0
   420  0000                     
   421                           ; #config settings
   422  00FFFF  00                 	db	0	; dummy byte at the end
   423  0000                     
   424                           	psect	cinit
   425  010DA6                     __pcinit:
   426                           	opt stack 0
   427  010DA6                     start_initialization:
   428                           	opt stack 0
   429  010DA6                     __initialization:
   430                           	opt stack 0
   431                           
   432                           ; Clear objects allocated to BANK0 (20 bytes)
   433  010DA6  EE00  F060         	lfsr	0,__pbssBANK0
   434  010DAA  0E14               	movlw	20
   435  010DAC                     clear_0:
   436  010DAC  6AEE               	clrf	postinc0,c
   437  010DAE  06E8               	decf	wreg,f,c
   438  010DB0  E1FD               	bnz	clear_0
   439                           
   440                           ; Clear objects allocated to COMRAM (21 bytes)
   441  010DB2  EE00  F03B         	lfsr	0,__pbssCOMRAM
   442  010DB6  0E15               	movlw	21
   443  010DB8                     clear_1:
   444  010DB8  6AEE               	clrf	postinc0,c
   445  010DBA  06E8               	decf	wreg,f,c
   446  010DBC  E1FD               	bnz	clear_1
   447  010DBE                     end_of_initialization:
   448                           	opt stack 0
   449  010DBE                     __end_of__initialization:
   450                           	opt stack 0
   451  010DBE  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   452  010DC0  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   453  010DC2  0100               	movlb	0
   454  010DC4  EF0B  F086         	goto	_main	;jump to C main() function
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           
   458                           	psect	bssCOMRAM
   459  00003B                     __pbssCOMRAM:
   460                           	opt stack 0
   461  00003B                     _outTemp:
   462                           	opt stack 0
   463  00003B                     	ds	2
   464  00003D                     _inTemp:
   465                           	opt stack 0
   466  00003D                     	ds	2
   467  00003F                     SWSPIWrite@input:
   468                           	opt stack 0
   469  00003F                     	ds	1
   470  000040                     _a:
   471                           	opt stack 0
   472  000040                     	ds	1
   473  000041                     checkInputs@leftButton_old:
   474                           	opt stack 0
   475  000041                     	ds	1
   476  000042                     _inDeb:
   477                           	opt stack 0
   478  000042                     	ds	1
   479  000043                     _cnt:
   480                           	opt stack 0
   481  000043                     	ds	1
   482  000044                     _ev:
   483                           	opt stack 0
   484  000044                     	ds	1
   485  000045                     _tick:
   486                           	opt stack 0
   487  000045                     	ds	1
   488  000046                     _setTemp:
   489                           	opt stack 0
   490  000046                     	ds	1
   491  000047                     _leftButtonEv:
   492                           	opt stack 0
   493  000047                     	ds	1
   494  000048                     _lcdBacklightLed:
   495                           	opt stack 0
   496  000048                     	ds	1
   497  000049                     _standbyLed:
   498                           	opt stack 0
   499  000049                     	ds	1
   500  00004A                     _coolElement:
   501                           	opt stack 0
   502  00004A                     	ds	1
   503  00004B                     _heatElement:
   504                           	opt stack 0
   505  00004B                     	ds	1
   506  00004C                     _levelHeat:
   507                           	opt stack 0
   508  00004C                     	ds	1
   509  00004D                     _fanSpeedHeatVent:
   510                           	opt stack 0
   511  00004D                     	ds	1
   512  00004E                     _fanSpeedCool:
   513                           	opt stack 0
   514  00004E                     	ds	1
   515  00004F                     _climaState:
   516                           	opt stack 0
   517  00004F                     	ds	1
   518                           postinc0	equ	0xFEE
   519                           wreg	equ	0xFE8
   520                           
   521                           	psect	bssBANK0
   522  000060                     __pbssBANK0:
   523                           	opt stack 0
   524  000060                     _msg:
   525                           	opt stack 0
   526  000060                     	ds	20
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           
   530                           	psect	cstackBANK0
   531  000074                     __pcstackBANK0:
   532                           	opt stack 0
   533  000074                     ??_checkInputs:
   534  000074                     ??_stateMachine:
   535                           
   536                           ; 1 bytes @ 0x0
   537  000074                     	ds	3
   538  000077                     checkInputs@adcVal:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x3
   542  000077                     	ds	2
   543  000079                     checkInputs@leftButton:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x5
   547  000079                     	ds	1
   548  00007A                     main@i:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x6
   552  00007A                     	ds	1
   553                           postinc0	equ	0xFEE
   554                           wreg	equ	0xFE8
   555                           
   556                           	psect	cstackCOMRAM
   557  000001                     __pcstackCOMRAM:
   558                           	opt stack 0
   559  000001                     ??_ISR:
   560  000001                     
   561                           ; 1 bytes @ 0x0
   562  000001                     	ds	15
   563  000010                     ??_isdigit:
   564  000010                     ?_ADCRead:
   565                           	opt stack 0
   566  000010                     ?___wmul:
   567                           	opt stack 0
   568  000010                     setSpeedFanCool@speed:
   569                           	opt stack 0
   570  000010                     setSpeedFanHeatVent@speed:
   571                           	opt stack 0
   572  000010                     setLevelHeat@level:
   573                           	opt stack 0
   574  000010                     SWSPIWrite@output:
   575                           	opt stack 0
   576  000010                     UART_putc@data:
   577                           	opt stack 0
   578  000010                     Delay10TCYx@unit:
   579                           	opt stack 0
   580  000010                     setStandbyLed@state:
   581                           	opt stack 0
   582  000010                     setLcdBacklightLed@state:
   583                           	opt stack 0
   584  000010                     setHeatElement@state:
   585                           	opt stack 0
   586  000010                     setCoolElement@state:
   587                           	opt stack 0
   588  000010                     UART_Init@x:
   589                           	opt stack 0
   590  000010                     ___wmul@multiplier:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0xF
   594  000010                     	ds	1
   595  000011                     SWSPIWrite@BitCount:
   596                           	opt stack 0
   597  000011                     _isdigit$1782:
   598                           	opt stack 0
   599  000011                     UART_puts@s:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x10
   603  000011                     	ds	1
   604  000012                     ??_ADCRead:
   605  000012                     setGPIO@value:
   606                           	opt stack 0
   607  000012                     setIODIR@dir:
   608                           	opt stack 0
   609  000012                     isdigit@c:
   610                           	opt stack 0
   611  000012                     ___wmul@multiplicand:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x11
   615  000012                     	ds	1
   616  000013                     ADCRead@ch:
   617                           	opt stack 0
   618  000013                     setGPIO@address:
   619                           	opt stack 0
   620  000013                     setIODIR@address:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x12
   624  000013                     	ds	1
   625  000014                     lcdCommand@command:
   626                           	opt stack 0
   627  000014                     LcdChar@letter:
   628                           	opt stack 0
   629  000014                     ___wmul@product:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x13
   633  000014                     	ds	1
   634  000015                     LcdGoTo@pos:
   635                           	opt stack 0
   636  000015                     LcdWriteString@s:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x14
   640  000015                     	ds	1
   641  000016                     ?___lwdiv:
   642                           	opt stack 0
   643  000016                     ___lwdiv@dividend:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x15
   647  000016                     	ds	1
   648  000017                     
   649                           ; 1 bytes @ 0x16
   650  000017                     	ds	1
   651  000018                     ___lwdiv@divisor:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x17
   655  000018                     	ds	2
   656  00001A                     ___lwdiv@counter:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x19
   660  00001A                     	ds	1
   661  00001B                     ___lwdiv@quotient:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x1A
   665  00001B                     	ds	2
   666  00001D                     ?___lwmod:
   667                           	opt stack 0
   668  00001D                     ___lwmod@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x1C
   672  00001D                     	ds	2
   673  00001F                     ___lwmod@divisor:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x1E
   677  00001F                     	ds	2
   678  000021                     ___lwmod@counter:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x20
   682  000021                     	ds	1
   683  000022                     ?_sprintf:
   684                           	opt stack 0
   685  000022                     sprintf@sp:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x21
   689  000022                     	ds	2
   690  000024                     sprintf@f:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x23
   694  000024                     	ds	8
   695  00002C                     ??_sprintf:
   696                           
   697                           ; 1 bytes @ 0x2B
   698  00002C                     	ds	4
   699  000030                     sprintf@ap:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x2F
   703  000030                     	ds	2
   704  000032                     sprintf@prec:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x31
   708  000032                     	ds	1
   709  000033                     sprintf@val:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x32
   713  000033                     	ds	2
   714  000035                     sprintf@flag:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x34
   718  000035                     	ds	1
   719  000036                     sprintf@width:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x35
   723  000036                     	ds	2
   724  000038                     sprintf@c:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x37
   728  000038                     	ds	1
   729  000039                     updateLcd@fanSpeed:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x38
   733  000039                     	ds	1
   734  00003A                     stateMachine@err:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x39
   738  00003A                     	ds	1
   739  00003B                     postinc0	equ	0xFEE
   740                           wreg	equ	0xFE8
   741                           
   742                           ; 1 bytes @ 0x3A
   743 ;;
   744 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   745 ;;
   746 ;; *************** function _main *****************
   747 ;; Defined at:
   748 ;;		line 892 in file "clima.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  i               1    6[BANK0 ] unsigned char 
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   766 ;;Total ram usage:        1 bytes
   767 ;; Hardware stack levels required when called:    7
   768 ;; This function calls:
   769 ;;		_checkInputs
   770 ;;		_init
   771 ;;		_stateMachine
   772 ;;		_updateOutputs
   773 ;; This function is called by:
   774 ;;		Startup code after reset
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           	psect	text0
   779  010C16                     __ptext0:
   780                           	opt stack 0
   781  010C16                     _main:
   782                           	opt stack 24
   783                           
   784                           ;clima.c: 894: init();
   785                           
   786                           ;incstack = 0
   787  010C16  ECD4  F084         	call	_init	;wreg free
   788                           
   789                           ;clima.c: 895: char i = 0;
   790  010C1A  0E00               	movlw	0
   791  010C1C  0100               	movlb	0	; () banked
   792  010C1E  6F7A               	movwf	main@i& (0+255),b
   793                           
   794                           ; BSR set to: 0
   795                           ;clima.c: 897: PORTJbits.RJ0 = 0;
   796  010C20  9088               	bcf	3976,0,c	;volatile
   797                           
   798                           ; BSR set to: 0
   799                           ;clima.c: 898: TRISJbits.TRISJ0 = 0;
   800  010C22  909A               	bcf	3994,0,c	;volatile
   801                           
   802                           ; BSR set to: 0
   803                           ;clima.c: 899: PORTJbits.RJ1 = 0;
   804  010C24  9288               	bcf	3976,1,c	;volatile
   805                           
   806                           ; BSR set to: 0
   807                           ;clima.c: 900: TRISJbits.TRISJ1 = 0;
   808  010C26  929A               	bcf	3994,1,c	;volatile
   809                           
   810                           ; BSR set to: 0
   811                           ;clima.c: 901: PORTJbits.RJ2 = 0;
   812  010C28  9488               	bcf	3976,2,c	;volatile
   813                           
   814                           ; BSR set to: 0
   815                           ;clima.c: 902: TRISJbits.TRISJ2 = 0;
   816  010C2A  949A               	bcf	3994,2,c	;volatile
   817                           
   818                           ; BSR set to: 0
   819                           ;clima.c: 904: TRISD = 0;
   820  010C2C  0E00               	movlw	0
   821  010C2E  6E95               	movwf	3989,c	;volatile
   822  010C30                     l3273:
   823  010C30  5044               	movf	_ev,w,c
   824  010C32  B4D8               	btfsc	status,2,c
   825  010C34  D7FD               	goto	l3273
   826                           
   827                           ;clima.c: 910: ev = 0;
   828  010C36  0E00               	movlw	0
   829  010C38  6E44               	movwf	_ev,c
   830                           
   831                           ;clima.c: 912: i++;
   832  010C3A  0100               	movlb	0	; () banked
   833  010C3C  2B7A               	incf	main@i& (0+255),f,b
   834                           
   835                           ; BSR set to: 0
   836                           ;clima.c: 913: PORTJbits.RJ2 = 1;
   837  010C3E  8488               	bsf	3976,2,c	;volatile
   838                           
   839                           ; BSR set to: 0
   840                           ;clima.c: 915: checkInputs();
   841  010C40  EC69  F084         	call	_checkInputs	;wreg free
   842                           
   843                           ;clima.c: 916: stateMachine();
   844  010C44  EC00  F080         	call	_stateMachine	;wreg free
   845                           
   846                           ;clima.c: 917: updateOutputs();
   847  010C48  ECAB  F086         	call	_updateOutputs	;wreg free
   848                           
   849                           ;clima.c: 920: leftButtonEv = 0;
   850  010C4C  0E00               	movlw	0
   851  010C4E  6E47               	movwf	_leftButtonEv,c
   852                           
   853                           ;clima.c: 922: PORTJbits.RJ2 = 0;
   854  010C50  9488               	bcf	3976,2,c	;volatile
   855  010C52  D7EE               	goto	l3273
   856  010C54                     __end_of_main:
   857                           	opt stack 0
   858                           postinc0	equ	0xFEE
   859                           wreg	equ	0xFE8
   860                           status	equ	0xFD8
   861                           
   862 ;; *************** function _updateOutputs *****************
   863 ;; Defined at:
   864 ;;		line 648 in file "clima.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;		None
   867 ;; Auto vars:     Size  Location     Type
   868 ;;		None
   869 ;; Return value:  Size  Location     Type
   870 ;;                  1    wreg      void 
   871 ;; Registers used:
   872 ;;		None
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;Total ram usage:        0 bytes
   883 ;; Hardware stack levels used:    1
   884 ;; Hardware stack levels required when called:    1
   885 ;; This function calls:
   886 ;;		Nothing
   887 ;; This function is called by:
   888 ;;		_main
   889 ;; This function uses a non-reentrant model
   890 ;;
   891                           
   892                           	psect	text1
   893  010D56                     __ptext1:
   894                           	opt stack 0
   895  010D56                     _updateOutputs:
   896                           	opt stack 29
   897                           
   898                           ;clima.c: 651: PORTDbits.RD7 = standbyLed;
   899                           
   900                           ;incstack = 0
   901  010D56  B049               	btfsc	_standbyLed,0,c
   902  010D58  D002               	bra	u2205
   903  010D5A  9E83               	bcf	3971,7,c	;volatile
   904  010D5C  D001               	bra	u2206
   905  010D5E                     u2205:
   906  010D5E  8E83               	bsf	3971,7,c	;volatile
   907  010D60                     u2206:
   908                           
   909                           ;clima.c: 654: PORTDbits.RD6 = lcdBacklightLed;
   910  010D60  B048               	btfsc	_lcdBacklightLed,0,c
   911  010D62  D002               	bra	u2215
   912  010D64  9C83               	bcf	3971,6,c	;volatile
   913  010D66  D001               	bra	u2216
   914  010D68                     u2215:
   915  010D68  8C83               	bsf	3971,6,c	;volatile
   916  010D6A                     u2216:
   917                           
   918                           ;clima.c: 657: PORTDbits.RD1 = coolElement;
   919  010D6A  B04A               	btfsc	_coolElement,0,c
   920  010D6C  D002               	bra	u2225
   921  010D6E  9283               	bcf	3971,1,c	;volatile
   922  010D70  D001               	bra	u2226
   923  010D72                     u2225:
   924  010D72  8283               	bsf	3971,1,c	;volatile
   925  010D74                     u2226:
   926                           
   927                           ;clima.c: 660: PORTDbits.RD0 = heatElement;
   928  010D74  B04B               	btfsc	_heatElement,0,c
   929  010D76  D002               	bra	u2235
   930  010D78  9083               	bcf	3971,0,c	;volatile
   931  010D7A  D001               	bra	u2236
   932  010D7C                     u2235:
   933  010D7C  8083               	bsf	3971,0,c	;volatile
   934  010D7E                     u2236:
   935  010D7E  0012               	return		;funcret
   936  010D80                     __end_of_updateOutputs:
   937                           	opt stack 0
   938                           postinc0	equ	0xFEE
   939                           wreg	equ	0xFE8
   940                           status	equ	0xFD8
   941                           
   942 ;; *************** function _stateMachine *****************
   943 ;; Defined at:
   944 ;;		line 392 in file "clima.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;		None
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  err             1   57[COMRAM] unsigned char 
   949 ;; Return value:  Size  Location     Type
   950 ;;                  1    wreg      void 
   951 ;; Registers used:
   952 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   962 ;;Total ram usage:        5 bytes
   963 ;; Hardware stack levels used:    1
   964 ;; Hardware stack levels required when called:    6
   965 ;; This function calls:
   966 ;;		_getOnOffButton
   967 ;;		_setCoolElement
   968 ;;		_setHeatElement
   969 ;;		_setLcd
   970 ;;		_setLcdBacklightLed
   971 ;;		_setLevelHeat
   972 ;;		_setSpeedFanCool
   973 ;;		_setSpeedFanHeatVent
   974 ;;		_setStandbyLed
   975 ;;		_sprintf
   976 ;;		_updateLcd
   977 ;; This function is called by:
   978 ;;		_main
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           	psect	text2
   983  010000                     __ptext2:
   984                           	opt stack 0
   985  010000                     _stateMachine:
   986                           	opt stack 24
   987                           
   988                           ;clima.c: 394: byte err;
   989                           ;clima.c: 396: ;
   990                           ;clima.c: 397: sprintf(msg, "HS:%d, HL:%d, CS:%d, ", fanSpeedHeatVent, levelHeat, fanSpe
      +                          edCool);
   991                           
   992                           ;incstack = 0
   993  010000  0E60               	movlw	low _msg
   994  010002  6E22               	movwf	sprintf@sp,c
   995  010004  0E00               	movlw	high _msg
   996  010006  6E23               	movwf	sprintf@sp+1,c
   997  010008  0E8F               	movlw	low STR_19
   998  01000A  6E24               	movwf	sprintf@f,c
   999  01000C  0EFF               	movlw	high STR_19
  1000  01000E  6E25               	movwf	sprintf@f+1,c
  1001  010010  C04D  F026         	movff	_fanSpeedHeatVent,?_sprintf+4
  1002  010014  6A27               	clrf	?_sprintf+5,c
  1003  010016  C04C  F028         	movff	_levelHeat,?_sprintf+6
  1004  01001A  6A29               	clrf	?_sprintf+7,c
  1005  01001C  C04E  F02A         	movff	_fanSpeedCool,?_sprintf+8
  1006  010020  6A2B               	clrf	?_sprintf+9,c
  1007  010022  ECA9  F081         	call	_sprintf	;wreg free
  1008                           
  1009                           ;clima.c: 398: ;
  1010                           ;clima.c: 399: ;
  1011                           ;clima.c: 401: switch (climaState)
  1012  010026  D187               	goto	l3219
  1013  010028                     l3053:
  1014                           
  1015                           ;clima.c: 404: {
  1016                           ;clima.c: 406: if (getOnOffButton())
  1017  010028  EC6C  F087         	call	_getOnOffButton	;wreg free
  1018  01002C  0900               	iorlw	0
  1019  01002E  B4D8               	btfsc	status,2,c
  1020  010030  0012               	return	
  1021                           
  1022                           ;clima.c: 407: {
  1023                           ;clima.c: 408: ;
  1024                           ;clima.c: 410: climaState = STATE_ON_VENT;
  1025  010032  0E03               	movlw	3
  1026  010034  6E4F               	movwf	_climaState,c
  1027                           
  1028                           ;clima.c: 412: setLcd();
  1029  010036  ECA9  F085         	call	_setLcd	;wreg free
  1030                           
  1031                           ;clima.c: 414: setStandbyLed(0);
  1032  01003A  0E00               	movlw	0
  1033  01003C  6E11               	movwf	setStandbyLed@state+1,c
  1034  01003E  0E00               	movlw	0
  1035  010040  6E10               	movwf	setStandbyLed@state,c
  1036  010042  EC66  F087         	call	_setStandbyLed	;wreg free
  1037                           
  1038                           ;clima.c: 416: setLcdBacklightLed(1);
  1039  010046  0E00               	movlw	0
  1040  010048  6E11               	movwf	setLcdBacklightLed@state+1,c
  1041  01004A  0E01               	movlw	1
  1042  01004C  6E10               	movwf	setLcdBacklightLed@state,c
  1043  01004E  EC60  F087         	call	_setLcdBacklightLed	;wreg free
  1044                           
  1045                           ;clima.c: 418: setSpeedFanHeatVent(1);
  1046  010052  0E01               	movlw	1
  1047  010054  EC28  F087         	call	_setSpeedFanHeatVent
  1048                           
  1049                           ;clima.c: 419: }
  1050                           ;clima.c: 420: break;
  1051  010058  0012               	return	
  1052  01005A                     l3065:
  1053                           
  1054                           ;clima.c: 423: {
  1055                           ;clima.c: 425: if (getOnOffButton())
  1056  01005A  EC6C  F087         	call	_getOnOffButton	;wreg free
  1057  01005E  0900               	iorlw	0
  1058  010060  B4D8               	btfsc	status,2,c
  1059  010062  D020               	goto	l3081
  1060                           
  1061                           ;clima.c: 426: {
  1062                           ;clima.c: 427: ;
  1063                           ;clima.c: 428: climaState = STATE_OFF;
  1064  010064  0E00               	movlw	0
  1065  010066  6E4F               	movwf	_climaState,c
  1066                           
  1067                           ;clima.c: 429: setLcd();
  1068  010068  ECA9  F085         	call	_setLcd	;wreg free
  1069                           
  1070                           ;clima.c: 432: setLcdBacklightLed(0);
  1071  01006C  0E00               	movlw	0
  1072  01006E  6E11               	movwf	setLcdBacklightLed@state+1,c
  1073  010070  0E00               	movlw	0
  1074  010072  6E10               	movwf	setLcdBacklightLed@state,c
  1075  010074  EC60  F087         	call	_setLcdBacklightLed	;wreg free
  1076                           
  1077                           ;clima.c: 434: setStandbyLed(1);
  1078  010078  0E00               	movlw	0
  1079  01007A  6E11               	movwf	setStandbyLed@state+1,c
  1080  01007C  0E01               	movlw	1
  1081  01007E  6E10               	movwf	setStandbyLed@state,c
  1082  010080  EC66  F087         	call	_setStandbyLed	;wreg free
  1083                           
  1084                           ;clima.c: 437: setCoolElement(0);
  1085  010084  0E00               	movlw	0
  1086  010086  6E11               	movwf	setCoolElement@state+1,c
  1087  010088  0E00               	movlw	0
  1088  01008A  6E10               	movwf	setCoolElement@state,c
  1089  01008C  EC63  F087         	call	_setCoolElement	;wreg free
  1090                           
  1091                           ;clima.c: 439: setHeatElement(0);
  1092  010090  0E00               	movlw	0
  1093  010092  6E11               	movwf	setHeatElement@state+1,c
  1094  010094  0E00               	movlw	0
  1095  010096  6E10               	movwf	setHeatElement@state,c
  1096  010098  EC69  F087         	call	_setHeatElement	;wreg free
  1097                           
  1098                           ;clima.c: 442: setSpeedFanCool(0);
  1099  01009C  0E00               	movlw	0
  1100  01009E  EC31  F087         	call	_setSpeedFanCool
  1101                           
  1102                           ;clima.c: 444: }
  1103  0100A2  0012               	return	
  1104  0100A4                     l3081:
  1105                           
  1106                           ;clima.c: 445: else if (inTemp < setTemp)
  1107  0100A4  5046               	movf	_setTemp,w,c
  1108  0100A6  5C3D               	subwf	_inTemp,w,c
  1109  0100A8  0E00               	movlw	0
  1110  0100AA  583E               	subwfb	_inTemp+1,w,c
  1111  0100AC  B0D8               	btfsc	status,0,c
  1112  0100AE  D01A               	goto	l3097
  1113                           
  1114                           ;clima.c: 446: {
  1115                           ;clima.c: 447: ;
  1116                           ;clima.c: 448: climaState = STATE_ON_HEAT;
  1117  0100B0  0E02               	movlw	2
  1118  0100B2  6E4F               	movwf	_climaState,c
  1119                           
  1120                           ;clima.c: 451: setCoolElement(0);
  1121  0100B4  0E00               	movlw	0
  1122  0100B6  6E11               	movwf	setCoolElement@state+1,c
  1123  0100B8  0E00               	movlw	0
  1124  0100BA  6E10               	movwf	setCoolElement@state,c
  1125  0100BC  EC63  F087         	call	_setCoolElement	;wreg free
  1126                           
  1127                           ;clima.c: 453: setHeatElement(1);
  1128  0100C0  0E00               	movlw	0
  1129  0100C2  6E11               	movwf	setHeatElement@state+1,c
  1130  0100C4  0E01               	movlw	1
  1131  0100C6  6E10               	movwf	setHeatElement@state,c
  1132  0100C8  EC69  F087         	call	_setHeatElement	;wreg free
  1133                           
  1134                           ;clima.c: 456: setSpeedFanCool(0);
  1135  0100CC  0E00               	movlw	0
  1136  0100CE  EC31  F087         	call	_setSpeedFanCool
  1137                           
  1138                           ;clima.c: 458: setSpeedFanHeatVent(1);
  1139  0100D2  0E01               	movlw	1
  1140  0100D4  EC28  F087         	call	_setSpeedFanHeatVent
  1141                           
  1142                           ;clima.c: 460: setLevelHeat(1);
  1143  0100D8  0E01               	movlw	1
  1144  0100DA  EC1F  F087         	call	_setLevelHeat
  1145                           
  1146                           ;clima.c: 463: updateLcd();
  1147  0100DE  EC02  F083         	call	_updateLcd	;wreg free
  1148                           
  1149                           ;clima.c: 464: }
  1150  0100E2  0012               	return	
  1151  0100E4                     l3097:
  1152                           
  1153                           ;clima.c: 465: else if (inTemp == setTemp)
  1154  0100E4  5046               	movf	_setTemp,w,c
  1155  0100E6  0100               	movlb	0	; () banked
  1156  0100E8  6F74               	movwf	??_stateMachine& (0+255),b
  1157  0100EA  6B75               	clrf	(??_stateMachine+1)& (0+255),b
  1158  0100EC  503D               	movf	_inTemp,w,c
  1159  0100EE  0100               	movlb	0	; () banked
  1160  0100F0  1974               	xorwf	??_stateMachine& (0+255),w,b
  1161  0100F2  E116               	bnz	l3109
  1162  0100F4  503E               	movf	_inTemp+1,w,c
  1163  0100F6  0100               	movlb	0	; () banked
  1164  0100F8  1975               	xorwf	(??_stateMachine+1)& (0+255),w,b
  1165  0100FA  A4D8               	btfss	status,2,c
  1166  0100FC  D011               	goto	l3109
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;clima.c: 466: {
  1170                           ;clima.c: 467: ;
  1171                           ;clima.c: 468: climaState = STATE_ON_VENT;
  1172  0100FE  0E03               	movlw	3
  1173  010100  6E4F               	movwf	_climaState,c
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;clima.c: 469: setCoolElement(0);
  1177  010102  0E00               	movlw	0
  1178  010104  6E11               	movwf	setCoolElement@state+1,c
  1179  010106  0E00               	movlw	0
  1180  010108  6E10               	movwf	setCoolElement@state,c
  1181  01010A  EC63  F087         	call	_setCoolElement	;wreg free
  1182                           
  1183                           ;clima.c: 472: setSpeedFanCool(0);
  1184  01010E  0E00               	movlw	0
  1185  010110  EC31  F087         	call	_setSpeedFanCool
  1186                           
  1187                           ;clima.c: 474: setSpeedFanHeatVent(1);
  1188  010114  0E01               	movlw	1
  1189  010116  EC28  F087         	call	_setSpeedFanHeatVent
  1190                           
  1191                           ;clima.c: 477: updateLcd();
  1192  01011A  EC02  F083         	call	_updateLcd	;wreg free
  1193                           
  1194                           ;clima.c: 478: }
  1195  01011E  0012               	return	
  1196  010120                     l3109:
  1197                           
  1198                           ;clima.c: 479: else
  1199                           ;clima.c: 480: {
  1200                           ;clima.c: 482: if ((inTemp - setTemp) <= 6)
  1201  010120  5046               	movf	_setTemp,w,c
  1202  010122  0100               	movlb	0	; () banked
  1203  010124  6F74               	movwf	??_stateMachine& (0+255),b
  1204  010126  6B75               	clrf	(??_stateMachine+1)& (0+255),b
  1205  010128  0100               	movlb	0	; () banked
  1206  01012A  1F74               	comf	??_stateMachine& (0+255),f,b
  1207  01012C  1F75               	comf	(??_stateMachine+1)& (0+255),f,b
  1208  01012E  4B74               	infsnz	??_stateMachine& (0+255),f,b
  1209  010130  2B75               	incf	(??_stateMachine+1)& (0+255),f,b
  1210  010132  503D               	movf	_inTemp,w,c
  1211  010134  0100               	movlb	0	; () banked
  1212  010136  2774               	addwf	??_stateMachine& (0+255),f,b
  1213  010138  503E               	movf	_inTemp+1,w,c
  1214  01013A  0100               	movlb	0	; () banked
  1215  01013C  2375               	addwfc	(??_stateMachine+1)& (0+255),f,b
  1216  01013E  0100               	movlb	0	; () banked
  1217  010140  5175               	movf	(??_stateMachine+1)& (0+255),w,b
  1218  010142  E109               	bnz	l3113
  1219  010144  0E07               	movlw	7
  1220  010146  0100               	movlb	0	; () banked
  1221  010148  5D74               	subwf	??_stateMachine& (0+255),w,b
  1222  01014A  B0D8               	btfsc	status,0,c
  1223  01014C  D004               	goto	l3113
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;clima.c: 483: err = inTemp - setTemp;
  1227  01014E  5046               	movf	_setTemp,w,c
  1228  010150  0800               	sublw	0
  1229  010152  243D               	addwf	_inTemp,w,c
  1230  010154  D001               	goto	L1
  1231  010156                     l3113:
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;clima.c: 484: else
  1235                           ;clima.c: 485: err = 6;
  1236  010156  0E06               	movlw	6
  1237  010158                     L1:
  1238  010158  6E3A               	movwf	stateMachine@err,c
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;clima.c: 488: setSpeedFanCool(err);
  1242                           
  1243                           ; BSR set to: 0
  1244  01015A  503A               	movf	stateMachine@err,w,c
  1245  01015C  EC31  F087         	call	_setSpeedFanCool
  1246                           
  1247                           ;clima.c: 490: updateLcd();
  1248  010160  EC02  F083         	call	_updateLcd	;wreg free
  1249                           
  1250                           ;clima.c: 491: }
  1251                           ;clima.c: 492: break;
  1252  010164  0012               	return	
  1253  010166                     l3119:
  1254                           
  1255                           ;clima.c: 495: {
  1256                           ;clima.c: 497: if (getOnOffButton())
  1257  010166  EC6C  F087         	call	_getOnOffButton	;wreg free
  1258  01016A  0900               	iorlw	0
  1259  01016C  B4D8               	btfsc	status,2,c
  1260  01016E  D020               	goto	l3137
  1261                           
  1262                           ;clima.c: 498: {
  1263                           ;clima.c: 499: ;
  1264                           ;clima.c: 501: climaState = STATE_OFF;
  1265  010170  0E00               	movlw	0
  1266  010172  6E4F               	movwf	_climaState,c
  1267                           
  1268                           ;clima.c: 503: setLcd();
  1269  010174  ECA9  F085         	call	_setLcd	;wreg free
  1270                           
  1271                           ;clima.c: 505: setLcdBacklightLed(0);
  1272  010178  0E00               	movlw	0
  1273  01017A  6E11               	movwf	setLcdBacklightLed@state+1,c
  1274  01017C  0E00               	movlw	0
  1275  01017E  6E10               	movwf	setLcdBacklightLed@state,c
  1276  010180  EC60  F087         	call	_setLcdBacklightLed	;wreg free
  1277                           
  1278                           ;clima.c: 507: setStandbyLed(1);
  1279  010184  0E00               	movlw	0
  1280  010186  6E11               	movwf	setStandbyLed@state+1,c
  1281  010188  0E01               	movlw	1
  1282  01018A  6E10               	movwf	setStandbyLed@state,c
  1283  01018C  EC66  F087         	call	_setStandbyLed	;wreg free
  1284                           
  1285                           ;clima.c: 510: setHeatElement(0);
  1286  010190  0E00               	movlw	0
  1287  010192  6E11               	movwf	setHeatElement@state+1,c
  1288  010194  0E00               	movlw	0
  1289  010196  6E10               	movwf	setHeatElement@state,c
  1290  010198  EC69  F087         	call	_setHeatElement	;wreg free
  1291                           
  1292                           ;clima.c: 513: setLevelHeat(0);
  1293  01019C  0E00               	movlw	0
  1294  01019E  EC1F  F087         	call	_setLevelHeat
  1295                           
  1296                           ;clima.c: 515: setSpeedFanHeatVent(0);
  1297  0101A2  0E00               	movlw	0
  1298  0101A4  EC28  F087         	call	_setSpeedFanHeatVent
  1299                           
  1300                           ;clima.c: 518: setSpeedFanCool(0);
  1301  0101A8  0E00               	movlw	0
  1302  0101AA  EC31  F087         	call	_setSpeedFanCool
  1303                           
  1304                           ;clima.c: 519: }
  1305  0101AE  0012               	return	
  1306  0101B0                     l3137:
  1307                           
  1308                           ;clima.c: 520: else if (inTemp > setTemp)
  1309  0101B0  5046               	movf	_setTemp,w,c
  1310  0101B2  0100               	movlb	0	; () banked
  1311  0101B4  6F74               	movwf	??_stateMachine& (0+255),b
  1312  0101B6  6B75               	clrf	(??_stateMachine+1)& (0+255),b
  1313  0101B8  503D               	movf	_inTemp,w,c
  1314  0101BA  0100               	movlb	0	; () banked
  1315  0101BC  5D74               	subwf	??_stateMachine& (0+255),w,b
  1316  0101BE  503E               	movf	_inTemp+1,w,c
  1317  0101C0  0100               	movlb	0	; () banked
  1318  0101C2  5975               	subwfb	(??_stateMachine+1)& (0+255),w,b
  1319  0101C4  B0D8               	btfsc	status,0,c
  1320  0101C6  D01A               	goto	l3153
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;clima.c: 521: {
  1324                           ;clima.c: 522: ;
  1325                           ;clima.c: 524: climaState = STATE_ON_COOL;
  1326  0101C8  0E01               	movlw	1
  1327  0101CA  6E4F               	movwf	_climaState,c
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;clima.c: 527: setCoolElement(1);
  1331  0101CC  0E00               	movlw	0
  1332  0101CE  6E11               	movwf	setCoolElement@state+1,c
  1333  0101D0  0E01               	movlw	1
  1334  0101D2  6E10               	movwf	setCoolElement@state,c
  1335  0101D4  EC63  F087         	call	_setCoolElement	;wreg free
  1336                           
  1337                           ;clima.c: 529: setHeatElement(0);
  1338  0101D8  0E00               	movlw	0
  1339  0101DA  6E11               	movwf	setHeatElement@state+1,c
  1340  0101DC  0E00               	movlw	0
  1341  0101DE  6E10               	movwf	setHeatElement@state,c
  1342  0101E0  EC69  F087         	call	_setHeatElement	;wreg free
  1343                           
  1344                           ;clima.c: 532: setLevelHeat(0);
  1345  0101E4  0E00               	movlw	0
  1346  0101E6  EC1F  F087         	call	_setLevelHeat
  1347                           
  1348                           ;clima.c: 534: setSpeedFanHeatVent(0);
  1349  0101EA  0E00               	movlw	0
  1350  0101EC  EC28  F087         	call	_setSpeedFanHeatVent
  1351                           
  1352                           ;clima.c: 536: setSpeedFanCool(1);
  1353  0101F0  0E01               	movlw	1
  1354  0101F2  EC31  F087         	call	_setSpeedFanCool
  1355                           
  1356                           ;clima.c: 539: updateLcd();
  1357  0101F6  EC02  F083         	call	_updateLcd	;wreg free
  1358                           
  1359                           ;clima.c: 540: }
  1360  0101FA  0012               	return	
  1361  0101FC                     l3153:
  1362                           
  1363                           ;clima.c: 541: else if (inTemp == setTemp)
  1364  0101FC  5046               	movf	_setTemp,w,c
  1365  0101FE  0100               	movlb	0	; () banked
  1366  010200  6F74               	movwf	??_stateMachine& (0+255),b
  1367  010202  6B75               	clrf	(??_stateMachine+1)& (0+255),b
  1368  010204  503D               	movf	_inTemp,w,c
  1369  010206  0100               	movlb	0	; () banked
  1370  010208  1974               	xorwf	??_stateMachine& (0+255),w,b
  1371  01020A  E116               	bnz	l3165
  1372  01020C  503E               	movf	_inTemp+1,w,c
  1373  01020E  0100               	movlb	0	; () banked
  1374  010210  1975               	xorwf	(??_stateMachine+1)& (0+255),w,b
  1375  010212  A4D8               	btfss	status,2,c
  1376  010214  D011               	goto	l3165
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;clima.c: 542: {
  1380                           ;clima.c: 543: ;
  1381                           ;clima.c: 545: climaState = STATE_ON_VENT;
  1382  010216  0E03               	movlw	3
  1383  010218  6E4F               	movwf	_climaState,c
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;clima.c: 548: setHeatElement(0);
  1387  01021A  0E00               	movlw	0
  1388  01021C  6E11               	movwf	setHeatElement@state+1,c
  1389  01021E  0E00               	movlw	0
  1390  010220  6E10               	movwf	setHeatElement@state,c
  1391  010222  EC69  F087         	call	_setHeatElement	;wreg free
  1392                           
  1393                           ;clima.c: 551: setLevelHeat(0);
  1394  010226  0E00               	movlw	0
  1395  010228  EC1F  F087         	call	_setLevelHeat
  1396                           
  1397                           ;clima.c: 553: setSpeedFanHeatVent(1);
  1398  01022C  0E01               	movlw	1
  1399  01022E  EC28  F087         	call	_setSpeedFanHeatVent
  1400                           
  1401                           ;clima.c: 556: updateLcd();
  1402  010232  EC02  F083         	call	_updateLcd	;wreg free
  1403                           
  1404                           ;clima.c: 557: }
  1405  010236  0012               	return	
  1406  010238                     l3165:
  1407                           
  1408                           ;clima.c: 558: else
  1409                           ;clima.c: 559: {
  1410                           ;clima.c: 561: if ((setTemp - inTemp) <= 6)
  1411  010238  C03D  F074         	movff	_inTemp,??_stateMachine
  1412  01023C  C03E  F075         	movff	_inTemp+1,??_stateMachine+1
  1413  010240  0100               	movlb	0	; () banked
  1414  010242  1F74               	comf	??_stateMachine& (0+255),f,b
  1415  010244  1F75               	comf	(??_stateMachine+1)& (0+255),f,b
  1416  010246  4B74               	infsnz	??_stateMachine& (0+255),f,b
  1417  010248  2B75               	incf	(??_stateMachine+1)& (0+255),f,b
  1418  01024A  5046               	movf	_setTemp,w,c
  1419  01024C  0100               	movlb	0	; () banked
  1420  01024E  6F76               	movwf	(??_stateMachine+2)& (0+255),b
  1421  010250  6B77               	clrf	(??_stateMachine+3)& (0+255),b
  1422  010252  0100               	movlb	0	; () banked
  1423  010254  5174               	movf	??_stateMachine& (0+255),w,b
  1424  010256  0100               	movlb	0	; () banked
  1425  010258  2776               	addwf	(??_stateMachine+2)& (0+255),f,b
  1426  01025A  0100               	movlb	0	; () banked
  1427  01025C  5175               	movf	(??_stateMachine+1)& (0+255),w,b
  1428  01025E  0100               	movlb	0	; () banked
  1429  010260  2377               	addwfc	(??_stateMachine+3)& (0+255),f,b
  1430  010262  0100               	movlb	0	; () banked
  1431  010264  5177               	movf	(??_stateMachine+3)& (0+255),w,b
  1432  010266  E109               	bnz	l3169
  1433  010268  0E07               	movlw	7
  1434  01026A  0100               	movlb	0	; () banked
  1435  01026C  5D76               	subwf	(??_stateMachine+2)& (0+255),w,b
  1436  01026E  B0D8               	btfsc	status,0,c
  1437  010270  D004               	goto	l3169
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;clima.c: 562: err = setTemp - inTemp;
  1441  010272  503D               	movf	_inTemp,w,c
  1442  010274  0800               	sublw	0
  1443  010276  2446               	addwf	_setTemp,w,c
  1444  010278  D001               	goto	L2
  1445  01027A                     l3169:
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;clima.c: 563: else
  1449                           ;clima.c: 564: err = 6;
  1450  01027A  0E06               	movlw	6
  1451  01027C                     L2:
  1452  01027C  6E3A               	movwf	stateMachine@err,c
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;clima.c: 567: setLevelHeat(err);
  1456                           
  1457                           ; BSR set to: 0
  1458  01027E  503A               	movf	stateMachine@err,w,c
  1459  010280  EC1F  F087         	call	_setLevelHeat
  1460                           
  1461                           ;clima.c: 569: setSpeedFanHeatVent(err);
  1462  010284  503A               	movf	stateMachine@err,w,c
  1463  010286  EC28  F087         	call	_setSpeedFanHeatVent
  1464                           
  1465                           ;clima.c: 572: updateLcd();
  1466  01028A  EC02  F083         	call	_updateLcd	;wreg free
  1467                           
  1468                           ;clima.c: 573: }
  1469                           ;clima.c: 574: break;
  1470  01028E  0012               	return	
  1471  010290                     l3177:
  1472                           
  1473                           ;clima.c: 577: {
  1474                           ;clima.c: 579: if (getOnOffButton())
  1475  010290  EC6C  F087         	call	_getOnOffButton	;wreg free
  1476  010294  0900               	iorlw	0
  1477  010296  B4D8               	btfsc	status,2,c
  1478  010298  D017               	goto	l3191
  1479                           
  1480                           ;clima.c: 580: {
  1481                           ;clima.c: 581: ;
  1482                           ;clima.c: 583: climaState = STATE_OFF;
  1483  01029A  0E00               	movlw	0
  1484  01029C  6E4F               	movwf	_climaState,c
  1485                           
  1486                           ;clima.c: 586: setLcdBacklightLed(0);
  1487  01029E  0E00               	movlw	0
  1488  0102A0  6E11               	movwf	setLcdBacklightLed@state+1,c
  1489  0102A2  0E00               	movlw	0
  1490  0102A4  6E10               	movwf	setLcdBacklightLed@state,c
  1491  0102A6  EC60  F087         	call	_setLcdBacklightLed	;wreg free
  1492                           
  1493                           ;clima.c: 589: setStandbyLed(1);
  1494  0102AA  0E00               	movlw	0
  1495  0102AC  6E11               	movwf	setStandbyLed@state+1,c
  1496  0102AE  0E01               	movlw	1
  1497  0102B0  6E10               	movwf	setStandbyLed@state,c
  1498  0102B2  EC66  F087         	call	_setStandbyLed	;wreg free
  1499                           
  1500                           ;clima.c: 592: setSpeedFanHeatVent(0);
  1501  0102B6  0E00               	movlw	0
  1502  0102B8  EC28  F087         	call	_setSpeedFanHeatVent
  1503                           
  1504                           ;clima.c: 593: setSpeedFanCool(0);
  1505  0102BC  0E00               	movlw	0
  1506  0102BE  EC31  F087         	call	_setSpeedFanCool
  1507                           
  1508                           ;clima.c: 595: setLcd();
  1509  0102C2  ECA9  F085         	call	_setLcd	;wreg free
  1510                           
  1511                           ;clima.c: 596: }
  1512  0102C6  0012               	return	
  1513  0102C8                     l3191:
  1514                           
  1515                           ;clima.c: 597: else if (inTemp < setTemp)
  1516  0102C8  5046               	movf	_setTemp,w,c
  1517  0102CA  5C3D               	subwf	_inTemp,w,c
  1518  0102CC  0E00               	movlw	0
  1519  0102CE  583E               	subwfb	_inTemp+1,w,c
  1520  0102D0  B0D8               	btfsc	status,0,c
  1521  0102D2  D011               	goto	l3203
  1522                           
  1523                           ;clima.c: 598: {
  1524                           ;clima.c: 599: ;
  1525                           ;clima.c: 601: climaState = STATE_ON_HEAT;
  1526  0102D4  0E02               	movlw	2
  1527  0102D6  6E4F               	movwf	_climaState,c
  1528                           
  1529                           ;clima.c: 604: setHeatElement(1);
  1530  0102D8  0E00               	movlw	0
  1531  0102DA  6E11               	movwf	setHeatElement@state+1,c
  1532  0102DC  0E01               	movlw	1
  1533  0102DE  6E10               	movwf	setHeatElement@state,c
  1534  0102E0  EC69  F087         	call	_setHeatElement	;wreg free
  1535                           
  1536                           ;clima.c: 607: setLevelHeat(1);
  1537  0102E4  0E01               	movlw	1
  1538  0102E6  EC1F  F087         	call	_setLevelHeat
  1539                           
  1540                           ;clima.c: 609: setSpeedFanHeatVent(1);
  1541  0102EA  0E01               	movlw	1
  1542  0102EC  EC28  F087         	call	_setSpeedFanHeatVent
  1543                           
  1544                           ;clima.c: 612: updateLcd();
  1545  0102F0  EC02  F083         	call	_updateLcd	;wreg free
  1546                           
  1547                           ;clima.c: 613: }
  1548  0102F4  0012               	return	
  1549  0102F6                     l3203:
  1550                           
  1551                           ;clima.c: 614: else if (inTemp > setTemp)
  1552  0102F6  5046               	movf	_setTemp,w,c
  1553  0102F8  0100               	movlb	0	; () banked
  1554  0102FA  6F74               	movwf	??_stateMachine& (0+255),b
  1555  0102FC  6B75               	clrf	(??_stateMachine+1)& (0+255),b
  1556  0102FE  503D               	movf	_inTemp,w,c
  1557  010300  0100               	movlb	0	; () banked
  1558  010302  5D74               	subwf	??_stateMachine& (0+255),w,b
  1559  010304  503E               	movf	_inTemp+1,w,c
  1560  010306  0100               	movlb	0	; () banked
  1561  010308  5975               	subwfb	(??_stateMachine+1)& (0+255),w,b
  1562  01030A  B0D8               	btfsc	status,0,c
  1563  01030C  D011               	goto	l3215
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;clima.c: 615: {
  1567                           ;clima.c: 616: ;
  1568                           ;clima.c: 618: climaState = STATE_ON_COOL;
  1569  01030E  0E01               	movlw	1
  1570  010310  6E4F               	movwf	_climaState,c
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;clima.c: 621: setCoolElement(1);
  1574  010312  0E00               	movlw	0
  1575  010314  6E11               	movwf	setCoolElement@state+1,c
  1576  010316  0E01               	movlw	1
  1577  010318  6E10               	movwf	setCoolElement@state,c
  1578  01031A  EC63  F087         	call	_setCoolElement	;wreg free
  1579                           
  1580                           ;clima.c: 624: setSpeedFanHeatVent(0);
  1581  01031E  0E00               	movlw	0
  1582  010320  EC28  F087         	call	_setSpeedFanHeatVent
  1583                           
  1584                           ;clima.c: 626: setSpeedFanCool(1);
  1585  010324  0E01               	movlw	1
  1586  010326  EC31  F087         	call	_setSpeedFanCool
  1587                           
  1588                           ;clima.c: 628: updateLcd();
  1589  01032A  EC02  F083         	call	_updateLcd	;wreg free
  1590                           
  1591                           ;clima.c: 629: }
  1592  01032E  0012               	return	
  1593  010330                     l3215:
  1594                           
  1595                           ;clima.c: 630: else
  1596                           ;clima.c: 631: {
  1597                           ;clima.c: 632: updateLcd();
  1598  010330  EC02  F083         	call	_updateLcd	;wreg free
  1599                           
  1600                           ;clima.c: 639: }
  1601                           ;clima.c: 640: }
  1602                           
  1603                           ;clima.c: 637: {
  1604                           ;clima.c: 638: break;
  1605                           
  1606                           ;clima.c: 635: }
  1607                           ;clima.c: 636: default:
  1608                           
  1609                           ;clima.c: 633: }
  1610                           ;clima.c: 634: break;
  1611  010334  0012               	return	
  1612  010336                     l3219:
  1613  010336  504F               	movf	_climaState,w,c
  1614                           
  1615                           ; Switch size 1, requested type "space"
  1616                           ; Number of cases is 4, Range of values is 0 to 3
  1617                           ; switch strategies available:
  1618                           ; Name         Instructions Cycles
  1619                           ; simple_byte           13     7 (average)
  1620                           ;	Chosen strategy is simple_byte
  1621  010338  0A00               	xorlw	0	; case 0
  1622  01033A  B4D8               	btfsc	status,2,c
  1623  01033C  D675               	goto	l3053
  1624  01033E  0A01               	xorlw	1	; case 1
  1625  010340  B4D8               	btfsc	status,2,c
  1626  010342  D68B               	goto	l3065
  1627  010344  0A03               	xorlw	3	; case 2
  1628  010346  B4D8               	btfsc	status,2,c
  1629  010348  D70E               	goto	l3119
  1630  01034A  0A01               	xorlw	1	; case 3
  1631  01034C  A4D8               	btfss	status,2,c
  1632  01034E  0012               	return	
  1633  010350  D79F               	goto	l3177
  1634  010352                     __end_of_stateMachine:
  1635                           	opt stack 0
  1636                           postinc0	equ	0xFEE
  1637                           wreg	equ	0xFE8
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _updateLcd *****************
  1641 ;; Defined at:
  1642 ;;		line 239 in file "clima.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  fanSpeed        1   56[COMRAM] unsigned char 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;Total ram usage:        1 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    5
  1663 ;; This function calls:
  1664 ;;		_LcdGoTo
  1665 ;;		_LcdWriteString
  1666 ;;		_sprintf
  1667 ;; This function is called by:
  1668 ;;		_stateMachine
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           	psect	text3
  1673  010604                     __ptext3:
  1674                           	opt stack 0
  1675  010604                     _updateLcd:
  1676                           	opt stack 24
  1677                           
  1678                           ;clima.c: 242: byte fanSpeed = 0;
  1679                           
  1680                           ;incstack = 0
  1681  010604  0E00               	movlw	0
  1682  010606  6E39               	movwf	updateLcd@fanSpeed,c
  1683                           
  1684                           ;clima.c: 245: if (climaState != STATE_OFF)
  1685  010608  504F               	movf	_climaState,w,c
  1686  01060A  B4D8               	btfsc	status,2,c
  1687  01060C  0012               	return	
  1688                           
  1689                           ;clima.c: 246: {
  1690                           ;clima.c: 248: sprintf(msg, "%02d", outTemp);
  1691  01060E  0E60               	movlw	low _msg
  1692  010610  6E22               	movwf	sprintf@sp,c
  1693  010612  0E00               	movlw	high _msg
  1694  010614  6E23               	movwf	sprintf@sp+1,c
  1695  010616  0EE4               	movlw	low STR_1
  1696  010618  6E24               	movwf	sprintf@f,c
  1697  01061A  0EFF               	movlw	high STR_1
  1698  01061C  6E25               	movwf	sprintf@f+1,c
  1699  01061E  C03B  F026         	movff	_outTemp,?_sprintf+4
  1700  010622  C03C  F027         	movff	_outTemp+1,?_sprintf+5
  1701  010626  ECA9  F081         	call	_sprintf	;wreg free
  1702                           
  1703                           ;clima.c: 250: LcdGoTo(0x00+4);
  1704  01062A  0E04               	movlw	4
  1705  01062C  EC52  F087         	call	_LcdGoTo
  1706                           
  1707                           ;clima.c: 251: LcdWriteString(msg);
  1708  010630  0E60               	movlw	low _msg
  1709  010632  6E15               	movwf	LcdWriteString@s,c
  1710  010634  0E00               	movlw	high _msg
  1711  010636  6E16               	movwf	LcdWriteString@s+1,c
  1712  010638  EC08  F085         	call	_LcdWriteString	;wreg free
  1713                           
  1714                           ;clima.c: 254: sprintf(msg, "%02d", inTemp);
  1715  01063C  0E60               	movlw	low _msg
  1716  01063E  6E22               	movwf	sprintf@sp,c
  1717  010640  0E00               	movlw	high _msg
  1718  010642  6E23               	movwf	sprintf@sp+1,c
  1719  010644  0EE4               	movlw	low STR_1
  1720  010646  6E24               	movwf	sprintf@f,c
  1721  010648  0EFF               	movlw	high STR_1
  1722  01064A  6E25               	movwf	sprintf@f+1,c
  1723  01064C  C03D  F026         	movff	_inTemp,?_sprintf+4
  1724  010650  C03E  F027         	movff	_inTemp+1,?_sprintf+5
  1725  010654  ECA9  F081         	call	_sprintf	;wreg free
  1726                           
  1727                           ;clima.c: 255: LcdGoTo(0x00+12);
  1728  010658  0E0C               	movlw	12
  1729  01065A  EC52  F087         	call	_LcdGoTo
  1730                           
  1731                           ;clima.c: 256: LcdWriteString(msg);
  1732  01065E  0E60               	movlw	low _msg
  1733  010660  6E15               	movwf	LcdWriteString@s,c
  1734  010662  0E00               	movlw	high _msg
  1735  010664  6E16               	movwf	LcdWriteString@s+1,c
  1736  010666  EC08  F085         	call	_LcdWriteString	;wreg free
  1737                           
  1738                           ;clima.c: 259: LcdGoTo(0x40);
  1739  01066A  0E40               	movlw	64
  1740  01066C  EC52  F087         	call	_LcdGoTo
  1741                           
  1742                           ;clima.c: 260: if (climaState == STATE_ON_COOL)
  1743  010670  044F               	decf	_climaState,w,c
  1744  010672  A4D8               	btfss	status,2,c
  1745  010674  D007               	goto	l2859
  1746                           
  1747                           ;clima.c: 261: LcdWriteString("Rece");
  1748  010676  0EEE               	movlw	low STR_3
  1749  010678  6E15               	movwf	LcdWriteString@s,c
  1750  01067A  0EFF               	movlw	high STR_3
  1751  01067C  6E16               	movwf	LcdWriteString@s+1,c
  1752  01067E  EC08  F085         	call	_LcdWriteString	;wreg free
  1753  010682  D015               	goto	l2867
  1754  010684                     l2859:
  1755                           
  1756                           ;clima.c: 262: else if (climaState == STATE_ON_HEAT)
  1757  010684  0E02               	movlw	2
  1758  010686  184F               	xorwf	_climaState,w,c
  1759  010688  A4D8               	btfss	status,2,c
  1760  01068A  D007               	goto	l2863
  1761                           
  1762                           ;clima.c: 263: LcdWriteString("Cald");
  1763  01068C  0EE9               	movlw	low STR_4
  1764  01068E  6E15               	movwf	LcdWriteString@s,c
  1765  010690  0EFF               	movlw	high STR_4
  1766  010692  6E16               	movwf	LcdWriteString@s+1,c
  1767  010694  EC08  F085         	call	_LcdWriteString	;wreg free
  1768  010698  D00A               	goto	l2867
  1769  01069A                     l2863:
  1770                           
  1771                           ;clima.c: 264: else if (climaState == STATE_ON_VENT)
  1772  01069A  0E03               	movlw	3
  1773  01069C  184F               	xorwf	_climaState,w,c
  1774  01069E  A4D8               	btfss	status,2,c
  1775  0106A0  D006               	goto	l2867
  1776                           
  1777                           ;clima.c: 265: LcdWriteString("Vent");
  1778  0106A2  0EF3               	movlw	low STR_5
  1779  0106A4  6E15               	movwf	LcdWriteString@s,c
  1780  0106A6  0EFF               	movlw	high STR_5
  1781  0106A8  6E16               	movwf	LcdWriteString@s+1,c
  1782  0106AA  EC08  F085         	call	_LcdWriteString	;wreg free
  1783  0106AE                     l2867:
  1784                           
  1785                           ;clima.c: 268: LcdGoTo(0x40+5);
  1786  0106AE  0E45               	movlw	69
  1787  0106B0  EC52  F087         	call	_LcdGoTo
  1788                           
  1789                           ;clima.c: 269: if (climaState == STATE_ON_COOL)
  1790  0106B4  044F               	decf	_climaState,w,c
  1791  0106B6  A4D8               	btfss	status,2,c
  1792  0106B8  D003               	goto	l139
  1793                           
  1794                           ;clima.c: 270: fanSpeed = fanSpeedCool;
  1795  0106BA  C04E  F039         	movff	_fanSpeedCool,updateLcd@fanSpeed
  1796  0106BE  D002               	goto	l2873
  1797  0106C0                     l139:
  1798                           
  1799                           ;clima.c: 271: else
  1800                           ;clima.c: 272: fanSpeed = fanSpeedHeatVent;
  1801  0106C0  C04D  F039         	movff	_fanSpeedHeatVent,updateLcd@fanSpeed
  1802  0106C4                     l2873:
  1803                           
  1804                           ;clima.c: 274: if (fanSpeed == 4)
  1805  0106C4  0E04               	movlw	4
  1806  0106C6  1839               	xorwf	updateLcd@fanSpeed,w,c
  1807  0106C8  A4D8               	btfss	status,2,c
  1808  0106CA  D007               	goto	l2877
  1809                           
  1810                           ;clima.c: 275: LcdWriteString("|....");
  1811  0106CC  0EC6               	movlw	low STR_6
  1812  0106CE  6E15               	movwf	LcdWriteString@s,c
  1813  0106D0  0EFF               	movlw	high STR_6
  1814  0106D2  6E16               	movwf	LcdWriteString@s+1,c
  1815  0106D4  EC08  F085         	call	_LcdWriteString	;wreg free
  1816  0106D8  D027               	goto	l2891
  1817  0106DA                     l2877:
  1818                           
  1819                           ;clima.c: 276: else if (fanSpeed == 5)
  1820  0106DA  0E05               	movlw	5
  1821  0106DC  1839               	xorwf	updateLcd@fanSpeed,w,c
  1822  0106DE  A4D8               	btfss	status,2,c
  1823  0106E0  D007               	goto	l2881
  1824                           
  1825                           ;clima.c: 277: LcdWriteString("||...");
  1826  0106E2  0ECC               	movlw	low STR_7
  1827  0106E4  6E15               	movwf	LcdWriteString@s,c
  1828  0106E6  0EFF               	movlw	high STR_7
  1829  0106E8  6E16               	movwf	LcdWriteString@s+1,c
  1830  0106EA  EC08  F085         	call	_LcdWriteString	;wreg free
  1831  0106EE  D01C               	goto	l2891
  1832  0106F0                     l2881:
  1833                           
  1834                           ;clima.c: 278: else if (fanSpeed == 6)
  1835  0106F0  0E06               	movlw	6
  1836  0106F2  1839               	xorwf	updateLcd@fanSpeed,w,c
  1837  0106F4  A4D8               	btfss	status,2,c
  1838  0106F6  D007               	goto	l2885
  1839                           
  1840                           ;clima.c: 279: LcdWriteString("|||..");
  1841  0106F8  0ED2               	movlw	low STR_8
  1842  0106FA  6E15               	movwf	LcdWriteString@s,c
  1843  0106FC  0EFF               	movlw	high STR_8
  1844  0106FE  6E16               	movwf	LcdWriteString@s+1,c
  1845  010700  EC08  F085         	call	_LcdWriteString	;wreg free
  1846  010704  D011               	goto	l2891
  1847  010706                     l2885:
  1848                           
  1849                           ;clima.c: 280: else if (fanSpeed == 7)
  1850  010706  0E07               	movlw	7
  1851  010708  1839               	xorwf	updateLcd@fanSpeed,w,c
  1852  01070A  A4D8               	btfss	status,2,c
  1853  01070C  D007               	goto	l2889
  1854                           
  1855                           ;clima.c: 281: LcdWriteString("||||.");
  1856  01070E  0ED8               	movlw	low STR_9
  1857  010710  6E15               	movwf	LcdWriteString@s,c
  1858  010712  0EFF               	movlw	high STR_9
  1859  010714  6E16               	movwf	LcdWriteString@s+1,c
  1860  010716  EC08  F085         	call	_LcdWriteString	;wreg free
  1861  01071A  D006               	goto	l2891
  1862  01071C                     l2889:
  1863                           
  1864                           ;clima.c: 282: else
  1865                           ;clima.c: 283: LcdWriteString("|||||");
  1866  01071C  0EDE               	movlw	low STR_10
  1867  01071E  6E15               	movwf	LcdWriteString@s,c
  1868  010720  0EFF               	movlw	high STR_10
  1869  010722  6E16               	movwf	LcdWriteString@s+1,c
  1870  010724  EC08  F085         	call	_LcdWriteString	;wreg free
  1871  010728                     l2891:
  1872                           
  1873                           ;clima.c: 286: sprintf(msg, "%d", setTemp);
  1874  010728  0E60               	movlw	low _msg
  1875  01072A  6E22               	movwf	sprintf@sp,c
  1876  01072C  0E00               	movlw	high _msg
  1877  01072E  6E23               	movwf	sprintf@sp+1,c
  1878  010730  0EF8               	movlw	low STR_11
  1879  010732  6E24               	movwf	sprintf@f,c
  1880  010734  0EFF               	movlw	high STR_11
  1881  010736  6E25               	movwf	sprintf@f+1,c
  1882  010738  C046  F026         	movff	_setTemp,?_sprintf+4
  1883  01073C  6A27               	clrf	?_sprintf+5,c
  1884  01073E  ECA9  F081         	call	_sprintf	;wreg free
  1885                           
  1886                           ;clima.c: 287: LcdGoTo(0x40+12);
  1887  010742  0E4C               	movlw	76
  1888  010744  EC52  F087         	call	_LcdGoTo
  1889                           
  1890                           ;clima.c: 288: LcdWriteString(msg);
  1891  010748  0E60               	movlw	low _msg
  1892  01074A  6E15               	movwf	LcdWriteString@s,c
  1893  01074C  0E00               	movlw	high _msg
  1894  01074E  6E16               	movwf	LcdWriteString@s+1,c
  1895  010750  EC08  F085         	call	_LcdWriteString	;wreg free
  1896                           
  1897                           ;clima.c: 290: if (setTemp == 21)
  1898  010754  0E15               	movlw	21
  1899  010756  1846               	xorwf	_setTemp,w,c
  1900  010758  A4D8               	btfss	status,2,c
  1901  01075A  D013               	goto	l2905
  1902                           
  1903                           ;clima.c: 291: {
  1904                           ;clima.c: 292: LcdGoTo(0x40+11);
  1905  01075C  0E4B               	movlw	75
  1906  01075E  EC52  F087         	call	_LcdGoTo
  1907                           
  1908                           ;clima.c: 293: LcdWriteString(" ");
  1909  010762  0EA3               	movlw	low (STR_19+20)
  1910  010764  6E15               	movwf	LcdWriteString@s,c
  1911  010766  0EFF               	movlw	high (STR_19+20)
  1912  010768  6E16               	movwf	LcdWriteString@s+1,c
  1913  01076A  EC08  F085         	call	_LcdWriteString	;wreg free
  1914                           
  1915                           ;clima.c: 294: LcdGoTo(0x40+15);
  1916  01076E  0E4F               	movlw	79
  1917  010770  EC52  F087         	call	_LcdGoTo
  1918                           
  1919                           ;clima.c: 295: LcdWriteString(">");
  1920  010774  0EFD               	movlw	low STR_13
  1921  010776  6E15               	movwf	LcdWriteString@s,c
  1922  010778  0EFF               	movlw	high STR_13
  1923  01077A  6E16               	movwf	LcdWriteString@s+1,c
  1924  01077C  EC08  F085         	call	_LcdWriteString	;wreg free
  1925                           
  1926                           ;clima.c: 296: }
  1927  010780  0012               	return	
  1928  010782                     l2905:
  1929                           
  1930                           ;clima.c: 297: else if (setTemp == 21+15)
  1931  010782  0E24               	movlw	36
  1932  010784  1846               	xorwf	_setTemp,w,c
  1933  010786  A4D8               	btfss	status,2,c
  1934  010788  D013               	goto	l2913
  1935                           
  1936                           ;clima.c: 298: {
  1937                           ;clima.c: 299: LcdGoTo(0x40+11);
  1938  01078A  0E4B               	movlw	75
  1939  01078C  EC52  F087         	call	_LcdGoTo
  1940                           
  1941                           ;clima.c: 300: LcdWriteString("<");
  1942  010790  0EFB               	movlw	low STR_14
  1943  010792  6E15               	movwf	LcdWriteString@s,c
  1944  010794  0EFF               	movlw	high STR_14
  1945  010796  6E16               	movwf	LcdWriteString@s+1,c
  1946  010798  EC08  F085         	call	_LcdWriteString	;wreg free
  1947                           
  1948                           ;clima.c: 301: LcdGoTo(0x40+15);
  1949  01079C  0E4F               	movlw	79
  1950  01079E  EC52  F087         	call	_LcdGoTo
  1951                           
  1952                           ;clima.c: 302: LcdWriteString(" ");
  1953  0107A2  0EA3               	movlw	low (STR_19+20)
  1954  0107A4  6E15               	movwf	LcdWriteString@s,c
  1955  0107A6  0EFF               	movlw	high (STR_19+20)
  1956  0107A8  6E16               	movwf	LcdWriteString@s+1,c
  1957  0107AA  EC08  F085         	call	_LcdWriteString	;wreg free
  1958                           
  1959                           ;clima.c: 303: }
  1960  0107AE  0012               	return	
  1961  0107B0                     l2913:
  1962                           
  1963                           ;clima.c: 304: else
  1964                           ;clima.c: 305: {
  1965                           ;clima.c: 306: LcdGoTo(0x40+11);
  1966  0107B0  0E4B               	movlw	75
  1967  0107B2  EC52  F087         	call	_LcdGoTo
  1968                           
  1969                           ;clima.c: 307: LcdWriteString("<");
  1970  0107B6  0EFB               	movlw	low STR_14
  1971  0107B8  6E15               	movwf	LcdWriteString@s,c
  1972  0107BA  0EFF               	movlw	high STR_14
  1973  0107BC  6E16               	movwf	LcdWriteString@s+1,c
  1974  0107BE  EC08  F085         	call	_LcdWriteString	;wreg free
  1975                           
  1976                           ;clima.c: 308: LcdGoTo(0x40+15);
  1977  0107C2  0E4F               	movlw	79
  1978  0107C4  EC52  F087         	call	_LcdGoTo
  1979                           
  1980                           ;clima.c: 309: LcdWriteString(">");
  1981  0107C8  0EFD               	movlw	low STR_13
  1982  0107CA  6E15               	movwf	LcdWriteString@s,c
  1983  0107CC  0EFF               	movlw	high STR_13
  1984  0107CE  6E16               	movwf	LcdWriteString@s+1,c
  1985  0107D0  EC08  F085         	call	_LcdWriteString	;wreg free
  1986  0107D4  0012               	return	
  1987  0107D6                     __end_of_updateLcd:
  1988                           	opt stack 0
  1989                           postinc0	equ	0xFEE
  1990                           wreg	equ	0xFE8
  1991                           status	equ	0xFD8
  1992                           
  1993 ;; *************** function _setLevelHeat *****************
  1994 ;; Defined at:
  1995 ;;		line 197 in file "clima.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  level           1    wreg     unsigned char 
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  level           1   15[COMRAM] unsigned char 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      void 
  2002 ;; Registers used:
  2003 ;;		wreg, status,2, status,0
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;Total ram usage:        1 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; Hardware stack levels required when called:    1
  2016 ;; This function calls:
  2017 ;;		Nothing
  2018 ;; This function is called by:
  2019 ;;		_stateMachine
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           	psect	text4
  2024  010E3E                     __ptext4:
  2025                           	opt stack 0
  2026  010E3E                     _setLevelHeat:
  2027                           	opt stack 28
  2028                           
  2029                           ;incstack = 0
  2030                           ;setLevelHeat@level stored from wreg
  2031  010E3E  6E10               	movwf	setLevelHeat@level,c
  2032                           
  2033                           ;clima.c: 199: if (level)
  2034  010E40  5010               	movf	setLevelHeat@level,w,c
  2035  010E42  B4D8               	btfsc	status,2,c
  2036  010E44  D002               	goto	l2829
  2037                           
  2038                           ;clima.c: 200: level += 3;
  2039  010E46  0E03               	movlw	3
  2040  010E48  2610               	addwf	setLevelHeat@level,f,c
  2041  010E4A                     l2829:
  2042                           
  2043                           ;clima.c: 201: levelHeat = level;
  2044  010E4A  C010  F04C         	movff	setLevelHeat@level,_levelHeat
  2045  010E4E  0012               	return		;funcret
  2046  010E50                     __end_of_setLevelHeat:
  2047                           	opt stack 0
  2048                           postinc0	equ	0xFEE
  2049                           wreg	equ	0xFE8
  2050                           status	equ	0xFD8
  2051                           
  2052 ;; *************** function _setLcdBacklightLed *****************
  2053 ;; Defined at:
  2054 ;;		line 145 in file "clima.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  state           2   15[COMRAM] unsigned int 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;		None
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  1    wreg      void 
  2061 ;; Registers used:
  2062 ;;		None
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;Total ram usage:        2 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:    1
  2075 ;; This function calls:
  2076 ;;		Nothing
  2077 ;; This function is called by:
  2078 ;;		_stateMachine
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text5
  2083  010EC0                     __ptext5:
  2084                           	opt stack 0
  2085  010EC0                     _setLcdBacklightLed:
  2086                           	opt stack 28
  2087                           
  2088                           ;clima.c: 147: lcdBacklightLed = state;
  2089                           
  2090                           ;incstack = 0
  2091  010EC0  C010  F048         	movff	setLcdBacklightLed@state,_lcdBacklightLed
  2092  010EC4  0012               	return		;funcret
  2093  010EC6                     __end_of_setLcdBacklightLed:
  2094                           	opt stack 0
  2095                           postinc0	equ	0xFEE
  2096                           wreg	equ	0xFE8
  2097                           status	equ	0xFD8
  2098                           
  2099 ;; *************** function _setCoolElement *****************
  2100 ;; Defined at:
  2101 ;;		line 165 in file "clima.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;  state           2   15[COMRAM] unsigned int 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		None
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2115 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;Total ram usage:        2 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    1
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		_stateMachine
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text6
  2130  010EC6                     __ptext6:
  2131                           	opt stack 0
  2132  010EC6                     _setCoolElement:
  2133                           	opt stack 28
  2134                           
  2135                           ;clima.c: 167: coolElement = state;
  2136                           
  2137                           ;incstack = 0
  2138  010EC6  C010  F04A         	movff	setCoolElement@state,_coolElement
  2139  010ECA  0012               	return		;funcret
  2140  010ECC                     __end_of_setCoolElement:
  2141                           	opt stack 0
  2142                           postinc0	equ	0xFEE
  2143                           wreg	equ	0xFE8
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _getOnOffButton *****************
  2147 ;; Defined at:
  2148 ;;		line 209 in file "clima.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;		None
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;		None
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      unsigned char 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2166 ;;Total ram usage:        0 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    1
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_stateMachine
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text7
  2177  010ED8                     __ptext7:
  2178                           	opt stack 0
  2179  010ED8                     _getOnOffButton:
  2180                           	opt stack 28
  2181                           
  2182                           ;clima.c: 211: return leftButtonEv;
  2183                           
  2184                           ;incstack = 0
  2185  010ED8  5047               	movf	_leftButtonEv,w,c
  2186  010EDA  0012               	return	
  2187  010EDC                     __end_of_getOnOffButton:
  2188                           	opt stack 0
  2189                           postinc0	equ	0xFEE
  2190                           wreg	equ	0xFE8
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _init *****************
  2194 ;; Defined at:
  2195 ;;		line 842 in file "clima.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;		None
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;		None
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;Total ram usage:        0 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    6
  2216 ;; This function calls:
  2217 ;;		_LcdInit
  2218 ;;		_UART_Init
  2219 ;;		_UART_puts
  2220 ;;		_initAdc
  2221 ;;		_initButtons
  2222 ;;		_initPwm
  2223 ;;		_initTmr
  2224 ;;		_setHeatElement
  2225 ;;		_setLcd
  2226 ;;		_setSpeedFanCool
  2227 ;;		_setSpeedFanHeatVent
  2228 ;;		_setStandbyLed
  2229 ;; This function is called by:
  2230 ;;		_main
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text8
  2235  0109A8                     __ptext8:
  2236                           	opt stack 0
  2237  0109A8                     _init:
  2238                           	opt stack 24
  2239                           
  2240                           ;clima.c: 844: TRISD=0;
  2241                           
  2242                           ;incstack = 0
  2243  0109A8  0E00               	movlw	0
  2244  0109AA  6E95               	movwf	3989,c	;volatile
  2245                           
  2246                           ;clima.c: 845: PORTD=0;
  2247  0109AC  0E00               	movlw	0
  2248  0109AE  6E83               	movwf	3971,c	;volatile
  2249                           
  2250                           ;clima.c: 846: MEMCONbits.EBDIS=1;
  2251  0109B0  8E9C               	bsf	3996,7,c	;volatile
  2252                           
  2253                           ;clima.c: 849: UART_Init();
  2254  0109B2  EC11  F087         	call	_UART_Init	;wreg free
  2255                           
  2256                           ;clima.c: 850: UART_puts((char *)"\n\rInitializing...\n\r");
  2257  0109B6  0EA5               	movlw	low STR_20
  2258  0109B8  6E11               	movwf	UART_puts@s,c
  2259  0109BA  0EFF               	movlw	high STR_20
  2260  0109BC  6E12               	movwf	UART_puts@s+1,c
  2261  0109BE  EC64  F086         	call	_UART_puts	;wreg free
  2262                           
  2263                           ;clima.c: 853: initButtons();
  2264  0109C2  EC6E  F087         	call	_initButtons	;wreg free
  2265                           
  2266                           ;clima.c: 856: initAdc();
  2267  0109C6  EC2A  F086         	call	_initAdc	;wreg free
  2268                           
  2269                           ;clima.c: 859: initPwm();
  2270  0109CA  EC58  F087         	call	_initPwm	;wreg free
  2271                           
  2272                           ;clima.c: 862: initTmr();
  2273  0109CE  ECEB  F085         	call	_initTmr	;wreg free
  2274                           
  2275                           ;clima.c: 865: LcdInit();
  2276  0109D2  EC83  F085         	call	_LcdInit	;wreg free
  2277                           
  2278                           ;clima.c: 868: ;
  2279                           ;clima.c: 869: climaState = STATE_OFF;
  2280  0109D6  0E00               	movlw	0
  2281  0109D8  6E4F               	movwf	_climaState,c
  2282                           
  2283                           ;clima.c: 870: setLcd();
  2284  0109DA  ECA9  F085         	call	_setLcd	;wreg free
  2285                           
  2286                           ;clima.c: 873: setStandbyLed(1);
  2287  0109DE  0E00               	movlw	0
  2288  0109E0  6E11               	movwf	setStandbyLed@state+1,c
  2289  0109E2  0E01               	movlw	1
  2290  0109E4  6E10               	movwf	setStandbyLed@state,c
  2291  0109E6  EC66  F087         	call	_setStandbyLed	;wreg free
  2292                           
  2293                           ;clima.c: 875: setHeatElement(0);
  2294  0109EA  0E00               	movlw	0
  2295  0109EC  6E11               	movwf	setHeatElement@state+1,c
  2296  0109EE  0E00               	movlw	0
  2297  0109F0  6E10               	movwf	setHeatElement@state,c
  2298  0109F2  EC69  F087         	call	_setHeatElement	;wreg free
  2299                           
  2300                           ;clima.c: 878: setSpeedFanCool(0);
  2301  0109F6  0E00               	movlw	0
  2302  0109F8  EC31  F087         	call	_setSpeedFanCool
  2303                           
  2304                           ;clima.c: 880: setSpeedFanHeatVent(0);
  2305  0109FC  0E00               	movlw	0
  2306  0109FE  EC28  F087         	call	_setSpeedFanHeatVent
  2307                           
  2308                           ;clima.c: 882: setHeatElement(0);
  2309  010A02  0E00               	movlw	0
  2310  010A04  6E11               	movwf	setHeatElement@state+1,c
  2311  010A06  0E00               	movlw	0
  2312  010A08  6E10               	movwf	setHeatElement@state,c
  2313  010A0A  EC69  F087         	call	_setHeatElement	;wreg free
  2314  010A0E  0012               	return		;funcret
  2315  010A10                     __end_of_init:
  2316                           	opt stack 0
  2317                           postinc0	equ	0xFEE
  2318                           wreg	equ	0xFE8
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _setStandbyLed *****************
  2322 ;; Defined at:
  2323 ;;		line 135 in file "clima.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  state           2   15[COMRAM] unsigned int 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		None
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2337 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;Total ram usage:        2 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    1
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_stateMachine
  2348 ;;		_init
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text9
  2353  010ECC                     __ptext9:
  2354                           	opt stack 0
  2355  010ECC                     _setStandbyLed:
  2356                           	opt stack 28
  2357                           
  2358                           ;clima.c: 137: standbyLed = state;
  2359                           
  2360                           ;incstack = 0
  2361  010ECC  C010  F049         	movff	setStandbyLed@state,_standbyLed
  2362  010ED0  0012               	return		;funcret
  2363  010ED2                     __end_of_setStandbyLed:
  2364                           	opt stack 0
  2365                           postinc0	equ	0xFEE
  2366                           wreg	equ	0xFE8
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _setSpeedFanHeatVent *****************
  2370 ;; Defined at:
  2371 ;;		line 186 in file "clima.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  speed           1    wreg     unsigned char 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  speed           1   15[COMRAM] unsigned char 
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      void 
  2378 ;; Registers used:
  2379 ;;		wreg, status,2, status,0
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;Total ram usage:        1 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    1
  2392 ;; This function calls:
  2393 ;;		Nothing
  2394 ;; This function is called by:
  2395 ;;		_stateMachine
  2396 ;;		_init
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text10
  2401  010E50                     __ptext10:
  2402                           	opt stack 0
  2403  010E50                     _setSpeedFanHeatVent:
  2404                           	opt stack 28
  2405                           
  2406                           ;incstack = 0
  2407                           ;setSpeedFanHeatVent@speed stored from wreg
  2408  010E50  6E10               	movwf	setSpeedFanHeatVent@speed,c
  2409                           
  2410                           ;clima.c: 188: if (speed)
  2411  010E52  5010               	movf	setSpeedFanHeatVent@speed,w,c
  2412  010E54  B4D8               	btfsc	status,2,c
  2413  010E56  D002               	goto	l2823
  2414                           
  2415                           ;clima.c: 189: speed += 3;
  2416  010E58  0E03               	movlw	3
  2417  010E5A  2610               	addwf	setSpeedFanHeatVent@speed,f,c
  2418  010E5C                     l2823:
  2419                           
  2420                           ;clima.c: 190: fanSpeedHeatVent = speed;
  2421  010E5C  C010  F04D         	movff	setSpeedFanHeatVent@speed,_fanSpeedHeatVent
  2422  010E60  0012               	return		;funcret
  2423  010E62                     __end_of_setSpeedFanHeatVent:
  2424                           	opt stack 0
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           status	equ	0xFD8
  2428                           
  2429 ;; *************** function _setSpeedFanCool *****************
  2430 ;; Defined at:
  2431 ;;		line 175 in file "clima.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;  speed           1    wreg     unsigned char 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  speed           1   15[COMRAM] unsigned char 
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  1    wreg      void 
  2438 ;; Registers used:
  2439 ;;		wreg, status,2, status,0
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;Total ram usage:        1 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; Hardware stack levels required when called:    1
  2452 ;; This function calls:
  2453 ;;		Nothing
  2454 ;; This function is called by:
  2455 ;;		_stateMachine
  2456 ;;		_init
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text11
  2461  010E62                     __ptext11:
  2462                           	opt stack 0
  2463  010E62                     _setSpeedFanCool:
  2464                           	opt stack 28
  2465                           
  2466                           ;incstack = 0
  2467                           ;setSpeedFanCool@speed stored from wreg
  2468  010E62  6E10               	movwf	setSpeedFanCool@speed,c
  2469                           
  2470                           ;clima.c: 177: if (speed)
  2471  010E64  5010               	movf	setSpeedFanCool@speed,w,c
  2472  010E66  B4D8               	btfsc	status,2,c
  2473  010E68  D002               	goto	l2817
  2474                           
  2475                           ;clima.c: 178: speed += 3;
  2476  010E6A  0E03               	movlw	3
  2477  010E6C  2610               	addwf	setSpeedFanCool@speed,f,c
  2478  010E6E                     l2817:
  2479                           
  2480                           ;clima.c: 179: fanSpeedCool = speed;
  2481  010E6E  C010  F04E         	movff	setSpeedFanCool@speed,_fanSpeedCool
  2482  010E72  0012               	return		;funcret
  2483  010E74                     __end_of_setSpeedFanCool:
  2484                           	opt stack 0
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _setLcd *****************
  2490 ;; Defined at:
  2491 ;;		line 225 in file "clima.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;		None
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      void 
  2498 ;; Registers used:
  2499 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;Total ram usage:        0 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:    5
  2512 ;; This function calls:
  2513 ;;		_LcdClear
  2514 ;;		_LcdGoTo
  2515 ;;		_LcdWriteString
  2516 ;; This function is called by:
  2517 ;;		_stateMachine
  2518 ;;		_init
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text12
  2523  010B52                     __ptext12:
  2524                           	opt stack 0
  2525  010B52                     _setLcd:
  2526                           	opt stack 24
  2527                           
  2528                           ;clima.c: 227: LcdClear();
  2529                           
  2530                           ;incstack = 0
  2531  010B52  EC5C  F087         	call	_LcdClear	;wreg free
  2532                           
  2533                           ;clima.c: 228: LcdGoTo(0);
  2534  010B56  0E00               	movlw	0
  2535  010B58  EC52  F087         	call	_LcdGoTo
  2536                           
  2537                           ;clima.c: 229: LcdWriteString(LcdLines[climaState][0]);
  2538  010B5C  504F               	movf	_climaState,w,c
  2539  010B5E  0D24               	mullw	36
  2540  010B60  0EFF               	movlw	low _LcdLines
  2541  010B62  24F3               	addwf	prodl,w,c
  2542  010B64  6E15               	movwf	LcdWriteString@s,c
  2543  010B66  0EFE               	movlw	high _LcdLines
  2544  010B68  20F4               	addwfc	prodh,w,c
  2545  010B6A  6E16               	movwf	LcdWriteString@s+1,c
  2546  010B6C  EC08  F085         	call	_LcdWriteString	;wreg free
  2547                           
  2548                           ;clima.c: 230: LcdGoTo(0x40);
  2549  010B70  0E40               	movlw	64
  2550  010B72  EC52  F087         	call	_LcdGoTo
  2551                           
  2552                           ;clima.c: 231: LcdWriteString(LcdLines[climaState][1]);
  2553  010B76  504F               	movf	_climaState,w,c
  2554  010B78  0D24               	mullw	36
  2555  010B7A  0E12               	movlw	18
  2556  010B7C  26F3               	addwf	prodl,f,c
  2557  010B7E  0E00               	movlw	0
  2558  010B80  22F4               	addwfc	prodh,f,c
  2559  010B82  0EFF               	movlw	low _LcdLines
  2560  010B84  24F3               	addwf	prodl,w,c
  2561  010B86  6E15               	movwf	LcdWriteString@s,c
  2562  010B88  0EFE               	movlw	high _LcdLines
  2563  010B8A  20F4               	addwfc	prodh,w,c
  2564  010B8C  6E16               	movwf	LcdWriteString@s+1,c
  2565  010B8E  EC08  F085         	call	_LcdWriteString	;wreg free
  2566  010B92  0012               	return		;funcret
  2567  010B94                     __end_of_setLcd:
  2568                           	opt stack 0
  2569                           prodh	equ	0xFF4
  2570                           prodl	equ	0xFF3
  2571                           postinc0	equ	0xFEE
  2572                           wreg	equ	0xFE8
  2573                           status	equ	0xFD8
  2574                           
  2575 ;; *************** function _LcdGoTo *****************
  2576 ;; Defined at:
  2577 ;;		line 176 in file "lcd.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  pos             1    wreg     unsigned char 
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;  pos             1   20[COMRAM] unsigned char 
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      void 
  2584 ;; Registers used:
  2585 ;;		wreg, status,2, status,0, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;Total ram usage:        1 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    4
  2598 ;; This function calls:
  2599 ;;		_lcdCommand
  2600 ;; This function is called by:
  2601 ;;		_setLcd
  2602 ;;		_updateLcd
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	text13
  2607  010EA4                     __ptext13:
  2608                           	opt stack 0
  2609  010EA4                     _LcdGoTo:
  2610                           	opt stack 24
  2611                           
  2612                           ;incstack = 0
  2613                           ;LcdGoTo@pos stored from wreg
  2614  010EA4  6E15               	movwf	LcdGoTo@pos,c
  2615                           
  2616                           ;lcd.c: 179: lcdCommand(0x80+pos);
  2617  010EA6  5015               	movf	LcdGoTo@pos,w,c
  2618  010EA8  0F80               	addlw	128
  2619  010EAA  EC95  F086         	call	_lcdCommand
  2620  010EAE  0012               	return		;funcret
  2621  010EB0                     __end_of_LcdGoTo:
  2622                           	opt stack 0
  2623                           prodh	equ	0xFF4
  2624                           prodl	equ	0xFF3
  2625                           postinc0	equ	0xFEE
  2626                           wreg	equ	0xFE8
  2627                           status	equ	0xFD8
  2628                           
  2629 ;; *************** function _setHeatElement *****************
  2630 ;; Defined at:
  2631 ;;		line 155 in file "clima.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  state           2   15[COMRAM] unsigned int 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		None
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;Total ram usage:        2 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    1
  2652 ;; This function calls:
  2653 ;;		Nothing
  2654 ;; This function is called by:
  2655 ;;		_stateMachine
  2656 ;;		_init
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text14
  2661  010ED2                     __ptext14:
  2662                           	opt stack 0
  2663  010ED2                     _setHeatElement:
  2664                           	opt stack 28
  2665                           
  2666                           ;clima.c: 157: heatElement = state;
  2667                           
  2668                           ;incstack = 0
  2669  010ED2  C010  F04B         	movff	setHeatElement@state,_heatElement
  2670  010ED6  0012               	return		;funcret
  2671  010ED8                     __end_of_setHeatElement:
  2672                           	opt stack 0
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           postinc0	equ	0xFEE
  2676                           wreg	equ	0xFE8
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _initTmr *****************
  2680 ;; Defined at:
  2681 ;;		line 745 in file "clima.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;		None
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  1    wreg      void 
  2688 ;; Registers used:
  2689 ;;		wreg, status,2
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;Total ram usage:        0 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    1
  2702 ;; This function calls:
  2703 ;;		Nothing
  2704 ;; This function is called by:
  2705 ;;		_init
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text15
  2710  010BD6                     __ptext15:
  2711                           	opt stack 0
  2712  010BD6                     _initTmr:
  2713                           	opt stack 28
  2714                           
  2715                           ;clima.c: 747: PORTJbits.RJ6 = 0;
  2716                           
  2717                           ;incstack = 0
  2718  010BD6  9C88               	bcf	3976,6,c	;volatile
  2719                           
  2720                           ;clima.c: 748: PORTJbits.RJ7 = 0;
  2721  010BD8  9E88               	bcf	3976,7,c	;volatile
  2722                           
  2723                           ;clima.c: 749: TRISJbits.TRISJ7 = 0;
  2724  010BDA  9E9A               	bcf	3994,7,c	;volatile
  2725                           
  2726                           ;clima.c: 750: TRISJbits.TRISJ6 = 0;
  2727  010BDC  9C9A               	bcf	3994,6,c	;volatile
  2728                           
  2729                           ;clima.c: 752: PORTDbits.RD3 = 0;
  2730  010BDE  9683               	bcf	3971,3,c	;volatile
  2731                           
  2732                           ;clima.c: 753: PORTDbits.RD4 = 0;
  2733  010BE0  9883               	bcf	3971,4,c	;volatile
  2734                           
  2735                           ;clima.c: 754: PORTDbits.RD5 = 0;
  2736  010BE2  9A83               	bcf	3971,5,c	;volatile
  2737                           
  2738                           ;clima.c: 755: TRISDbits.TRISD3 = 0;
  2739  010BE4  9695               	bcf	3989,3,c	;volatile
  2740                           
  2741                           ;clima.c: 756: TRISDbits.TRISD4 = 0;
  2742  010BE6  9895               	bcf	3989,4,c	;volatile
  2743                           
  2744                           ;clima.c: 757: TRISDbits.TRISD5 = 0;
  2745  010BE8  9A95               	bcf	3989,5,c	;volatile
  2746                           
  2747                           ;clima.c: 761: TMR0 = 0;
  2748  010BEA  0E00               	movlw	0
  2749  010BEC  6ED7               	movwf	4055,c	;volatile
  2750  010BEE  0E00               	movlw	0
  2751  010BF0  6ED6               	movwf	4054,c	;volatile
  2752                           
  2753                           ;clima.c: 762: T0CON = 0;
  2754  010BF2  0E00               	movlw	0
  2755  010BF4  6ED5               	movwf	4053,c	;volatile
  2756                           
  2757                           ;clima.c: 763: T0CONbits.TMR0ON = 0;
  2758  010BF6  9ED5               	bcf	4053,7,c	;volatile
  2759                           
  2760                           ;clima.c: 764: T0CONbits.T08BIT = 0;
  2761  010BF8  9CD5               	bcf	4053,6,c	;volatile
  2762                           
  2763                           ;clima.c: 765: T0CONbits.T0CS = 0;
  2764  010BFA  9AD5               	bcf	4053,5,c	;volatile
  2765                           
  2766                           ;clima.c: 766: T0CONbits.T0SE = 0;
  2767  010BFC  98D5               	bcf	4053,4,c	;volatile
  2768                           
  2769                           ;clima.c: 767: T0CONbits.PSA = 0;
  2770  010BFE  96D5               	bcf	4053,3,c	;volatile
  2771                           
  2772                           ;clima.c: 768: T0CONbits.T0PS = 0;
  2773  010C00  90D5               	bcf	4053,0,c	;volatile
  2774  010C02  92D5               	bcf	4053,1,c	;volatile
  2775  010C04  94D5               	bcf	4053,2,c	;volatile
  2776                           
  2777                           ;clima.c: 774: TMR1H = 0xFB;
  2778  010C06  0EFB               	movlw	251
  2779  010C08  6ECF               	movwf	4047,c	;volatile
  2780                           
  2781                           ;clima.c: 775: TMR1L = 0x1D;
  2782  010C0A  0E1D               	movlw	29
  2783  010C0C  6ECE               	movwf	4046,c	;volatile
  2784                           
  2785                           ;clima.c: 776: T0IE = 1;
  2786  010C0E  8AF2               	bsf	intcon,5,c	;volatile
  2787                           
  2788                           ;clima.c: 777: GIE = 1;
  2789  010C10  8EF2               	bsf	intcon,7,c	;volatile
  2790                           
  2791                           ;clima.c: 778: T0CONbits.TMR0ON = 1;
  2792  010C12  8ED5               	bsf	4053,7,c	;volatile
  2793  010C14  0012               	return		;funcret
  2794  010C16                     __end_of_initTmr:
  2795                           	opt stack 0
  2796                           prodh	equ	0xFF4
  2797                           prodl	equ	0xFF3
  2798                           intcon	equ	0xFF2
  2799                           postinc0	equ	0xFEE
  2800                           wreg	equ	0xFE8
  2801                           status	equ	0xFD8
  2802                           
  2803 ;; *************** function _initPwm *****************
  2804 ;; Defined at:
  2805 ;;		line 728 in file "clima.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		None
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;Total ram usage:        0 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    1
  2826 ;; This function calls:
  2827 ;;		Nothing
  2828 ;; This function is called by:
  2829 ;;		_init
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text16
  2834  010EB0                     __ptext16:
  2835                           	opt stack 0
  2836  010EB0                     _initPwm:
  2837                           	opt stack 28
  2838                           
  2839                           ;clima.c: 733: (TRISDbits.TRISD3) = 0;
  2840                           
  2841                           ;incstack = 0
  2842  010EB0  9695               	bcf	3989,3,c	;volatile
  2843                           
  2844                           ;clima.c: 735: (TRISDbits.TRISD4) = 0;
  2845  010EB2  9895               	bcf	3989,4,c	;volatile
  2846                           
  2847                           ;clima.c: 737: (TRISDbits.TRISD5) = 0;
  2848  010EB4  9A95               	bcf	3989,5,c	;volatile
  2849  010EB6  0012               	return		;funcret
  2850  010EB8                     __end_of_initPwm:
  2851                           	opt stack 0
  2852                           prodh	equ	0xFF4
  2853                           prodl	equ	0xFF3
  2854                           intcon	equ	0xFF2
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           status	equ	0xFD8
  2858                           
  2859 ;; *************** function _initButtons *****************
  2860 ;; Defined at:
  2861 ;;		line 668 in file "clima.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;		None
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;		None
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  1    wreg      void 
  2868 ;; Registers used:
  2869 ;;		None
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;Total ram usage:        0 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    1
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		_init
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text17
  2890  010EDC                     __ptext17:
  2891                           	opt stack 0
  2892  010EDC                     _initButtons:
  2893                           	opt stack 28
  2894                           
  2895                           ;clima.c: 671: TRISB0 = 1;
  2896                           
  2897                           ;incstack = 0
  2898  010EDC  8093               	bsf	3987,0,c	;volatile
  2899  010EDE  0012               	return		;funcret
  2900  010EE0                     __end_of_initButtons:
  2901                           	opt stack 0
  2902                           prodh	equ	0xFF4
  2903                           prodl	equ	0xFF3
  2904                           intcon	equ	0xFF2
  2905                           postinc0	equ	0xFEE
  2906                           wreg	equ	0xFE8
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function _initAdc *****************
  2910 ;; Defined at:
  2911 ;;		line 680 in file "clima.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;		None
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;		None
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      void 
  2918 ;; Registers used:
  2919 ;;		wreg, status,2, status,0
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;Total ram usage:        0 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    1
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_init
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text18
  2940  010C54                     __ptext18:
  2941                           	opt stack 0
  2942  010C54                     _initAdc:
  2943                           	opt stack 28
  2944                           
  2945                           ;clima.c: 683: TRISA = TRISA | (1<<0);
  2946                           
  2947                           ;incstack = 0
  2948  010C54  5092               	movf	3986,w,c	;volatile
  2949  010C56  0901               	iorlw	1
  2950  010C58  6E92               	movwf	3986,c	;volatile
  2951                           
  2952                           ;clima.c: 686: TRISA = TRISA | (1<<1);
  2953  010C5A  5092               	movf	3986,w,c	;volatile
  2954  010C5C  0902               	iorlw	2
  2955  010C5E  6E92               	movwf	3986,c	;volatile
  2956                           
  2957                           ;clima.c: 689: TRISA = TRISA | (1<<3);
  2958  010C60  5092               	movf	3986,w,c	;volatile
  2959  010C62  0908               	iorlw	8
  2960  010C64  6E92               	movwf	3986,c	;volatile
  2961                           
  2962                           ;clima.c: 692: ADCON0bits.CHS = 1;
  2963  010C66  50C2               	movf	4034,w,c	;volatile
  2964  010C68  0BC3               	andlw	-61
  2965  010C6A  0904               	iorlw	4
  2966  010C6C  6EC2               	movwf	4034,c	;volatile
  2967                           
  2968                           ;clima.c: 693: ADCON0bits.GO_nDONE = 0;
  2969  010C6E  92C2               	bcf	4034,1,c	;volatile
  2970                           
  2971                           ;clima.c: 694: ADCON0bits.ADON = 0;
  2972  010C70  90C2               	bcf	4034,0,c	;volatile
  2973                           
  2974                           ;clima.c: 696: ADCON1bits.VCFG = 0b00;
  2975  010C72  0ECF               	movlw	-49
  2976  010C74  16C1               	andwf	4033,f,c	;volatile
  2977                           
  2978                           ;clima.c: 697: ADCON1bits.PCFG = 0b0000;
  2979  010C76  90C1               	bcf	4033,0,c	;volatile
  2980  010C78  92C1               	bcf	4033,1,c	;volatile
  2981  010C7A  94C1               	bcf	4033,2,c	;volatile
  2982  010C7C  96C1               	bcf	4033,3,c	;volatile
  2983                           
  2984                           ;clima.c: 699: ADCON2bits.ADFM = 1;
  2985  010C7E  8EC0               	bsf	4032,7,c	;volatile
  2986                           
  2987                           ;clima.c: 700: ADCON2bits.ACQT = 0b111;
  2988  010C80  86C0               	bsf	4032,3,c	;volatile
  2989  010C82  88C0               	bsf	4032,4,c	;volatile
  2990  010C84  8AC0               	bsf	4032,5,c	;volatile
  2991                           
  2992                           ;clima.c: 701: ADCON2bits.ADCS = 0b010;
  2993  010C86  50C0               	movf	4032,w,c	;volatile
  2994  010C88  0BF8               	andlw	-8
  2995  010C8A  0902               	iorlw	2
  2996  010C8C  6EC0               	movwf	4032,c	;volatile
  2997  010C8E  0012               	return		;funcret
  2998  010C90                     __end_of_initAdc:
  2999                           	opt stack 0
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           intcon	equ	0xFF2
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           status	equ	0xFD8
  3006                           
  3007 ;; *************** function _UART_puts *****************
  3008 ;; Defined at:
  3009 ;;		line 88 in file "uart.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;  s               2   16[COMRAM] PTR unsigned char 
  3012 ;;		 -> STR_20(20), 
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;		None
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      void 
  3017 ;; Registers used:
  3018 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3024 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;Total ram usage:        2 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    2
  3031 ;; This function calls:
  3032 ;;		_Delay10TCYx
  3033 ;;		_UART_putc
  3034 ;; This function is called by:
  3035 ;;		_init
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           	psect	text19
  3040  010CC8                     __ptext19:
  3041                           	opt stack 0
  3042  010CC8                     _UART_puts:
  3043                           	opt stack 27
  3044  010CC8                     
  3045                           ;uart.c: 91: {
  3046                           ;uart.c: 92: UART_putc(*s);
  3047  010CC8  C011  FFF6         	movff	UART_puts@s,tblptrl
  3048  010CCC  C012  FFF7         	movff	UART_puts@s+1,tblptrh
  3049  010CD0                     	if	0	;tblptru may be non-zero
  3050  010CD0                     	endif
  3051  010CD0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3052  010CD0  0E00               	movlw	low (__mediumconst shr (0+16))
  3053  010CD2  6EF8               	movwf	tblptru,c
  3054  010CD4                     	endif
  3055  010CD4  0008               	tblrd		*
  3056  010CD6  50F5               	movf	tablat,w,c
  3057  010CD8  EC4B  F087         	call	_UART_putc
  3058                           
  3059                           ;uart.c: 93: s++;
  3060  010CDC  4A11               	infsnz	UART_puts@s,f,c
  3061  010CDE  2A12               	incf	UART_puts@s+1,f,c
  3062                           
  3063                           ;uart.c: 94: Delay10TCYx(250);
  3064  010CE0  0EFA               	movlw	250
  3065  010CE2  EC43  F087         	call	_Delay10TCYx
  3066                           
  3067                           ;uart.c: 95: } while(*s != 0);
  3068  010CE6  C011  FFF6         	movff	UART_puts@s,tblptrl
  3069  010CEA  C012  FFF7         	movff	UART_puts@s+1,tblptrh
  3070  010CEE                     	if	0	;tblptru may be non-zero
  3071  010CEE                     	endif
  3072  010CEE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3073  010CEE  0E00               	movlw	low (__mediumconst shr (0+16))
  3074  010CF0  6EF8               	movwf	tblptru,c
  3075  010CF2                     	endif
  3076  010CF2  0008               	tblrd		*
  3077  010CF4  50F5               	movf	tablat,w,c
  3078  010CF6  0900               	iorlw	0
  3079  010CF8  B4D8               	btfsc	status,2,c
  3080  010CFA  0012               	return	
  3081  010CFC  D7E5               	goto	l2995
  3082  010CFE                     __end_of_UART_puts:
  3083                           	opt stack 0
  3084                           tblptru	equ	0xFF8
  3085                           tblptrh	equ	0xFF7
  3086                           tblptrl	equ	0xFF6
  3087                           tablat	equ	0xFF5
  3088                           prodh	equ	0xFF4
  3089                           prodl	equ	0xFF3
  3090                           intcon	equ	0xFF2
  3091                           postinc0	equ	0xFEE
  3092                           wreg	equ	0xFE8
  3093                           status	equ	0xFD8
  3094                           
  3095 ;; *************** function _UART_putc *****************
  3096 ;; Defined at:
  3097 ;;		line 80 in file "uart.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;  data            1    wreg     unsigned char 
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  data            1   15[COMRAM] unsigned char 
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  1    wreg      void 
  3104 ;; Registers used:
  3105 ;;		wreg
  3106 ;; Tracked objects:
  3107 ;;		On entry : 0/0
  3108 ;;		On exit  : 0/0
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;Total ram usage:        1 bytes
  3116 ;; Hardware stack levels used:    1
  3117 ;; Hardware stack levels required when called:    1
  3118 ;; This function calls:
  3119 ;;		Nothing
  3120 ;; This function is called by:
  3121 ;;		_UART_puts
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125                           	psect	text20
  3126  010E96                     __ptext20:
  3127                           	opt stack 0
  3128  010E96                     _UART_putc:
  3129                           	opt stack 27
  3130                           
  3131                           ;incstack = 0
  3132                           ;UART_putc@data stored from wreg
  3133  010E96  6E10               	movwf	UART_putc@data,c
  3134                           
  3135                           ;uart.c: 82: TXREG = data;
  3136  010E98  C010  FFAD         	movff	UART_putc@data,4013	;volatile
  3137  010E9C                     l364:
  3138  010E9C  A89E               	btfss	3998,4,c	;volatile
  3139  010E9E  D7FE               	goto	l364
  3140                           
  3141                           ;uart.c: 84: PIR1bits.TXIF = 0;
  3142  010EA0  989E               	bcf	3998,4,c	;volatile
  3143  010EA2  0012               	return		;funcret
  3144  010EA4                     __end_of_UART_putc:
  3145                           	opt stack 0
  3146                           tblptru	equ	0xFF8
  3147                           tblptrh	equ	0xFF7
  3148                           tblptrl	equ	0xFF6
  3149                           tablat	equ	0xFF5
  3150                           prodh	equ	0xFF4
  3151                           prodl	equ	0xFF3
  3152                           intcon	equ	0xFF2
  3153                           postinc0	equ	0xFEE
  3154                           wreg	equ	0xFE8
  3155                           status	equ	0xFD8
  3156                           
  3157 ;; *************** function _Delay10TCYx *****************
  3158 ;; Defined at:
  3159 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10tcyx.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;  unit            1    wreg     unsigned char 
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;  unit            1   15[COMRAM] unsigned char 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  1    wreg      void 
  3166 ;; Registers used:
  3167 ;;		wreg
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3177 ;;Total ram usage:        1 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    1
  3180 ;; This function calls:
  3181 ;;		Nothing
  3182 ;; This function is called by:
  3183 ;;		_UART_puts
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text21
  3188  010E86                     __ptext21:
  3189                           	opt stack 0
  3190  010E86                     _Delay10TCYx:
  3191                           	opt stack 27
  3192                           
  3193                           ;incstack = 0
  3194                           ;Delay10TCYx@unit stored from wreg
  3195  010E86  6E10               	movwf	Delay10TCYx@unit,c
  3196  010E88  0E03               	movlw	3
  3197  010E8A                     u2257:
  3198  010E8A  2EE8               	decfsz	wreg,f,c
  3199  010E8C  D7FE               	bra	u2257
  3200  010E8E  F000               	nop	
  3201  010E90  2E10               	decfsz	Delay10TCYx@unit,f,c
  3202  010E92  D7FA               	goto	l2801
  3203  010E94  0012               	return	
  3204  010E96                     __end_of_Delay10TCYx:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           intcon	equ	0xFF2
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           status	equ	0xFD8
  3216                           
  3217 ;; *************** function _UART_Init *****************
  3218 ;; Defined at:
  3219 ;;		line 11 in file "uart.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  x               2   15[COMRAM] unsigned int 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      unsigned char 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;Total ram usage:        2 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    1
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		_init
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text22
  3248  010E22                     __ptext22:
  3249                           	opt stack 0
  3250  010E22                     _UART_Init:
  3251                           	opt stack 28
  3252                           
  3253                           ;uart.c: 33: unsigned int x;
  3254                           ;uart.c: 34: x = (10000000/19200)/64 - 1 ;
  3255                           
  3256                           ;incstack = 0
  3257  010E22  0E00               	movlw	0
  3258  010E24  6E11               	movwf	UART_Init@x+1,c
  3259  010E26  0E07               	movlw	7
  3260  010E28  6E10               	movwf	UART_Init@x,c
  3261                           
  3262                           ;uart.c: 37: TRISCbits.TRISC6 = 0;
  3263  010E2A  9C94               	bcf	3988,6,c	;volatile
  3264                           
  3265                           ;uart.c: 38: TRISCbits.TRISC7 = 1;
  3266  010E2C  8E94               	bsf	3988,7,c	;volatile
  3267                           
  3268                           ;uart.c: 41: TXSTA1bits.SYNC = 0;
  3269  010E2E  98AC               	bcf	4012,4,c	;volatile
  3270                           
  3271                           ;uart.c: 42: SPBRG = x;
  3272  010E30  C010  FFAF         	movff	UART_Init@x,4015	;volatile
  3273                           
  3274                           ;uart.c: 43: TXSTAbits.TXEN =1;
  3275  010E34  8AAC               	bsf	4012,5,c	;volatile
  3276                           
  3277                           ;uart.c: 44: RCSTAbits.CREN =1;
  3278  010E36  88AB               	bsf	4011,4,c	;volatile
  3279                           
  3280                           ;uart.c: 45: PIE1bits.RCIE = 1;
  3281  010E38  8A9D               	bsf	3997,5,c	;volatile
  3282                           
  3283                           ;uart.c: 46: RCSTA1bits.SPEN = 1;
  3284  010E3A  8EAB               	bsf	4011,7,c	;volatile
  3285  010E3C  0012               	return	
  3286  010E3E                     __end_of_UART_Init:
  3287                           	opt stack 0
  3288                           tblptru	equ	0xFF8
  3289                           tblptrh	equ	0xFF7
  3290                           tblptrl	equ	0xFF6
  3291                           tablat	equ	0xFF5
  3292                           prodh	equ	0xFF4
  3293                           prodl	equ	0xFF3
  3294                           intcon	equ	0xFF2
  3295                           postinc0	equ	0xFEE
  3296                           wreg	equ	0xFE8
  3297                           status	equ	0xFD8
  3298                           
  3299 ;; *************** function _LcdInit *****************
  3300 ;; Defined at:
  3301 ;;		line 123 in file "lcd.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;		None
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;		None
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      void 
  3308 ;; Registers used:
  3309 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;Total ram usage:        0 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    5
  3322 ;; This function calls:
  3323 ;;		_LcdClear
  3324 ;;		_LcdWriteString
  3325 ;;		_SWSPIOpen
  3326 ;;		_lcdCommand
  3327 ;;		_setGPIO
  3328 ;;		_setIODIR
  3329 ;; This function is called by:
  3330 ;;		_init
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           	psect	text23
  3335  010B06                     __ptext23:
  3336                           	opt stack 0
  3337  010B06                     _LcdInit:
  3338                           	opt stack 24
  3339                           
  3340                           ;lcd.c: 126: SWSPIOpen();
  3341                           
  3342                           ;incstack = 0
  3343  010B06  EC3A  F087         	call	_SWSPIOpen	;wreg free
  3344                           
  3345                           ;lcd.c: 135: setIODIR(0x01,0x00);
  3346  010B0A  0E00               	movlw	0
  3347  010B0C  6E12               	movwf	setIODIR@dir,c
  3348  010B0E  0E01               	movlw	1
  3349  010B10  ECE4  F086         	call	_setIODIR
  3350                           
  3351                           ;lcd.c: 137: setIODIR(0x00,0x00);
  3352  010B14  0E00               	movlw	0
  3353  010B16  6E12               	movwf	setIODIR@dir,c
  3354  010B18  0E00               	movlw	0
  3355  010B1A  ECE4  F086         	call	_setIODIR
  3356                           
  3357                           ;lcd.c: 139: setGPIO(0x00,0x00);
  3358  010B1E  0E00               	movlw	0
  3359  010B20  6E12               	movwf	setGPIO@value,c
  3360  010B22  0E00               	movlw	0
  3361  010B24  ECF3  F086         	call	_setGPIO
  3362                           
  3363                           ;lcd.c: 142: lcdCommand(0b00111111);
  3364  010B28  0E3F               	movlw	63
  3365  010B2A  EC95  F086         	call	_lcdCommand
  3366                           
  3367                           ;lcd.c: 145: lcdCommand(0b00001100);
  3368  010B2E  0E0C               	movlw	12
  3369  010B30  EC95  F086         	call	_lcdCommand
  3370                           
  3371                           ;lcd.c: 148: lcdCommand(0b00000001);
  3372  010B34  0E01               	movlw	1
  3373  010B36  EC95  F086         	call	_lcdCommand
  3374                           
  3375                           ;lcd.c: 151: lcdCommand(0b00000110);
  3376  010B3A  0E06               	movlw	6
  3377  010B3C  EC95  F086         	call	_lcdCommand
  3378                           
  3379                           ;lcd.c: 154: LcdWriteString("LCD init ...");
  3380  010B40  0EB9               	movlw	low STR_21
  3381  010B42  6E15               	movwf	LcdWriteString@s,c
  3382  010B44  0EFF               	movlw	high STR_21
  3383  010B46  6E16               	movwf	LcdWriteString@s+1,c
  3384  010B48  EC08  F085         	call	_LcdWriteString	;wreg free
  3385                           
  3386                           ;lcd.c: 158: LcdClear();
  3387  010B4C  EC5C  F087         	call	_LcdClear	;wreg free
  3388  010B50  0012               	return		;funcret
  3389  010B52                     __end_of_LcdInit:
  3390                           	opt stack 0
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           intcon	equ	0xFF2
  3398                           postinc0	equ	0xFEE
  3399                           wreg	equ	0xFE8
  3400                           status	equ	0xFD8
  3401                           
  3402 ;; *************** function _setIODIR *****************
  3403 ;; Defined at:
  3404 ;;		line 81 in file "lcd.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  address         1    wreg     unsigned char 
  3407 ;;  dir             1   17[COMRAM] unsigned char 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  address         1   18[COMRAM] unsigned char 
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3419 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;Total ram usage:        2 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    2
  3426 ;; This function calls:
  3427 ;;		_SWSPIClearCS
  3428 ;;		_SWSPISetCS
  3429 ;;		_SWSPIWrite
  3430 ;; This function is called by:
  3431 ;;		_LcdInit
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           	psect	text24
  3436  010DC8                     __ptext24:
  3437                           	opt stack 0
  3438  010DC8                     _setIODIR:
  3439                           	opt stack 26
  3440                           
  3441                           ;incstack = 0
  3442                           ;setIODIR@address stored from wreg
  3443  010DC8  6E13               	movwf	setIODIR@address,c
  3444                           
  3445                           ;lcd.c: 84: SWSPIClearCS();
  3446  010DCA  EC72  F087         	call	_SWSPIClearCS	;wreg free
  3447                           
  3448                           ;lcd.c: 85: SWSPIWrite(0x40);
  3449  010DCE  0E40               	movlw	64
  3450  010DD0  EC5C  F085         	call	_SWSPIWrite
  3451                           
  3452                           ;lcd.c: 86: SWSPIWrite(address);
  3453  010DD4  5013               	movf	setIODIR@address,w,c
  3454  010DD6  EC5C  F085         	call	_SWSPIWrite
  3455                           
  3456                           ;lcd.c: 87: SWSPIWrite(dir);
  3457  010DDA  5012               	movf	setIODIR@dir,w,c
  3458  010DDC  EC5C  F085         	call	_SWSPIWrite
  3459                           
  3460                           ;lcd.c: 88: SWSPISetCS();
  3461  010DE0  EC70  F087         	call	_SWSPISetCS	;wreg free
  3462  010DE4  0012               	return		;funcret
  3463  010DE6                     __end_of_setIODIR:
  3464                           	opt stack 0
  3465                           tblptru	equ	0xFF8
  3466                           tblptrh	equ	0xFF7
  3467                           tblptrl	equ	0xFF6
  3468                           tablat	equ	0xFF5
  3469                           prodh	equ	0xFF4
  3470                           prodl	equ	0xFF3
  3471                           intcon	equ	0xFF2
  3472                           postinc0	equ	0xFEE
  3473                           wreg	equ	0xFE8
  3474                           status	equ	0xFD8
  3475                           
  3476 ;; *************** function _SWSPIOpen *****************
  3477 ;; Defined at:
  3478 ;;		line 15 in file "swspi.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;		None
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;		None
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		None
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;Total ram usage:        0 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    1
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_LcdInit
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text25
  3507  010E74                     __ptext25:
  3508                           	opt stack 0
  3509  010E74                     _SWSPIOpen:
  3510                           	opt stack 27
  3511                           
  3512                           ;swspi.c: 17: PORTAbits.RA2 = 1;
  3513                           
  3514                           ;incstack = 0
  3515  010E74  8480               	bsf	3968,2,c	;volatile
  3516                           
  3517                           ;swspi.c: 18: PORTCbits.RC4 = 1;
  3518  010E76  8882               	bsf	3970,4,c	;volatile
  3519                           
  3520                           ;swspi.c: 21: PORTCbits.RC5 = 0;
  3521  010E78  9A82               	bcf	3970,5,c	;volatile
  3522                           
  3523                           ;swspi.c: 22: PORTCbits.RC3 = 0;
  3524  010E7A  9682               	bcf	3970,3,c	;volatile
  3525                           
  3526                           ;swspi.c: 40: TRISAbits.TRISA2 = 0;
  3527  010E7C  9492               	bcf	3986,2,c	;volatile
  3528                           
  3529                           ;swspi.c: 41: TRISCbits.TRISC4 = 1;
  3530  010E7E  8894               	bsf	3988,4,c	;volatile
  3531                           
  3532                           ;swspi.c: 42: TRISCbits.TRISC5 = 0;
  3533  010E80  9A94               	bcf	3988,5,c	;volatile
  3534                           
  3535                           ;swspi.c: 43: TRISCbits.TRISC3 = 0;
  3536  010E82  9694               	bcf	3988,3,c	;volatile
  3537  010E84  0012               	return		;funcret
  3538  010E86                     __end_of_SWSPIOpen:
  3539                           	opt stack 0
  3540                           tblptru	equ	0xFF8
  3541                           tblptrh	equ	0xFF7
  3542                           tblptrl	equ	0xFF6
  3543                           tablat	equ	0xFF5
  3544                           prodh	equ	0xFF4
  3545                           prodl	equ	0xFF3
  3546                           intcon	equ	0xFF2
  3547                           postinc0	equ	0xFEE
  3548                           wreg	equ	0xFE8
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _LcdWriteString *****************
  3552 ;; Defined at:
  3553 ;;		line 202 in file "lcd.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  s               2   20[COMRAM] PTR const unsigned char 
  3556 ;;		 -> STR_21(13), STR_17(2), STR_16(2), STR_15(2), 
  3557 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_10(6), 
  3558 ;;		 -> STR_9(6), STR_8(6), STR_7(6), STR_6(6), 
  3559 ;;		 -> STR_5(5), STR_4(5), STR_3(5), msg(20), 
  3560 ;;		 -> LcdLines(144), 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      void 
  3565 ;; Registers used:
  3566 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;Total ram usage:        2 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    4
  3579 ;; This function calls:
  3580 ;;		_LcdChar
  3581 ;; This function is called by:
  3582 ;;		_setLcd
  3583 ;;		_updateLcd
  3584 ;;		_LcdInit
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text26
  3589  010A10                     __ptext26:
  3590                           	opt stack 0
  3591  010A10                     _LcdWriteString:
  3592                           	opt stack 24
  3593                           
  3594                           ;lcd.c: 204: while(*s)
  3595                           
  3596                           ;incstack = 0
  3597  010A10  D015               	goto	l2671
  3598  010A12                     l2667:
  3599                           
  3600                           ;lcd.c: 205: {
  3601                           ;lcd.c: 206: LcdChar(*s++);
  3602  010A12  C015  FFF6         	movff	LcdWriteString@s,tblptrl
  3603  010A16  C016  FFF7         	movff	LcdWriteString@s+1,tblptrh
  3604  010A1A  0E00               	movlw	low (__mediumconst shr (0+16))
  3605  010A1C  6EF8               	movwf	tblptru,c
  3606  010A1E  0E0F               	movlw	(high __ramtop+-1)
  3607  010A20  64F7               	cpfsgt	tblptrh,c
  3608  010A22  D003               	bra	u1647
  3609  010A24  0008               	tblrd		*
  3610  010A26  50F5               	movf	tablat,w,c
  3611  010A28  D005               	bra	u1640
  3612  010A2A                     u1647:
  3613  010A2A  CFF6 FFE9          	movff	tblptrl,fsr0l
  3614  010A2E  CFF7 FFEA          	movff	tblptrh,fsr0h
  3615  010A32  50EF               	movf	indf0,w,c
  3616  010A34                     u1640:
  3617  010A34  EC7F  F086         	call	_LcdChar
  3618  010A38  4A15               	infsnz	LcdWriteString@s,f,c
  3619  010A3A  2A16               	incf	LcdWriteString@s+1,f,c
  3620  010A3C                     l2671:
  3621  010A3C  C015  FFF6         	movff	LcdWriteString@s,tblptrl
  3622  010A40  C016  FFF7         	movff	LcdWriteString@s+1,tblptrh
  3623  010A44  0E00               	movlw	low (__mediumconst shr (0+16))
  3624  010A46  6EF8               	movwf	tblptru,c
  3625  010A48  0E0F               	movlw	(high __ramtop+-1)
  3626  010A4A  64F7               	cpfsgt	tblptrh,c
  3627  010A4C  D003               	bra	u1657
  3628  010A4E  0008               	tblrd		*
  3629  010A50  50F5               	movf	tablat,w,c
  3630  010A52  D005               	bra	u1650
  3631  010A54                     u1657:
  3632  010A54  CFF6 FFE9          	movff	tblptrl,fsr0l
  3633  010A58  CFF7 FFEA          	movff	tblptrh,fsr0h
  3634  010A5C  50EF               	movf	indf0,w,c
  3635  010A5E                     u1650:
  3636  010A5E  0900               	iorlw	0
  3637  010A60  B4D8               	btfsc	status,2,c
  3638  010A62  0012               	return	
  3639  010A64  D7D6               	goto	l2667
  3640  010A66                     __end_of_LcdWriteString:
  3641                           	opt stack 0
  3642                           tblptru	equ	0xFF8
  3643                           tblptrh	equ	0xFF7
  3644                           tblptrl	equ	0xFF6
  3645                           tablat	equ	0xFF5
  3646                           prodh	equ	0xFF4
  3647                           prodl	equ	0xFF3
  3648                           intcon	equ	0xFF2
  3649                           indf0	equ	0xFEF
  3650                           postinc0	equ	0xFEE
  3651                           fsr0h	equ	0xFEA
  3652                           fsr0l	equ	0xFE9
  3653                           wreg	equ	0xFE8
  3654                           status	equ	0xFD8
  3655                           
  3656 ;; *************** function _LcdChar *****************
  3657 ;; Defined at:
  3658 ;;		line 186 in file "lcd.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;  letter          1    wreg     unsigned char 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;  letter          1   19[COMRAM] unsigned char 
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		wreg, status,2, status,0, cstack
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;Total ram usage:        1 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    3
  3679 ;; This function calls:
  3680 ;;		_setGPIO
  3681 ;; This function is called by:
  3682 ;;		_LcdWriteString
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           	psect	text27
  3687  010CFE                     __ptext27:
  3688                           	opt stack 0
  3689  010CFE                     _LcdChar:
  3690                           	opt stack 24
  3691                           
  3692                           ;incstack = 0
  3693                           ;LcdChar@letter stored from wreg
  3694  010CFE  6E14               	movwf	LcdChar@letter,c
  3695                           
  3696                           ;lcd.c: 188: setGPIO(0x12,0x80);
  3697  010D00  0E80               	movlw	128
  3698  010D02  6E12               	movwf	setGPIO@value,c
  3699  010D04  0E12               	movlw	18
  3700  010D06  ECF3  F086         	call	_setGPIO
  3701                           
  3702                           ;lcd.c: 190: setGPIO(0x13,letter);
  3703  010D0A  C014  F012         	movff	LcdChar@letter,setGPIO@value
  3704  010D0E  0E13               	movlw	19
  3705  010D10  ECF3  F086         	call	_setGPIO
  3706                           
  3707                           ;lcd.c: 192: setGPIO(0x12, 0xc0);
  3708  010D14  0EC0               	movlw	192
  3709  010D16  6E12               	movwf	setGPIO@value,c
  3710  010D18  0E12               	movlw	18
  3711  010D1A  ECF3  F086         	call	_setGPIO
  3712                           
  3713                           ;lcd.c: 194: setGPIO(0x12,0x00);
  3714  010D1E  0E00               	movlw	0
  3715  010D20  6E12               	movwf	setGPIO@value,c
  3716  010D22  0E12               	movlw	18
  3717  010D24  ECF3  F086         	call	_setGPIO
  3718  010D28  0012               	return		;funcret
  3719  010D2A                     __end_of_LcdChar:
  3720                           	opt stack 0
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           prodh	equ	0xFF4
  3726                           prodl	equ	0xFF3
  3727                           intcon	equ	0xFF2
  3728                           indf0	equ	0xFEF
  3729                           postinc0	equ	0xFEE
  3730                           fsr0h	equ	0xFEA
  3731                           fsr0l	equ	0xFE9
  3732                           wreg	equ	0xFE8
  3733                           status	equ	0xFD8
  3734                           
  3735 ;; *************** function _LcdClear *****************
  3736 ;; Defined at:
  3737 ;;		line 166 in file "lcd.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;		None
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;		None
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      void 
  3744 ;; Registers used:
  3745 ;;		wreg, status,2, status,0, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;Total ram usage:        0 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; Hardware stack levels required when called:    4
  3758 ;; This function calls:
  3759 ;;		_lcdCommand
  3760 ;; This function is called by:
  3761 ;;		_setLcd
  3762 ;;		_LcdInit
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text28
  3767  010EB8                     __ptext28:
  3768                           	opt stack 0
  3769  010EB8                     _LcdClear:
  3770                           	opt stack 24
  3771                           
  3772                           ;lcd.c: 169: lcdCommand(0x01);
  3773                           
  3774                           ;incstack = 0
  3775  010EB8  0E01               	movlw	1
  3776  010EBA  EC95  F086         	call	_lcdCommand
  3777  010EBE  0012               	return		;funcret
  3778  010EC0                     __end_of_LcdClear:
  3779                           	opt stack 0
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           prodh	equ	0xFF4
  3785                           prodl	equ	0xFF3
  3786                           intcon	equ	0xFF2
  3787                           indf0	equ	0xFEF
  3788                           postinc0	equ	0xFEE
  3789                           fsr0h	equ	0xFEA
  3790                           fsr0l	equ	0xFE9
  3791                           wreg	equ	0xFE8
  3792                           status	equ	0xFD8
  3793                           
  3794 ;; *************** function _lcdCommand *****************
  3795 ;; Defined at:
  3796 ;;		line 102 in file "lcd.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  command         1    wreg     unsigned char 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  command         1   19[COMRAM] unsigned char 
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  1    wreg      void 
  3803 ;; Registers used:
  3804 ;;		wreg, status,2, status,0, cstack
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;Total ram usage:        1 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; Hardware stack levels required when called:    3
  3817 ;; This function calls:
  3818 ;;		_setGPIO
  3819 ;; This function is called by:
  3820 ;;		_LcdInit
  3821 ;;		_LcdClear
  3822 ;;		_LcdGoTo
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text29
  3827  010D2A                     __ptext29:
  3828                           	opt stack 0
  3829  010D2A                     _lcdCommand:
  3830                           	opt stack 24
  3831                           
  3832                           ;incstack = 0
  3833                           ;lcdCommand@command stored from wreg
  3834  010D2A  6E14               	movwf	lcdCommand@command,c
  3835                           
  3836                           ;lcd.c: 104: setGPIO(0x12,0x00);
  3837  010D2C  0E00               	movlw	0
  3838  010D2E  6E12               	movwf	setGPIO@value,c
  3839  010D30  0E12               	movlw	18
  3840  010D32  ECF3  F086         	call	_setGPIO
  3841                           
  3842                           ;lcd.c: 106: setGPIO(0x13, command);
  3843  010D36  C014  F012         	movff	lcdCommand@command,setGPIO@value
  3844  010D3A  0E13               	movlw	19
  3845  010D3C  ECF3  F086         	call	_setGPIO
  3846                           
  3847                           ;lcd.c: 108: setGPIO(0x12,0x40);
  3848  010D40  0E40               	movlw	64
  3849  010D42  6E12               	movwf	setGPIO@value,c
  3850  010D44  0E12               	movlw	18
  3851  010D46  ECF3  F086         	call	_setGPIO
  3852                           
  3853                           ;lcd.c: 110: setGPIO(0x12,0x00);
  3854  010D4A  0E00               	movlw	0
  3855  010D4C  6E12               	movwf	setGPIO@value,c
  3856  010D4E  0E12               	movlw	18
  3857  010D50  ECF3  F086         	call	_setGPIO
  3858  010D54  0012               	return		;funcret
  3859  010D56                     __end_of_lcdCommand:
  3860                           	opt stack 0
  3861                           tblptru	equ	0xFF8
  3862                           tblptrh	equ	0xFF7
  3863                           tblptrl	equ	0xFF6
  3864                           tablat	equ	0xFF5
  3865                           prodh	equ	0xFF4
  3866                           prodl	equ	0xFF3
  3867                           intcon	equ	0xFF2
  3868                           indf0	equ	0xFEF
  3869                           postinc0	equ	0xFEE
  3870                           fsr0h	equ	0xFEA
  3871                           fsr0l	equ	0xFE9
  3872                           wreg	equ	0xFE8
  3873                           status	equ	0xFD8
  3874                           
  3875 ;; *************** function _setGPIO *****************
  3876 ;; Defined at:
  3877 ;;		line 55 in file "lcd.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;  address         1    wreg     unsigned char 
  3880 ;;  value           1   17[COMRAM] unsigned char 
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;  address         1   18[COMRAM] unsigned char 
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      void 
  3885 ;; Registers used:
  3886 ;;		wreg, status,2, status,0, cstack
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3892 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;Total ram usage:        2 bytes
  3897 ;; Hardware stack levels used:    1
  3898 ;; Hardware stack levels required when called:    2
  3899 ;; This function calls:
  3900 ;;		_SWSPIClearCS
  3901 ;;		_SWSPISetCS
  3902 ;;		_SWSPIWrite
  3903 ;; This function is called by:
  3904 ;;		_lcdCommand
  3905 ;;		_LcdInit
  3906 ;;		_LcdChar
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           	psect	text30
  3911  010DE6                     __ptext30:
  3912                           	opt stack 0
  3913  010DE6                     _setGPIO:
  3914                           	opt stack 24
  3915                           
  3916                           ;incstack = 0
  3917                           ;setGPIO@address stored from wreg
  3918  010DE6  6E13               	movwf	setGPIO@address,c
  3919                           
  3920                           ;lcd.c: 58: SWSPIClearCS();
  3921  010DE8  EC72  F087         	call	_SWSPIClearCS	;wreg free
  3922                           
  3923                           ;lcd.c: 61: SWSPIWrite(0x40);
  3924  010DEC  0E40               	movlw	64
  3925  010DEE  EC5C  F085         	call	_SWSPIWrite
  3926                           
  3927                           ;lcd.c: 62: SWSPIWrite(address);
  3928  010DF2  5013               	movf	setGPIO@address,w,c
  3929  010DF4  EC5C  F085         	call	_SWSPIWrite
  3930                           
  3931                           ;lcd.c: 63: SWSPIWrite(value);
  3932  010DF8  5012               	movf	setGPIO@value,w,c
  3933  010DFA  EC5C  F085         	call	_SWSPIWrite
  3934                           
  3935                           ;lcd.c: 64: SWSPISetCS();
  3936  010DFE  EC70  F087         	call	_SWSPISetCS	;wreg free
  3937  010E02  0012               	return		;funcret
  3938  010E04                     __end_of_setGPIO:
  3939                           	opt stack 0
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon	equ	0xFF2
  3947                           indf0	equ	0xFEF
  3948                           postinc0	equ	0xFEE
  3949                           fsr0h	equ	0xFEA
  3950                           fsr0l	equ	0xFE9
  3951                           wreg	equ	0xFE8
  3952                           status	equ	0xFD8
  3953                           
  3954 ;; *************** function _SWSPIWrite *****************
  3955 ;; Defined at:
  3956 ;;		line 75 in file "swspi.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;  output          1    wreg     unsigned char 
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;  output          1   15[COMRAM] unsigned char 
  3961 ;;  BitCount        1   16[COMRAM] unsigned char 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;                  1    wreg      unsigned char 
  3964 ;; Registers used:
  3965 ;;		wreg, status,2, status,0
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3974 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;Total ram usage:        2 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    1
  3978 ;; This function calls:
  3979 ;;		Nothing
  3980 ;; This function is called by:
  3981 ;;		_setGPIO
  3982 ;;		_setIODIR
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           	psect	text31
  3987  010AB8                     __ptext31:
  3988                           	opt stack 0
  3989  010AB8                     _SWSPIWrite:
  3990                           	opt stack 24
  3991                           
  3992                           ;incstack = 0
  3993                           ;SWSPIWrite@output stored from wreg
  3994  010AB8  6E10               	movwf	SWSPIWrite@output,c
  3995                           
  3996                           ;swspi.c: 77: char BitCount;
  3997                           ;swspi.c: 78: static char input;
  3998                           ;swspi.c: 80: BitCount = 8;
  3999  010ABA  0E08               	movlw	8
  4000  010ABC  6E11               	movwf	SWSPIWrite@BitCount,c
  4001                           
  4002                           ;swspi.c: 81: input = output;
  4003  010ABE  C010  F03F         	movff	SWSPIWrite@output,SWSPIWrite@input
  4004                           
  4005                           ;swspi.c: 87: PORTCbits.RC5 = 0;
  4006  010AC2  9A82               	bcf	3970,5,c	;volatile
  4007                           
  4008                           ;swspi.c: 88: if(input&0x80)
  4009  010AC4  BE3F               	btfsc	SWSPIWrite@input,7,c
  4010                           
  4011                           ;swspi.c: 89: PORTCbits.RC5 = 1;
  4012  010AC6  8A82               	bsf	3970,5,c	;volatile
  4013                           
  4014                           ;swspi.c: 90: __nop();
  4015  010AC8  F000               	nop	
  4016                           
  4017                           ;swspi.c: 91: __nop();
  4018  010ACA  F000               	nop	
  4019  010ACC                     l306:
  4020                           
  4021                           ;swspi.c: 93: {
  4022                           ;swspi.c: 109: if (PORTCbits.RC4)
  4023  010ACC  A882               	btfss	3970,4,c	;volatile
  4024  010ACE  D003               	goto	l2551
  4025                           
  4026                           ;swspi.c: 110: input = (input << 1) | 0x1;
  4027  010AD0  80D8               	bsf	status,0,c
  4028  010AD2  363F               	rlcf	SWSPIWrite@input,f,c
  4029  010AD4  D003               	goto	l2553
  4030  010AD6                     l2551:
  4031                           
  4032                           ;swspi.c: 111: else
  4033                           ;swspi.c: 112: input = input << 1;
  4034  010AD6  503F               	movf	SWSPIWrite@input,w,c
  4035  010AD8  243F               	addwf	SWSPIWrite@input,w,c
  4036  010ADA  6E3F               	movwf	SWSPIWrite@input,c
  4037  010ADC                     l2553:
  4038                           
  4039                           ;swspi.c: 114: PORTCbits.RC3 = 1;
  4040  010ADC  8682               	bsf	3970,3,c	;volatile
  4041                           
  4042                           ;swspi.c: 118: __nop();
  4043  010ADE  F000               	nop	
  4044                           
  4045                           ;swspi.c: 119: __nop();
  4046  010AE0  F000               	nop	
  4047                           
  4048                           ;swspi.c: 120: __nop();
  4049  010AE2  F000               	nop	
  4050                           
  4051                           ;swspi.c: 121: __nop();
  4052  010AE4  F000               	nop	
  4053                           
  4054                           ;swspi.c: 122: __nop();
  4055  010AE6  F000               	nop	
  4056                           
  4057                           ;swspi.c: 123: __nop();
  4058  010AE8  F000               	nop	
  4059                           
  4060                           ;swspi.c: 124: __nop();
  4061  010AEA  F000               	nop	
  4062                           
  4063                           ;swspi.c: 125: __nop();
  4064  010AEC  F000               	nop	
  4065                           
  4066                           ;swspi.c: 126: __nop();
  4067  010AEE  F000               	nop	
  4068                           
  4069                           ;swspi.c: 127: __nop();
  4070  010AF0  F000               	nop	
  4071                           
  4072                           ;swspi.c: 128: __nop();
  4073  010AF2  F000               	nop	
  4074                           
  4075                           ;swspi.c: 129: PORTCbits.RC3 = 0;
  4076  010AF4  9682               	bcf	3970,3,c	;volatile
  4077                           
  4078                           ;swspi.c: 130: PORTCbits.RC5 = 0;
  4079  010AF6  9A82               	bcf	3970,5,c	;volatile
  4080                           
  4081                           ;swspi.c: 131: if(input&0x80)
  4082  010AF8  BE3F               	btfsc	SWSPIWrite@input,7,c
  4083                           
  4084                           ;swspi.c: 132: PORTCbits.RC5 = 1;
  4085  010AFA  8A82               	bsf	3970,5,c	;volatile
  4086                           
  4087                           ;swspi.c: 133: BitCount--;
  4088  010AFC  0611               	decf	SWSPIWrite@BitCount,f,c
  4089                           
  4090                           ;swspi.c: 134: } while(BitCount);
  4091  010AFE  5011               	movf	SWSPIWrite@BitCount,w,c
  4092  010B00  B4D8               	btfsc	status,2,c
  4093  010B02  0012               	return	
  4094  010B04  D7E3               	goto	l306
  4095  010B06                     __end_of_SWSPIWrite:
  4096                           	opt stack 0
  4097                           tblptru	equ	0xFF8
  4098                           tblptrh	equ	0xFF7
  4099                           tblptrl	equ	0xFF6
  4100                           tablat	equ	0xFF5
  4101                           prodh	equ	0xFF4
  4102                           prodl	equ	0xFF3
  4103                           intcon	equ	0xFF2
  4104                           indf0	equ	0xFEF
  4105                           postinc0	equ	0xFEE
  4106                           fsr0h	equ	0xFEA
  4107                           fsr0l	equ	0xFE9
  4108                           wreg	equ	0xFE8
  4109                           status	equ	0xFD8
  4110                           
  4111 ;; *************** function _SWSPISetCS *****************
  4112 ;; Defined at:
  4113 ;;		line 53 in file "swspi.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;		None
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      void 
  4120 ;; Registers used:
  4121 ;;		None
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;Total ram usage:        0 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    1
  4134 ;; This function calls:
  4135 ;;		Nothing
  4136 ;; This function is called by:
  4137 ;;		_setGPIO
  4138 ;;		_setIODIR
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           	psect	text32
  4143  010EE0                     __ptext32:
  4144                           	opt stack 0
  4145  010EE0                     _SWSPISetCS:
  4146                           	opt stack 24
  4147                           
  4148                           ;swspi.c: 55: PORTAbits.RA2 = 1;
  4149                           
  4150                           ;incstack = 0
  4151  010EE0  8480               	bsf	3968,2,c	;volatile
  4152  010EE2  0012               	return		;funcret
  4153  010EE4                     __end_of_SWSPISetCS:
  4154                           	opt stack 0
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodh	equ	0xFF4
  4160                           prodl	equ	0xFF3
  4161                           intcon	equ	0xFF2
  4162                           indf0	equ	0xFEF
  4163                           postinc0	equ	0xFEE
  4164                           fsr0h	equ	0xFEA
  4165                           fsr0l	equ	0xFE9
  4166                           wreg	equ	0xFE8
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _SWSPIClearCS *****************
  4170 ;; Defined at:
  4171 ;;		line 64 in file "swspi.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;		None
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      void 
  4178 ;; Registers used:
  4179 ;;		None
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;Total ram usage:        0 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    1
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_setGPIO
  4196 ;;		_setIODIR
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text33
  4201  010EE4                     __ptext33:
  4202                           	opt stack 0
  4203  010EE4                     _SWSPIClearCS:
  4204                           	opt stack 24
  4205                           
  4206                           ;swspi.c: 66: PORTAbits.RA2 = 0;
  4207                           
  4208                           ;incstack = 0
  4209  010EE4  9480               	bcf	3968,2,c	;volatile
  4210  010EE6  0012               	return		;funcret
  4211  010EE8                     __end_of_SWSPIClearCS:
  4212                           	opt stack 0
  4213                           tblptru	equ	0xFF8
  4214                           tblptrh	equ	0xFF7
  4215                           tblptrl	equ	0xFF6
  4216                           tablat	equ	0xFF5
  4217                           prodh	equ	0xFF4
  4218                           prodl	equ	0xFF3
  4219                           intcon	equ	0xFF2
  4220                           indf0	equ	0xFEF
  4221                           postinc0	equ	0xFEE
  4222                           fsr0h	equ	0xFEA
  4223                           fsr0l	equ	0xFE9
  4224                           wreg	equ	0xFE8
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _checkInputs *****************
  4228 ;; Defined at:
  4229 ;;		line 319 in file "clima.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;		None
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  adcVal          2    3[BANK0 ] unsigned int 
  4234 ;;  leftButton      1    5[BANK0 ] unsigned char 
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      void 
  4237 ;; Registers used:
  4238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;Total ram usage:        6 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    3
  4251 ;; This function calls:
  4252 ;;		_ADCRead
  4253 ;;		___lwdiv
  4254 ;;		___wmul
  4255 ;;		_sprintf
  4256 ;; This function is called by:
  4257 ;;		_main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text34
  4262  0108D2                     __ptext34:
  4263                           	opt stack 0
  4264  0108D2                     _checkInputs:
  4265                           	opt stack 27
  4266                           
  4267                           ;clima.c: 321: unsigned int adcVal = 0;
  4268                           
  4269                           ;incstack = 0
  4270  0108D2  0E00               	movlw	0
  4271  0108D4  0100               	movlb	0	; () banked
  4272  0108D6  6F78               	movwf	(checkInputs@adcVal+1)& (0+255),b
  4273  0108D8  0E00               	movlw	0
  4274  0108DA  6F77               	movwf	checkInputs@adcVal& (0+255),b
  4275                           
  4276                           ;clima.c: 322: byte leftButton = 0;
  4277  0108DC  0E00               	movlw	0
  4278  0108DE  0100               	movlb	0	; () banked
  4279  0108E0  6F79               	movwf	checkInputs@leftButton& (0+255),b
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;clima.c: 324: static byte leftButton_old = 0;
  4283                           ;clima.c: 327: leftButton = PORTBbits.RB0;
  4284  0108E2  0E00               	movlw	0
  4285  0108E4  B081               	btfsc	3969,0,c	;volatile
  4286  0108E6  0E01               	movlw	1
  4287  0108E8  0100               	movlb	0	; () banked
  4288  0108EA  6F79               	movwf	checkInputs@leftButton& (0+255),b
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;clima.c: 328: if ( (leftButton == 0)
  4292                           ;clima.c: 329: && (leftButton != leftButton_old)
  4293                           ;clima.c: 330: )
  4294  0108EC  0100               	movlb	0	; () banked
  4295  0108EE  5179               	movf	checkInputs@leftButton& (0+255),w,b
  4296  0108F0  0100               	movlb	0	; () banked
  4297  0108F2  A4D8               	btfss	status,2,c
  4298  0108F4  D007               	goto	l3033
  4299                           
  4300                           ; BSR set to: 0
  4301  0108F6  5041               	movf	checkInputs@leftButton_old,w,c
  4302  0108F8  0100               	movlb	0	; () banked
  4303  0108FA  1979               	xorwf	checkInputs@leftButton& (0+255),w,b
  4304  0108FC  B4D8               	btfsc	status,2,c
  4305  0108FE  D002               	goto	l3033
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;clima.c: 331: {
  4309                           ;clima.c: 332: leftButtonEv = 1;
  4310  010900  0E01               	movlw	1
  4311  010902  6E47               	movwf	_leftButtonEv,c
  4312  010904                     l3033:
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;clima.c: 333: }
  4316                           ;clima.c: 334: leftButton_old = leftButton;
  4317  010904  C079  F041         	movff	checkInputs@leftButton,checkInputs@leftButton_old
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;clima.c: 344: adcVal = ADCRead(0);
  4321  010908  0E00               	movlw	0
  4322  01090A  EC48  F086         	call	_ADCRead
  4323  01090E  C010  F077         	movff	?_ADCRead,checkInputs@adcVal
  4324  010912  C011  F078         	movff	?_ADCRead+1,checkInputs@adcVal+1
  4325                           
  4326                           ;clima.c: 345: setTemp = adcVal/64 + 21;
  4327  010916  C077  F074         	movff	checkInputs@adcVal,??_checkInputs
  4328  01091A  C078  F075         	movff	checkInputs@adcVal+1,??_checkInputs+1
  4329  01091E  0E06               	movlw	6
  4330  010920  0100               	movlb	0	; () banked
  4331  010922  6F76               	movwf	(??_checkInputs+2)& (0+255),b
  4332  010924                     u2065:
  4333  010924  0100               	movlb	0	; () banked
  4334  010926  90D8               	bcf	status,0,c
  4335  010928  3375               	rrcf	(??_checkInputs+1)& (0+255),f,b
  4336  01092A  3374               	rrcf	??_checkInputs& (0+255),f,b
  4337  01092C  0100               	movlb	0	; () banked
  4338  01092E  2F76               	decfsz	(??_checkInputs+2)& (0+255),f,b
  4339  010930  D7F9               	goto	u2065
  4340  010932  0100               	movlb	0	; () banked
  4341  010934  5174               	movf	??_checkInputs& (0+255),w,b
  4342  010936  0F15               	addlw	21
  4343  010938  6E46               	movwf	_setTemp,c
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;clima.c: 348: if (inDeb == 0)
  4347  01093A  5042               	movf	_inDeb,w,c
  4348  01093C  A4D8               	btfss	status,2,c
  4349  01093E  D032               	goto	l3049
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;clima.c: 349: {
  4353                           ;clima.c: 359: adcVal = ADCRead(1);
  4354  010940  0E01               	movlw	1
  4355  010942  EC48  F086         	call	_ADCRead
  4356  010946  C010  F077         	movff	?_ADCRead,checkInputs@adcVal
  4357  01094A  C011  F078         	movff	?_ADCRead+1,checkInputs@adcVal+1
  4358                           
  4359                           ;clima.c: 360: outTemp = (adcVal*5 - (400))/(19);
  4360  01094E  C077  F010         	movff	checkInputs@adcVal,___wmul@multiplier
  4361  010952  C078  F011         	movff	checkInputs@adcVal+1,___wmul@multiplier+1
  4362  010956  0E00               	movlw	0
  4363  010958  6E13               	movwf	___wmul@multiplicand+1,c
  4364  01095A  0E05               	movlw	5
  4365  01095C  6E12               	movwf	___wmul@multiplicand,c
  4366  01095E  ECC0  F086         	call	___wmul	;wreg free
  4367  010962  0E70               	movlw	112
  4368  010964  2410               	addwf	?___wmul,w,c
  4369  010966  6E16               	movwf	___lwdiv@dividend,c
  4370  010968  0EFE               	movlw	254
  4371  01096A  2011               	addwfc	?___wmul+1,w,c
  4372  01096C  6E17               	movwf	___lwdiv@dividend+1,c
  4373  01096E  0E00               	movlw	0
  4374  010970  6E19               	movwf	___lwdiv@divisor+1,c
  4375  010972  0E13               	movlw	19
  4376  010974  6E18               	movwf	___lwdiv@divisor,c
  4377  010976  EC33  F085         	call	___lwdiv	;wreg free
  4378  01097A  C016  F03B         	movff	?___lwdiv,_outTemp
  4379  01097E  C017  F03C         	movff	?___lwdiv+1,_outTemp+1
  4380                           
  4381                           ;clima.c: 361: ;
  4382                           ;clima.c: 362: sprintf(msg, "%d", outTemp);
  4383  010982  0E60               	movlw	low _msg
  4384  010984  6E22               	movwf	sprintf@sp,c
  4385  010986  0E00               	movlw	high _msg
  4386  010988  6E23               	movwf	sprintf@sp+1,c
  4387  01098A  0EF8               	movlw	low STR_11
  4388  01098C  6E24               	movwf	sprintf@f,c
  4389  01098E  0EFF               	movlw	high STR_11
  4390  010990  6E25               	movwf	sprintf@f+1,c
  4391  010992  C03B  F026         	movff	_outTemp,?_sprintf+4
  4392  010996  C03C  F027         	movff	_outTemp+1,?_sprintf+5
  4393  01099A  ECA9  F081         	call	_sprintf	;wreg free
  4394                           
  4395                           ;clima.c: 363: ;
  4396                           ;clima.c: 364: ;
  4397                           ;clima.c: 378: inDeb = ((3000)/(100));
  4398  01099E  0E1E               	movlw	30
  4399  0109A0  6E42               	movwf	_inDeb,c
  4400                           
  4401                           ;clima.c: 379: }
  4402  0109A2  0012               	return	
  4403  0109A4                     l3049:
  4404                           
  4405                           ;clima.c: 380: else
  4406                           ;clima.c: 381: {
  4407                           ;clima.c: 382: inDeb--;
  4408  0109A4  0642               	decf	_inDeb,f,c
  4409  0109A6  0012               	return	
  4410  0109A8                     __end_of_checkInputs:
  4411                           	opt stack 0
  4412                           tblptru	equ	0xFF8
  4413                           tblptrh	equ	0xFF7
  4414                           tblptrl	equ	0xFF6
  4415                           tablat	equ	0xFF5
  4416                           prodh	equ	0xFF4
  4417                           prodl	equ	0xFF3
  4418                           intcon	equ	0xFF2
  4419                           indf0	equ	0xFEF
  4420                           postinc0	equ	0xFEE
  4421                           fsr0h	equ	0xFEA
  4422                           fsr0l	equ	0xFE9
  4423                           wreg	equ	0xFE8
  4424                           status	equ	0xFD8
  4425                           
  4426 ;; *************** function _sprintf *****************
  4427 ;; Defined at:
  4428 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  sp              2   33[COMRAM] PTR unsigned char 
  4431 ;;		 -> msg(20), 
  4432 ;;  f               2   35[COMRAM] PTR const unsigned char 
  4433 ;;		 -> STR_19(22), STR_18(3), STR_11(3), STR_2(5), 
  4434 ;;		 -> STR_1(5), 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  tmpval          4    0        struct .
  4437 ;;  cp              3    0        PTR const unsigned char 
  4438 ;;  width           2   53[COMRAM] int 
  4439 ;;  val             2   50[COMRAM] unsigned int 
  4440 ;;  ap              2   47[COMRAM] PTR void [1]
  4441 ;;		 -> ?_sprintf(2), 
  4442 ;;  len             2    0        unsigned int 
  4443 ;;  c               1   55[COMRAM] char 
  4444 ;;  flag            1   52[COMRAM] unsigned char 
  4445 ;;  prec            1   49[COMRAM] char 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  2   33[COMRAM] int 
  4448 ;; Registers used:
  4449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4455 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;Total ram usage:       23 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    2
  4462 ;; This function calls:
  4463 ;;		___lwdiv
  4464 ;;		___lwmod
  4465 ;;		___wmul
  4466 ;;		_isdigit
  4467 ;; This function is called by:
  4468 ;;		_updateLcd
  4469 ;;		_checkInputs
  4470 ;;		_stateMachine
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           	psect	text35
  4475  010352                     __ptext35:
  4476                           	opt stack 0
  4477  010352                     _sprintf:
  4478                           	opt stack 26
  4479                           
  4480                           ;doprnt.c: 494: va_list ap;
  4481                           ;doprnt.c: 499: signed char c;
  4482                           ;doprnt.c: 501: int width;
  4483                           ;doprnt.c: 506: signed char prec;
  4484                           ;doprnt.c: 508: unsigned char flag;
  4485                           ;doprnt.c: 523: union {
  4486                           ;doprnt.c: 524: unsigned long vd;
  4487                           ;doprnt.c: 525: double integ;
  4488                           ;doprnt.c: 526: } tmpval;
  4489                           ;doprnt.c: 528: unsigned int val;
  4490                           ;doprnt.c: 529: unsigned len;
  4491                           ;doprnt.c: 530: const char * cp;
  4492                           ;doprnt.c: 533: *ap = __va_start();
  4493                           
  4494                           ;incstack = 0
  4495  010352  0E26               	movlw	low (?_sprintf+4)
  4496  010354  6E30               	movwf	sprintf@ap,c
  4497  010356  0E00               	movlw	high (?_sprintf+4)
  4498  010358  6E31               	movwf	sprintf@ap+1,c
  4499                           
  4500                           ;doprnt.c: 536: while(c = *f++) {
  4501  01035A  D13F               	goto	l2781
  4502  01035C                     l2675:
  4503                           
  4504                           ;doprnt.c: 538: if(c != '%')
  4505  01035C  0E25               	movlw	37
  4506  01035E  1838               	xorwf	sprintf@c,w,c
  4507  010360  B4D8               	btfsc	status,2,c
  4508  010362  D009               	goto	l2681
  4509                           
  4510                           ;doprnt.c: 540: {
  4511                           ;doprnt.c: 541: ((*sp++ = (c)));
  4512  010364  C022  FFD9         	movff	sprintf@sp,fsr2l
  4513  010368  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  4514  01036C  C038  FFDF         	movff	sprintf@c,indf2
  4515  010370  4A22               	infsnz	sprintf@sp,f,c
  4516  010372  2A23               	incf	sprintf@sp+1,f,c
  4517                           
  4518                           ;doprnt.c: 542: continue;
  4519  010374  D132               	goto	l2781
  4520  010376                     l2681:
  4521                           
  4522                           ;doprnt.c: 543: }
  4523                           ;doprnt.c: 546: width = 0;
  4524  010376  0E00               	movlw	0
  4525  010378  6E37               	movwf	sprintf@width+1,c
  4526  01037A  0E00               	movlw	0
  4527  01037C  6E36               	movwf	sprintf@width,c
  4528                           
  4529                           ;doprnt.c: 548: flag = 0;
  4530  01037E  0E00               	movlw	0
  4531  010380  6E35               	movwf	sprintf@flag,c
  4532                           
  4533                           ;doprnt.c: 551: switch(*f) {
  4534                           
  4535                           ;doprnt.c: 550: for(;;) {
  4536  010382  D003               	goto	l2687
  4537  010384                     l2683:
  4538                           
  4539                           ;doprnt.c: 580: flag |= 0x04;
  4540  010384  8435               	bsf	sprintf@flag,2,c
  4541                           
  4542                           ;doprnt.c: 581: f++;
  4543  010386  4A24               	infsnz	sprintf@f,f,c
  4544  010388  2A25               	incf	sprintf@f+1,f,c
  4545  01038A                     l2687:
  4546  01038A  C024  FFF6         	movff	sprintf@f,tblptrl
  4547  01038E  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4548  010392                     	if	0	;tblptru may be non-zero
  4549  010392                     	endif
  4550  010392                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4551  010392  0E00               	movlw	low (__mediumconst shr (0+16))
  4552  010394  6EF8               	movwf	tblptru,c
  4553  010396                     	endif
  4554  010396  0008               	tblrd		*
  4555  010398  50F5               	movf	tablat,w,c
  4556                           
  4557                           ; Switch size 1, requested type "space"
  4558                           ; Number of cases is 1, Range of values is 48 to 48
  4559                           ; switch strategies available:
  4560                           ; Name         Instructions Cycles
  4561                           ; simple_byte            4     3 (average)
  4562                           ;	Chosen strategy is simple_byte
  4563  01039A  0A30               	xorlw	48	; case 48
  4564  01039C  B4D8               	btfsc	status,2,c
  4565  01039E  D7F2               	goto	l2683
  4566                           
  4567                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4568                           
  4569                           ;doprnt.c: 586: }
  4570                           
  4571                           ;doprnt.c: 585: break;
  4572  0103A0  C024  FFF6         	movff	sprintf@f,tblptrl
  4573  0103A4  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4574  0103A8                     	if	0	;tblptru may be non-zero
  4575  0103A8                     	endif
  4576  0103A8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4577  0103A8  0E00               	movlw	low (__mediumconst shr (0+16))
  4578  0103AA  6EF8               	movwf	tblptru,c
  4579  0103AC                     	endif
  4580  0103AC  0008               	tblrd		*
  4581  0103AE  50F5               	movf	tablat,w,c
  4582  0103B0  EC02  F087         	call	_isdigit
  4583  0103B4  A0D8               	btfss	status,0,c
  4584  0103B6  D036               	goto	l2703
  4585                           
  4586                           ;doprnt.c: 598: width = 0;
  4587  0103B8  0E00               	movlw	0
  4588  0103BA  6E37               	movwf	sprintf@width+1,c
  4589  0103BC  0E00               	movlw	0
  4590  0103BE  6E36               	movwf	sprintf@width,c
  4591  0103C0                     l2693:
  4592                           
  4593                           ;doprnt.c: 600: width *= 10;
  4594  0103C0  C036  F010         	movff	sprintf@width,___wmul@multiplier
  4595  0103C4  C037  F011         	movff	sprintf@width+1,___wmul@multiplier+1
  4596  0103C8  0E00               	movlw	0
  4597  0103CA  6E13               	movwf	___wmul@multiplicand+1,c
  4598  0103CC  0E0A               	movlw	10
  4599  0103CE  6E12               	movwf	___wmul@multiplicand,c
  4600  0103D0  ECC0  F086         	call	___wmul	;wreg free
  4601  0103D4  C010  F036         	movff	?___wmul,sprintf@width
  4602  0103D8  C011  F037         	movff	?___wmul+1,sprintf@width+1
  4603                           
  4604                           ;doprnt.c: 601: width += *f++ - '0';
  4605  0103DC  0ED0               	movlw	208
  4606  0103DE  6E2C               	movwf	??_sprintf& (0+255),c
  4607  0103E0  0EFF               	movlw	255
  4608  0103E2  6E2D               	movwf	(??_sprintf+1)& (0+255),c
  4609  0103E4  C024  FFF6         	movff	sprintf@f,tblptrl
  4610  0103E8  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4611  0103EC                     	if	0	;tblptru may be non-zero
  4612  0103EC                     	endif
  4613  0103EC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4614  0103EC  0E00               	movlw	low (__mediumconst shr (0+16))
  4615  0103EE  6EF8               	movwf	tblptru,c
  4616  0103F0                     	endif
  4617  0103F0  0008               	tblrd		*
  4618  0103F2  50F5               	movf	tablat,w,c
  4619  0103F4  6E2E               	movwf	(??_sprintf+2)& (0+255),c
  4620  0103F6  6A2F               	clrf	(??_sprintf+3)& (0+255),c
  4621  0103F8  502C               	movf	??_sprintf,w,c
  4622  0103FA  262E               	addwf	??_sprintf+2,f,c
  4623  0103FC  502D               	movf	??_sprintf+1,w,c
  4624  0103FE  222F               	addwfc	??_sprintf+3,f,c
  4625  010400  502E               	movf	??_sprintf+2,w,c
  4626  010402  2636               	addwf	sprintf@width,f,c
  4627  010404  502F               	movf	??_sprintf+3,w,c
  4628  010406  2237               	addwfc	sprintf@width+1,f,c
  4629  010408  4A24               	infsnz	sprintf@f,f,c
  4630  01040A  2A25               	incf	sprintf@f+1,f,c
  4631                           
  4632                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4633  01040C  C024  FFF6         	movff	sprintf@f,tblptrl
  4634  010410  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4635  010414                     	if	0	;tblptru may be non-zero
  4636  010414                     	endif
  4637  010414                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4638  010414  0E00               	movlw	low (__mediumconst shr (0+16))
  4639  010416  6EF8               	movwf	tblptru,c
  4640  010418                     	endif
  4641  010418  0008               	tblrd		*
  4642  01041A  50F5               	movf	tablat,w,c
  4643  01041C  EC02  F087         	call	_isdigit
  4644  010420  B0D8               	btfsc	status,0,c
  4645  010422  D7CE               	goto	l2693
  4646  010424                     l2703:
  4647  010424  C024  FFF6         	movff	sprintf@f,tblptrl
  4648  010428  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4649  01042C  4A24               	infsnz	sprintf@f,f,c
  4650  01042E  2A25               	incf	sprintf@f+1,f,c
  4651  010430                     	if	0	;tblptru may be non-zero
  4652  010430                     	endif
  4653  010430                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4654  010430  0E00               	movlw	low (__mediumconst shr (0+16))
  4655  010432  6EF8               	movwf	tblptru,c
  4656  010434                     	endif
  4657  010434  0008               	tblrd		*
  4658  010436  CFF5 F038          	movff	tablat,sprintf@c
  4659  01043A  5038               	movf	sprintf@c,w,c
  4660                           
  4661                           ; Switch size 1, requested type "space"
  4662                           ; Number of cases is 3, Range of values is 0 to 105
  4663                           ; switch strategies available:
  4664                           ; Name         Instructions Cycles
  4665                           ; simple_byte           10     6 (average)
  4666                           ;	Chosen strategy is simple_byte
  4667  01043C  0A00               	xorlw	0	; case 0
  4668  01043E  B4D8               	btfsc	status,2,c
  4669  010440  D0DA               	goto	l2783
  4670  010442  0A64               	xorlw	100	; case 100
  4671  010444  B4D8               	btfsc	status,2,c
  4672  010446  D003               	goto	l2705
  4673  010448  0A0D               	xorlw	13	; case 105
  4674  01044A  A4D8               	btfss	status,2,c
  4675  01044C  D0C6               	goto	l2781
  4676  01044E                     l2705:
  4677                           
  4678                           ;doprnt.c: 1253: {
  4679                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4680  01044E  C030  FFD9         	movff	sprintf@ap,fsr2l
  4681  010452  C031  FFDA         	movff	sprintf@ap+1,fsr2h
  4682  010456  CFDE F033          	movff	postinc2,sprintf@val
  4683  01045A  CFDD F034          	movff	postdec2,sprintf@val+1
  4684  01045E  0E02               	movlw	2
  4685  010460  2630               	addwf	sprintf@ap,f,c
  4686  010462  0E00               	movlw	0
  4687  010464  2231               	addwfc	sprintf@ap+1,f,c
  4688                           
  4689                           ;doprnt.c: 1261: if((int)val < 0) {
  4690  010466  AE34               	btfss	sprintf@val+1,7,c
  4691  010468  D006               	goto	l2715
  4692                           
  4693                           ;doprnt.c: 1262: flag |= 0x03;
  4694  01046A  0E03               	movlw	3
  4695  01046C  1235               	iorwf	sprintf@flag,f,c
  4696                           
  4697                           ;doprnt.c: 1263: val = -val;
  4698  01046E  6C33               	negf	sprintf@val,c
  4699  010470  1E34               	comf	sprintf@val+1,f,c
  4700  010472  B0D8               	btfsc	status,0,c
  4701  010474  2A34               	incf	sprintf@val+1,f,c
  4702  010476                     l2715:
  4703                           
  4704                           ;doprnt.c: 1264: }
  4705                           ;doprnt.c: 1266: }
  4706                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4707  010476  0E01               	movlw	1
  4708  010478  6E38               	movwf	sprintf@c,c
  4709  01047A                     l2717:
  4710  01047A  0E05               	movlw	5
  4711  01047C  1838               	xorwf	sprintf@c,w,c
  4712  01047E  B4D8               	btfsc	status,2,c
  4713  010480  D015               	goto	l2729
  4714                           
  4715                           ;doprnt.c: 1306: if(val < dpowers[c])
  4716  010482  5038               	movf	sprintf@c,w,c
  4717  010484  0D02               	mullw	2
  4718  010486  0EF5               	movlw	low _dpowers
  4719  010488  24F3               	addwf	prodl,w,c
  4720  01048A  6EF6               	movwf	tblptrl,c
  4721  01048C  0EFE               	movlw	high _dpowers
  4722  01048E  20F4               	addwfc	prodh,w,c
  4723  010490  6EF7               	movwf	tblptrh,c
  4724  010492                     	if	1	;There are 3 active tblptr bytes
  4725  010492  6AF8               	clrf	tblptru,c
  4726  010494  0E00               	movlw	low (__mediumconst shr (0+16))
  4727  010496  22F8               	addwfc	tblptru,f,c
  4728  010498                     	endif
  4729  010498  0009               	tblrd		*+
  4730  01049A  50F5               	movf	tablat,w,c
  4731  01049C  5C33               	subwf	sprintf@val,w,c
  4732  01049E  0009               	tblrd		*+
  4733  0104A0  50F5               	movf	tablat,w,c
  4734  0104A2  5834               	subwfb	sprintf@val+1,w,c
  4735  0104A4  A0D8               	btfss	status,0,c
  4736  0104A6  D002               	goto	l2729
  4737                           
  4738                           ;doprnt.c: 1307: break;
  4739  0104A8  2A38               	incf	sprintf@c,f,c
  4740  0104AA  D7E7               	goto	l2717
  4741  0104AC                     l2729:
  4742                           
  4743                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4744  0104AC  5036               	movf	sprintf@width,w,c
  4745  0104AE  1037               	iorwf	sprintf@width+1,w,c
  4746  0104B0  B4D8               	btfsc	status,2,c
  4747  0104B2  D009               	goto	l2735
  4748  0104B4  C035  F02C         	movff	sprintf@flag,??_sprintf
  4749  0104B8  0E03               	movlw	3
  4750  0104BA  162C               	andwf	??_sprintf,f,c
  4751  0104BC  B4D8               	btfsc	status,2,c
  4752  0104BE  D003               	goto	l2735
  4753                           
  4754                           ;doprnt.c: 1346: width--;
  4755  0104C0  0636               	decf	sprintf@width,f,c
  4756  0104C2  A0D8               	btfss	status,0,c
  4757  0104C4  0637               	decf	sprintf@width+1,f,c
  4758  0104C6                     l2735:
  4759                           
  4760                           ;doprnt.c: 1381: if(width > c)
  4761  0104C6  0E80               	movlw	128
  4762  0104C8  BE38               	btfsc	sprintf@c,7,c
  4763  0104CA  0E7F               	movlw	127
  4764  0104CC  6E2C               	movwf	??_sprintf& (0+255),c
  4765  0104CE  5036               	movf	sprintf@width,w,c
  4766  0104D0  5C38               	subwf	sprintf@c,w,c
  4767  0104D2  5037               	movf	sprintf@width+1,w,c
  4768  0104D4  0A80               	xorlw	128
  4769  0104D6  582C               	subwfb	??_sprintf& (0+255),w,c
  4770  0104D8  B0D8               	btfsc	status,0,c
  4771  0104DA  D007               	goto	l2739
  4772                           
  4773                           ;doprnt.c: 1382: width -= c;
  4774  0104DC  5038               	movf	sprintf@c,w,c
  4775  0104DE  5E36               	subwf	sprintf@width,f,c
  4776  0104E0  0E00               	movlw	0
  4777  0104E2  BE38               	btfsc	sprintf@c,7,c
  4778  0104E4  0EFF               	movlw	255
  4779  0104E6  5A37               	subwfb	sprintf@width+1,f,c
  4780  0104E8  D004               	goto	l2741
  4781  0104EA                     l2739:
  4782                           
  4783                           ;doprnt.c: 1383: else
  4784                           ;doprnt.c: 1384: width = 0;
  4785  0104EA  0E00               	movlw	0
  4786  0104EC  6E37               	movwf	sprintf@width+1,c
  4787  0104EE  0E00               	movlw	0
  4788  0104F0  6E36               	movwf	sprintf@width,c
  4789  0104F2                     l2741:
  4790                           
  4791                           ;doprnt.c: 1387: if(flag & 0x04) {
  4792  0104F2  A435               	btfss	sprintf@flag,2,c
  4793  0104F4  D01E               	goto	l2757
  4794                           
  4795                           ;doprnt.c: 1392: if(flag & 0x03)
  4796  0104F6  C035  F02C         	movff	sprintf@flag,??_sprintf
  4797  0104FA  0E03               	movlw	3
  4798  0104FC  162C               	andwf	??_sprintf,f,c
  4799  0104FE  B4D8               	btfsc	status,2,c
  4800  010500  D008               	goto	l2749
  4801                           
  4802                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4803  010502  C022  FFD9         	movff	sprintf@sp,fsr2l
  4804  010506  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  4805  01050A  0E2D               	movlw	45
  4806  01050C  6EDF               	movwf	indf2,c
  4807  01050E  4A22               	infsnz	sprintf@sp,f,c
  4808  010510  2A23               	incf	sprintf@sp+1,f,c
  4809  010512                     l2749:
  4810                           
  4811                           ;doprnt.c: 1415: if(width)
  4812  010512  5036               	movf	sprintf@width,w,c
  4813  010514  1037               	iorwf	sprintf@width+1,w,c
  4814  010516  B4D8               	btfsc	status,2,c
  4815  010518  D02D               	goto	l2771
  4816                           
  4817                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4818                           
  4819                           ;doprnt.c: 1416: do
  4820  01051A  C022  FFD9         	movff	sprintf@sp,fsr2l
  4821  01051E  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  4822  010522  0E30               	movlw	48
  4823  010524  6EDF               	movwf	indf2,c
  4824  010526  4A22               	infsnz	sprintf@sp,f,c
  4825  010528  2A23               	incf	sprintf@sp+1,f,c
  4826                           
  4827                           ;doprnt.c: 1418: while(--width);
  4828  01052A  0636               	decf	sprintf@width,f,c
  4829  01052C  A0D8               	btfss	status,0,c
  4830  01052E  0637               	decf	sprintf@width+1,f,c
  4831  010530  D7F0               	goto	l2749
  4832  010532                     l2757:
  4833                           
  4834                           ;doprnt.c: 1422: {
  4835                           ;doprnt.c: 1424: if(width
  4836                           ;doprnt.c: 1428: )
  4837  010532  5036               	movf	sprintf@width,w,c
  4838  010534  1037               	iorwf	sprintf@width+1,w,c
  4839  010536  B4D8               	btfsc	status,2,c
  4840  010538  D00F               	goto	l2765
  4841  01053A                     l2759:
  4842                           
  4843                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4844  01053A  C022  FFD9         	movff	sprintf@sp,fsr2l
  4845  01053E  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  4846  010542  0E20               	movlw	32
  4847  010544  6EDF               	movwf	indf2,c
  4848  010546  4A22               	infsnz	sprintf@sp,f,c
  4849  010548  2A23               	incf	sprintf@sp+1,f,c
  4850                           
  4851                           ;doprnt.c: 1431: while(--width);
  4852  01054A  0636               	decf	sprintf@width,f,c
  4853  01054C  A0D8               	btfss	status,0,c
  4854  01054E  0637               	decf	sprintf@width+1,f,c
  4855  010550  5036               	movf	sprintf@width,w,c
  4856  010552  1037               	iorwf	sprintf@width+1,w,c
  4857  010554  A4D8               	btfss	status,2,c
  4858  010556  D7F1               	goto	l2759
  4859  010558                     l2765:
  4860                           
  4861                           ;doprnt.c: 1438: if(flag & 0x03)
  4862  010558  C035  F02C         	movff	sprintf@flag,??_sprintf
  4863  01055C  0E03               	movlw	3
  4864  01055E  162C               	andwf	??_sprintf,f,c
  4865  010560  B4D8               	btfsc	status,2,c
  4866  010562  D008               	goto	l2771
  4867                           
  4868                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4869  010564  C022  FFD9         	movff	sprintf@sp,fsr2l
  4870  010568  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  4871  01056C  0E2D               	movlw	45
  4872  01056E  6EDF               	movwf	indf2,c
  4873  010570  4A22               	infsnz	sprintf@sp,f,c
  4874  010572  2A23               	incf	sprintf@sp+1,f,c
  4875  010574                     l2771:
  4876                           
  4877                           ;doprnt.c: 1469: }
  4878                           ;doprnt.c: 1472: prec = c;
  4879  010574  C038  F032         	movff	sprintf@c,sprintf@prec
  4880                           
  4881                           ;doprnt.c: 1474: while(prec--) {
  4882  010578  D02C               	goto	l2779
  4883  01057A                     l2773:
  4884                           
  4885                           ;doprnt.c: 1478: {
  4886                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4887  01057A  5032               	movf	sprintf@prec,w,c
  4888  01057C  0D02               	mullw	2
  4889  01057E  0EF5               	movlw	low _dpowers
  4890  010580  24F3               	addwf	prodl,w,c
  4891  010582  6EF6               	movwf	tblptrl,c
  4892  010584  0EFE               	movlw	high _dpowers
  4893  010586  20F4               	addwfc	prodh,w,c
  4894  010588  6EF7               	movwf	tblptrh,c
  4895  01058A                     	if	1	;There are 3 active tblptr bytes
  4896  01058A  6AF8               	clrf	tblptru,c
  4897  01058C  0E00               	movlw	low (__mediumconst shr (0+16))
  4898  01058E  22F8               	addwfc	tblptru,f,c
  4899  010590                     	endif
  4900  010590  0009               	tblrd		*+
  4901  010592  CFF5 F018          	movff	tablat,___lwdiv@divisor
  4902  010596  000A               	tblrd		*-
  4903  010598  CFF5 F019          	movff	tablat,___lwdiv@divisor+1
  4904  01059C  C033  F016         	movff	sprintf@val,___lwdiv@dividend
  4905  0105A0  C034  F017         	movff	sprintf@val+1,___lwdiv@dividend+1
  4906  0105A4  EC33  F085         	call	___lwdiv	;wreg free
  4907  0105A8  C016  F01D         	movff	?___lwdiv,___lwmod@dividend
  4908  0105AC  C017  F01E         	movff	?___lwdiv+1,___lwmod@dividend+1
  4909  0105B0  0E00               	movlw	0
  4910  0105B2  6E20               	movwf	___lwmod@divisor+1,c
  4911  0105B4  0E0A               	movlw	10
  4912  0105B6  6E1F               	movwf	___lwmod@divisor,c
  4913  0105B8  ECCA  F085         	call	___lwmod	;wreg free
  4914  0105BC  501D               	movf	?___lwmod,w,c
  4915  0105BE  0F30               	addlw	48
  4916  0105C0  6E38               	movwf	sprintf@c,c
  4917                           
  4918                           ;doprnt.c: 1523: }
  4919                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4920  0105C2  C022  FFD9         	movff	sprintf@sp,fsr2l
  4921  0105C6  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  4922  0105CA  C038  FFDF         	movff	sprintf@c,indf2
  4923  0105CE  4A22               	infsnz	sprintf@sp,f,c
  4924  0105D0  2A23               	incf	sprintf@sp+1,f,c
  4925  0105D2                     l2779:
  4926  0105D2  0632               	decf	sprintf@prec,f,c
  4927  0105D4  2832               	incf	sprintf@prec,w,c
  4928  0105D6  A4D8               	btfss	status,2,c
  4929  0105D8  D7D0               	goto	l2773
  4930  0105DA                     l2781:
  4931  0105DA  C024  FFF6         	movff	sprintf@f,tblptrl
  4932  0105DE  C025  FFF7         	movff	sprintf@f+1,tblptrh
  4933  0105E2  4A24               	infsnz	sprintf@f,f,c
  4934  0105E4  2A25               	incf	sprintf@f+1,f,c
  4935  0105E6                     	if	0	;tblptru may be non-zero
  4936  0105E6                     	endif
  4937  0105E6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4938  0105E6  0E00               	movlw	low (__mediumconst shr (0+16))
  4939  0105E8  6EF8               	movwf	tblptru,c
  4940  0105EA                     	endif
  4941  0105EA  0008               	tblrd		*
  4942  0105EC  CFF5 F038          	movff	tablat,sprintf@c
  4943  0105F0  5038               	movf	sprintf@c,w,c
  4944  0105F2  A4D8               	btfss	status,2,c
  4945  0105F4  D6B3               	goto	l2675
  4946  0105F6                     l2783:
  4947                           
  4948                           ;doprnt.c: 1538: *sp = 0;
  4949  0105F6  C022  FFD9         	movff	sprintf@sp,fsr2l
  4950  0105FA  C023  FFDA         	movff	sprintf@sp+1,fsr2h
  4951  0105FE  0E00               	movlw	0
  4952  010600  6EDF               	movwf	indf2,c
  4953  010602  0012               	return	
  4954  010604                     __end_of_sprintf:
  4955                           	opt stack 0
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           intcon	equ	0xFF2
  4963                           indf0	equ	0xFEF
  4964                           postinc0	equ	0xFEE
  4965                           fsr0h	equ	0xFEA
  4966                           fsr0l	equ	0xFE9
  4967                           wreg	equ	0xFE8
  4968                           indf2	equ	0xFDF
  4969                           postinc2	equ	0xFDE
  4970                           postdec2	equ	0xFDD
  4971                           fsr2h	equ	0xFDA
  4972                           fsr2l	equ	0xFD9
  4973                           status	equ	0xFD8
  4974                           
  4975 ;; *************** function _isdigit *****************
  4976 ;; Defined at:
  4977 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  c               1    wreg     unsigned char 
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;  c               1   17[COMRAM] unsigned char 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;		None               void
  4984 ;; Registers used:
  4985 ;;		wreg, status,2, status,0
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;Total ram usage:        3 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    1
  4998 ;; This function calls:
  4999 ;;		Nothing
  5000 ;; This function is called by:
  5001 ;;		_sprintf
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           	psect	text36
  5006  010E04                     __ptext36:
  5007                           	opt stack 0
  5008  010E04                     _isdigit:
  5009                           	opt stack 26
  5010                           
  5011                           ;incstack = 0
  5012                           ;isdigit@c stored from wreg
  5013  010E04  6E12               	movwf	isdigit@c,c
  5014  010E06  0E00               	movlw	0
  5015  010E08  6E11               	movwf	_isdigit$1782,c
  5016  010E0A  0E3A               	movlw	58
  5017  010E0C  6012               	cpfslt	isdigit@c,c
  5018  010E0E  D005               	goto	l2613
  5019  010E10  0E2F               	movlw	47
  5020  010E12  6412               	cpfsgt	isdigit@c,c
  5021  010E14  D002               	goto	l2613
  5022  010E16  0E01               	movlw	1
  5023  010E18  6E11               	movwf	_isdigit$1782,c
  5024  010E1A                     l2613:
  5025  010E1A  C011  F010         	movff	_isdigit$1782,??_isdigit
  5026  010E1E  3010               	rrcf	??_isdigit,w,c
  5027  010E20  0012               	return	
  5028  010E22                     __end_of_isdigit:
  5029                           	opt stack 0
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           prodh	equ	0xFF4
  5035                           prodl	equ	0xFF3
  5036                           intcon	equ	0xFF2
  5037                           indf0	equ	0xFEF
  5038                           postinc0	equ	0xFEE
  5039                           fsr0h	equ	0xFEA
  5040                           fsr0l	equ	0xFE9
  5041                           wreg	equ	0xFE8
  5042                           indf2	equ	0xFDF
  5043                           postinc2	equ	0xFDE
  5044                           postdec2	equ	0xFDD
  5045                           fsr2h	equ	0xFDA
  5046                           fsr2l	equ	0xFD9
  5047                           status	equ	0xFD8
  5048                           
  5049 ;; *************** function ___wmul *****************
  5050 ;; Defined at:
  5051 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;  multiplier      2   15[COMRAM] unsigned int 
  5054 ;;  multiplicand    2   17[COMRAM] unsigned int 
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  product         2   19[COMRAM] unsigned int 
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  2   15[COMRAM] unsigned int 
  5059 ;; Registers used:
  5060 ;;		wreg, status,2, status,0, prodl, prodh
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5066 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;Total ram usage:        6 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    1
  5073 ;; This function calls:
  5074 ;;		Nothing
  5075 ;; This function is called by:
  5076 ;;		_checkInputs
  5077 ;;		_sprintf
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text37
  5082  010D80                     __ptext37:
  5083                           	opt stack 0
  5084  010D80                     ___wmul:
  5085                           	opt stack 26
  5086                           
  5087                           ;incstack = 0
  5088  010D80  5010               	movf	___wmul@multiplier,w,c
  5089  010D82  0212               	mulwf	___wmul@multiplicand,c
  5090  010D84  CFF3 F014          	movff	prodl,___wmul@product
  5091  010D88  CFF4 F015          	movff	prodh,___wmul@product+1
  5092  010D8C  5010               	movf	___wmul@multiplier,w,c
  5093  010D8E  0213               	mulwf	___wmul@multiplicand+1,c
  5094  010D90  50F3               	movf	prodl,w,c
  5095  010D92  2615               	addwf	___wmul@product+1,f,c
  5096  010D94  5011               	movf	___wmul@multiplier+1,w,c
  5097  010D96  0212               	mulwf	___wmul@multiplicand,c
  5098  010D98  50F3               	movf	prodl,w,c
  5099  010D9A  2615               	addwf	___wmul@product+1,f,c
  5100  010D9C  C014  F010         	movff	___wmul@product,?___wmul
  5101  010DA0  C015  F011         	movff	___wmul@product+1,?___wmul+1
  5102  010DA4  0012               	return	
  5103  010DA6                     __end_of___wmul:
  5104                           	opt stack 0
  5105                           tblptru	equ	0xFF8
  5106                           tblptrh	equ	0xFF7
  5107                           tblptrl	equ	0xFF6
  5108                           tablat	equ	0xFF5
  5109                           prodh	equ	0xFF4
  5110                           prodl	equ	0xFF3
  5111                           intcon	equ	0xFF2
  5112                           indf0	equ	0xFEF
  5113                           postinc0	equ	0xFEE
  5114                           fsr0h	equ	0xFEA
  5115                           fsr0l	equ	0xFE9
  5116                           wreg	equ	0xFE8
  5117                           indf2	equ	0xFDF
  5118                           postinc2	equ	0xFDE
  5119                           postdec2	equ	0xFDD
  5120                           fsr2h	equ	0xFDA
  5121                           fsr2l	equ	0xFD9
  5122                           status	equ	0xFD8
  5123                           
  5124 ;; *************** function ___lwmod *****************
  5125 ;; Defined at:
  5126 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;  dividend        2   28[COMRAM] unsigned int 
  5129 ;;  divisor         2   30[COMRAM] unsigned int 
  5130 ;; Auto vars:     Size  Location     Type
  5131 ;;  counter         1   32[COMRAM] unsigned char 
  5132 ;; Return value:  Size  Location     Type
  5133 ;;                  2   28[COMRAM] unsigned int 
  5134 ;; Registers used:
  5135 ;;		wreg, status,2, status,0
  5136 ;; Tracked objects:
  5137 ;;		On entry : 0/0
  5138 ;;		On exit  : 0/0
  5139 ;;		Unchanged: 0/0
  5140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5141 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5145 ;;Total ram usage:        5 bytes
  5146 ;; Hardware stack levels used:    1
  5147 ;; Hardware stack levels required when called:    1
  5148 ;; This function calls:
  5149 ;;		Nothing
  5150 ;; This function is called by:
  5151 ;;		_sprintf
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text38
  5156  010B94                     __ptext38:
  5157                           	opt stack 0
  5158  010B94                     ___lwmod:
  5159                           	opt stack 26
  5160                           
  5161                           ;incstack = 0
  5162  010B94  501F               	movf	___lwmod@divisor,w,c
  5163  010B96  1020               	iorwf	___lwmod@divisor+1,w,c
  5164  010B98  B4D8               	btfsc	status,2,c
  5165  010B9A  D018               	goto	l848
  5166  010B9C  0E01               	movlw	1
  5167  010B9E  6E21               	movwf	___lwmod@counter,c
  5168  010BA0  D004               	goto	l2651
  5169  010BA2                     l2649:
  5170  010BA2  90D8               	bcf	status,0,c
  5171  010BA4  361F               	rlcf	___lwmod@divisor,f,c
  5172  010BA6  3620               	rlcf	___lwmod@divisor+1,f,c
  5173  010BA8  2A21               	incf	___lwmod@counter,f,c
  5174  010BAA                     l2651:
  5175  010BAA  AE20               	btfss	___lwmod@divisor+1,7,c
  5176  010BAC  D7FA               	goto	l2649
  5177  010BAE                     l2653:
  5178  010BAE  501F               	movf	___lwmod@divisor,w,c
  5179  010BB0  5C1D               	subwf	___lwmod@dividend,w,c
  5180  010BB2  5020               	movf	___lwmod@divisor+1,w,c
  5181  010BB4  581E               	subwfb	___lwmod@dividend+1,w,c
  5182  010BB6  A0D8               	btfss	status,0,c
  5183  010BB8  D004               	goto	l2657
  5184  010BBA  501F               	movf	___lwmod@divisor,w,c
  5185  010BBC  5E1D               	subwf	___lwmod@dividend,f,c
  5186  010BBE  5020               	movf	___lwmod@divisor+1,w,c
  5187  010BC0  5A1E               	subwfb	___lwmod@dividend+1,f,c
  5188  010BC2                     l2657:
  5189  010BC2  90D8               	bcf	status,0,c
  5190  010BC4  3220               	rrcf	___lwmod@divisor+1,f,c
  5191  010BC6  321F               	rrcf	___lwmod@divisor,f,c
  5192  010BC8  2E21               	decfsz	___lwmod@counter,f,c
  5193  010BCA  D7F1               	goto	l2653
  5194  010BCC                     l848:
  5195  010BCC  C01D  F01D         	movff	___lwmod@dividend,?___lwmod
  5196  010BD0  C01E  F01E         	movff	___lwmod@dividend+1,?___lwmod+1
  5197  010BD4  0012               	return		;funcret
  5198  010BD6                     __end_of___lwmod:
  5199                           	opt stack 0
  5200                           tblptru	equ	0xFF8
  5201                           tblptrh	equ	0xFF7
  5202                           tblptrl	equ	0xFF6
  5203                           tablat	equ	0xFF5
  5204                           prodh	equ	0xFF4
  5205                           prodl	equ	0xFF3
  5206                           intcon	equ	0xFF2
  5207                           indf0	equ	0xFEF
  5208                           postinc0	equ	0xFEE
  5209                           fsr0h	equ	0xFEA
  5210                           fsr0l	equ	0xFE9
  5211                           wreg	equ	0xFE8
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           fsr2h	equ	0xFDA
  5216                           fsr2l	equ	0xFD9
  5217                           status	equ	0xFD8
  5218                           
  5219 ;; *************** function ___lwdiv *****************
  5220 ;; Defined at:
  5221 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  dividend        2   21[COMRAM] unsigned int 
  5224 ;;  divisor         2   23[COMRAM] unsigned int 
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  quotient        2   26[COMRAM] unsigned int 
  5227 ;;  counter         1   25[COMRAM] unsigned char 
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  2   21[COMRAM] unsigned int 
  5230 ;; Registers used:
  5231 ;;		wreg, status,2, status,0
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5237 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;Total ram usage:        7 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; Hardware stack levels required when called:    1
  5244 ;; This function calls:
  5245 ;;		Nothing
  5246 ;; This function is called by:
  5247 ;;		_checkInputs
  5248 ;;		_sprintf
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           	psect	text39
  5253  010A66                     __ptext39:
  5254                           	opt stack 0
  5255  010A66                     ___lwdiv:
  5256                           	opt stack 26
  5257                           
  5258                           ;incstack = 0
  5259  010A66  0E00               	movlw	0
  5260  010A68  6E1C               	movwf	___lwdiv@quotient+1,c
  5261  010A6A  0E00               	movlw	0
  5262  010A6C  6E1B               	movwf	___lwdiv@quotient,c
  5263  010A6E  5018               	movf	___lwdiv@divisor,w,c
  5264  010A70  1019               	iorwf	___lwdiv@divisor+1,w,c
  5265  010A72  B4D8               	btfsc	status,2,c
  5266  010A74  D01C               	goto	l838
  5267  010A76  0E01               	movlw	1
  5268  010A78  6E1A               	movwf	___lwdiv@counter,c
  5269  010A7A  D004               	goto	l2631
  5270  010A7C                     l2629:
  5271  010A7C  90D8               	bcf	status,0,c
  5272  010A7E  3618               	rlcf	___lwdiv@divisor,f,c
  5273  010A80  3619               	rlcf	___lwdiv@divisor+1,f,c
  5274  010A82  2A1A               	incf	___lwdiv@counter,f,c
  5275  010A84                     l2631:
  5276  010A84  AE19               	btfss	___lwdiv@divisor+1,7,c
  5277  010A86  D7FA               	goto	l2629
  5278  010A88                     l2633:
  5279  010A88  90D8               	bcf	status,0,c
  5280  010A8A  361B               	rlcf	___lwdiv@quotient,f,c
  5281  010A8C  361C               	rlcf	___lwdiv@quotient+1,f,c
  5282  010A8E  5018               	movf	___lwdiv@divisor,w,c
  5283  010A90  5C16               	subwf	___lwdiv@dividend,w,c
  5284  010A92  5019               	movf	___lwdiv@divisor+1,w,c
  5285  010A94  5817               	subwfb	___lwdiv@dividend+1,w,c
  5286  010A96  A0D8               	btfss	status,0,c
  5287  010A98  D005               	goto	l2641
  5288  010A9A  5018               	movf	___lwdiv@divisor,w,c
  5289  010A9C  5E16               	subwf	___lwdiv@dividend,f,c
  5290  010A9E  5019               	movf	___lwdiv@divisor+1,w,c
  5291  010AA0  5A17               	subwfb	___lwdiv@dividend+1,f,c
  5292  010AA2  801B               	bsf	___lwdiv@quotient,0,c
  5293  010AA4                     l2641:
  5294  010AA4  90D8               	bcf	status,0,c
  5295  010AA6  3219               	rrcf	___lwdiv@divisor+1,f,c
  5296  010AA8  3218               	rrcf	___lwdiv@divisor,f,c
  5297  010AAA  2E1A               	decfsz	___lwdiv@counter,f,c
  5298  010AAC  D7ED               	goto	l2633
  5299  010AAE                     l838:
  5300  010AAE  C01B  F016         	movff	___lwdiv@quotient,?___lwdiv
  5301  010AB2  C01C  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5302  010AB6  0012               	return		;funcret
  5303  010AB8                     __end_of___lwdiv:
  5304                           	opt stack 0
  5305                           tblptru	equ	0xFF8
  5306                           tblptrh	equ	0xFF7
  5307                           tblptrl	equ	0xFF6
  5308                           tablat	equ	0xFF5
  5309                           prodh	equ	0xFF4
  5310                           prodl	equ	0xFF3
  5311                           intcon	equ	0xFF2
  5312                           indf0	equ	0xFEF
  5313                           postinc0	equ	0xFEE
  5314                           fsr0h	equ	0xFEA
  5315                           fsr0l	equ	0xFE9
  5316                           wreg	equ	0xFE8
  5317                           indf2	equ	0xFDF
  5318                           postinc2	equ	0xFDE
  5319                           postdec2	equ	0xFDD
  5320                           fsr2h	equ	0xFDA
  5321                           fsr2l	equ	0xFD9
  5322                           status	equ	0xFD8
  5323                           
  5324 ;; *************** function _ADCRead *****************
  5325 ;; Defined at:
  5326 ;;		line 709 in file "clima.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;  ch              1    wreg     unsigned char 
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;  ch              1   18[COMRAM] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  2   15[COMRAM] unsigned int 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2, status,0
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5340 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;Total ram usage:        4 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    1
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		_checkInputs
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text40
  5355  010C90                     __ptext40:
  5356                           	opt stack 0
  5357  010C90                     _ADCRead:
  5358                           	opt stack 28
  5359                           
  5360                           ;incstack = 0
  5361                           ;ADCRead@ch stored from wreg
  5362  010C90  6E13               	movwf	ADCRead@ch,c
  5363                           
  5364                           ;clima.c: 711: if(ch>13) return 0;
  5365  010C92  0E0D               	movlw	13
  5366  010C94  6413               	cpfsgt	ADCRead@ch,c
  5367  010C96  D005               	goto	l206
  5368  010C98  0E00               	movlw	0
  5369  010C9A  6E11               	movwf	?_ADCRead+1,c
  5370  010C9C  0E00               	movlw	0
  5371  010C9E  6E10               	movwf	?_ADCRead,c
  5372  010CA0  0012               	return	
  5373  010CA2                     l206:
  5374                           
  5375                           ;clima.c: 713: ADCON0bits.ADON = 1;
  5376  010CA2  80C2               	bsf	4034,0,c	;volatile
  5377                           
  5378                           ;clima.c: 714: ADCON0bits.CHS = ch;
  5379  010CA4  C013  F012         	movff	ADCRead@ch,??_ADCRead
  5380  010CA8  4612               	rlncf	??_ADCRead,f,c
  5381  010CAA  4612               	rlncf	??_ADCRead,f,c
  5382  010CAC  50C2               	movf	4034,w,c	;volatile
  5383  010CAE  1812               	xorwf	??_ADCRead,w,c
  5384  010CB0  0BC3               	andlw	-61
  5385  010CB2  1812               	xorwf	??_ADCRead,w,c
  5386  010CB4  6EC2               	movwf	4034,c	;volatile
  5387                           
  5388                           ;clima.c: 715: ADCON0bits.ADON = 1;
  5389  010CB6  80C2               	bsf	4034,0,c	;volatile
  5390                           
  5391                           ;clima.c: 716: ADCON0bits.GO_nDONE = 1;
  5392  010CB8  82C2               	bsf	4034,1,c	;volatile
  5393  010CBA                     l208:
  5394  010CBA  B2C2               	btfsc	4034,1,c	;volatile
  5395  010CBC  D7FE               	goto	l208
  5396                           
  5397                           ;clima.c: 720: return ADRES;
  5398  010CBE  CFC3 F010          	movff	4035,?_ADCRead	;volatile
  5399  010CC2  CFC4 F011          	movff	4036,?_ADCRead+1	;volatile
  5400  010CC6  0012               	return		;funcret
  5401  010CC8                     __end_of_ADCRead:
  5402                           	opt stack 0
  5403                           tblptru	equ	0xFF8
  5404                           tblptrh	equ	0xFF7
  5405                           tblptrl	equ	0xFF6
  5406                           tablat	equ	0xFF5
  5407                           prodh	equ	0xFF4
  5408                           prodl	equ	0xFF3
  5409                           intcon	equ	0xFF2
  5410                           indf0	equ	0xFEF
  5411                           postinc0	equ	0xFEE
  5412                           fsr0h	equ	0xFEA
  5413                           fsr0l	equ	0xFE9
  5414                           wreg	equ	0xFE8
  5415                           indf2	equ	0xFDF
  5416                           postinc2	equ	0xFDE
  5417                           postdec2	equ	0xFDD
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _ISR *****************
  5423 ;; Defined at:
  5424 ;;		line 788 in file "clima.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      void 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2, status,0
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;Total ram usage:       15 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		Interrupt level 2
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           	psect	intcode
  5452  000008                     __pintcode:
  5453                           	opt stack 0
  5454  000008                     _ISR:
  5455                           	opt stack 24
  5456                           
  5457                           ;incstack = 0
  5458  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5459  00000A  EDEB  F083         	call	int_func,f	;refresh shadow registers
  5460                           tblptru	equ	0xFF8
  5461                           tblptrh	equ	0xFF7
  5462                           tblptrl	equ	0xFF6
  5463                           tablat	equ	0xFF5
  5464                           prodh	equ	0xFF4
  5465                           prodl	equ	0xFF3
  5466                           intcon	equ	0xFF2
  5467                           indf0	equ	0xFEF
  5468                           postinc0	equ	0xFEE
  5469                           fsr0h	equ	0xFEA
  5470                           fsr0l	equ	0xFE9
  5471                           wreg	equ	0xFE8
  5472                           indf2	equ	0xFDF
  5473                           postinc2	equ	0xFDE
  5474                           postdec2	equ	0xFDD
  5475                           fsr2h	equ	0xFDA
  5476                           fsr2l	equ	0xFD9
  5477                           status	equ	0xFD8
  5478                           
  5479                           	psect	intcode_body
  5480  0107D6                     __pintcode_body:
  5481                           	opt stack 24
  5482  0107D6                     int_func:
  5483                           	opt stack 24
  5484  0107D6  0006               	pop		; remove dummy address from shadow register refresh
  5485  0107D8  CFFA F002          	movff	pclath,??_ISR+1
  5486  0107DC  CFFB F003          	movff	pclatu,??_ISR+2
  5487  0107E0  CFE9 F004          	movff	fsr0l,??_ISR+3
  5488  0107E4  CFEA F005          	movff	fsr0h,??_ISR+4
  5489  0107E8  CFE1 F006          	movff	fsr1l,??_ISR+5
  5490  0107EC  CFE2 F007          	movff	fsr1h,??_ISR+6
  5491  0107F0  CFD9 F008          	movff	fsr2l,??_ISR+7
  5492  0107F4  CFDA F009          	movff	fsr2h,??_ISR+8
  5493  0107F8  CFF3 F00A          	movff	prodl,??_ISR+9
  5494  0107FC  CFF4 F00B          	movff	prodh,??_ISR+10
  5495  010800  CFF6 F00C          	movff	tblptrl,??_ISR+11
  5496  010804  CFF7 F00D          	movff	tblptrh,??_ISR+12
  5497  010808  CFF8 F00E          	movff	tblptru,??_ISR+13
  5498  01080C  CFF5 F00F          	movff	tablat,??_ISR+14
  5499                           
  5500                           ;clima.c: 791: if (T0IE && T0IF)
  5501  010810  BAF2               	btfsc	intcon,5,c	;volatile
  5502  010812  A4F2               	btfss	intcon,2,c	;volatile
  5503  010814  D040               	goto	i2l230
  5504                           
  5505                           ;clima.c: 792: {
  5506                           ;clima.c: 793: T0IF = 0;
  5507  010816  94F2               	bcf	intcon,2,c	;volatile
  5508                           
  5509                           ;clima.c: 794: T0CONbits.TMR0ON = 0;
  5510  010818  9ED5               	bcf	4053,7,c	;volatile
  5511                           
  5512                           ;clima.c: 795: TMR0H = 0xFB;
  5513  01081A  0EFB               	movlw	251
  5514  01081C  6ED7               	movwf	4055,c	;volatile
  5515                           
  5516                           ;clima.c: 796: TMR0L = 0x1D-2;
  5517  01081E  0E1B               	movlw	27
  5518  010820  6ED6               	movwf	4054,c	;volatile
  5519                           
  5520                           ;clima.c: 798: T0CONbits.TMR0ON = 1;
  5521  010822  8ED5               	bsf	4053,7,c	;volatile
  5522                           
  5523                           ;clima.c: 799: tick++;
  5524  010824  2A45               	incf	_tick,f,c
  5525                           
  5526                           ;clima.c: 801: if ((tick & 0b11) == 0b11)
  5527  010826  5045               	movf	_tick,w,c
  5528  010828  0B03               	andlw	3
  5529  01082A  0A03               	xorlw	3
  5530  01082C  A4D8               	btfss	status,2,c
  5531  01082E  D009               	goto	i2l1793
  5532                           
  5533                           ;clima.c: 802: {
  5534                           ;clima.c: 803: cnt++;
  5535  010830  2A43               	incf	_cnt,f,c
  5536                           
  5537                           ;clima.c: 805: if (cnt == 25)
  5538  010832  0E19               	movlw	25
  5539  010834  1843               	xorwf	_cnt,w,c
  5540  010836  A4D8               	btfss	status,2,c
  5541  010838  D004               	goto	i2l1793
  5542                           
  5543                           ;clima.c: 807: {
  5544                           ;clima.c: 808: ev = 1;
  5545  01083A  0E01               	movlw	1
  5546  01083C  6E44               	movwf	_ev,c
  5547                           
  5548                           ;clima.c: 809: cnt = 0;
  5549  01083E  0E00               	movlw	0
  5550  010840  6E43               	movwf	_cnt,c
  5551  010842                     i2l1793:
  5552                           
  5553                           ;clima.c: 810: }
  5554                           ;clima.c: 811: }
  5555                           ;clima.c: 813: PORTJbits.RJ0 = tick&1;
  5556  010842  C045  F001         	movff	_tick,??_ISR
  5557  010846  0E01               	movlw	1
  5558  010848  1601               	andwf	??_ISR,f,c
  5559  01084A  5088               	movf	3976,w,c	;volatile
  5560  01084C  1801               	xorwf	??_ISR,w,c
  5561  01084E  0BFE               	andlw	-2
  5562  010850  1801               	xorwf	??_ISR,w,c
  5563  010852  6E88               	movwf	3976,c	;volatile
  5564                           
  5565                           ;clima.c: 816: if (fanSpeedCool > (tick & 0x07))
  5566  010854  C045  F001         	movff	_tick,??_ISR
  5567  010858  0E07               	movlw	7
  5568  01085A  1601               	andwf	??_ISR,f,c
  5569  01085C  504E               	movf	_fanSpeedCool,w,c
  5570  01085E  5C01               	subwf	??_ISR,w,c
  5571  010860  B0D8               	btfsc	status,0,c
  5572  010862  D002               	goto	i2l224
  5573                           
  5574                           ;clima.c: 817: (PORTDbits.RD4) = 1;
  5575  010864  8883               	bsf	3971,4,c	;volatile
  5576  010866  D001               	goto	i2l1799
  5577  010868                     i2l224:
  5578                           
  5579                           ;clima.c: 818: else
  5580                           ;clima.c: 819: (PORTDbits.RD4) = 0;
  5581  010868  9883               	bcf	3971,4,c	;volatile
  5582  01086A                     i2l1799:
  5583                           
  5584                           ;clima.c: 822: if (fanSpeedHeatVent > (tick & 0x07))
  5585  01086A  C045  F001         	movff	_tick,??_ISR
  5586  01086E  0E07               	movlw	7
  5587  010870  1601               	andwf	??_ISR,f,c
  5588  010872  504D               	movf	_fanSpeedHeatVent,w,c
  5589  010874  5C01               	subwf	??_ISR,w,c
  5590  010876  B0D8               	btfsc	status,0,c
  5591  010878  D002               	goto	i2l226
  5592                           
  5593                           ;clima.c: 823: (PORTDbits.RD5) = 1;
  5594  01087A  8A83               	bsf	3971,5,c	;volatile
  5595  01087C  D001               	goto	i2l1803
  5596  01087E                     i2l226:
  5597                           
  5598                           ;clima.c: 824: else
  5599                           ;clima.c: 825: (PORTDbits.RD5) = 0;
  5600  01087E  9A83               	bcf	3971,5,c	;volatile
  5601  010880                     i2l1803:
  5602                           
  5603                           ;clima.c: 828: if (levelHeat > (tick & 0x07))
  5604  010880  C045  F001         	movff	_tick,??_ISR
  5605  010884  0E07               	movlw	7
  5606  010886  1601               	andwf	??_ISR,f,c
  5607  010888  504C               	movf	_levelHeat,w,c
  5608  01088A  5C01               	subwf	??_ISR,w,c
  5609  01088C  B0D8               	btfsc	status,0,c
  5610  01088E  D002               	goto	i2l228
  5611                           
  5612                           ;clima.c: 829: (PORTDbits.RD3) = 1;
  5613  010890  8683               	bsf	3971,3,c	;volatile
  5614  010892  D001               	goto	i2l230
  5615  010894                     i2l228:
  5616                           
  5617                           ;clima.c: 830: else
  5618                           ;clima.c: 831: (PORTDbits.RD3) = 0;
  5619  010894  9683               	bcf	3971,3,c	;volatile
  5620  010896                     i2l230:
  5621  010896  C00F  FFF5         	movff	??_ISR+14,tablat
  5622  01089A  C00E  FFF8         	movff	??_ISR+13,tblptru
  5623  01089E  C00D  FFF7         	movff	??_ISR+12,tblptrh
  5624  0108A2  C00C  FFF6         	movff	??_ISR+11,tblptrl
  5625  0108A6  C00B  FFF4         	movff	??_ISR+10,prodh
  5626  0108AA  C00A  FFF3         	movff	??_ISR+9,prodl
  5627  0108AE  C009  FFDA         	movff	??_ISR+8,fsr2h
  5628  0108B2  C008  FFD9         	movff	??_ISR+7,fsr2l
  5629  0108B6  C007  FFE2         	movff	??_ISR+6,fsr1h
  5630  0108BA  C006  FFE1         	movff	??_ISR+5,fsr1l
  5631  0108BE  C005  FFEA         	movff	??_ISR+4,fsr0h
  5632  0108C2  C004  FFE9         	movff	??_ISR+3,fsr0l
  5633  0108C6  C003  FFFB         	movff	??_ISR+2,pclatu
  5634  0108CA  C002  FFFA         	movff	??_ISR+1,pclath
  5635  0108CE  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5636  0108D0  0011               	retfie		f
  5637  0108D2                     __end_of_ISR:
  5638                           	opt stack 0
  5639                           pclatu	equ	0xFFB
  5640                           pclath	equ	0xFFA
  5641                           tblptru	equ	0xFF8
  5642                           tblptrh	equ	0xFF7
  5643                           tblptrl	equ	0xFF6
  5644                           tablat	equ	0xFF5
  5645                           prodh	equ	0xFF4
  5646                           prodl	equ	0xFF3
  5647                           intcon	equ	0xFF2
  5648                           indf0	equ	0xFEF
  5649                           postinc0	equ	0xFEE
  5650                           fsr0h	equ	0xFEA
  5651                           fsr0l	equ	0xFE9
  5652                           wreg	equ	0xFE8
  5653                           fsr1h	equ	0xFE2
  5654                           fsr1l	equ	0xFE1
  5655                           indf2	equ	0xFDF
  5656                           postinc2	equ	0xFDE
  5657                           postdec2	equ	0xFDD
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           pclatu	equ	0xFFB
  5662                           pclath	equ	0xFFA
  5663                           tblptru	equ	0xFF8
  5664                           tblptrh	equ	0xFF7
  5665                           tblptrl	equ	0xFF6
  5666                           tablat	equ	0xFF5
  5667                           prodh	equ	0xFF4
  5668                           prodl	equ	0xFF3
  5669                           intcon	equ	0xFF2
  5670                           indf0	equ	0xFEF
  5671                           postinc0	equ	0xFEE
  5672                           fsr0h	equ	0xFEA
  5673                           fsr0l	equ	0xFE9
  5674                           wreg	equ	0xFE8
  5675                           fsr1h	equ	0xFE2
  5676                           fsr1l	equ	0xFE1
  5677                           indf2	equ	0xFDF
  5678                           postinc2	equ	0xFDE
  5679                           postdec2	equ	0xFDD
  5680                           fsr2h	equ	0xFDA
  5681                           fsr2l	equ	0xFD9
  5682                           status	equ	0xFD8
  5683                           
  5684                           	psect	rparam
  5685  0000                     pclatu	equ	0xFFB
  5686                           pclath	equ	0xFFA
  5687                           tblptru	equ	0xFF8
  5688                           tblptrh	equ	0xFF7
  5689                           tblptrl	equ	0xFF6
  5690                           tablat	equ	0xFF5
  5691                           prodh	equ	0xFF4
  5692                           prodl	equ	0xFF3
  5693                           intcon	equ	0xFF2
  5694                           indf0	equ	0xFEF
  5695                           postinc0	equ	0xFEE
  5696                           fsr0h	equ	0xFEA
  5697                           fsr0l	equ	0xFE9
  5698                           wreg	equ	0xFE8
  5699                           fsr1h	equ	0xFE2
  5700                           fsr1l	equ	0xFE1
  5701                           indf2	equ	0xFDF
  5702                           postinc2	equ	0xFDE
  5703                           postdec2	equ	0xFDD
  5704                           fsr2h	equ	0xFDA
  5705                           fsr2l	equ	0xFD9
  5706                           status	equ	0xFD8
  5707                           
  5708                           	psect	temp
  5709  000050                     btemp:
  5710                           	opt stack 0
  5711  000050                     	ds	1
  5712  0000                     int$flags	set	btemp
  5713                           pclatu	equ	0xFFB
  5714                           pclath	equ	0xFFA
  5715                           tblptru	equ	0xFF8
  5716                           tblptrh	equ	0xFF7
  5717                           tblptrl	equ	0xFF6
  5718                           tablat	equ	0xFF5
  5719                           prodh	equ	0xFF4
  5720                           prodl	equ	0xFF3
  5721                           intcon	equ	0xFF2
  5722                           indf0	equ	0xFEF
  5723                           postinc0	equ	0xFEE
  5724                           fsr0h	equ	0xFEA
  5725                           fsr0l	equ	0xFE9
  5726                           wreg	equ	0xFE8
  5727                           fsr1h	equ	0xFE2
  5728                           fsr1l	equ	0xFE1
  5729                           indf2	equ	0xFDF
  5730                           postinc2	equ	0xFDE
  5731                           postdec2	equ	0xFDD
  5732                           fsr2h	equ	0xFDA
  5733                           fsr2l	equ	0xFD9
  5734                           status	equ	0xFD8


Data Sizes:
    Strings     112
    Constant    154
    Data        0
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      79
    BANK0           160      7      27
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_19(CODE[22]), STR_18(CODE[3]), STR_11(CODE[3]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> msg(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    UART_puts@s	PTR unsigned char  size(2) Largest target is 20
		 -> STR_20(CODE[20]), 

    LcdWriteString@s	PTR const unsigned char  size(2) Largest target is 144
		 -> STR_21(CODE[13]), STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_6(CODE[6]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), msg(BANK0[20]), 
		 -> LcdLines(CODE[144]), 


Critical Paths under _main in COMRAM

    _main->_stateMachine
    _stateMachine->_updateLcd
    _updateLcd->_sprintf
    _setLcd->_LcdWriteString
    _LcdGoTo->_lcdCommand
    _UART_puts->_Delay10TCYx
    _UART_puts->_UART_putc
    _LcdInit->_LcdWriteString
    _setIODIR->_SWSPIWrite
    _LcdWriteString->_LcdChar
    _LcdChar->_setGPIO
    _LcdClear->_lcdCommand
    _lcdCommand->_setGPIO
    _setGPIO->_SWSPIWrite
    _checkInputs->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_checkInputs

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   32998
                                              6 BANK0      1     1      0
                        _checkInputs
                               _init
                       _stateMachine
                      _updateOutputs
 ---------------------------------------------------------------------------------
 (1) _updateOutputs                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stateMachine                                         5     5      0   17129
                                             57 COMRAM     1     1      0
                                              0 BANK0      4     4      0
                     _getOnOffButton
                     _setCoolElement
                     _setHeatElement
                             _setLcd
                 _setLcdBacklightLed
                       _setLevelHeat
                    _setSpeedFanCool
                _setSpeedFanHeatVent
                      _setStandbyLed
                            _sprintf
                          _updateLcd
 ---------------------------------------------------------------------------------
 (2) _updateLcd                                            1     1      0    7145
                                             56 COMRAM     1     1      0
                            _LcdGoTo
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setLevelHeat                                         1     1      0      65
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLcdBacklightLed                                   2     0      2     339
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setCoolElement                                       2     0      2     416
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getOnOffButton                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   10874
                            _LcdInit
                          _UART_Init
                          _UART_puts
                            _initAdc
                        _initButtons
                            _initPwm
                            _initTmr
                     _setHeatElement
                             _setLcd
                    _setSpeedFanCool
                _setSpeedFanHeatVent
                      _setStandbyLed
 ---------------------------------------------------------------------------------
 (2) _setStandbyLed                                        2     0      2     416
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setSpeedFanHeatVent                                  1     1      0      65
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setSpeedFanCool                                      1     1      0      65
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLcd                                               0     0      0    4198
                           _LcdClear
                            _LcdGoTo
                     _LcdWriteString
 ---------------------------------------------------------------------------------
 (3) _LcdGoTo                                              1     1      0     885
                                             20 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _setHeatElement                                       2     0      2     647
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _initTmr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPwm                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initAdc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_puts                                            2     0      2     186
                                             16 COMRAM     2     0      2
                        _Delay10TCYx
                          _UART_putc
 ---------------------------------------------------------------------------------
 (3) _UART_putc                                            1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            2     2      0      23
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LcdInit                                              0     0      0    5274
                           _LcdClear
                     _LcdWriteString
                          _SWSPIOpen
                         _lcdCommand
                            _setGPIO
                           _setIODIR
 ---------------------------------------------------------------------------------
 (3) _setIODIR                                             2     1      1     284
                                             17 COMRAM     2     1      1
                       _SWSPIClearCS
                         _SWSPISetCS
                         _SWSPIWrite
 ---------------------------------------------------------------------------------
 (3) _SWSPIOpen                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LcdWriteString                                       2     0      2    2459
                                             20 COMRAM     2     0      2
                            _LcdChar
 ---------------------------------------------------------------------------------
 (4) _LcdChar                                              1     1      0     854
                                             19 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (3) _LcdClear                                             0     0      0     854
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (4) _lcdCommand                                           1     1      0     854
                                             19 COMRAM     1     1      0
                            _setGPIO
 ---------------------------------------------------------------------------------
 (5) _setGPIO                                              2     1      1     823
                                             17 COMRAM     2     1      1
                       _SWSPIClearCS
                         _SWSPISetCS
                         _SWSPIWrite
 ---------------------------------------------------------------------------------
 (6) _SWSPIWrite                                           2     2      0      68
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _SWSPISetCS                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _SWSPIClearCS                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkInputs                                          6     6      0    4989
                                              0 BANK0      6     6      0
                            _ADCRead
                            ___lwdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3668
                                             33 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     540
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             28 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                             21 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     2      2      62
                                             15 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 15    15      0       0
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkInputs
     _ADCRead
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _sprintf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit
   _init
     _LcdInit
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _SWSPIOpen
       _lcdCommand
         _setGPIO
           _SWSPIClearCS
           _SWSPISetCS
           _SWSPIWrite
       _setGPIO
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
       _setIODIR
         _SWSPIClearCS
         _SWSPISetCS
         _SWSPIWrite
     _UART_Init
     _UART_puts
       _Delay10TCYx
       _UART_putc
     _initAdc
     _initButtons
     _initPwm
     _initTmr
     _setHeatElement
     _setLcd
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdGoTo
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
     _setSpeedFanCool
     _setSpeedFanHeatVent
     _setStandbyLed
   _stateMachine
     _getOnOffButton
     _setCoolElement
     _setHeatElement
     _setLcd
       _LcdClear
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdGoTo
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
     _setLcdBacklightLed
     _setLevelHeat
     _setSpeedFanCool
     _setSpeedFanHeatVent
     _setStandbyLed
     _sprintf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit
     _updateLcd
       _LcdGoTo
         _lcdCommand
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _LcdWriteString
         _LcdChar
           _setGPIO
             _SWSPIClearCS
             _SWSPISetCS
             _SWSPIWrite
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
   _updateOutputs

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      7      1B       5       16.9%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3A      4F       1       84.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6A      32        0.0%
DATA                 0      0      6A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon May 20 15:27:30 2019

               _updateOutputs 0D56                             _a 0040                            _ev 0044  
         ___wmul@multiplicand 0012  __size_of_setSpeedFanHeatVent 0012                   __CFG_OSC$HS 000000  
                         l206 0CA2                           l208 0CBA                           l306 0ACC  
                         l139 06C0                           l364 0E9C                           l838 0AAE  
                         l848 0BCC                           _GIE 007F97                           _ISR 0008  
                  _SWSPISetCS 0EE0                _setCoolElement 0EC6                           _cnt 0043  
                         _msg 0060               __end_of_ADCRead 0CC8             lcdCommand@command 0014  
                         prod 000FF3                    _SWSPIWrite 0AB8                           wreg 000FE8  
                  _TXSTA1bits 000FAC                          ?_ISR 0001      setSpeedFanHeatVent@speed 0010  
       __size_of_SWSPIClearCS 0004                  __CFG_WDT$OFF 000000        __end_of_setHeatElement 0ED8  
                        l3033 0904                          l3113 0156                          l3203 02F6  
                        l3109 0120                          l3053 0028                          l3215 0330  
                        l3119 0166                          l3049 09A4                          l3153 01FC  
                        l3137 01B0                          l3081 00A4                          l3065 005A  
                        l3219 0336                          l2613 0E1A                          l3165 0238  
                        l2631 0A84                          l2703 0424                          l2551 0AD6  
                        l3191 02C8                          l2641 0AA4                          l2633 0A88  
                        l2705 044E                          l2553 0ADC                          l2801 0E88  
                        l3177 0290                          l3169 027A                          l3097 00E4  
                        l3273 0C30                          l2651 0BAA                          l2715 0476  
                        l2629 0A7C                          l2653 0BAE                          l2741 04F2  
                        l2717 047A                          l2735 04C6                          l2671 0A3C  
                        l2823 0E5C                          l2657 0BC2                          l2649 0BA2  
                        l2729 04AC                          l2681 0376                          l2817 0E6E  
                        l2913 07B0                          l2905 0782                          l2771 0574  
                        l2739 04EA                          l2683 0384                          l2675 035C  
                        l2667 0A12                          l2773 057A                          l2765 0558  
                        l2749 0512                          l2757 0532                          l2693 03C0  
                        l2781 05DA                          l2829 0E4A                          l2759 053A  
                        l2783 05F6                          l2687 038A                          l2863 069A  
                        l2881 06F0                          l2873 06C4                          l2779 05D2  
                        l2891 0728                          l2867 06AE                          l2859 0684  
                        l2885 0706                          l2877 06DA                          l2889 071C  
                        l2995 0CC8                          STR_1 FFE4                          STR_2 FFE4  
                        STR_3 FFEE                          STR_4 FFE9                          STR_5 FFF3  
                        STR_6 FFC6                          STR_7 FFCC                          STR_8 FFD2  
                        STR_9 FFD8                          _T0IE 007F95                          _T0IF 007F92  
                        u2205 0D5E                          u2206 0D60                          u2215 0D68  
                        u2216 0D6A                          u2065 0924                          u2225 0D72  
                        u2226 0D74                          u2235 0D7C                          u2236 0D7E  
                        u1640 0A34                          u2257 0E8A                          u1650 0A5E  
                        u1647 0A2A                          u1657 0A54                          _RCIF 007CF5  
                        _TMR0 000FD6                          _main 0C16                          _init 09A8  
                        _tick 0045                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 0050                          prodh 000FF4                          prodl 000FF3  
                        start 000E               __end_of_LcdChar 0D2A               __end_of_LcdGoTo 0EB0  
             __end_of_LcdInit 0B52                ?_updateOutputs 0001                  ___param_bank 000000  
                ?_initButtons 0001                         ??_ISR 0001                   _Delay10TCYx 0E86  
      __end_of_setCoolElement 0ECC                         ?_main 0001                         ?_init 0001  
                       _ADRES 000FC3                         STR_10 FFDE                         STR_11 FFF8  
                       STR_12 FFA3                         STR_20 FFA5                         STR_13 FFFD  
                       STR_21 FFB9                         STR_14 FFFB                         STR_15 FFA3  
                       STR_16 FFFB                         STR_17 FFFD                         STR_18 FFF8  
                       STR_19 FF8F                         _T0CON 000FD5               __end_of___lwdiv 0AB8  
             __end_of___lwmod 0BD6                         i2l230 0896                         i2l224 0868  
                       i2l226 087E                         i2l228 0894                  _SWSPIClearCS 0EE4  
                       _RCREG 000FAE                         _TMR0H 000FD7                         _TMR1H 000FCF  
                       _TMR0L 000FD6                         _TMR1L 000FCE                         _SPBRG 000FAF  
                       _PORTD 000F83                         _TRISA 000F92                         _TRMT1 007D61  
                       _TRISD 000F95                         _TXREG 000FAD          __size_of_checkInputs 00D6  
              __CFG_FCMEN$OFF 000000            __size_of_UART_Init 001C               stateMachine@err 003A  
                       _inDeb 0042               __end_of_initAdc 0C90              _fanSpeedHeatVent 004D  
             __end_of_dpowers FEFF            __size_of_UART_putc 000E               __end_of_initPwm 0EB8  
             __end_of_initTmr 0C16            __size_of_UART_puts 0036               __end_of_setGPIO 0E04  
             __end_of_isdigit 0E22               ?_setHeatElement 0010                         main@i 007A  
                       pclath 000FFA                         tablat 000FF5                         status 000FD8  
             __end_of_sprintf 0604      __size_of_setSpeedFanCool 0012              __end_of_LcdClear 0EC0  
            __end_of_LcdLines FF8F            __size_of_SWSPIOpen 0012               __initialization 0DA6  
                __end_of_main 0C54                  __end_of_init 0A10                     ??_ADCRead 0012  
             ?_setCoolElement 0010                        ??_main 003B                        ??_init 0017  
               __activetblptr 000003                   ?_SWSPISetCS 0001                   ?_SWSPIWrite 0001  
                   ADCRead@ch 0013                        i2l1803 0880                        i2l1793 0842  
                      i2l1799 086A                     ??_LcdChar 0014                     ??_LcdGoTo 0015  
                   ??_LcdInit 0017         __end_of_setStandbyLed 0ED2                        _TRISB0 007C98  
  __end_of_setLcdBacklightLed 0EC6               ??_updateOutputs 0010             __end_of_UART_Init 0E3E  
                      ___wmul 0D80             __end_of_UART_putc 0EA4             __end_of_UART_puts 0CFE  
                   ??___lwdiv 001A                        _inTemp 003D                     ??___lwmod 0021  
            __end_of_setIODIR 0DE6                        clear_0 0DAC                        clear_1 0DB8  
                      _setLcd 0B52                   setIODIR@dir 0012                     ??_initAdc 0010  
                   ??_initPwm 0010                     ??_initTmr 0010                     ??_setGPIO 0013  
                   ??_isdigit 0010                 LcdChar@letter 0014                  __mediumconst FEF4  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
           __end_of_SWSPIOpen 0E86                     ??_sprintf 002C           setHeatElement@state 0010  
         _setSpeedFanHeatVent 0E50                    __accesstop 0060       __end_of__initialization 0DBE  
     __size_of_LcdWriteString 0056                  _fanSpeedCool 004E                 ___rparam_used 000001  
         __size_of_SWSPISetCS 0004           __size_of_SWSPIWrite 004E                __pcstackCOMRAM 0001  
     __size_of_getOnOffButton 0004             ??_setSpeedFanCool 0010          ?_setSpeedFanHeatVent 0001  
        __size_of_initButtons 0004                     ?_LcdClear 0001                  sprintf@width 0036  
                  __pbssBANK0 0060                 ?_setLevelHeat 0001                  ?_Delay10TCYx 0001  
                  _lcdCommand 0D2A                       ?___wmul 0010                    _climaState 004F  
       ??_setSpeedFanHeatVent 0010                       _ADCRead 0C90                       ?_setLcd 0001  
            ??_setHeatElement 0012                    ??_LcdClear 0015            __size_of_updateLcd 01D2  
              ??_setLevelHeat 0010                       _LcdChar 0CFE             setLevelHeat@level 0010  
                     _LcdGoTo 0EA4                       _LcdInit 0B06                     ?_setIODIR 0012  
   checkInputs@leftButton_old 0041                       __Hparam 0000                       __Lparam 0000  
            ??_setCoolElement 0012               __size_of___wmul 0026                       ___lwdiv 0A66  
                     ___lwmod 0B94                       __pcinit 0DA6               Delay10TCYx@unit 0010  
                     __ramtop 1000                 ??_checkInputs 0074               __size_of_setLcd 0042  
                     __ptext0 0C16                       __ptext1 0D56                       __ptext2 0000  
                     __ptext3 0604                       __ptext4 0E3E                       __ptext5 0EC0  
                     __ptext6 0EC6                       __ptext7 0ED8                       __ptext8 09A8  
                     __ptext9 0ECC                     _T0CONbits 000FD5                  __size_of_ISR 08CA  
                     _initAdc 0C54                  ??_SWSPISetCS 0010                       _dpowers FEF5  
                     _initPwm 0EB0                       _initTmr 0BD6                       _setGPIO 0DE6  
                     _isdigit 0E04                  ??_SWSPIWrite 0010                       _setTemp 0046  
                     _outTemp 003B               setIODIR@address 0013                  setGPIO@value 0012  
                     _sprintf 0352                __pintcode_body 07D6          end_of_initialization 0DBE  
              _LcdWriteString 0A10                    ??_setIODIR 0013                       int_func 07D6  
              _getOnOffButton 0ED8            __end_of_SWSPISetCS 0EE4             __end_of_updateLcd 07D6  
                   _RCSTAbits 000FAB            __end_of_SWSPIWrite 0B06                       postdec2 000FDD  
                 ?_lcdCommand 0001                       postinc0 000FEE                       postinc2 000FDE  
                   _UART_Init 0E22            _setLcdBacklightLed 0EC0                     _PORTAbits 000F80  
                   _PORTBbits 000F81                     _PORTCbits 000F82                     _PORTDbits 000F83  
                   _UART_putc 0E96                     _UART_puts 0CC8         checkInputs@leftButton 0079  
                   _PORTJbits 000F88                     _TRISAbits 000F92                     _TRISCbits 000F94  
                   _TRISDbits 000F95                    _standbyLed 0049           ?_setLcdBacklightLed 0010  
                   _TRISJbits 000F9A           __end_of_checkInputs 09A8               _lcdBacklightLed 0048  
      __end_of_LcdWriteString 0A66                     _SWSPIOpen 0E74               _setSpeedFanCool 0E62  
                   _TXSTAbits 000FAC        __end_of_getOnOffButton 0EDC         __end_of_updateOutputs 0D80  
        ??_setLcdBacklightLed 0012                 ?_stateMachine 0001                  _leftButtonEv 0047  
              __end_of___wmul 0DA6          __end_of_setLevelHeat 0E50                    ?_UART_Init 0001  
        __size_of_Delay10TCYx 0010                    ?_UART_putc 0001                    ?_UART_puts 0011  
              __end_of_setLcd 0B94        __size_of_setStandbyLed 0006           start_initialization 0DA6  
                 __end_of_ISR 08D2               ?_LcdWriteString 0015             __size_of_LcdClear 0008  
         __size_of_lcdCommand 002C          setSpeedFanCool@speed 0010                    ?_SWSPIOpen 0001  
             ?_getOnOffButton 0001       setLcdBacklightLed@state 0010                ??_stateMachine 0074  
               ??_initButtons 0010                      ??___wmul 0014                      ?_ADCRead 0010  
                    ??_setLcd 0017                   _checkInputs 08D2            setStandbyLed@state 0010  
               ?_SWSPIClearCS 0001             updateLcd@fanSpeed 0039                   __pbssCOMRAM 003B  
               __pcstackBANK0 0074       __end_of_setSpeedFanCool 0E74                  _isdigit$1782 0011  
           checkInputs@adcVal 0077                      ?_LcdChar 0001                      ?_LcdGoTo 0001  
                    ?_LcdInit 0001                   sprintf@flag 0035                   sprintf@prec 0032  
               _setStandbyLed 0ECC             __size_of_setIODIR 001E   __end_of_setSpeedFanHeatVent 0E62  
            ___lwdiv@dividend 0016                     __pintcode 0008                 __pmediumconst FEF4  
                 _heatElement 004B                      ?___lwdiv 0016                      ?___lwmod 001D  
                 ??_UART_Init 0010                ??_SWSPIClearCS 0010                   ??_UART_putc 0010  
                 ??_UART_puts 0013           __end_of_initButtons 0EE0                      ?_initAdc 0001  
                    ?_initPwm 0001                      ?_initTmr 0001                      ?_setGPIO 0012  
                    ?_isdigit 0001                     _levelHeat 004C              ___lwdiv@quotient 001B  
                    ?_sprintf 0022                    UART_Init@x 0010            SWSPIWrite@BitCount 0011  
                 ??_SWSPIOpen 0010                   _coolElement 004A                ?_setStandbyLed 0010  
              ___wmul@product 0014                      _PIE1bits 000F9D                      _PIR1bits 000F9E  
                  UART_puts@s 0011         __size_of_setLevelHeat 0012                setGPIO@address 0013  
                ??_lcdCommand 0014                     _updateLcd 0604              __size_of_ADCRead 0038  
                  _ADCON0bits 000FC2                    _ADCON1bits 000FC1                    _ADCON2bits 000FC0  
           ___wmul@multiplier 0010                      _LcdClear 0EB8          __end_of_stateMachine 0352  
            ?_setSpeedFanCool 0001                      _LcdLines FEFF            __end_of_lcdCommand 0D56  
                _setLevelHeat 0E3E       __size_of_setHeatElement 0006              __size_of_LcdChar 002C  
            __size_of_LcdGoTo 000C              __size_of_LcdInit 004C                      __Hrparam 0000  
                    __Lrparam 0000                   _initButtons 0EDC              __size_of___lwdiv 0052  
            __size_of___lwmod 0042                    ?_updateLcd 0001              ??_LcdWriteString 0017  
                  sprintf@val 0033       __size_of_setCoolElement 0006              __size_of_initAdc 003C  
            __size_of_initPwm 0008              __size_of_initTmr 0040              __size_of_setGPIO 001E  
            __size_of_isdigit 001E               ___lwdiv@divisor 0018               ___lwdiv@counter 001A  
                    __ptext10 0E50                      __ptext11 0E62                      __ptext20 0E96  
                    __ptext12 0B52                      __ptext21 0E86                      __ptext13 0EA4  
                    __ptext30 0DE6                      __ptext22 0E22                      __ptext14 0ED2  
                    __ptext31 0AB8                      __ptext23 0B06                      __ptext15 0BD6  
                    __ptext40 0C90                      __ptext32 0EE0                      __ptext24 0DC8  
                    __ptext16 0EB0                      __ptext33 0EE4                      __ptext25 0E74  
                    __ptext17 0EDC                      __ptext34 08D2                      __ptext26 0A10  
                    __ptext18 0C54                      __ptext35 0352                      __ptext27 0CFE  
                    __ptext19 0CC8                      __ptext36 0E04                      __ptext28 0EB8  
                    __ptext37 0D80                      __ptext29 0D2A                      __ptext38 0B94  
                    __ptext39 0A66              ??_getOnOffButton 0010              __size_of_sprintf 02B2  
             ??_setStandbyLed 0012                      _setIODIR 0DC8                 __size_of_main 003E  
               __size_of_init 0068                 UART_putc@data 0010          __end_of_SWSPIClearCS 0EE8  
 __size_of_setLcdBacklightLed 0006                 ??_Delay10TCYx 0010                      int$flags 0050  
             LcdWriteString@s 0015                    _MEMCONbits 000F9C                  ?_checkInputs 0001  
                    isdigit@c 0012        __size_of_updateOutputs 002A                      intlevel2 0000  
                  LcdGoTo@pos 0015                     sprintf@ap 0030                     sprintf@sp 0022  
            ___lwmod@dividend 001D                    _RCSTA1bits 000FAB                   ??_updateLcd 0039  
       __size_of_stateMachine 0352           setCoolElement@state 0010           __end_of_Delay10TCYx 0E96  
                    sprintf@c 0038                      sprintf@f 0024              SWSPIWrite@output 0010  
             ___lwmod@divisor 001F               ___lwmod@counter 0021               SWSPIWrite@input 003F  
              _setHeatElement 0ED2                  _stateMachine 0000  
